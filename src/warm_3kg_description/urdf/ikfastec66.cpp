/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x1000004b generated on 2023-08-18 15:04:30.224835
/// Generated using solver transform6d
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x1000004b);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.03) // 5D IK has some crazy degenerate cases, but can rely on jacobian refinment to make better, just need good starting point
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

template <typename T> struct ComplexLess
{
    bool operator()(const complex<T>& lhs, const complex<T>& rhs) const
    {
        if (real(lhs) < real(rhs)) {
            return true;
        }
        if (real(lhs) > real(rhs)) {
            return false;
        }
        return imag(lhs) < imag(rhs);
    }
};

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48;
x0=IKcos(j[0]);
x1=IKcos(j[1]);
x2=IKcos(j[2]);
x3=IKsin(j[1]);
x4=IKsin(j[2]);
x5=IKsin(j[3]);
x6=IKcos(j[3]);
x7=IKcos(j[5]);
x8=IKsin(j[5]);
x9=IKcos(j[4]);
x10=IKsin(j[0]);
x11=IKsin(j[4]);
x12=((0.11)*x3);
x13=((1.0)*x6);
x14=((1.0)*x1);
x15=((0.243)*x3);
x16=((0.214)*x1);
x17=((1.0)*x11);
x18=((0.07525)*x5);
x19=((1.0)*x9);
x20=((1.0)*x5);
x21=((0.11)*x1);
x22=((0.07525)*x6);
x23=(x10*x9);
x24=(x0*x2);
x25=(x2*x3);
x26=(x3*x4);
x27=(x10*x4);
x28=(x10*x2);
x29=(x1*x4);
x30=(x0*x17);
x31=(x0*x29);
x32=((1.0)*x0*x26);
x33=((1.0)*x10*x26);
x34=((((-1.0)*x14*x2))+x26);
x35=((((-1.0)*x25))+(((-1.0)*x14*x4)));
x36=(x34*x5);
x37=(x31+((x24*x3)));
x38=(((x1*x27))+((x10*x25)));
x39=((((-1.0)*x14*x24))+x32);
x40=((((-1.0)*x14*x28))+x33);
x41=(x40*x6);
x42=(((x34*x6))+((x5*((x25+x29)))));
x43=((((-1.0)*x20*x34))+(((-1.0)*x13*x35)));
x44=(((x5*(((((-1.0)*x32))+((x1*x24))))))+((x37*x6)));
x45=(((x38*x6))+((x5*(((((-1.0)*x33))+((x1*x28)))))));
x46=(((x39*x6))+((x37*x5)));
x47=(x41+((x38*x5)));
x48=(x46*x9);
eerot[0]=(((x7*((x48+((x10*x11))))))+((x44*x8)));
eerot[1]=(((x44*x7))+((x8*(((((-1.0)*x19*x46))+(((-1.0)*x10*x17)))))));
eerot[2]=(x23+((x11*(((((-1.0)*x20*x37))+(((-1.0)*x13*x39)))))));
IkReal x49=(x0*x4);
IkReal x50=((1.0)*x24);
eetrans[0]=(((x11*(((((-1.0)*x18*x37))+(((-1.0)*x22*x39))))))+(((-1.0)*x0*x15))+(((0.07525)*x23))+(((-1.0)*x16*x49))+(((-0.214)*x24*x3))+(((0.123)*x10))+((x5*((((x12*x49))+(((-1.0)*x21*x50))))))+((x6*(((((-1.0)*x12*x50))+(((-1.0)*x21*x49)))))));
eerot[3]=(((x7*(((((-1.0)*x30))+((x47*x9))))))+((x45*x8)));
eerot[4]=(((x8*(((((-1.0)*x19*x47))+x30))))+((x45*x7)));
eerot[5]=((((-1.0)*x0*x19))+((x11*(((((-1.0)*x20*x38))+(((-1.0)*x13*x40)))))));
IkReal x51=((1.0)*x28);
IkReal x52=((1.0)*x27);
eetrans[1]=((((-0.07525)*x0*x9))+((x11*(((((-1.0)*x18*x38))+(((-1.0)*x22*x40))))))+(((-1.0)*x16*x52))+((x6*(((((-1.0)*x12*x51))+(((-1.0)*x21*x52))))))+(((-0.123)*x0))+(((-1.0)*x10*x15))+(((-0.214)*x10*x25))+((x5*(((((-1.0)*x21*x51))+((x12*x27)))))));
eerot[6]=(((x7*x9*((((x35*x6))+x36))))+((x42*x8)));
eerot[7]=(((x42*x7))+((x43*x8*x9)));
eerot[8]=(x11*x43);
IkReal x53=((1.0)*x4);
eetrans[2]=((0.101)+(((-0.214)*x26))+((x5*(((((-1.0)*x12*x2))+(((-1.0)*x21*x53))))))+((x11*(((((-1.0)*x18*x34))+(((-1.0)*x22*x35))))))+((x16*x2))+(((0.243)*x1))+((x6*(((((-1.0)*x12*x53))+((x2*x21)))))));
}

IKFAST_API int GetNumFreeParameters() { return 0; }
IKFAST_API const int* GetFreeIndices() { return NULL; }
IKFAST_API int GetNumJoints() { return 6; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j0mul,j1,cj1,sj1,htj1,j1mul,j2,cj2,sj2,htj2,j2mul,j3,cj3,sj3,htj3,j3mul,j4,cj4,sj4,htj4,j4mul,j5,cj5,sj5,htj5,j5mul,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4,_ij5[2], _nj5;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; j5=numeric_limits<IkReal>::quiet_NaN(); _ij5[0] = -1; _ij5[1] = -1; _nj5 = -1; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=r00;
new_r01=r01;
new_r02=r02;
new_px=((((-0.07525)*r02))+px);
new_r10=r10;
new_r11=r11;
new_r12=r12;
new_py=((((-0.07525)*r12))+py);
new_r20=r20;
new_r21=r21;
new_r22=r22;
new_pz=((-0.101)+(((-0.07525)*r22))+pz);
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
IkReal x54=((1.0)*px);
IkReal x55=((1.0)*pz);
IkReal x56=((1.0)*py);
pp=((px*px)+(py*py)+(pz*pz));
npx=(((px*r00))+((py*r10))+((pz*r20)));
npy=(((px*r01))+((py*r11))+((pz*r21)));
npz=(((px*r02))+((py*r12))+((pz*r22)));
rxp0_0=((((-1.0)*r20*x56))+((pz*r10)));
rxp0_1=(((px*r20))+(((-1.0)*r00*x55)));
rxp0_2=((((-1.0)*r10*x54))+((py*r00)));
rxp1_0=((((-1.0)*r21*x56))+((pz*r11)));
rxp1_1=(((px*r21))+(((-1.0)*r01*x55)));
rxp1_2=((((-1.0)*r11*x54))+((py*r01)));
rxp2_0=(((pz*r12))+(((-1.0)*r22*x56)));
rxp2_1=(((px*r22))+(((-1.0)*r02*x55)));
rxp2_2=((((-1.0)*r12*x54))+((py*r02)));
IkReal IKFAST_ALIGNED16(matrixinvcoeffs[256]);
IkReal x57=((0.22)*npx);
IkReal x58=((0.22)*npy);
IkReal x59=((0.11)*r22);
IkReal x60=((0.11)*r21);
IkReal x61=((-0.11)*r20);
IkReal x62=((-1.0)*npx);
IkReal x63=((-0.11)*r21);
IkReal x64=((-1.0)*npy);
IkReal x65=((-1.0)*rxp1_2);
IkReal x66=((-1.0)*r20);
IkReal x67=((-1.0)*r22);
IkReal x68=((-1.0)*npz);
matrixinvcoeffs[0]=x61;
matrixinvcoeffs[1]=x57;
matrixinvcoeffs[2]=0;
matrixinvcoeffs[3]=0;
matrixinvcoeffs[4]=0;
matrixinvcoeffs[5]=0;
matrixinvcoeffs[6]=0;
matrixinvcoeffs[7]=0;
matrixinvcoeffs[8]=0;
matrixinvcoeffs[9]=r20;
matrixinvcoeffs[10]=x62;
matrixinvcoeffs[11]=0;
matrixinvcoeffs[12]=0;
matrixinvcoeffs[13]=0;
matrixinvcoeffs[14]=0;
matrixinvcoeffs[15]=rxp0_2;
matrixinvcoeffs[16]=0;
matrixinvcoeffs[17]=0;
matrixinvcoeffs[18]=x61;
matrixinvcoeffs[19]=x57;
matrixinvcoeffs[20]=0;
matrixinvcoeffs[21]=0;
matrixinvcoeffs[22]=0;
matrixinvcoeffs[23]=0;
matrixinvcoeffs[24]=r20;
matrixinvcoeffs[25]=0;
matrixinvcoeffs[26]=0;
matrixinvcoeffs[27]=x62;
matrixinvcoeffs[28]=0;
matrixinvcoeffs[29]=0;
matrixinvcoeffs[30]=rxp0_2;
matrixinvcoeffs[31]=0;
matrixinvcoeffs[32]=x63;
matrixinvcoeffs[33]=x58;
matrixinvcoeffs[34]=0;
matrixinvcoeffs[35]=0;
matrixinvcoeffs[36]=0;
matrixinvcoeffs[37]=0;
matrixinvcoeffs[38]=0;
matrixinvcoeffs[39]=0;
matrixinvcoeffs[40]=0;
matrixinvcoeffs[41]=r21;
matrixinvcoeffs[42]=x64;
matrixinvcoeffs[43]=0;
matrixinvcoeffs[44]=0;
matrixinvcoeffs[45]=0;
matrixinvcoeffs[46]=0;
matrixinvcoeffs[47]=rxp1_2;
matrixinvcoeffs[48]=0;
matrixinvcoeffs[49]=0;
matrixinvcoeffs[50]=x63;
matrixinvcoeffs[51]=x58;
matrixinvcoeffs[52]=0;
matrixinvcoeffs[53]=0;
matrixinvcoeffs[54]=0;
matrixinvcoeffs[55]=0;
matrixinvcoeffs[56]=r21;
matrixinvcoeffs[57]=0;
matrixinvcoeffs[58]=0;
matrixinvcoeffs[59]=x64;
matrixinvcoeffs[60]=0;
matrixinvcoeffs[61]=0;
matrixinvcoeffs[62]=rxp1_2;
matrixinvcoeffs[63]=0;
matrixinvcoeffs[64]=0;
matrixinvcoeffs[65]=0;
matrixinvcoeffs[66]=0;
matrixinvcoeffs[67]=0;
matrixinvcoeffs[68]=0;
matrixinvcoeffs[69]=0;
matrixinvcoeffs[70]=0;
matrixinvcoeffs[71]=0;
matrixinvcoeffs[72]=r22;
matrixinvcoeffs[73]=0;
matrixinvcoeffs[74]=0;
matrixinvcoeffs[75]=x68;
matrixinvcoeffs[76]=x59;
matrixinvcoeffs[77]=0;
matrixinvcoeffs[78]=rxp2_2;
matrixinvcoeffs[79]=0;
matrixinvcoeffs[80]=0;
matrixinvcoeffs[81]=0;
matrixinvcoeffs[82]=0;
matrixinvcoeffs[83]=0;
matrixinvcoeffs[84]=0;
matrixinvcoeffs[85]=0;
matrixinvcoeffs[86]=0;
matrixinvcoeffs[87]=0;
matrixinvcoeffs[88]=0;
matrixinvcoeffs[89]=x67;
matrixinvcoeffs[90]=npz;
matrixinvcoeffs[91]=0;
matrixinvcoeffs[92]=0;
matrixinvcoeffs[93]=x59;
matrixinvcoeffs[94]=0;
matrixinvcoeffs[95]=((-1.0)*rxp2_2);
matrixinvcoeffs[96]=0;
matrixinvcoeffs[97]=0;
matrixinvcoeffs[98]=0;
matrixinvcoeffs[99]=0;
matrixinvcoeffs[100]=r21;
matrixinvcoeffs[101]=npy;
matrixinvcoeffs[102]=0;
matrixinvcoeffs[103]=0;
matrixinvcoeffs[104]=0;
matrixinvcoeffs[105]=0;
matrixinvcoeffs[106]=0;
matrixinvcoeffs[107]=0;
matrixinvcoeffs[108]=x65;
matrixinvcoeffs[109]=0;
matrixinvcoeffs[110]=x60;
matrixinvcoeffs[111]=0;
matrixinvcoeffs[112]=0;
matrixinvcoeffs[113]=0;
matrixinvcoeffs[114]=0;
matrixinvcoeffs[115]=0;
matrixinvcoeffs[116]=0;
matrixinvcoeffs[117]=0;
matrixinvcoeffs[118]=r21;
matrixinvcoeffs[119]=npy;
matrixinvcoeffs[120]=0;
matrixinvcoeffs[121]=0;
matrixinvcoeffs[122]=0;
matrixinvcoeffs[123]=0;
matrixinvcoeffs[124]=0;
matrixinvcoeffs[125]=x65;
matrixinvcoeffs[126]=0;
matrixinvcoeffs[127]=x63;
matrixinvcoeffs[128]=0;
matrixinvcoeffs[129]=0;
matrixinvcoeffs[130]=0;
matrixinvcoeffs[131]=0;
matrixinvcoeffs[132]=x66;
matrixinvcoeffs[133]=x62;
matrixinvcoeffs[134]=0;
matrixinvcoeffs[135]=0;
matrixinvcoeffs[136]=0;
matrixinvcoeffs[137]=0;
matrixinvcoeffs[138]=0;
matrixinvcoeffs[139]=0;
matrixinvcoeffs[140]=rxp0_2;
matrixinvcoeffs[141]=0;
matrixinvcoeffs[142]=x61;
matrixinvcoeffs[143]=0;
matrixinvcoeffs[144]=0;
matrixinvcoeffs[145]=0;
matrixinvcoeffs[146]=0;
matrixinvcoeffs[147]=0;
matrixinvcoeffs[148]=0;
matrixinvcoeffs[149]=0;
matrixinvcoeffs[150]=x66;
matrixinvcoeffs[151]=x62;
matrixinvcoeffs[152]=0;
matrixinvcoeffs[153]=0;
matrixinvcoeffs[154]=0;
matrixinvcoeffs[155]=0;
matrixinvcoeffs[156]=0;
matrixinvcoeffs[157]=rxp0_2;
matrixinvcoeffs[158]=0;
matrixinvcoeffs[159]=((0.11)*r20);
matrixinvcoeffs[160]=0;
matrixinvcoeffs[161]=0;
matrixinvcoeffs[162]=0;
matrixinvcoeffs[163]=0;
matrixinvcoeffs[164]=x67;
matrixinvcoeffs[165]=x68;
matrixinvcoeffs[166]=0;
matrixinvcoeffs[167]=0;
matrixinvcoeffs[168]=0;
matrixinvcoeffs[169]=0;
matrixinvcoeffs[170]=0;
matrixinvcoeffs[171]=0;
matrixinvcoeffs[172]=rxp2_2;
matrixinvcoeffs[173]=0;
matrixinvcoeffs[174]=((-0.11)*r22);
matrixinvcoeffs[175]=0;
matrixinvcoeffs[176]=0;
matrixinvcoeffs[177]=0;
matrixinvcoeffs[178]=0;
matrixinvcoeffs[179]=0;
matrixinvcoeffs[180]=0;
matrixinvcoeffs[181]=0;
matrixinvcoeffs[182]=x67;
matrixinvcoeffs[183]=x68;
matrixinvcoeffs[184]=0;
matrixinvcoeffs[185]=0;
matrixinvcoeffs[186]=0;
matrixinvcoeffs[187]=0;
matrixinvcoeffs[188]=0;
matrixinvcoeffs[189]=rxp2_2;
matrixinvcoeffs[190]=0;
matrixinvcoeffs[191]=x59;
matrixinvcoeffs[192]=0;
matrixinvcoeffs[193]=0;
matrixinvcoeffs[194]=0;
matrixinvcoeffs[195]=0;
matrixinvcoeffs[196]=0;
matrixinvcoeffs[197]=0;
matrixinvcoeffs[198]=0;
matrixinvcoeffs[199]=0;
matrixinvcoeffs[200]=r21;
matrixinvcoeffs[201]=0;
matrixinvcoeffs[202]=0;
matrixinvcoeffs[203]=x64;
matrixinvcoeffs[204]=x60;
matrixinvcoeffs[205]=0;
matrixinvcoeffs[206]=rxp1_2;
matrixinvcoeffs[207]=0;
matrixinvcoeffs[208]=0;
matrixinvcoeffs[209]=0;
matrixinvcoeffs[210]=0;
matrixinvcoeffs[211]=0;
matrixinvcoeffs[212]=0;
matrixinvcoeffs[213]=0;
matrixinvcoeffs[214]=0;
matrixinvcoeffs[215]=0;
matrixinvcoeffs[216]=0;
matrixinvcoeffs[217]=((-1.0)*r21);
matrixinvcoeffs[218]=npy;
matrixinvcoeffs[219]=0;
matrixinvcoeffs[220]=0;
matrixinvcoeffs[221]=x60;
matrixinvcoeffs[222]=0;
matrixinvcoeffs[223]=x65;
matrixinvcoeffs[224]=0;
matrixinvcoeffs[225]=0;
matrixinvcoeffs[226]=0;
matrixinvcoeffs[227]=0;
matrixinvcoeffs[228]=0;
matrixinvcoeffs[229]=0;
matrixinvcoeffs[230]=0;
matrixinvcoeffs[231]=0;
matrixinvcoeffs[232]=x66;
matrixinvcoeffs[233]=0;
matrixinvcoeffs[234]=0;
matrixinvcoeffs[235]=npx;
matrixinvcoeffs[236]=x61;
matrixinvcoeffs[237]=0;
matrixinvcoeffs[238]=((-1.0)*rxp0_2);
matrixinvcoeffs[239]=0;
matrixinvcoeffs[240]=0;
matrixinvcoeffs[241]=0;
matrixinvcoeffs[242]=0;
matrixinvcoeffs[243]=0;
matrixinvcoeffs[244]=0;
matrixinvcoeffs[245]=0;
matrixinvcoeffs[246]=0;
matrixinvcoeffs[247]=0;
matrixinvcoeffs[248]=0;
matrixinvcoeffs[249]=r20;
matrixinvcoeffs[250]=x62;
matrixinvcoeffs[251]=0;
matrixinvcoeffs[252]=0;
matrixinvcoeffs[253]=x61;
matrixinvcoeffs[254]=0;
matrixinvcoeffs[255]=rxp0_2;
if( !matrixinverse<16>(matrixinvcoeffs) ) {
continue;
}
IkReal gclwh0_0=matrixinvcoeffs[0], gclwh0_1=matrixinvcoeffs[16], gclwh1_2=matrixinvcoeffs[33], gclwh1_3=matrixinvcoeffs[49], gclwh2_0=matrixinvcoeffs[2], gclwh2_1=matrixinvcoeffs[18], gclwh3_2=matrixinvcoeffs[35], gclwh3_3=matrixinvcoeffs[51], gclwh4_2=matrixinvcoeffs[36], gclwh4_3=matrixinvcoeffs[52], gclwh4_4=matrixinvcoeffs[68], gclwh4_8=matrixinvcoeffs[132], gclwh4_11=matrixinvcoeffs[180], gclwh4_14=matrixinvcoeffs[228], gclwh5_0=matrixinvcoeffs[5], gclwh5_6=matrixinvcoeffs[101], gclwh5_9=matrixinvcoeffs[149], gclwh5_10=matrixinvcoeffs[165], gclwh5_15=matrixinvcoeffs[245], gclwh6_2=matrixinvcoeffs[38], gclwh6_4=matrixinvcoeffs[70], gclwh6_5=matrixinvcoeffs[86], gclwh6_8=matrixinvcoeffs[134], gclwh6_12=matrixinvcoeffs[198], gclwh7_0=matrixinvcoeffs[7], gclwh7_6=matrixinvcoeffs[103], gclwh7_7=matrixinvcoeffs[119], gclwh7_9=matrixinvcoeffs[151], gclwh7_13=matrixinvcoeffs[215], gclwh8_2=matrixinvcoeffs[40], gclwh8_4=matrixinvcoeffs[72], gclwh8_5=matrixinvcoeffs[88], gclwh8_8=matrixinvcoeffs[136], gclwh8_12=matrixinvcoeffs[200], gclwh9_0=matrixinvcoeffs[9], gclwh9_6=matrixinvcoeffs[105], gclwh9_7=matrixinvcoeffs[121], gclwh9_9=matrixinvcoeffs[153], gclwh9_13=matrixinvcoeffs[217], gclwh10_2=matrixinvcoeffs[42], gclwh10_4=matrixinvcoeffs[74], gclwh10_5=matrixinvcoeffs[90], gclwh10_8=matrixinvcoeffs[138], gclwh10_12=matrixinvcoeffs[202], gclwh11_0=matrixinvcoeffs[11], gclwh11_6=matrixinvcoeffs[107], gclwh11_7=matrixinvcoeffs[123], gclwh11_9=matrixinvcoeffs[155], gclwh11_13=matrixinvcoeffs[219], gclwh12_2=matrixinvcoeffs[44], gclwh12_3=matrixinvcoeffs[60], gclwh12_4=matrixinvcoeffs[76], gclwh12_8=matrixinvcoeffs[140], gclwh12_11=matrixinvcoeffs[188], gclwh12_14=matrixinvcoeffs[236], gclwh13_0=matrixinvcoeffs[13], gclwh13_1=matrixinvcoeffs[29], gclwh13_6=matrixinvcoeffs[109], gclwh13_9=matrixinvcoeffs[157], gclwh13_10=matrixinvcoeffs[173], gclwh13_15=matrixinvcoeffs[253], gclwh14_2=matrixinvcoeffs[46], gclwh14_3=matrixinvcoeffs[62], gclwh14_4=matrixinvcoeffs[78], gclwh14_8=matrixinvcoeffs[142], gclwh14_11=matrixinvcoeffs[190], gclwh14_14=matrixinvcoeffs[238], gclwh15_0=matrixinvcoeffs[15], gclwh15_1=matrixinvcoeffs[31], gclwh15_6=matrixinvcoeffs[111], gclwh15_9=matrixinvcoeffs[159], gclwh15_10=matrixinvcoeffs[175], gclwh15_15=matrixinvcoeffs[255];
IkReal op[72], zeror[48];
int numroots;;
IkReal x69=pz*pz;
IkReal x70=(npy*pz);
IkReal x71=(gclwh15_10*r20);
IkReal x72=((0.44)*rxp0_2);
IkReal x73=((0.04661316)*rxp1_2);
IkReal x74=(npx*pz);
IkReal x75=((2.0)*gclwh9_9);
IkReal x76=(pp*r21);
IkReal x77=((0.10824)*rxp2_2);
IkReal x78=(gclwh7_0*r21);
IkReal x79=(npz*pz);
IkReal x80=(pp*r22);
IkReal x81=((0.0121)*pz);
IkReal x82=((4.0)*gclwh14_8);
IkReal x83=(gclwh5_15*rxp2_2);
IkReal x84=((0.22)*rxp0_2);
IkReal x85=(gclwh15_0*rxp0_2);
IkReal x86=((2.0)*gclwh6_8);
IkReal x87=((0.486)*pp);
IkReal x88=(gclwh14_8*r20);
IkReal x89=(gclwh4_3*rxp2_2);
IkReal x90=((4.0)*gclwh11_9);
IkReal x91=(gclwh14_11*r20);
IkReal x92=((4.0)*gclwh7_9);
IkReal x93=((0.0110594)*r20);
IkReal x94=((0.02706)*rxp0_2);
IkReal x95=((0.22)*rxp2_2);
IkReal x96=(gclwh14_14*rxp0_2);
IkReal x97=((0.0029766)*r22);
IkReal x98=((4.0)*gclwh4_8);
IkReal x99=((0.44)*rxp1_2);
IkReal x100=(gclwh4_14*r22);
IkReal x101=(gclwh8_2*r20);
IkReal x102=((0.246)*gclwh12_14);
IkReal x103=((0.0103576)*r22);
IkReal x104=((0.0103576)*r20);
IkReal x105=((0.492)*gclwh4_14);
IkReal x106=((0.0058806)*r22);
IkReal x107=((4.0)*gclwh6_8);
IkReal x108=(gclwh6_2*r21);
IkReal x109=(gclwh15_10*rxp0_2);
IkReal x110=(gclwh13_10*rxp1_2);
IkReal x111=(gclwh13_0*rxp1_2);
IkReal x112=(pp*r20);
IkReal x113=((0.0007018)*r20);
IkReal x114=((4.0)*gclwh9_9);
IkReal x115=((0.0121)*r22);
IkReal x116=(gclwh5_10*rxp2_2);
IkReal x117=(gclwh12_11*rxp1_2);
IkReal x118=((0.04661316)*rxp0_2);
IkReal x119=((0.09416)*rxp0_2);
IkReal x120=(gclwh11_13*r22);
IkReal x121=((0.246)*gclwh4_14);
IkReal x122=((1.0)*pz);
IkReal x123=(gclwh7_9*r21);
IkReal x124=(gclwh14_11*rxp0_2);
IkReal x125=((0.492)*gclwh14_14);
IkReal x126=((0.0110594)*r21);
IkReal x127=(gclwh9_9*r20);
IkReal x128=(gclwh10_12*rxp2_2);
IkReal x129=((0.0055297)*r22);
IkReal x130=((0.0242)*r22);
IkReal x131=(gclwh12_8*rxp1_2);
IkReal x132=(gclwh6_12*r21);
IkReal x133=((0.0029766)*r20);
IkReal x134=(gclwh10_12*r22);
IkReal x135=((0.0051788)*r20);
IkReal x136=(gclwh14_2*rxp0_2);
IkReal x137=((4.0)*gclwh12_8);
IkReal x138=((0.0008514)*rxp0_2);
IkReal x139=((0.88)*rxp1_2);
IkReal x140=(gclwh13_1*rxp1_2);
IkReal x141=((0.05412)*rxp1_2);
IkReal x142=((0.0242)*r20);
IkReal x143=((2.0)*gclwh10_8);
IkReal x144=((0.02706)*rxp2_2);
IkReal x145=((0.18832)*rxp1_2);
IkReal x146=((0.0029766)*r21);
IkReal x147=((4.0)*gclwh10_8);
IkReal x148=((0.18832)*rxp2_2);
IkReal x149=((2.0)*gclwh8_8);
IkReal x150=(gclwh12_14*r21);
IkReal x151=((0.246)*gclwh15_15);
IkReal x152=((2.0)*gclwh11_9);
IkReal x153=((0.09416)*rxp1_2);
IkReal x154=(gclwh10_2*r22);
IkReal x155=((0.246)*gclwh13_15);
IkReal x156=(gclwh15_15*rxp0_2);
IkReal x157=((0.10054)*rxp2_2);
IkReal x158=((0.0484)*r22);
IkReal x159=((2.0)*gclwh7_9);
IkReal x160=(gclwh9_0*r20);
IkReal x161=((0.44)*rxp2_2);
IkReal x162=(gclwh13_15*rxp1_2);
IkReal x163=(gclwh4_11*rxp2_2);
IkReal x164=((0.0242)*r21);
IkReal x165=(gclwh7_13*r21);
IkReal x166=((0.0014883)*r22);
IkReal x167=((0.22)*pz);
IkReal x168=((0.22)*pp);
IkReal x169=(gclwh12_3*rxp1_2);
IkReal x170=((0.492)*gclwh12_14);
IkReal x171=((0.88)*rxp2_2);
IkReal x172=(gclwh8_8*r20);
IkReal x173=((0.88)*rxp0_2);
IkReal x174=((0.0014883)*r20);
IkReal x175=((0.246)*gclwh5_15);
IkReal x176=(gclwh12_2*rxp1_2);
IkReal x177=((0.0484)*r21);
IkReal x178=((0.0103576)*r21);
IkReal x179=((0.0014883)*r21);
IkReal x180=((0.0058806)*r21);
IkReal x181=((0.246)*gclwh14_14);
IkReal x182=(gclwh12_14*rxp1_2);
IkReal x183=((0.00638)*rxp2_2);
IkReal x184=((4.0)*gclwh8_8);
IkReal x185=(gclwh11_0*r22);
IkReal x186=((0.02706)*rxp1_2);
IkReal x187=(gclwh14_14*x94);
IkReal x188=(gclwh6_5*x179);
IkReal x189=((0.02706)*x182);
IkReal x190=(gclwh4_14*x144);
IkReal x191=(gclwh8_5*x174);
IkReal x192=(gclwh10_5*x166);
IkReal x193=((0.22)*x131);
IkReal x194=((0.0121)*gclwh6_8*r21);
IkReal x195=(gclwh4_8*x95);
IkReal x196=(gclwh14_8*x84);
IkReal x197=(gclwh10_8*x115);
IkReal x198=((0.0121)*x172);
IkReal x199=(gclwh11_9*x115);
IkReal x200=((0.0121)*x127);
IkReal x201=(gclwh15_9*x84);
IkReal x202=((0.0121)*x123);
IkReal x203=(gclwh5_9*x95);
IkReal x204=((0.22)*gclwh13_9*rxp1_2);
IkReal x205=(gclwh15_15*x94);
IkReal x206=(gclwh7_7*x179);
IkReal x207=((0.02706)*x162);
IkReal x208=((0.02706)*x83);
IkReal x209=(gclwh11_7*x166);
IkReal x210=(gclwh9_7*x174);
IkReal x211=(gclwh6_5*x186);
IkReal x212=((0.0014883)*x100);
IkReal x213=((0.0014883)*x150);
IkReal x214=(gclwh8_5*x94);
IkReal x215=(gclwh10_5*x144);
IkReal x216=(gclwh14_14*x174);
IkReal x217=(gclwh9_7*x94);
IkReal x218=(gclwh15_15*x174);
IkReal x219=(gclwh11_7*x144);
IkReal x220=(gclwh13_15*x179);
IkReal x221=(gclwh7_7*x186);
IkReal x222=(gclwh5_15*x166);
IkReal x223=(gclwh8_8*x142);
IkReal x224=(gclwh14_8*x72);
IkReal x225=(gclwh10_8*x130);
IkReal x226=(gclwh6_8*x164);
IkReal x227=(gclwh12_8*x99);
IkReal x228=(gclwh4_8*x161);
IkReal x229=((0.05412)*x96);
IkReal x230=(gclwh15_9*x72);
IkReal x231=(gclwh11_9*x130);
IkReal x232=((0.0242)*x127);
IkReal x233=((0.0242)*x123);
IkReal x234=(gclwh13_9*x99);
IkReal x235=(gclwh5_9*x161);
IkReal x236=((0.05412)*x156);
IkReal x237=(gclwh10_8*x161);
IkReal x238=(gclwh12_8*x164);
IkReal x239=(gclwh8_8*x72);
IkReal x240=(gclwh4_8*x130);
IkReal x241=(gclwh6_8*x99);
IkReal x242=((0.0242)*x88);
IkReal x243=((2.0)*x69);
IkReal x244=((0.246)*gclwh8_5*x74);
IkReal x245=((0.246)*gclwh10_5*x79);
IkReal x246=((0.123)*gclwh6_5*x76);
IkReal x247=((0.123)*gclwh10_5*x80);
IkReal x248=((0.246)*gclwh6_5*x70);
IkReal x249=((0.123)*gclwh8_5*x112);
IkReal x250=(x168*x169);
IkReal x251=(gclwh14_2*pz*x84);
IkReal x252=(x168*x89);
IkReal x253=(gclwh10_2*pz*x80);
IkReal x254=(x149*x74);
IkReal x255=(pp*pz*x101);
IkReal x256=(x154*x81);
IkReal x257=(x143*x79);
IkReal x258=(x101*x81);
IkReal x259=(gclwh14_3*pp*x84);
IkReal x260=(x167*x176);
IkReal x261=(gclwh4_2*pz*x95);
IkReal x262=(x70*x86);
IkReal x263=(x108*x81);
IkReal x264=(x185*x81);
IkReal x265=(x140*x168);
IkReal x266=(gclwh15_0*pz*x84);
IkReal x267=(x160*x81);
IkReal x268=(gclwh11_0*pz*x80);
IkReal x269=(x159*x70);
IkReal x270=(gclwh9_0*pz*x112);
IkReal x271=(x78*x81);
IkReal x272=(x74*x75);
IkReal x273=(gclwh15_1*pp*x84);
IkReal x274=(x152*x79);
IkReal x275=(x111*x167);
IkReal x276=(gclwh5_0*pz*x95);
IkReal x277=((0.123)*gclwh7_7*x76);
IkReal x278=((0.246)*gclwh11_7*x79);
IkReal x279=((0.246)*gclwh9_7*x74);
IkReal x280=((0.123)*gclwh11_7*x80);
IkReal x281=((0.246)*gclwh7_7*x70);
IkReal x282=((0.123)*gclwh9_7*x112);
IkReal x283=((0.123)*gclwh12_14*x76);
IkReal x284=((0.123)*gclwh4_14*x80);
IkReal x285=(x181*x74);
IkReal x286=(x121*x79);
IkReal x287=(x102*x70);
IkReal x288=((0.123)*gclwh14_14*x112);
IkReal x289=(x175*x79);
IkReal x290=((0.123)*gclwh15_15*x112);
IkReal x291=(x155*x70);
IkReal x292=(x151*x74);
IkReal x293=((0.123)*gclwh13_15*x76);
IkReal x294=((0.123)*gclwh5_15*x80);
IkReal x295=(x143*x80);
IkReal x296=(x112*x149);
IkReal x297=(x107*x70);
IkReal x298=(x147*x79);
IkReal x299=(x76*x86);
IkReal x300=(x184*x74);
IkReal x301=(x70*x92);
IkReal x302=(x152*x80);
IkReal x303=(x112*x75);
IkReal x304=(x159*x76);
IkReal x305=(x79*x90);
IkReal x306=(x114*x74);
IkReal x307=((2.0)*gclwh4_8*x80);
IkReal x308=((2.0)*gclwh12_8*x76);
IkReal x309=(x74*x82);
IkReal x310=(x79*x98);
IkReal x311=((2.0)*pp*x88);
IkReal x312=(x137*x70);
IkReal x313=(gclwh6_2*npy*x243);
IkReal x314=(gclwh6_2*x122*x76);
IkReal x315=(gclwh10_2*npz*x243);
IkReal x316=(gclwh8_2*npx*x243);
IkReal x317=(gclwh7_0*npy*x243);
IkReal x318=(gclwh9_0*npx*x243);
IkReal x319=(gclwh11_0*npz*x243);
IkReal x320=(gclwh7_0*x122*x76);
IkReal x321=((((0.05412)*gclwh4_14*rxp2_2))+((gclwh12_14*x141)));
IkReal x322=((((0.05412)*x83))+((gclwh13_15*x141)));
IkReal x323=(x207+x208);
IkReal x324=(x217+x219);
IkReal x325=(x190+x189);
IkReal x326=(x214+x215);
IkReal x327=((((-1.0)*x321))+x229);
IkReal x328=(x322+(((-1.0)*x236)));
IkReal x329=(x199+x201+x200+x269);
IkReal x330=(x198+x197+x196+x262);
IkReal x331=(x218+x290+x291+x289);
IkReal x332=(x188+x246+x245+x244);
IkReal x333=(x216+x288+x287+x286);
IkReal x334=(x206+x277+x278+x279);
IkReal x335=(x193+x195+x194+x254+x257);
IkReal x336=(x204+x203+x202+x274+x272);
IkReal x337=(x220+x222+x292+x293+x294);
IkReal x338=(x210+x209+x282+x281+x280);
IkReal x339=(x311+x310+x312+x242+x241);
IkReal x340=(x192+x191+x247+x249+x248);
IkReal x341=(x212+x213+x285+x284+x283);
IkReal x342=(x300+x228+x227+x226+x298+x299);
IkReal x343=(x306+x304+x305+x233+x234+x235);
IkReal x344=(x223+x225+x224+x295+x296+x297);
IkReal x345=(x302+x303+x301+x232+x230+x231);
IkReal x346=(x308+x309+x307+x238+x239+x237+x240);
IkReal x347=(x317+x265+x264+x267+x266+x268+x270);
IkReal x348=(x320+x319+x318+x276+x275+x273+x271);
IkReal x349=(x315+x314+x316+x259+x261+x260+x263);
IkReal x350=((((-1.0)*gclwh14_14*x133))+(((-1.0)*x105*x79))+((gclwh4_14*x97))+((x121*x80))+((x125*x74))+(((-1.0)*x170*x70))+((gclwh12_14*x146))+(((-1.0)*x112*x181))+((x102*x76)));
IkReal x351=(x313+x258+x255+x256+x250+x251+x252+x253);
op[0]=((0.112422)+(((-1.0)*x187))+x332+x325+(((-1.0)*x340)));
op[1]=((((-0.07634)*x124))+(((-1.0)*gclwh10_2*x129))+(((-0.10054)*x136))+((gclwh10_8*x80))+(((-1.0)*gclwh6_8*x76))+((gclwh14_3*x118))+(((0.914)*gclwh8_2*x74))+(((0.457)*gclwh6_2*x76))+((gclwh8_8*x112))+x330+x351+(((-0.457)*pp*x101))+(((0.0055297)*x108))+(((-0.457)*gclwh10_2*x80))+(((0.914)*gclwh10_2*x79))+(((0.10054)*x176))+(((-0.04661316)*x89))+(((-1.0)*x335))+(((0.07634)*x117))+(((-1.0)*gclwh12_3*x73))+(((0.07634)*x163))+(((-1.0)*x349))+((gclwh4_2*x157))+(((-0.0055297)*x101))+(((-0.914)*gclwh6_2*x70)));
op[2]=((((-0.428)*gclwh8_12*x112))+(((0.10692)*x117))+(((-1.0)*gclwh8_12*x135))+(((0.10692)*x163))+(((-0.10692)*x124))+(((-0.428)*gclwh10_12*x80))+(((-0.856)*gclwh6_12*x70))+x344+(((0.428)*gclwh6_12*x76))+(((-0.0051788)*x134))+(((0.856)*gclwh8_12*x74))+(((0.856)*gclwh10_12*x79))+(((-1.0)*x342))+(((0.0051788)*x132)));
op[3]=x327;
op[4]=((0.007134)+(((-1.0)*x325))+x187+x332+(((-1.0)*x340)));
op[5]=((((-0.029)*pp*x101))+(((-0.0003509)*x101))+(((-0.00638)*x136))+(((-0.03058)*x117))+(((0.058)*gclwh10_2*x79))+(((-0.058)*gclwh6_2*x70))+(((-0.0008514)*x169))+(((-0.0003509)*x154))+(((0.058)*gclwh8_2*x74))+((gclwh14_3*x138))+x335+x351+((gclwh4_2*x183))+(((-0.0008514)*x89))+(((0.00638)*x176))+(((0.03058)*x124))+(((0.029)*gclwh6_2*x76))+(((-1.0)*gclwh8_8*x112))+(((-0.029)*gclwh10_2*x80))+(((-1.0)*x330))+((gclwh6_8*x76))+(((-1.0)*x349))+(((-1.0)*gclwh10_8*x80))+(((0.0003509)*x108))+(((-0.03058)*x163)));
op[6]=((((0.457)*gclwh7_0*x76))+(((0.914)*gclwh11_0*x79))+((gclwh7_9*x76))+(((-1.0)*gclwh11_0*x129))+(((-0.12474)*x116))+(((-0.12474)*x110))+((gclwh5_0*x157))+(((0.914)*gclwh9_0*x74))+(((-1.0)*gclwh9_9*x112))+(((-1.0)*x329))+(((0.12474)*x109))+((gclwh15_1*x118))+x336+x347+(((-0.0055297)*x160))+(((-0.457)*gclwh11_0*x80))+(((-1.0)*gclwh13_1*x73))+(((-1.0)*gclwh11_9*x80))+(((-1.0)*x348))+(((0.10054)*x111))+(((0.0055297)*x78))+(((-0.10054)*x85))+(((-0.457)*gclwh9_0*x112))+(((-0.914)*gclwh7_0*x70)));
op[7]=((0.112422)+(((-1.0)*x205))+x334+x323+(((-1.0)*x338)));
op[8]=x328;
op[9]=((((0.0051788)*x165))+(((0.10692)*x110))+(((0.10692)*x116))+(((-0.10692)*x109))+(((0.856)*gclwh11_13*x79))+(((-0.856)*gclwh7_13*x70))+(((-0.428)*gclwh11_13*x80))+(((-0.428)*gclwh9_13*x112))+(((0.428)*gclwh7_13*x76))+x345+(((-0.0051788)*x120))+(((-1.0)*gclwh9_13*x135))+(((0.856)*gclwh9_13*x74))+(((-1.0)*x343)));
op[10]=((((-0.01782)*x110))+(((-0.01782)*x116))+(((0.0003509)*x78))+(((-0.0008514)*x140))+(((0.058)*gclwh9_0*x74))+((gclwh15_1*x138))+((gclwh9_9*x112))+(((-1.0)*gclwh7_9*x76))+(((0.029)*gclwh7_0*x76))+((gclwh5_0*x183))+(((0.01782)*x109))+(((0.058)*gclwh11_0*x79))+(((-0.0003509)*x185))+(((0.00638)*x111))+x329+x347+(((-0.0003509)*x160))+(((-1.0)*x336))+(((-0.00638)*x85))+(((-0.058)*gclwh7_0*x70))+((gclwh11_9*x80))+(((-0.029)*gclwh9_0*x112))+(((-1.0)*x348))+(((-0.029)*gclwh11_0*x80)));
op[11]=((0.007134)+(((-1.0)*x323))+x334+x205+(((-1.0)*x338)));
op[12]=((((-1.0)*x326))+x333+x211+(((-1.0)*x341)));
op[13]=((0.19372)+(((0.223978)*gclwh1_3*pp*r20))+(((0.423756)*gclwh14_3*npx*pz))+(((-0.423756)*gclwh12_3*npy*pz))+(((-2.0)*gclwh1_2*npx*(pz*pz)))+(((2.0)*gclwh4_3*npz*pp*pz))+(((-0.10054)*gclwh10_2*rxp2_2))+(((0.0121)*gclwh12_2*pz*r21))+((gclwh14_3*r20*(pp*pp)))+(((-0.0041987)*gclwh4_11*r22))+(((-0.0121)*gclwh14_8*r20))+(((0.914)*gclwh1_2*npx*pz))+(((0.22)*gclwh10_8*rxp2_2))+(((-0.423756)*gclwh3_3*npy*pz))+(((0.10054)*gclwh6_2*rxp1_2))+(((-0.22)*pz))+(((-0.457)*gclwh3_2*pp*r21))+(((-2.0)*gclwh4_8*npz*pz))+(((-1.0)*gclwh14_8*pp*r20))+((gclwh1_2*pp*pz*r20))+(((-0.0055297)*gclwh4_2*r22))+(((-0.10054)*gclwh8_2*rxp0_2))+(((-0.457)*gclwh1_2*pp*r20))+(((0.223978)*gclwh3_3*pp*r21))+(((0.0055297)*gclwh3_2*r21))+(((-0.22)*gclwh6_2*pz*rxp1_2))+(((0.0121)*gclwh12_8*r21))+(((2.0)*gclwh3_3*npy*pp*pz))+(((0.0025637238)*gclwh4_3*r22))+(((-0.0055297)*gclwh12_2*r21))+(((-1.0)*gclwh3_3*r21*(pp*pp)))+(((-0.0025637238)*gclwh14_3*r20))+(((-1.0)*gclwh14_2*pp*pz*r20))+(((0.457)*gclwh14_2*pp*r20))+((gclwh3_2*pp*pz*r21))+(((-0.914)*gclwh14_2*npx*pz))+(((-0.457)*gclwh12_2*pp*r21))+(((-0.0121)*gclwh3_2*pz*r21))+(((-2.0)*gclwh12_2*npy*(pz*pz)))+(((-2.0)*gclwh14_3*npx*pp*pz))+(((-2.0)*gclwh12_8*npy*pz))+(((-2.0)*gclwh3_2*npy*(pz*pz)))+(((-0.423756)*gclwh1_3*npx*pz))+(((0.914)*gclwh12_2*npy*pz))+(((0.914)*gclwh3_2*npy*pz))+(((-0.347)*gclwh12_11*pp*r21))+(((0.0055297)*gclwh14_2*r20))+(((0.22)*gclwh10_2*pz*rxp2_2))+(((-0.347)*gclwh4_11*pp*r22))+(((0.0121)*gclwh4_8*r22))+(((0.0055297)*gclwh1_2*r20))+(((-0.423756)*gclwh4_3*npz*pz))+((gclwh12_8*pp*r21))+(((-1.0)*gclwh4_3*r22*(pp*pp)))+(((-1.0)*gclwh12_3*r21*(pp*pp)))+(((2.0)*gclwh1_3*npx*pp*pz))+(((0.0041987)*gclwh14_11*r20))+(((2.0)*gclwh14_8*npx*pz))+(((-0.199778)*gclwh14_3*pp*r20))+(((0.0121)*gclwh4_2*pz*r22))+(((0.914)*gclwh4_2*npz*pz))+(((0.199778)*gclwh12_3*pp*r21))+(((-0.457)*gclwh4_2*pp*r22))+(((0.0025637238)*gclwh12_3*r21))+(((0.22)*gclwh8_8*rxp0_2))+(((0.199778)*gclwh4_3*pp*r22))+(((-0.0121)*gclwh1_2*pz*r20))+(((-0.22)*gclwh6_8*rxp1_2))+(((2.0)*gclwh12_3*npy*pp*pz))+(((2.0)*gclwh14_2*npx*(pz*pz)))+(((-0.0025637238)*gclwh1_3*r20))+(((-0.0041987)*gclwh12_11*r21))+(((0.347)*gclwh14_11*pp*r20))+(((-0.694)*gclwh14_11*npx*pz))+((gclwh4_8*pp*r22))+(((0.694)*gclwh4_11*npz*pz))+(((-0.0121)*gclwh14_2*pz*r20))+(((0.22)*gclwh8_2*pz*rxp0_2))+(((0.694)*gclwh12_11*npy*pz))+((gclwh4_2*pp*pz*r22))+(((-2.0)*gclwh4_2*npz*(pz*pz)))+(((-0.0025637238)*gclwh3_3*r21))+((gclwh12_2*pp*pz*r21))+(((-1.0)*gclwh1_3*r20*(pp*pp))));
op[14]=((-0.003752)+((x87*x91))+((gclwh6_12*x153))+(((0.972)*gclwh4_11*x79))+(((-1.0)*gclwh12_11*x180))+(((-1.0)*gclwh4_11*x106))+(((-0.486)*gclwh4_11*x80))+(((-1.0)*gclwh8_12*x119))+(((0.0058806)*x91))+(((0.972)*gclwh12_11*x70))+x346+(((-1.0)*x339))+(((-0.486)*gclwh12_11*x76))+(((-0.972)*gclwh14_11*x74))+(((-0.09416)*x128)));
op[15]=x350;
op[16]=((((-1.0)*x326))+x341+x211+(((-1.0)*x333)));
op[17]=((0.014288)+(((-0.058)*gclwh14_2*npx*pz))+(((-0.00774)*gclwh1_3*npx*pz))+(((0.278)*gclwh14_11*npx*pz))+(((-2.0)*gclwh1_2*npx*(pz*pz)))+(((-0.029)*gclwh12_2*pp*r21))+(((2.0)*gclwh4_3*npz*pp*pz))+(((4.6827e-5)*gclwh12_3*r21))+(((-4.6827e-5)*gclwh3_3*r21))+(((0.22)*gclwh6_8*rxp1_2))+(((0.0121)*gclwh12_2*pz*r21))+((gclwh14_3*r20*(pp*pp)))+(((-0.139)*gclwh14_11*pp*r20))+(((-4.6827e-5)*gclwh1_3*r20))+(((-0.22)*pz))+(((0.0003509)*gclwh3_2*r21))+(((0.0016819)*gclwh4_11*r22))+(((-0.029)*gclwh3_2*pp*r21))+(((0.0003509)*gclwh1_2*r20))+((gclwh1_2*pp*pz*r20))+(((0.00774)*gclwh14_3*npx*pz))+(((-0.0016819)*gclwh14_11*r20))+(((0.058)*gclwh3_2*npy*pz))+(((-0.22)*gclwh6_2*pz*rxp1_2))+(((2.0)*gclwh3_3*npy*pp*pz))+(((0.139)*gclwh4_11*pp*r22))+(((-1.0)*gclwh3_3*r21*(pp*pp)))+(((-0.0121)*gclwh12_8*r21))+(((-1.0)*gclwh14_2*pp*pz*r20))+(((-1.0)*gclwh12_8*pp*r21))+(((4.6827e-5)*gclwh4_3*r22))+((gclwh3_2*pp*pz*r21))+(((-0.278)*gclwh12_11*npy*pz))+(((0.058)*gclwh1_2*npx*pz))+(((-0.0121)*gclwh3_2*pz*r21))+(((0.058)*gclwh4_2*npz*pz))+(((2.0)*gclwh12_8*npy*pz))+(((-2.0)*gclwh12_2*npy*(pz*pz)))+(((0.0003509)*gclwh14_2*r20))+(((0.00823)*gclwh14_3*pp*r20))+((gclwh14_8*pp*r20))+(((-2.0)*gclwh14_3*npx*pp*pz))+(((0.139)*gclwh12_11*pp*r21))+(((-0.00774)*gclwh3_3*npy*pz))+(((-2.0)*gclwh3_2*npy*(pz*pz)))+(((-0.00823)*gclwh12_3*pp*r21))+(((0.00638)*gclwh6_2*rxp1_2))+(((-0.0003509)*gclwh4_2*r22))+(((0.22)*gclwh10_2*pz*rxp2_2))+(((-0.22)*gclwh10_8*rxp2_2))+(((-2.0)*gclwh14_8*npx*pz))+(((0.01597)*gclwh1_3*pp*r20))+(((0.058)*gclwh12_2*npy*pz))+(((-4.6827e-5)*gclwh14_3*r20))+(((-1.0)*gclwh4_3*r22*(pp*pp)))+(((-1.0)*gclwh12_3*r21*(pp*pp)))+(((0.0016819)*gclwh12_11*r21))+(((2.0)*gclwh1_3*npx*pp*pz))+(((-0.029)*gclwh4_2*pp*r22))+(((-0.00823)*gclwh4_3*pp*r22))+(((0.029)*gclwh14_2*pp*r20))+(((-1.0)*gclwh4_8*pp*r22))+(((-0.0003509)*gclwh12_2*r21))+(((-0.22)*gclwh8_8*rxp0_2))+(((0.0121)*gclwh4_2*pz*r22))+(((-0.0121)*gclwh4_8*r22))+(((-0.278)*gclwh4_11*npz*pz))+(((0.0121)*gclwh14_8*r20))+(((-0.00774)*gclwh4_3*npz*pz))+(((2.0)*gclwh4_8*npz*pz))+(((-0.0121)*gclwh1_2*pz*r20))+(((2.0)*gclwh12_3*npy*pp*pz))+(((2.0)*gclwh14_2*npx*(pz*pz)))+(((-0.00774)*gclwh12_3*npy*pz))+(((-0.029)*gclwh1_2*pp*r20))+(((-0.00638)*gclwh10_2*rxp2_2))+(((0.01597)*gclwh3_3*pp*r21))+(((-0.00638)*gclwh8_2*rxp0_2))+(((-0.0121)*gclwh14_2*pz*r20))+(((0.22)*gclwh8_2*pz*rxp0_2))+((gclwh4_2*pp*pz*r22))+(((-2.0)*gclwh4_2*npz*(pz*pz)))+((gclwh12_2*pp*pz*r21))+(((-1.0)*gclwh1_3*r20*(pp*pp))));
op[18]=((-0.19372)+(((2.0)*gclwh15_9*npx*pz))+(((0.0068607)*gclwh15_10*r20))+(((2.0)*gclwh2_1*npy*pp*pz))+((gclwh15_0*pp*pz*r20))+(((-0.0025637238)*gclwh2_1*r21))+(((0.199778)*gclwh15_1*pp*r20))+((gclwh13_1*r21*(pp*pp)))+(((-0.22)*gclwh7_9*rxp1_2))+(((2.0)*gclwh0_1*npx*pp*pz))+(((-1.0)*gclwh2_1*r21*(pp*pp)))+(((-0.457)*gclwh0_0*pp*r20))+(((2.0)*gclwh5_0*npz*(pz*pz)))+(((-1.0)*gclwh15_9*pp*r20))+(((0.223978)*gclwh2_1*pp*r21))+(((0.22)*gclwh7_0*pz*rxp1_2))+(((0.22)*gclwh11_9*rxp2_2))+(((-0.423756)*gclwh0_1*npx*pz))+(((-0.22)*pz))+((gclwh2_0*pp*pz*r21))+(((-0.0121)*gclwh0_0*pz*r20))+(((0.0121)*gclwh5_9*r22))+((gclwh0_0*pp*pz*r20))+(((0.0055297)*gclwh13_0*r21))+(((-0.22)*gclwh11_0*pz*rxp2_2))+(((0.10054)*gclwh11_0*rxp2_2))+(((-0.0121)*gclwh13_0*pz*r21))+(((-0.0068607)*gclwh13_10*r21))+(((2.0)*gclwh13_0*npy*(pz*pz)))+(((1.134)*gclwh5_10*npz*pz))+(((-1.134)*gclwh15_10*npx*pz))+(((-0.0055297)*gclwh15_0*r20))+(((0.457)*gclwh5_0*pp*r22))+(((-0.199778)*gclwh13_1*pp*r21))+(((-2.0)*gclwh2_0*npy*(pz*pz)))+(((-0.0068607)*gclwh5_10*r22))+(((-0.423756)*gclwh2_1*npy*pz))+(((0.567)*gclwh15_10*pp*r20))+(((-0.914)*gclwh13_0*npy*pz))+(((-0.10054)*gclwh7_0*rxp1_2))+(((-0.567)*gclwh5_10*pp*r22))+(((-2.0)*gclwh15_0*npx*(pz*pz)))+(((-0.567)*gclwh13_10*pp*r21))+(((0.0121)*gclwh15_0*pz*r20))+(((0.0055297)*gclwh0_0*r20))+(((0.0025637238)*gclwh15_1*r20))+(((-0.22)*gclwh9_0*pz*rxp0_2))+(((-2.0)*gclwh5_9*npz*pz))+(((-0.0121)*gclwh5_0*pz*r22))+(((-2.0)*gclwh0_0*npx*(pz*pz)))+(((-1.0)*gclwh5_0*pp*pz*r22))+(((-1.0)*gclwh13_0*pp*pz*r21))+(((-0.914)*gclwh5_0*npz*pz))+(((-0.0025637238)*gclwh0_1*r20))+(((-0.0025637238)*gclwh13_1*r21))+(((-0.457)*gclwh2_0*pp*r21))+(((0.914)*gclwh0_0*npx*pz))+(((-2.0)*gclwh13_1*npy*pp*pz))+(((0.0121)*gclwh13_9*r21))+(((-0.457)*gclwh15_0*pp*r20))+(((-2.0)*gclwh13_9*npy*pz))+(((0.22)*gclwh9_9*rxp0_2))+((gclwh13_9*pp*r21))+(((0.423756)*gclwh13_1*npy*pz))+(((0.10054)*gclwh9_0*rxp0_2))+(((0.914)*gclwh15_0*npx*pz))+(((0.914)*gclwh2_0*npy*pz))+(((0.457)*gclwh13_0*pp*r21))+(((-0.0121)*gclwh2_0*pz*r21))+(((0.0055297)*gclwh5_0*r22))+(((0.0055297)*gclwh2_0*r21))+(((-0.0121)*gclwh15_9*r20))+(((-1.0)*gclwh15_1*r20*(pp*pp)))+((gclwh5_9*pp*r22))+(((0.223978)*gclwh0_1*pp*r20))+(((-0.423756)*gclwh15_1*npx*pz))+(((1.134)*gclwh13_10*npy*pz))+(((2.0)*gclwh15_1*npx*pp*pz))+(((-1.0)*gclwh0_1*r20*(pp*pp))));
op[19]=(x337+x324+(((-1.0)*x331))+(((-1.0)*x221)));
op[20]=(((x175*x80))+(((-1.0)*gclwh15_15*x133))+(((-1.0)*x112*x151))+((gclwh13_15*x146))+((x155*x76))+(((-0.492)*gclwh5_15*x79))+((gclwh5_15*x97))+(((0.492)*gclwh15_15*x74))+(((-0.492)*gclwh13_15*x70)));
op[21]=((-0.003752)+(((-1.0)*gclwh11_9*x161))+(((4.0)*gclwh5_9*x79))+(((0.09416)*gclwh11_13*rxp2_2))+(((-1.0)*gclwh5_9*x130))+((gclwh13_10*x180))+(((-1.0)*x71*x87))+((gclwh15_9*x142))+(((0.486)*gclwh13_10*x76))+((gclwh5_10*x106))+(((-1.0)*gclwh13_9*x164))+(((-1.0)*gclwh7_13*x153))+((gclwh9_13*x119))+(((0.972)*gclwh15_10*x74))+((gclwh7_9*x99))+(((-0.972)*gclwh5_10*x79))+(((-1.0)*gclwh9_9*x72))+(((4.0)*gclwh13_9*x70))+(((-0.0058806)*x71))+(((-2.0)*gclwh13_9*x76))+(((-4.0)*gclwh15_9*x74))+(((2.0)*gclwh15_9*x112))+(((-0.972)*gclwh13_10*x70))+(((0.486)*gclwh5_10*x80))+(((-2.0)*gclwh5_9*x80)));
op[22]=((-0.014288)+(((0.0009801)*gclwh15_10*r20))+(((2.0)*gclwh2_1*npy*pp*pz))+(((2.0)*gclwh5_9*npz*pz))+((gclwh15_0*pp*pz*r20))+((gclwh13_1*r21*(pp*pp)))+(((2.0)*gclwh0_1*npx*pp*pz))+(((-4.6827e-5)*gclwh2_1*r21))+(((-0.081)*gclwh13_10*pp*r21))+(((2.0)*gclwh13_9*npy*pz))+(((-0.081)*gclwh5_10*pp*r22))+(((0.058)*gclwh15_0*npx*pz))+(((0.0003509)*gclwh13_0*r21))+(((-1.0)*gclwh2_1*r21*(pp*pp)))+(((2.0)*gclwh5_0*npz*(pz*pz)))+(((-0.22)*gclwh11_9*rxp2_2))+(((0.22)*gclwh7_0*pz*rxp1_2))+(((-0.22)*pz))+(((0.00638)*gclwh11_0*rxp2_2))+((gclwh2_0*pp*pz*r21))+(((-0.0121)*gclwh0_0*pz*r20))+((gclwh0_0*pp*pz*r20))+(((-0.22)*gclwh11_0*pz*rxp2_2))+(((-0.058)*gclwh13_0*npy*pz))+(((-0.0121)*gclwh13_0*pz*r21))+(((2.0)*gclwh13_0*npy*(pz*pz)))+(((0.081)*gclwh15_10*pp*r20))+(((0.00823)*gclwh13_1*pp*r21))+(((-0.029)*gclwh15_0*pp*r20))+(((-0.00774)*gclwh15_1*npx*pz))+(((-0.0009801)*gclwh13_10*r21))+(((-2.0)*gclwh2_0*npy*(pz*pz)))+(((0.0003509)*gclwh5_0*r22))+((gclwh15_9*pp*r20))+(((-0.00774)*gclwh0_1*npx*pz))+(((-0.0121)*gclwh13_9*r21))+(((0.0121)*gclwh15_9*r20))+(((4.6827e-5)*gclwh15_1*r20))+(((-0.00774)*gclwh2_1*npy*pz))+(((0.058)*gclwh0_0*npx*pz))+(((-2.0)*gclwh15_0*npx*(pz*pz)))+(((-0.029)*gclwh0_0*pp*r20))+(((-2.0)*gclwh15_9*npx*pz))+(((0.0003509)*gclwh0_0*r20))+(((0.0121)*gclwh15_0*pz*r20))+(((-0.029)*gclwh2_0*pp*r21))+(((-0.00823)*gclwh15_1*pp*r20))+(((0.029)*gclwh13_0*pp*r21))+(((-0.22)*gclwh9_0*pz*rxp0_2))+(((-0.0121)*gclwh5_0*pz*r22))+(((0.162)*gclwh13_10*npy*pz))+(((-2.0)*gclwh0_0*npx*(pz*pz)))+(((-0.0003509)*gclwh15_0*r20))+(((-1.0)*gclwh5_0*pp*pz*r22))+(((0.01597)*gclwh2_1*pp*r21))+(((-1.0)*gclwh13_0*pp*pz*r21))+(((-0.0121)*gclwh5_9*r22))+(((0.00638)*gclwh9_0*rxp0_2))+(((-0.058)*gclwh5_0*npz*pz))+(((-2.0)*gclwh13_1*npy*pp*pz))+(((-0.0009801)*gclwh5_10*r22))+(((0.058)*gclwh2_0*npy*pz))+(((0.01597)*gclwh0_1*pp*r20))+(((-0.162)*gclwh15_10*npx*pz))+(((-0.22)*gclwh9_9*rxp0_2))+(((-1.0)*gclwh13_9*pp*r21))+(((0.162)*gclwh5_10*npz*pz))+(((-0.0121)*gclwh2_0*pz*r21))+(((-1.0)*gclwh5_9*pp*r22))+(((-1.0)*gclwh15_1*r20*(pp*pp)))+(((0.029)*gclwh5_0*pp*r22))+(((0.00774)*gclwh13_1*npy*pz))+(((0.22)*gclwh7_9*rxp1_2))+(((-4.6827e-5)*gclwh13_1*r21))+(((0.0003509)*gclwh2_0*r21))+(((-4.6827e-5)*gclwh0_1*r20))+(((-0.00638)*gclwh7_0*rxp1_2))+(((2.0)*gclwh15_1*npx*pp*pz))+(((-1.0)*gclwh0_1*r20*(pp*pp))));
op[23]=(x331+x324+(((-1.0)*x337))+(((-1.0)*x221)));
op[24]=((((-0.0110594)*x134))+(((1.828)*gclwh10_12*x79))+(((-0.914)*gclwh8_12*x112))+(((1.828)*gclwh8_12*x74))+((gclwh6_12*x126))+x344+(((0.914)*gclwh6_12*x76))+(((-1.0)*gclwh8_12*x93))+(((-0.914)*gclwh10_12*x80))+(((-1.0)*x342))+(((-1.828)*gclwh6_12*x70)));
op[25]=x327;
op[26]=((-0.210576)+(((-0.10824)*x182))+(((0.10824)*x96))+(((-1.0)*gclwh4_14*x77)));
op[27]=((((-0.0484)*x172))+(((-1.0)*x147*x80))+(((-8.0)*gclwh6_8*x70))+(((0.856)*gclwh10_2*x80))+(((-1.0)*gclwh12_2*x145))+((gclwh6_8*x177))+(((-1.712)*gclwh10_2*x79))+((x107*x76))+(((-0.0103576)*x108))+(((0.88)*x131))+(((-1.0)*gclwh14_8*x173))+(((8.0)*gclwh10_8*x79))+(((-1.0)*gclwh10_8*x158))+(((-1.0)*gclwh4_2*x148))+((gclwh4_8*x171))+(((-0.856)*gclwh6_2*x76))+(((8.0)*gclwh8_8*x74))+(((-1.712)*gclwh8_2*x74))+(((-1.0)*x112*x184))+(((0.18832)*x136))+((gclwh10_2*x103))+(((1.712)*gclwh6_2*x70))+(((0.856)*pp*x101))+(((0.0103576)*x101)));
op[28]=((((0.116)*gclwh10_12*x79))+(((0.0007018)*x132))+(((-0.0007018)*x134))+(((-1.0)*gclwh8_12*x113))+x342+(((-0.058)*gclwh8_12*x112))+(((0.116)*gclwh8_12*x74))+(((0.058)*gclwh6_12*x76))+(((-1.0)*x344))+(((-0.058)*gclwh10_12*x80))+(((-0.116)*gclwh6_12*x70)));
op[29]=(x321+(((-1.0)*x229)));
op[30]=x328;
op[31]=((((-0.914)*gclwh9_13*x112))+((gclwh7_13*x126))+(((-0.0110594)*x120))+(((-1.0)*gclwh9_13*x93))+(((1.828)*gclwh9_13*x74))+(((-1.828)*gclwh7_13*x70))+x345+(((0.914)*gclwh7_13*x76))+(((-1.0)*x343))+(((-0.914)*gclwh11_13*x80))+(((1.828)*gclwh11_13*x79)));
op[32]=((((-8.0)*gclwh11_9*x79))+((x112*x114))+(((1.712)*gclwh7_0*x70))+((gclwh15_9*x173))+((gclwh11_0*x103))+(((-1.712)*gclwh9_0*x74))+(((-0.18832)*x111))+(((-1.712)*gclwh11_0*x79))+(((0.18832)*x85))+(((-1.0)*x76*x92))+(((0.856)*gclwh9_0*x112))+(((0.0484)*x127))+((gclwh9_0*x104))+(((-0.0103576)*x78))+(((-1.0)*gclwh13_9*x139))+(((-1.0)*gclwh5_0*x148))+(((8.0)*gclwh7_9*x70))+(((-0.0484)*x123))+(((-0.856)*gclwh7_0*x76))+((x80*x90))+(((-1.0)*gclwh5_9*x171))+((gclwh11_9*x158))+(((-8.0)*gclwh9_9*x74))+(((0.856)*gclwh11_0*x80)));
op[33]=((-0.210576)+(((-0.10824)*x162))+(((0.10824)*x156))+(((-1.0)*gclwh5_15*x77)));
op[34]=((((-1.0)*x322))+x236);
op[35]=((((-0.058)*gclwh11_13*x80))+(((-0.116)*gclwh7_13*x70))+(((0.116)*gclwh9_13*x74))+(((0.116)*gclwh11_13*x79))+(((-0.0007018)*x120))+(((-1.0)*gclwh9_13*x113))+x343+(((0.0007018)*x165))+(((-1.0)*x345))+(((-0.058)*gclwh9_13*x112))+(((0.058)*gclwh7_13*x76)));
op[36]=((-0.447956)+(((0.20108)*gclwh6_12*rxp1_2))+(((-0.20108)*gclwh8_12*rxp0_2))+(((-0.20108)*x128))+x346+(((-1.0)*x339)));
op[37]=x350;
op[38]=((((-0.0059532)*gclwh14_14*r20))+(((0.0059532)*x150))+((x170*x76))+(((-1.0)*x112*x125))+(((0.984)*gclwh14_14*x74))+(((-0.984)*gclwh12_14*x70))+((x105*x80))+(((-0.984)*gclwh4_14*x79))+(((0.0059532)*x100)));
op[39]=((0.113528)+(((-1.0)*gclwh14_2*x104))+(((-1.712)*gclwh12_2*x70))+((gclwh12_2*x178))+(((-1.0)*gclwh4_8*x158))+((gclwh10_2*x148))+(((1.712)*gclwh14_2*x74))+(((-1.0)*gclwh8_8*x173))+(((-1.0)*x137*x76))+(((-1.712)*gclwh3_2*x70))+(((0.0484)*x88))+(((8.0)*gclwh4_8*x79))+(((-1.0)*x80*x98))+(((0.856)*gclwh3_2*x76))+(((-1.0)*gclwh6_2*x145))+(((0.856)*gclwh1_2*x112))+(((8.0)*gclwh12_8*x70))+((gclwh4_2*x103))+(((-1.0)*gclwh3_2*x178))+(((-1.0)*gclwh10_8*x171))+(((-0.856)*gclwh14_2*x112))+(((0.856)*gclwh4_2*x80))+((x112*x82))+((gclwh6_8*x139))+(((-1.0)*gclwh12_8*x177))+(((-1.712)*gclwh1_2*x74))+(((-1.0)*gclwh1_2*x104))+(((-8.0)*gclwh14_8*x74))+(((0.856)*gclwh12_2*x76))+(((0.18832)*gclwh8_2*rxp0_2))+(((-1.712)*gclwh4_2*x79)));
IkReal x352=pz*pz;
IkReal x353=(npy*pz);
IkReal x354=(gclwh15_10*r20);
IkReal x355=((0.44)*rxp0_2);
IkReal x356=((0.04661316)*rxp1_2);
IkReal x357=(npx*pz);
IkReal x358=((2.0)*gclwh9_9);
IkReal x359=(gclwh7_9*rxp1_2);
IkReal x360=(pp*r21);
IkReal x361=(gclwh7_0*r21);
IkReal x362=(npz*pz);
IkReal x363=(pp*r22);
IkReal x364=((0.0121)*pz);
IkReal x365=(gclwh5_15*rxp2_2);
IkReal x366=(gclwh14_3*rxp0_2);
IkReal x367=((0.22)*pp);
IkReal x368=((0.00638)*rxp1_2);
IkReal x369=((2.0)*gclwh6_8);
IkReal x370=((0.486)*pp);
IkReal x371=(gclwh14_8*r20);
IkReal x372=(gclwh9_13*rxp0_2);
IkReal x373=(gclwh4_3*rxp2_2);
IkReal x374=(gclwh14_11*r20);
IkReal x375=((0.02706)*rxp0_2);
IkReal x376=((0.22)*rxp2_2);
IkReal x377=((0.05412)*rxp0_2);
IkReal x378=((0.0029766)*r22);
IkReal x379=(pp*r20);
IkReal x380=((4.0)*gclwh15_9);
IkReal x381=((0.246)*gclwh12_14);
IkReal x382=((0.0058806)*r22);
IkReal x383=((0.492)*gclwh13_15);
IkReal x384=(gclwh6_2*r21);
IkReal x385=((4.0)*gclwh5_9);
IkReal x386=(gclwh15_10*rxp0_2);
IkReal x387=(gclwh13_10*rxp1_2);
IkReal x388=((0.0103576)*r21);
IkReal x389=((0.0103576)*r20);
IkReal x390=(gclwh15_0*rxp0_2);
IkReal x391=((0.246)*gclwh14_14);
IkReal x392=((0.0121)*r22);
IkReal x393=(gclwh5_10*rxp2_2);
IkReal x394=((0.22)*rxp0_2);
IkReal x395=(gclwh12_11*rxp1_2);
IkReal x396=(gclwh15_1*rxp0_2);
IkReal x397=((0.0051788)*r22);
IkReal x398=((0.246)*gclwh4_14);
IkReal x399=((1.0)*pz);
IkReal x400=(gclwh13_15*r21);
IkReal x401=(gclwh8_12*rxp0_2);
IkReal x402=(gclwh14_11*rxp0_2);
IkReal x403=((0.02706)*rxp2_2);
IkReal x404=((0.44)*rxp1_2);
IkReal x405=(gclwh9_9*r20);
IkReal x406=(gclwh7_9*r21);
IkReal x407=((0.01276)*rxp2_2);
IkReal x408=((0.0055297)*r22);
IkReal x409=((0.0242)*r22);
IkReal x410=((0.22)*rxp1_2);
IkReal x411=((0.10054)*rxp1_2);
IkReal x412=(gclwh7_13*rxp1_2);
IkReal x413=((0.0029766)*r20);
IkReal x414=((0.492)*gclwh15_15);
IkReal x415=((0.0051788)*r21);
IkReal x416=(gclwh5_15*r22);
IkReal x417=((4.0)*gclwh13_9);
IkReal x418=((0.0051788)*r20);
IkReal x419=(gclwh14_2*rxp0_2);
IkReal x420=(gclwh8_2*r20);
IkReal x421=(gclwh13_1*rxp1_2);
IkReal x422=((0.05412)*rxp1_2);
IkReal x423=((0.0242)*r20);
IkReal x424=((2.0)*gclwh10_8);
IkReal x425=(gclwh12_14*r21);
IkReal x426=((0.0242)*r21);
IkReal x427=((2.0)*gclwh8_8);
IkReal x428=((0.246)*gclwh15_15);
IkReal x429=((2.0)*gclwh11_9);
IkReal x430=((0.0003509)*r22);
IkReal x431=((0.246)*gclwh13_15);
IkReal x432=((0.10054)*rxp2_2);
IkReal x433=((2.0)*gclwh7_9);
IkReal x434=(gclwh9_0*r20);
IkReal x435=((0.44)*rxp2_2);
IkReal x436=(gclwh4_11*rxp2_2);
IkReal x437=((0.02706)*rxp1_2);
IkReal x438=((0.0014883)*r22);
IkReal x439=(gclwh12_3*rxp1_2);
IkReal x440=(gclwh11_13*rxp2_2);
IkReal x441=((0.0014883)*r20);
IkReal x442=((0.246)*gclwh5_15);
IkReal x443=((0.492)*gclwh5_15);
IkReal x444=((0.0014883)*r21);
IkReal x445=((0.0058806)*r21);
IkReal x446=(gclwh6_12*rxp1_2);
IkReal x447=((0.00638)*rxp2_2);
IkReal x448=(gclwh11_9*x435);
IkReal x449=(gclwh9_9*x355);
IkReal x450=(gclwh13_9*x426);
IkReal x451=(gclwh5_9*x409);
IkReal x452=(gclwh15_9*x423);
IkReal x453=((0.44)*x359);
IkReal x454=(gclwh12_14*x437);
IkReal x455=(gclwh4_14*x403);
IkReal x456=(gclwh6_5*x444);
IkReal x457=(gclwh14_14*x375);
IkReal x458=(gclwh8_5*x441);
IkReal x459=(gclwh10_5*x438);
IkReal x460=(gclwh14_8*x394);
IkReal x461=(gclwh10_8*x392);
IkReal x462=((0.0121)*gclwh8_8*r20);
IkReal x463=(gclwh12_8*x410);
IkReal x464=((0.0121)*gclwh6_8*r21);
IkReal x465=(gclwh4_8*x376);
IkReal x466=((0.0121)*x406);
IkReal x467=(gclwh5_9*x376);
IkReal x468=(gclwh13_9*x410);
IkReal x469=(gclwh11_9*x392);
IkReal x470=((0.0121)*x405);
IkReal x471=(gclwh15_9*x394);
IkReal x472=(gclwh13_15*x437);
IkReal x473=((0.02706)*x365);
IkReal x474=(gclwh7_7*x444);
IkReal x475=(gclwh11_7*x438);
IkReal x476=(gclwh15_15*x375);
IkReal x477=(gclwh9_7*x441);
IkReal x478=(gclwh6_8*x404);
IkReal x479=((0.0242)*x371);
IkReal x480=(gclwh10_8*x435);
IkReal x481=(gclwh12_8*x426);
IkReal x482=(gclwh8_8*x355);
IkReal x483=(gclwh4_8*x409);
IkReal x484=(gclwh6_5*x437);
IkReal x485=(gclwh14_14*x441);
IkReal x486=(gclwh8_5*x375);
IkReal x487=(gclwh10_5*x403);
IkReal x488=(gclwh4_14*x438);
IkReal x489=((0.0014883)*x425);
IkReal x490=(gclwh9_7*x375);
IkReal x491=((0.0014883)*x400);
IkReal x492=((0.0014883)*x416);
IkReal x493=(gclwh11_7*x403);
IkReal x494=(gclwh7_7*x437);
IkReal x495=(gclwh15_15*x441);
IkReal x496=((2.0)*x352);
IkReal x497=(x357*x380);
IkReal x498=((2.0)*gclwh13_9*x360);
IkReal x499=((2.0)*gclwh5_9*x363);
IkReal x500=(x353*x417);
IkReal x501=(x362*x385);
IkReal x502=((2.0)*gclwh15_9*x379);
IkReal x503=((0.246)*gclwh8_5*x357);
IkReal x504=((0.246)*gclwh10_5*x362);
IkReal x505=((0.123)*gclwh6_5*x360);
IkReal x506=((0.123)*gclwh10_5*x363);
IkReal x507=((0.246)*gclwh6_5*x353);
IkReal x508=((0.123)*gclwh8_5*x379);
IkReal x509=(x367*x439);
IkReal x510=(gclwh14_2*pz*x394);
IkReal x511=(x353*x369);
IkReal x512=(x367*x373);
IkReal x513=(gclwh10_2*pz*x363);
IkReal x514=(gclwh8_2*pz*x379);
IkReal x515=(gclwh10_2*r22*x364);
IkReal x516=(x364*x420);
IkReal x517=(x366*x367);
IkReal x518=(gclwh12_2*pz*x410);
IkReal x519=(gclwh4_2*pz*x376);
IkReal x520=(x357*x427);
IkReal x521=(x364*x384);
IkReal x522=(x362*x424);
IkReal x523=(gclwh11_0*r22*x364);
IkReal x524=(x367*x421);
IkReal x525=((0.22)*pz*x390);
IkReal x526=(x357*x358);
IkReal x527=(x364*x434);
IkReal x528=(x362*x429);
IkReal x529=(gclwh11_0*pz*x363);
IkReal x530=(gclwh9_0*pz*x379);
IkReal x531=(x361*x364);
IkReal x532=(x367*x396);
IkReal x533=(x353*x433);
IkReal x534=(gclwh13_0*pz*x410);
IkReal x535=(gclwh5_0*pz*x376);
IkReal x536=((0.123)*gclwh7_7*x360);
IkReal x537=((0.246)*gclwh11_7*x362);
IkReal x538=((0.246)*gclwh9_7*x357);
IkReal x539=((0.123)*gclwh11_7*x363);
IkReal x540=((0.246)*gclwh7_7*x353);
IkReal x541=((0.123)*gclwh9_7*x379);
IkReal x542=((4.0)*gclwh4_8*x362);
IkReal x543=((2.0)*pp*x371);
IkReal x544=((4.0)*gclwh12_8*x353);
IkReal x545=((2.0)*gclwh4_8*x363);
IkReal x546=((2.0)*gclwh12_8*x360);
IkReal x547=((4.0)*gclwh14_8*x357);
IkReal x548=(x362*x398);
IkReal x549=(x353*x381);
IkReal x550=((0.123)*gclwh14_14*x379);
IkReal x551=((0.123)*gclwh12_14*x360);
IkReal x552=((0.123)*gclwh4_14*x363);
IkReal x553=(x357*x391);
IkReal x554=(x357*x428);
IkReal x555=((0.123)*gclwh13_15*x360);
IkReal x556=((0.123)*gclwh5_15*x363);
IkReal x557=(x362*x442);
IkReal x558=((0.123)*gclwh15_15*x379);
IkReal x559=(x353*x431);
IkReal x560=(gclwh6_2*npy*x496);
IkReal x561=(gclwh6_2*x360*x399);
IkReal x562=(gclwh10_2*npz*x496);
IkReal x563=(gclwh8_2*npx*x496);
IkReal x564=(gclwh7_0*npy*x496);
IkReal x565=(gclwh9_0*npx*x496);
IkReal x566=(gclwh11_0*npz*x496);
IkReal x567=(gclwh7_0*x360*x399);
IkReal x568=(x487+x486);
IkReal x569=(x454+x455);
IkReal x570=(x472+x473);
IkReal x571=(x493+x490);
IkReal x572=(x462+x461+x460+x511);
IkReal x573=(x469+x470+x471+x533);
IkReal x574=(((x362*x443))+((gclwh15_15*x413))+((x379*x428))+((x353*x383)));
IkReal x575=(x456+x503+x504+x505);
IkReal x576=(x485+x550+x548+x549);
IkReal x577=(x495+x559+x558+x557);
IkReal x578=(x474+x537+x536+x538);
IkReal x579=(x468+x467+x466+x526+x528);
IkReal x580=(x463+x465+x464+x522+x520);
IkReal x581=(((gclwh5_15*x378))+((x363*x442))+((x357*x414))+((x360*x431))+(((0.0029766)*x400)));
IkReal x582=(x478+x479+x544+x542+x543);
IkReal x583=(x492+x491+x556+x555+x554);
IkReal x584=(x489+x488+x553+x552+x551);
IkReal x585=(x452+x453+x500+x501+x502);
IkReal x586=(x475+x477+x540+x541+x539);
IkReal x587=(x458+x459+x508+x506+x507);
IkReal x588=(x481+x480+x483+x482+x545+x546+x547);
IkReal x589=(x498+x499+x497+x449+x448+x450+x451);
IkReal x590=(x530+x523+x527+x524+x525+x529+x564);
IkReal x591=(x531+x532+x535+x534+x566+x567+x565);
IkReal x592=(x521+x519+x518+x517+x562+x563+x561);
IkReal x593=(((x379*x391))+(((-1.0)*x363*x398))+(((-0.0029766)*x425))+(((-1.0)*gclwh4_14*x378))+((gclwh14_14*x413))+(((-0.492)*gclwh14_14*x357))+(((-1.0)*x360*x381))+(((0.492)*gclwh4_14*x362))+(((0.492)*gclwh12_14*x353)));
IkReal x594=(x574+(((-1.0)*x581)));
IkReal x595=(x509+x516+x515+x514+x513+x512+x510+x560);
op[40]=((0.03194)+(((-0.01276)*x401))+(((-1.0)*gclwh10_12*x407))+(((0.01276)*x446))+x582+(((-1.0)*x588)));
op[41]=x593;
op[42]=((((-1.0)*x574))+x581);
op[43]=((-0.447956)+(((0.20108)*x440))+(((-0.20108)*x412))+(((0.20108)*x372))+x585+(((-1.0)*x589)));
op[44]=((-0.113528)+(((-1.0)*x360*x417))+(((0.856)*gclwh2_0*x360))+(((0.856)*gclwh0_0*x379))+(((-1.0)*gclwh0_0*x389))+((gclwh15_0*x389))+(((-1.712)*gclwh2_0*x353))+(((-1.0)*gclwh2_0*x388))+(((0.18832)*gclwh7_0*rxp1_2))+(((-8.0)*gclwh15_9*x357))+(((1.712)*gclwh5_0*x362))+(((0.0484)*gclwh15_9*r20))+(((-1.0)*gclwh13_0*x388))+(((-0.856)*gclwh13_0*x360))+(((-1.712)*gclwh15_0*x357))+(((1.712)*gclwh13_0*x353))+(((-0.18832)*gclwh11_0*rxp2_2))+(((0.88)*x359))+((x379*x380))+(((-0.856)*gclwh5_0*x363))+(((-1.0)*x363*x385))+(((-0.18832)*gclwh9_0*rxp0_2))+(((8.0)*gclwh13_9*x353))+(((-0.0484)*gclwh5_9*r22))+(((-0.88)*gclwh9_9*rxp0_2))+(((-1.712)*gclwh0_0*x357))+(((0.856)*gclwh15_0*x379))+(((8.0)*gclwh5_9*x362))+(((-0.88)*gclwh11_9*rxp2_2))+(((-0.0484)*gclwh13_9*r21))+(((-0.0103576)*gclwh5_0*r22)));
op[45]=((((0.984)*gclwh5_15*x362))+(((0.984)*gclwh13_15*x353))+(((-1.0)*x363*x443))+(((0.0059532)*gclwh15_15*r20))+(((-1.0)*x360*x383))+((x379*x414))+(((-0.0059532)*x400))+(((-0.0059532)*x416))+(((-0.984)*gclwh15_15*x357)));
op[46]=x594;
op[47]=((0.03194)+(((-0.01276)*x412))+((gclwh11_13*x407))+(((0.01276)*x372))+x589+(((-1.0)*x585)));
op[48]=((-0.112422)+x457+x575+(((-1.0)*x587))+(((-1.0)*x569)));
op[49]=((((0.10054)*x419))+(((0.457)*gclwh10_2*x363))+(((0.0055297)*x420))+(((-1.0)*gclwh12_2*x411))+(((-0.07634)*x402))+(((0.07634)*x436))+((gclwh10_2*x408))+(((0.07634)*x395))+(((-1.0)*gclwh10_8*x363))+(((-1.0)*gclwh8_8*x379))+(((-1.0)*x592))+(((-1.0)*gclwh4_2*x432))+(((-1.0)*x572))+(((-0.04661316)*x373))+(((0.457)*gclwh8_2*x379))+x580+x595+(((0.04661316)*x366))+(((-0.914)*gclwh8_2*x357))+(((-0.0055297)*x384))+(((-0.914)*gclwh10_2*x362))+(((0.914)*gclwh6_2*x353))+((gclwh6_8*x360))+(((-0.457)*gclwh6_2*x360))+(((-1.0)*gclwh12_3*x356)));
op[50]=((((-0.10692)*x402))+(((-1.0)*gclwh6_12*x415))+(((-1.0)*x363*x424))+(((-1.0)*x379*x427))+(((4.0)*gclwh8_8*x357))+(((-0.428)*gclwh6_12*x360))+(((-1.0)*gclwh8_8*x423))+((gclwh8_12*x418))+(((0.856)*gclwh6_12*x353))+(((0.10692)*x436))+(((-0.856)*gclwh8_12*x357))+(((4.0)*gclwh10_8*x362))+(((0.428)*gclwh10_12*x363))+(((-1.0)*gclwh10_8*x409))+((gclwh10_12*x397))+((gclwh6_8*x426))+((gclwh12_8*x404))+(((-4.0)*gclwh6_8*x353))+(((-0.856)*gclwh10_12*x362))+((x360*x369))+(((0.428)*gclwh8_12*x379))+(((0.10692)*x395))+(((-1.0)*gclwh14_8*x355))+((gclwh4_8*x435)));
op[51]=((((-1.0)*gclwh14_14*x377))+(((0.05412)*gclwh4_14*rxp2_2))+((gclwh12_14*x422)));
op[52]=((-0.007134)+(((-1.0)*x457))+x575+x569+(((-1.0)*x587)));
op[53]=((((-0.0003509)*x384))+((gclwh10_2*x430))+(((0.0003509)*x420))+(((-0.03058)*x395))+(((-0.058)*gclwh8_2*x357))+(((-0.03058)*x436))+(((-0.029)*gclwh6_2*x360))+((gclwh8_8*x379))+(((-1.0)*gclwh4_2*x447))+(((-1.0)*x592))+(((-1.0)*gclwh12_2*x368))+(((-1.0)*gclwh6_8*x360))+(((0.029)*gclwh8_2*x379))+((gclwh10_8*x363))+(((-0.0008514)*x373))+x572+x595+(((-0.0008514)*x439))+(((0.0008514)*x366))+(((0.03058)*x402))+(((-0.058)*gclwh10_2*x362))+(((0.00638)*x419))+(((-1.0)*x580))+(((0.058)*gclwh6_2*x353))+(((0.029)*gclwh10_2*x363)));
op[54]=((((0.0055297)*x434))+(((0.12474)*x386))+(((0.457)*gclwh9_0*x379))+(((0.457)*gclwh11_0*x363))+(((-0.12474)*x393))+((gclwh11_0*x408))+(((-1.0)*gclwh7_9*x360))+((gclwh11_9*x363))+(((-1.0)*gclwh5_0*x432))+(((-0.914)*gclwh9_0*x357))+(((-1.0)*x591))+(((0.914)*gclwh7_0*x353))+(((-0.914)*gclwh11_0*x362))+(((-0.12474)*x387))+(((-1.0)*x579))+(((-0.457)*gclwh7_0*x360))+x573+x590+(((0.04661316)*x396))+(((0.10054)*x390))+(((-1.0)*gclwh13_0*x411))+((gclwh9_9*x379))+(((-1.0)*gclwh13_1*x356))+(((-0.0055297)*x361)));
op[55]=((-0.112422)+x476+(((-1.0)*x570))+x578+(((-1.0)*x586)));
op[56]=(((gclwh15_15*x377))+(((-1.0)*gclwh13_15*x422))+(((-0.05412)*x365)));
op[57]=((((-1.0)*x363*x429))+(((-0.10692)*x386))+(((-0.856)*gclwh11_13*x362))+(((-1.0)*gclwh7_13*x415))+(((0.428)*gclwh9_13*x379))+(((0.856)*gclwh7_13*x353))+(((-1.0)*x358*x379))+((gclwh9_13*x418))+(((-1.0)*gclwh15_9*x355))+((gclwh11_13*x397))+(((4.0)*gclwh9_9*x357))+(((0.428)*gclwh11_13*x363))+(((0.10692)*x387))+((x360*x433))+(((-0.428)*gclwh7_13*x360))+(((-0.0242)*x405))+(((-4.0)*gclwh7_9*x353))+(((0.0242)*x406))+(((-0.856)*gclwh9_13*x357))+(((-1.0)*gclwh11_9*x409))+((gclwh13_9*x404))+(((0.10692)*x393))+(((4.0)*gclwh11_9*x362))+((gclwh5_9*x435)));
op[58]=(((gclwh7_9*x360))+(((0.00638)*x390))+(((-0.029)*gclwh7_0*x360))+(((-0.01782)*x393))+((gclwh11_0*x430))+(((0.0003509)*x434))+(((0.029)*gclwh9_0*x379))+(((0.0008514)*x396))+(((0.058)*gclwh7_0*x353))+(((-1.0)*x591))+(((-1.0)*gclwh5_0*x447))+(((-1.0)*x573))+x579+x590+(((-1.0)*gclwh11_9*x363))+(((-0.058)*gclwh11_0*x362))+(((-0.01782)*x387))+(((-0.058)*gclwh9_0*x357))+(((-0.0008514)*x421))+(((-0.0003509)*x361))+(((-1.0)*gclwh13_0*x368))+(((0.029)*gclwh11_0*x363))+(((-1.0)*gclwh9_9*x379))+(((0.01782)*x386)));
op[59]=((-0.007134)+(((-1.0)*x476))+x578+x570+(((-1.0)*x586)));
op[60]=(x484+(((-1.0)*x576))+x584+(((-1.0)*x568)));
op[61]=((-0.19372)+(((0.223978)*gclwh1_3*pp*r20))+(((-0.914)*gclwh12_2*npy*pz))+(((0.423756)*gclwh14_3*npx*pz))+(((-0.423756)*gclwh12_3*npy*pz))+(((-2.0)*gclwh1_2*npx*(pz*pz)))+(((2.0)*gclwh4_3*npz*pp*pz))+(((0.22)*gclwh6_8*rxp1_2))+(((0.0121)*gclwh12_2*pz*r21))+((gclwh14_3*r20*(pp*pp)))+(((-0.0041987)*gclwh4_11*r22))+(((0.10054)*gclwh10_2*rxp2_2))+(((-0.423756)*gclwh3_3*npy*pz))+(((-0.22)*pz))+(((-0.914)*gclwh1_2*npx*pz))+((gclwh1_2*pp*pz*r20))+(((0.10054)*gclwh8_2*rxp0_2))+(((-0.0055297)*gclwh14_2*r20))+(((-0.914)*gclwh4_2*npz*pz))+(((0.223978)*gclwh3_3*pp*r21))+(((-0.22)*gclwh6_2*pz*rxp1_2))+(((-0.914)*gclwh3_2*npy*pz))+(((2.0)*gclwh3_3*npy*pp*pz))+(((0.0025637238)*gclwh4_3*r22))+(((-1.0)*gclwh3_3*r21*(pp*pp)))+(((-0.0025637238)*gclwh14_3*r20))+(((-0.0121)*gclwh12_8*r21))+(((-1.0)*gclwh14_2*pp*pz*r20))+(((-1.0)*gclwh12_8*pp*r21))+(((-0.0055297)*gclwh3_2*r21))+((gclwh3_2*pp*pz*r21))+(((0.457)*gclwh12_2*pp*r21))+(((-0.0121)*gclwh3_2*pz*r21))+(((2.0)*gclwh12_8*npy*pz))+(((-2.0)*gclwh12_2*npy*(pz*pz)))+((gclwh14_8*pp*r20))+(((-2.0)*gclwh14_3*npx*pp*pz))+(((-2.0)*gclwh3_2*npy*(pz*pz)))+(((-0.423756)*gclwh1_3*npx*pz))+(((0.0055297)*gclwh12_2*r21))+(((-0.347)*gclwh12_11*pp*r21))+(((-0.457)*gclwh14_2*pp*r20))+(((0.22)*gclwh10_2*pz*rxp2_2))+(((-0.22)*gclwh10_8*rxp2_2))+(((-0.347)*gclwh4_11*pp*r22))+(((-2.0)*gclwh14_8*npx*pz))+(((-0.423756)*gclwh4_3*npz*pz))+(((0.914)*gclwh14_2*npx*pz))+(((-1.0)*gclwh4_3*r22*(pp*pp)))+(((-1.0)*gclwh12_3*r21*(pp*pp)))+(((2.0)*gclwh1_3*npx*pp*pz))+(((0.457)*gclwh1_2*pp*r20))+(((-0.0055297)*gclwh1_2*r20))+(((0.0055297)*gclwh4_2*r22))+(((0.0041987)*gclwh14_11*r20))+(((-1.0)*gclwh4_8*pp*r22))+(((-0.199778)*gclwh14_3*pp*r20))+(((-0.22)*gclwh8_8*rxp0_2))+(((0.457)*gclwh3_2*pp*r21))+(((0.0121)*gclwh4_2*pz*r22))+(((-0.0121)*gclwh4_8*r22))+(((0.199778)*gclwh12_3*pp*r21))+(((0.0025637238)*gclwh12_3*r21))+(((0.0121)*gclwh14_8*r20))+(((2.0)*gclwh4_8*npz*pz))+(((0.199778)*gclwh4_3*pp*r22))+(((0.457)*gclwh4_2*pp*r22))+(((-0.0121)*gclwh1_2*pz*r20))+(((-0.10054)*gclwh6_2*rxp1_2))+(((2.0)*gclwh12_3*npy*pp*pz))+(((2.0)*gclwh14_2*npx*(pz*pz)))+(((-0.0025637238)*gclwh1_3*r20))+(((-0.0041987)*gclwh12_11*r21))+(((0.347)*gclwh14_11*pp*r20))+(((-0.694)*gclwh14_11*npx*pz))+(((0.694)*gclwh4_11*npz*pz))+(((-0.0121)*gclwh14_2*pz*r20))+(((0.22)*gclwh8_2*pz*rxp0_2))+(((0.694)*gclwh12_11*npy*pz))+((gclwh4_2*pp*pz*r22))+(((-2.0)*gclwh4_2*npz*(pz*pz)))+(((-0.0025637238)*gclwh3_3*r21))+((gclwh12_2*pp*pz*r21))+(((-1.0)*gclwh1_3*r20*(pp*pp))));
op[62]=((0.003752)+(((0.09416)*gclwh10_12*rxp2_2))+((x370*x374))+(((0.972)*gclwh12_11*x353))+(((-1.0)*gclwh4_11*x382))+(((-0.486)*gclwh4_11*x363))+(((0.972)*gclwh4_11*x362))+(((-0.09416)*x446))+(((0.0058806)*x374))+(((-1.0)*gclwh12_11*x445))+(((0.09416)*x401))+(((-0.486)*gclwh12_11*x360))+x582+(((-0.972)*gclwh14_11*x357))+(((-1.0)*x588)));
op[63]=x593;
op[64]=(x484+x576+(((-1.0)*x584))+(((-1.0)*x568)));
op[65]=((-0.014288)+(((-0.00774)*gclwh1_3*npx*pz))+(((0.278)*gclwh14_11*npx*pz))+(((-0.058)*gclwh1_2*npx*pz))+(((-2.0)*gclwh1_2*npx*(pz*pz)))+(((-0.0003509)*gclwh14_2*r20))+(((2.0)*gclwh4_3*npz*pp*pz))+(((0.029)*gclwh1_2*pp*r20))+(((4.6827e-5)*gclwh12_3*r21))+(((-4.6827e-5)*gclwh3_3*r21))+(((0.029)*gclwh12_2*pp*r21))+(((0.0121)*gclwh12_2*pz*r21))+((gclwh14_3*r20*(pp*pp)))+(((-0.139)*gclwh14_11*pp*r20))+(((-0.0121)*gclwh14_8*r20))+(((-4.6827e-5)*gclwh1_3*r20))+(((0.22)*gclwh10_8*rxp2_2))+(((-0.22)*pz))+(((0.0016819)*gclwh4_11*r22))+(((-2.0)*gclwh4_8*npz*pz))+(((-1.0)*gclwh14_8*pp*r20))+((gclwh1_2*pp*pz*r20))+(((0.00774)*gclwh14_3*npx*pz))+(((-0.029)*gclwh14_2*pp*r20))+(((-0.0016819)*gclwh14_11*r20))+(((-0.22)*gclwh6_2*pz*rxp1_2))+(((0.0121)*gclwh12_8*r21))+(((0.029)*gclwh4_2*pp*r22))+(((2.0)*gclwh3_3*npy*pp*pz))+(((0.139)*gclwh4_11*pp*r22))+(((0.058)*gclwh14_2*npx*pz))+(((-1.0)*gclwh3_3*r21*(pp*pp)))+(((-1.0)*gclwh14_2*pp*pz*r20))+(((4.6827e-5)*gclwh4_3*r22))+((gclwh3_2*pp*pz*r21))+(((-0.278)*gclwh12_11*npy*pz))+(((0.029)*gclwh3_2*pp*r21))+(((-0.0121)*gclwh3_2*pz*r21))+(((-2.0)*gclwh12_2*npy*(pz*pz)))+(((0.00823)*gclwh14_3*pp*r20))+(((-2.0)*gclwh14_3*npx*pp*pz))+(((-2.0)*gclwh12_8*npy*pz))+(((0.139)*gclwh12_11*pp*r21))+(((-0.00774)*gclwh3_3*npy*pz))+(((-2.0)*gclwh3_2*npy*(pz*pz)))+(((-0.00823)*gclwh12_3*pp*r21))+(((0.0003509)*gclwh4_2*r22))+(((-0.058)*gclwh4_2*npz*pz))+(((0.22)*gclwh10_2*pz*rxp2_2))+(((0.0121)*gclwh4_8*r22))+(((0.00638)*gclwh8_2*rxp0_2))+((gclwh12_8*pp*r21))+(((0.01597)*gclwh1_3*pp*r20))+(((-4.6827e-5)*gclwh14_3*r20))+(((-0.0003509)*gclwh1_2*r20))+(((-1.0)*gclwh4_3*r22*(pp*pp)))+(((-1.0)*gclwh12_3*r21*(pp*pp)))+(((0.0016819)*gclwh12_11*r21))+(((2.0)*gclwh1_3*npx*pp*pz))+(((-0.00823)*gclwh4_3*pp*r22))+(((-0.058)*gclwh12_2*npy*pz))+(((2.0)*gclwh14_8*npx*pz))+(((0.00638)*gclwh10_2*rxp2_2))+(((-0.00638)*gclwh6_2*rxp1_2))+(((0.0121)*gclwh4_2*pz*r22))+(((-0.278)*gclwh4_11*npz*pz))+(((0.22)*gclwh8_8*rxp0_2))+(((-0.00774)*gclwh4_3*npz*pz))+(((-0.0121)*gclwh1_2*pz*r20))+(((-0.22)*gclwh6_8*rxp1_2))+(((2.0)*gclwh12_3*npy*pp*pz))+(((2.0)*gclwh14_2*npx*(pz*pz)))+(((-0.00774)*gclwh12_3*npy*pz))+(((0.01597)*gclwh3_3*pp*r21))+((gclwh4_8*pp*r22))+(((-0.0121)*gclwh14_2*pz*r20))+(((0.22)*gclwh8_2*pz*rxp0_2))+((gclwh4_2*pp*pz*r22))+(((-2.0)*gclwh4_2*npz*(pz*pz)))+(((-0.0003509)*gclwh3_2*r21))+((gclwh12_2*pp*pz*r21))+(((-1.0)*gclwh1_3*r20*(pp*pp)))+(((-0.058)*gclwh3_2*npy*pz))+(((0.0003509)*gclwh12_2*r21)));
op[66]=((0.19372)+(((0.0068607)*gclwh15_10*r20))+(((2.0)*gclwh2_1*npy*pp*pz))+(((2.0)*gclwh5_9*npz*pz))+((gclwh15_0*pp*pz*r20))+(((-0.0025637238)*gclwh2_1*r21))+(((0.199778)*gclwh15_1*pp*r20))+((gclwh13_1*r21*(pp*pp)))+(((2.0)*gclwh0_1*npx*pp*pz))+(((0.914)*gclwh13_0*npy*pz))+(((2.0)*gclwh13_9*npy*pz))+(((-1.0)*gclwh2_1*r21*(pp*pp)))+(((-0.10054)*gclwh11_0*rxp2_2))+(((2.0)*gclwh5_0*npz*(pz*pz)))+(((-0.914)*gclwh0_0*npx*pz))+(((0.223978)*gclwh2_1*pp*r21))+(((-0.22)*gclwh11_9*rxp2_2))+(((0.0055297)*gclwh15_0*r20))+(((0.22)*gclwh7_0*pz*rxp1_2))+(((-0.423756)*gclwh0_1*npx*pz))+(((-0.22)*pz))+((gclwh2_0*pp*pz*r21))+(((-0.0121)*gclwh0_0*pz*r20))+(((-0.0055297)*gclwh13_0*r21))+((gclwh0_0*pp*pz*r20))+(((-0.22)*gclwh11_0*pz*rxp2_2))+(((-0.0055297)*gclwh0_0*r20))+(((-0.0055297)*gclwh5_0*r22))+(((-0.0121)*gclwh13_0*pz*r21))+(((-0.0068607)*gclwh13_10*r21))+(((2.0)*gclwh13_0*npy*(pz*pz)))+(((1.134)*gclwh5_10*npz*pz))+(((-1.134)*gclwh15_10*npx*pz))+(((0.457)*gclwh15_0*pp*r20))+(((-0.0055297)*gclwh2_0*r21))+(((-0.457)*gclwh13_0*pp*r21))+(((-0.199778)*gclwh13_1*pp*r21))+(((-2.0)*gclwh2_0*npy*(pz*pz)))+((gclwh15_9*pp*r20))+(((-0.0068607)*gclwh5_10*r22))+(((-0.423756)*gclwh2_1*npy*pz))+(((-0.914)*gclwh2_0*npy*pz))+(((0.567)*gclwh15_10*pp*r20))+(((-0.0121)*gclwh13_9*r21))+(((0.0121)*gclwh15_9*r20))+(((0.457)*gclwh2_0*pp*r21))+(((-0.567)*gclwh5_10*pp*r22))+(((0.914)*gclwh5_0*npz*pz))+(((-2.0)*gclwh15_0*npx*(pz*pz)))+(((-0.567)*gclwh13_10*pp*r21))+(((-2.0)*gclwh15_9*npx*pz))+(((0.0121)*gclwh15_0*pz*r20))+(((0.0025637238)*gclwh15_1*r20))+(((-0.22)*gclwh9_0*pz*rxp0_2))+(((-0.0121)*gclwh5_0*pz*r22))+(((-2.0)*gclwh0_0*npx*(pz*pz)))+(((-1.0)*gclwh5_0*pp*pz*r22))+(((-0.457)*gclwh5_0*pp*r22))+(((-1.0)*gclwh13_0*pp*pz*r21))+(((-0.0121)*gclwh5_9*r22))+(((-0.0025637238)*gclwh0_1*r20))+(((-0.0025637238)*gclwh13_1*r21))+(((-2.0)*gclwh13_1*npy*pp*pz))+(((0.10054)*gclwh7_0*rxp1_2))+(((-0.10054)*gclwh9_0*rxp0_2))+(((0.423756)*gclwh13_1*npy*pz))+(((0.457)*gclwh0_0*pp*r20))+(((-0.22)*gclwh9_9*rxp0_2))+(((-1.0)*gclwh13_9*pp*r21))+(((-0.0121)*gclwh2_0*pz*r21))+(((-1.0)*gclwh5_9*pp*r22))+(((-1.0)*gclwh15_1*r20*(pp*pp)))+(((-0.914)*gclwh15_0*npx*pz))+(((0.22)*gclwh7_9*rxp1_2))+(((0.223978)*gclwh0_1*pp*r20))+(((-0.423756)*gclwh15_1*npx*pz))+(((1.134)*gclwh13_10*npy*pz))+(((2.0)*gclwh15_1*npx*pp*pz))+(((-1.0)*gclwh0_1*r20*(pp*pp))));
op[67]=((((-1.0)*x494))+x577+x571+(((-1.0)*x583)));
op[68]=x594;
op[69]=((0.003752)+((gclwh5_10*x382))+(((-1.0)*x354*x370))+(((0.486)*gclwh5_10*x363))+(((-0.972)*gclwh5_10*x362))+(((-0.09416)*x440))+(((-0.0058806)*x354))+((gclwh13_10*x445))+(((0.09416)*x412))+x589+(((0.486)*gclwh13_10*x360))+(((-0.09416)*x372))+(((-0.972)*gclwh13_10*x353))+(((-1.0)*x585))+(((0.972)*gclwh15_10*x357)));
op[70]=((0.014288)+(((0.0009801)*gclwh15_10*r20))+(((2.0)*gclwh15_9*npx*pz))+(((0.058)*gclwh13_0*npy*pz))+(((2.0)*gclwh2_1*npy*pp*pz))+((gclwh15_0*pp*pz*r20))+(((0.029)*gclwh15_0*pp*r20))+((gclwh13_1*r21*(pp*pp)))+(((-0.22)*gclwh7_9*rxp1_2))+(((2.0)*gclwh0_1*npx*pp*pz))+(((-4.6827e-5)*gclwh2_1*r21))+(((-0.081)*gclwh13_10*pp*r21))+(((-0.081)*gclwh5_10*pp*r22))+(((0.0003509)*gclwh15_0*r20))+(((-1.0)*gclwh2_1*r21*(pp*pp)))+(((2.0)*gclwh5_0*npz*(pz*pz)))+(((-1.0)*gclwh15_9*pp*r20))+(((-0.00638)*gclwh9_0*rxp0_2))+(((0.22)*gclwh7_0*pz*rxp1_2))+(((0.22)*gclwh11_9*rxp2_2))+(((0.029)*gclwh0_0*pp*r20))+(((-0.22)*pz))+((gclwh2_0*pp*pz*r21))+(((-0.058)*gclwh2_0*npy*pz))+(((-0.0121)*gclwh0_0*pz*r20))+(((0.0121)*gclwh5_9*r22))+((gclwh0_0*pp*pz*r20))+(((-0.22)*gclwh11_0*pz*rxp2_2))+(((-0.0121)*gclwh13_0*pz*r21))+(((2.0)*gclwh13_0*npy*(pz*pz)))+(((0.081)*gclwh15_10*pp*r20))+(((-0.00638)*gclwh11_0*rxp2_2))+(((-0.0003509)*gclwh0_0*r20))+(((0.00823)*gclwh13_1*pp*r21))+(((-0.00774)*gclwh15_1*npx*pz))+(((-0.0009801)*gclwh13_10*r21))+(((-2.0)*gclwh2_0*npy*(pz*pz)))+(((-0.058)*gclwh15_0*npx*pz))+(((-0.00774)*gclwh0_1*npx*pz))+(((4.6827e-5)*gclwh15_1*r20))+(((-0.0003509)*gclwh5_0*r22))+(((0.058)*gclwh5_0*npz*pz))+(((-0.029)*gclwh5_0*pp*r22))+(((-0.00774)*gclwh2_1*npy*pz))+(((-2.0)*gclwh15_0*npx*(pz*pz)))+(((0.00638)*gclwh7_0*rxp1_2))+(((0.029)*gclwh2_0*pp*r21))+(((0.0121)*gclwh15_0*pz*r20))+(((-0.00823)*gclwh15_1*pp*r20))+(((-0.22)*gclwh9_0*pz*rxp0_2))+(((-2.0)*gclwh5_9*npz*pz))+(((-0.0003509)*gclwh13_0*r21))+(((-0.0121)*gclwh5_0*pz*r22))+(((0.162)*gclwh13_10*npy*pz))+(((-2.0)*gclwh0_0*npx*(pz*pz)))+(((-1.0)*gclwh5_0*pp*pz*r22))+(((0.01597)*gclwh2_1*pp*r21))+(((-1.0)*gclwh13_0*pp*pz*r21))+(((-2.0)*gclwh13_1*npy*pp*pz))+(((-0.058)*gclwh0_0*npx*pz))+(((0.0121)*gclwh13_9*r21))+(((-0.029)*gclwh13_0*pp*r21))+(((-2.0)*gclwh13_9*npy*pz))+(((-0.0009801)*gclwh5_10*r22))+(((0.22)*gclwh9_9*rxp0_2))+((gclwh13_9*pp*r21))+(((0.01597)*gclwh0_1*pp*r20))+(((-0.162)*gclwh15_10*npx*pz))+(((0.162)*gclwh5_10*npz*pz))+(((-0.0121)*gclwh2_0*pz*r21))+(((-0.0121)*gclwh15_9*r20))+(((-1.0)*gclwh15_1*r20*(pp*pp)))+(((0.00774)*gclwh13_1*npy*pz))+(((-4.6827e-5)*gclwh13_1*r21))+((gclwh5_9*pp*r22))+(((-4.6827e-5)*gclwh0_1*r20))+(((2.0)*gclwh15_1*npx*pp*pz))+(((-1.0)*gclwh0_1*r20*(pp*pp)))+(((-0.0003509)*gclwh2_0*r21)));
op[71]=((((-1.0)*x494))+(((-1.0)*x577))+x571+x583);
solvedialyticpoly8qep(op,zeror,numroots);
IkReal j1array[16], cj1array[16], sj1array[16], j2array[16], cj2array[16], sj2array[16], j3array[16], cj3array[16], sj3array[16];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ij1 += 3)
{
IkReal htj1 = zeror[ij1+0], htj2 = zeror[ij1+1], htj3 = zeror[ij1+2];
if(isnan(htj1)||isnan(htj2)||isnan(htj3)){
continue;
}
j1array[numsolutions]=((2.0)*(atan(htj1)));
j2array[numsolutions]=((2.0)*(atan(htj2)));
j3array[numsolutions]=((2.0)*(atan(htj3)));
if(isinf(htj1)){
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
}
else{
IkReal x596=htj1*htj1;
CheckValue<IkReal> x597=IKPowWithIntegerCheck(((1.0)+x596),-1);
if(!x597.valid){
continue;
}
cj1array[numsolutions]=((x597.value)*(((1.0)+(((-1.0)*x596)))));
CheckValue<IkReal> x598=IKPowWithIntegerCheck(((1.0)+(htj1*htj1)),-1);
if(!x598.valid){
continue;
}
sj1array[numsolutions]=((2.0)*htj1*(x598.value));
}
if(isinf(htj2)){
cj2array[numsolutions] = IKcos(j2array[numsolutions]);
sj2array[numsolutions] = IKsin(j2array[numsolutions]);
}
else{
IkReal x599=htj2*htj2;
CheckValue<IkReal> x600=IKPowWithIntegerCheck(((1.0)+x599),-1);
if(!x600.valid){
continue;
}
cj2array[numsolutions]=((x600.value)*(((1.0)+(((-1.0)*x599)))));
CheckValue<IkReal> x601=IKPowWithIntegerCheck(((1.0)+(htj2*htj2)),-1);
if(!x601.valid){
continue;
}
sj2array[numsolutions]=((2.0)*htj2*(x601.value));
}
if(isinf(htj3)){
cj3array[numsolutions] = IKcos(j3array[numsolutions]);
sj3array[numsolutions] = IKsin(j3array[numsolutions]);
}
else{
IkReal x602=htj3*htj3;
CheckValue<IkReal> x603=IKPowWithIntegerCheck(((1.0)+x602),-1);
if(!x603.valid){
continue;
}
cj3array[numsolutions]=((x603.value)*(((1.0)+(((-1.0)*x602)))));
CheckValue<IkReal> x604=IKPowWithIntegerCheck(((1.0)+(htj3*htj3)),-1);
if(!x604.valid){
continue;
}
sj3array[numsolutions]=((2.0)*htj3*(x604.value));
}
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
if( j2array[numsolutions] > IKPI )
{
    j2array[numsolutions]-=IK2PI;
}
else if( j2array[numsolutions] < -IKPI )
{
    j2array[numsolutions]+=IK2PI;
}
if( j3array[numsolutions] > IKPI )
{
    j3array[numsolutions]-=IK2PI;
}
else if( j3array[numsolutions] < -IKPI )
{
    j3array[numsolutions]+=IK2PI;
}
numsolutions++;
}
bool j1valid[16]={true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true};
_nj1 = 16;
_nj2 = 1;
_nj3 = 1;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
_ij2[0] = 0; _ij2[1] = -1;
_ij3[0] = 0; _ij3[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( !j1valid[iij1] ) { continue; }
if( IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(cj2array[ij1]-cj2array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij1]-sj2array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(cj3array[ij1]-cj3array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij1]-sj3array[iij1]) < IKFAST_SOLUTION_THRESH &&  1 )
{
    j1valid[iij1]=false; _ij1[1] = iij1; _ij2[1] = 0; _ij3[1] = 0;  break; 
}
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

    j2 = j2array[ij1]; cj2 = cj2array[ij1]; sj2 = sj2array[ij1];

    j3 = j3array[ij1]; cj3 = cj3array[ij1]; sj3 = sj3array[ij1];

innerfn(solutions);
    }
}
return solutions.GetNumSolutions()>0;
}
static inline void polyroots3(IkReal rawcoeffs[3+1], IkReal rawroots[3], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots2(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[3];
    const int maxsteps = 110;
    for(int i = 0; i < 3; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[3];
    IkReal err[3];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 3; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 3; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 3; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 3; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    // sort roots hoping that it solution indices become more robust to slight change in coeffs
    std::sort(roots, roots+3, ComplexLess<IkReal>());

    numroots = 0;
    bool visited[3] = {false};
    for(int i = 0; i < 3; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 3; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && (abs(imag(roots[i])-imag(roots[j])) < 0.002 || abs(imag(roots[i])+imag(roots[j])) < 0.002) && abs(imag(roots[i])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots2(IkReal rawcoeffs[2+1], IkReal rawroots[2], int& numroots) {
    IkReal det = rawcoeffs[1]*rawcoeffs[1]-4*rawcoeffs[0]*rawcoeffs[2];
    if( det < 0 ) {
        numroots=0;
    }
    else if( det == 0 ) {
        rawroots[0] = -0.5*rawcoeffs[1]/rawcoeffs[0];
        numroots = 1;
    }
    else {
        det = IKsqrt(det);
        rawroots[0] = (-rawcoeffs[1]+det)/(2*rawcoeffs[0]);
        rawroots[1] = (-rawcoeffs[1]-det)/(2*rawcoeffs[0]);//rawcoeffs[2]/(rawcoeffs[0]*rawroots[0]);
        numroots = 2;
    }
}
static inline void polyroots5(IkReal rawcoeffs[5+1], IkReal rawroots[5], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots4(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[5];
    const int maxsteps = 110;
    for(int i = 0; i < 5; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[5];
    IkReal err[5];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 5; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 5; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 5; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 5; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    // sort roots hoping that it solution indices become more robust to slight change in coeffs
    std::sort(roots, roots+5, ComplexLess<IkReal>());

    numroots = 0;
    bool visited[5] = {false};
    for(int i = 0; i < 5; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 5; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && (abs(imag(roots[i])-imag(roots[j])) < 0.002 || abs(imag(roots[i])+imag(roots[j])) < 0.002) && abs(imag(roots[i])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots4(IkReal rawcoeffs[4+1], IkReal rawroots[4], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots3(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[4];
    const int maxsteps = 110;
    for(int i = 0; i < 4; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[4];
    IkReal err[4];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 4; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 4; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 4; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 4; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    // sort roots hoping that it solution indices become more robust to slight change in coeffs
    std::sort(roots, roots+4, ComplexLess<IkReal>());

    numroots = 0;
    bool visited[4] = {false};
    for(int i = 0; i < 4; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 4; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && (abs(imag(roots[i])-imag(roots[j])) < 0.002 || abs(imag(roots[i])+imag(roots[j])) < 0.002) && abs(imag(roots[i])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots6(IkReal rawcoeffs[6+1], IkReal rawroots[6], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots5(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[6];
    const int maxsteps = 110;
    for(int i = 0; i < 6; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[6];
    IkReal err[6];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 6; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 6; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 6; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 6; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    // sort roots hoping that it solution indices become more robust to slight change in coeffs
    std::sort(roots, roots+6, ComplexLess<IkReal>());

    numroots = 0;
    bool visited[6] = {false};
    for(int i = 0; i < 6; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 6; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && (abs(imag(roots[i])-imag(roots[j])) < 0.002 || abs(imag(roots[i])+imag(roots[j])) < 0.002) && abs(imag(roots[i])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
inline void innerfn(IkSolutionListBase<IkReal>& solutions) {
for(int fniter = 0; fniter < 1; ++fniter) {
{
IkReal j5eval[2];
j5eval[0]=((1.0)+(((-1.0)*(r22*r22))));
j5eval[1]=((r20*r20)+(r21*r21));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((r20*r20)+(r21*r21));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x605=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x605);
rxp1_0=(pz*r11);
rxp1_1=(r01*x605);
j4eval[0]=cj3;
j4eval[1]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x606=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x606);
rxp1_0=(pz*r11);
rxp1_1=(r01*x606);
j4eval[0]=r22;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x607=IKPowWithIntegerCheck(r22,-1);
if(!x607.valid){
continue;
}
CheckValue<IkReal> x608=IKPowWithIntegerCheck(sj3,-1);
if(!x608.valid){
continue;
}
sj4array[0]=((-1.0)*(x607.value)*(x608.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
evalcond[1]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*cj3*r22*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x609=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x609);
rxp1_0=(pz*r11);
rxp1_1=(r01*x609);
IkReal x610=((16.0)*r11);
IkReal x611=(sj3*sj4);
IkReal x612=((12.0)*r02);
IkReal x613=((4.0)*r10);
IkReal x614=(cj4*sj3);
IkReal x615=((4.0)*cj3);
IkReal x616=((8.0)*r11);
IkReal x617=(cj1*sj2);
IkReal x618=(r01*sj4);
IkReal x619=(cj4*r12);
IkReal x620=((4.0)*r02);
IkReal x621=(cj2*sj1);
IkReal x622=((8.0)*r01);
IkReal x623=((4.0)*r00);
IkReal x624=((16.0)*r01);
IkReal x625=((16.0)*cj3);
IkReal x626=((8.0)*cj3);
IkReal x627=(r11*x615);
IkReal x628=(r01*x615);
IkReal x629=((4.0)*x614);
IkReal x630=(sj4*x621);
IkReal x631=(x613*x614);
IkReal x632=((12.0)*r12*x611);
IkReal x633=(x611*x612);
IkReal x634=(x614*x623);
IkReal x635=(sj4*x617*x623);
IkReal x636=(x623*x630);
IkReal x637=(cj4*x612*x621);
IkReal x638=(cj4*x612*x617);
IkReal x639=((12.0)*x619*x621);
IkReal x640=((12.0)*x617*x619);
IkReal x641=(sj4*x613*x617);
IkReal x642=(x613*x630);
IkReal x643=(x627+x631);
IkReal x644=(x636+x635);
IkReal x645=(x640+x639);
IkReal x646=(x637+x632+x638);
IkReal x647=(x642+x641+x628+x634);
j5eval[0]=((((0.5)*(IKabs(((((-1.0)*x643))+(((-1.0)*x646))+x644)))))+(((0.5)*(IKabs(((((4.0)*x619*x621))+(((4.0)*x617*x619))+(((-1.0)*x611*x620))+(((-1.0)*x647)))))))+(((0.5)*(IKabs(((((-1.0)*x644))+(((-1.0)*x646))+x643)))))+(((0.5)*(IKabs(((((-1.0)*x633))+x647+x645)))))+(((0.5)*(IKabs(((((-1.0)*x610*x630))+(((-1.0)*x614*x624))+((r00*x625))+(((-1.0)*sj4*x610*x617)))))))+(((0.5)*(IKabs(((((-1.0)*cj4*x617*x620))+(((-1.0)*x643))+(((-4.0)*r12*x611))+x644+(((-1.0)*cj4*x620*x621)))))))+(((0.5)*(IKabs(((((-1.0)*x633))+(((-1.0)*x647))+x645)))))+(((0.5)*(IKabs(((((-1.0)*x610*x614))+(((16.0)*x618*x621))+((r10*x625))+(((16.0)*x617*x618)))))))+(IKabs(((((-1.0)*x614*x616))+(((8.0)*x618*x621))+((r10*x626))+(((8.0)*x617*x618)))))+(IKabs(((((-1.0)*sj4*x616*x617))+(((-1.0)*x614*x622))+((r00*x626))+(((-1.0)*x616*x630))))));
if( IKabs(j5eval[0]) < 0.0000000100000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j5evalpoly[1];
IkReal x648=((4.0)*cj4);
IkReal x649=((4.0)*sj4);
IkReal x650=(r12*sj3);
IkReal x651=((12.0)*cj4);
IkReal x652=(cj1*sj2);
IkReal x653=(cj3*r10);
IkReal x654=(cj2*sj1);
IkReal x655=(r01*sj4);
IkReal x656=((4.0)*cj3*r11);
IkReal x657=(r02*x652);
IkReal x658=(cj4*r11*sj3);
IkReal x659=(r10*sj3*x648);
IkReal x660=((12.0)*sj4*x650);
IkReal x661=(x649*x650);
IkReal x662=(r00*x649*x652);
IkReal x663=(r02*x651*x654);
IkReal x664=(x651*x657);
IkReal x665=(r00*x649*x654);
IkReal x666=(r02*x648*x654);
IkReal x667=(x648*x657);
IkReal x668=(x656+x659);
IkReal x669=(x662+x665);
IkReal x670=(x660+x663+x664);
IkReal x671=(x661+x667+x666);
IkReal x672=((((8.0)*x652*x655))+(((8.0)*x654*x655))+(((-8.0)*x658))+(((8.0)*x653)));
op[0]=((((-1.0)*x668))+x669+(((-1.0)*x671)));
op[1]=x672;
op[2]=((((-1.0)*x668))+x669+(((-1.0)*x670)));
op[3]=((((-16.0)*x658))+(((16.0)*x653))+(((16.0)*x654*x655))+(((16.0)*x652*x655)));
op[4]=((((-1.0)*x669))+x668+(((-1.0)*x670)));
op[5]=x672;
op[6]=((((-1.0)*x669))+x668+(((-1.0)*x671)));
polyroots6(op,zeror,numroots);
IkReal j5array[6], cj5array[6], sj5array[6], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[6]={true,true,true,true,true,true};
_nj5 = 6;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

IkReal x673=(cj4*sj3);
IkReal x674=((8.0)*r11);
IkReal x675=((4.0)*r10);
IkReal x676=((16.0)*r11);
IkReal x677=(cj3*r00);
IkReal x678=((4.0)*cj3*r01);
IkReal x679=(r02*sj3*sj4);
IkReal x680=(cj2*sj1*sj4);
IkReal x681=(cj1*sj2*sj4);
IkReal x682=((4.0)*r00*x673);
IkReal x683=((12.0)*x679);
IkReal x684=((4.0)*x679);
IkReal x685=(cj1*cj4*r12*sj2);
IkReal x686=(cj2*cj4*r12*sj1);
IkReal x687=(x675*x681);
IkReal x688=(x675*x680);
IkReal x689=((4.0)*x685);
IkReal x690=((4.0)*x686);
IkReal x691=((12.0)*x686);
IkReal x692=((12.0)*x685);
IkReal x693=(x689+x690);
IkReal x694=(x691+x692);
IkReal x695=((((8.0)*x677))+(((-1.0)*x674*x680))+(((-1.0)*x674*x681))+(((-8.0)*r01*x673)));
IkReal x696=(x678+x688+x682+x687);
j5evalpoly[0]=((((htj5*htj5)*(((((-1.0)*x683))+x694+x696))))+(((htj5*htj5*htj5)*(((((-16.0)*r01*x673))+(((16.0)*x677))+(((-1.0)*x676*x681))+(((-1.0)*x676*x680))))))+(((-1.0)*x684))+((x695*(htj5*htj5*htj5*htj5*htj5)))+(((htj5*htj5*htj5*htj5*htj5*htj5)*(((((-1.0)*x684))+x693+(((-1.0)*x696))))))+(((htj5*htj5*htj5*htj5)*(((((-1.0)*x683))+x694+(((-1.0)*x696))))))+x696+x693+((htj5*x695)));
if( IKabs(j5evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x697=(cj5*sj4);
IkReal x698=(sj4*sj5);
if( IKabs((((r00*x697))+(((-1.0)*r01*x698))+((cj4*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r10*x697))+((r11*x698))+(((-1.0)*cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r00*x697))+(((-1.0)*r01*x698))+((cj4*r02))))+IKsqr(((((-1.0)*r10*x697))+((r11*x698))+(((-1.0)*cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r00*x697))+(((-1.0)*r01*x698))+((cj4*r02))), ((((-1.0)*r10*x697))+((r11*x698))+(((-1.0)*cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x699=IKsin(j0);
IkReal x700=IKcos(j0);
IkReal x701=((1.0)*cj5);
IkReal x702=(cj3*r11);
IkReal x703=(cj4*sj3);
IkReal x704=((0.11)*sj5);
IkReal x705=((1.0)*cj3);
IkReal x706=(r02*sj4);
IkReal x707=(cj1*cj2);
IkReal x708=((1.0)*sj1);
IkReal x709=(r11*sj5);
IkReal x710=(r01*sj5);
IkReal x711=(r10*sj5);
IkReal x712=(r12*sj4);
IkReal x713=(cj2*sj1);
IkReal x714=((0.11)*cj5);
IkReal x715=(r00*sj5);
IkReal x716=((0.243)*sj1);
IkReal x717=((0.214)*cj1);
IkReal x718=((1.0)*sj3);
IkReal x719=((1.0)*cj4);
IkReal x720=(sj2*x699);
IkReal x721=(sj2*x700);
IkReal x722=(cj3*cj4*cj5);
evalcond[0]=(((sj4*x710))+(((-1.0)*r02*x719))+(((-1.0)*r00*sj4*x701))+x699);
evalcond[1]=((((-1.0)*r12*x719))+(((-1.0)*x700))+(((-1.0)*r10*sj4*x701))+((sj4*x709)));
evalcond[2]=((((-1.0)*x717*x721))+(((-1.0)*px))+(((-1.0)*r01*x714))+(((-1.0)*r00*x704))+(((-1.0)*x700*x716))+(((0.123)*x699))+(((-0.214)*x700*x713)));
evalcond[3]=((((-1.0)*r11*x714))+(((-0.214)*x699*x713))+(((-0.123)*x700))+(((-1.0)*x717*x720))+(((-1.0)*py))+(((-1.0)*r10*x704))+(((-1.0)*x699*x716)));
evalcond[4]=(((cj1*x721))+(((-1.0)*r00*x701*x703))+((x700*x713))+((x703*x710))+((sj3*x706))+(((-1.0)*x705*x715))+(((-1.0)*cj3*r01*x701)));
evalcond[5]=(((cj1*x720))+(((-1.0)*r10*x701*x703))+((x703*x709))+((sj3*x712))+(((-1.0)*x705*x711))+(((-1.0)*x701*x702))+((x699*x713)));
evalcond[6]=(((x700*x707))+((r00*x722))+(((-1.0)*x705*x706))+(((-1.0)*cj4*x705*x710))+(((-1.0)*r01*sj3*x701))+(((-1.0)*x708*x721))+(((-1.0)*x715*x718)));
evalcond[7]=(((r10*x722))+(((-1.0)*x711*x718))+(((-1.0)*r11*sj3*x701))+(((-1.0)*x705*x712))+(((-1.0)*sj5*x702*x719))+(((-1.0)*x708*x720))+((x699*x707)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x723=IKPowWithIntegerCheck(cj3,-1);
if(!x723.valid){
continue;
}
CheckValue<IkReal> x724=IKPowWithIntegerCheck(r22,-1);
if(!x724.valid){
continue;
}
sj4array[0]=((x723.value)*(x724.value)*((((cj2*sj1))+((cj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
evalcond[1]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*sj3*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x725=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x725);
rxp1_0=(pz*r11);
rxp1_1=(r01*x725);
IkReal x726=((16.0)*r11);
IkReal x727=(sj3*sj4);
IkReal x728=((12.0)*r02);
IkReal x729=((4.0)*r10);
IkReal x730=(cj4*sj3);
IkReal x731=((4.0)*cj3);
IkReal x732=((8.0)*r11);
IkReal x733=(cj1*sj2);
IkReal x734=(r01*sj4);
IkReal x735=(cj4*r12);
IkReal x736=((4.0)*r02);
IkReal x737=(cj2*sj1);
IkReal x738=((8.0)*r01);
IkReal x739=((4.0)*r00);
IkReal x740=((16.0)*r01);
IkReal x741=((16.0)*cj3);
IkReal x742=((8.0)*cj3);
IkReal x743=(r11*x731);
IkReal x744=(r01*x731);
IkReal x745=((4.0)*x730);
IkReal x746=(sj4*x737);
IkReal x747=(x729*x730);
IkReal x748=((12.0)*r12*x727);
IkReal x749=(x727*x728);
IkReal x750=(x730*x739);
IkReal x751=(sj4*x733*x739);
IkReal x752=(x739*x746);
IkReal x753=(cj4*x728*x737);
IkReal x754=(cj4*x728*x733);
IkReal x755=((12.0)*x735*x737);
IkReal x756=((12.0)*x733*x735);
IkReal x757=(sj4*x729*x733);
IkReal x758=(x729*x746);
IkReal x759=(x747+x743);
IkReal x760=(x751+x752);
IkReal x761=(x755+x756);
IkReal x762=(x754+x753+x748);
IkReal x763=(x757+x750+x758+x744);
j5eval[0]=((((0.5)*(IKabs(((((16.0)*x733*x734))+((r10*x741))+(((16.0)*x734*x737))+(((-1.0)*x726*x730)))))))+(((0.5)*(IKabs(((((-1.0)*x730*x740))+(((-1.0)*x726*x746))+((r00*x741))+(((-1.0)*sj4*x726*x733)))))))+(((0.5)*(IKabs((x761+x763+(((-1.0)*x749)))))))+(IKabs(((((-1.0)*sj4*x732*x733))+(((-1.0)*x732*x746))+(((-1.0)*x730*x738))+((r00*x742)))))+(((0.5)*(IKabs(((((-1.0)*x762))+x760+(((-1.0)*x759)))))))+(((0.5)*(IKabs(((((-1.0)*x727*x736))+(((4.0)*x733*x735))+(((-1.0)*x763))+(((4.0)*x735*x737)))))))+(((0.5)*(IKabs(((((-1.0)*x762))+(((-1.0)*x760))+x759)))))+(((0.5)*(IKabs(((((-4.0)*r12*x727))+(((-1.0)*cj4*x733*x736))+(((-1.0)*cj4*x736*x737))+x760+(((-1.0)*x759)))))))+(((0.5)*(IKabs(((((-1.0)*x763))+x761+(((-1.0)*x749)))))))+(IKabs(((((8.0)*x734*x737))+((r10*x742))+(((8.0)*x733*x734))+(((-1.0)*x730*x732))))));
if( IKabs(j5eval[0]) < 0.0000000100000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j5evalpoly[1];
IkReal x764=((4.0)*cj4);
IkReal x765=((4.0)*sj4);
IkReal x766=(r12*sj3);
IkReal x767=((12.0)*cj4);
IkReal x768=(cj1*sj2);
IkReal x769=(cj3*r10);
IkReal x770=(cj2*sj1);
IkReal x771=(r01*sj4);
IkReal x772=((4.0)*cj3*r11);
IkReal x773=(r02*x768);
IkReal x774=(cj4*r11*sj3);
IkReal x775=(r10*sj3*x764);
IkReal x776=((12.0)*sj4*x766);
IkReal x777=(x765*x766);
IkReal x778=(r00*x765*x768);
IkReal x779=(r02*x767*x770);
IkReal x780=(x767*x773);
IkReal x781=(r00*x765*x770);
IkReal x782=(r02*x764*x770);
IkReal x783=(x764*x773);
IkReal x784=(x772+x775);
IkReal x785=(x778+x781);
IkReal x786=(x776+x779+x780);
IkReal x787=(x777+x782+x783);
IkReal x788=((((8.0)*x769))+(((8.0)*x770*x771))+(((8.0)*x768*x771))+(((-8.0)*x774)));
op[0]=((((-1.0)*x784))+(((-1.0)*x787))+x785);
op[1]=x788;
op[2]=((((-1.0)*x784))+(((-1.0)*x786))+x785);
op[3]=((((-16.0)*x774))+(((16.0)*x768*x771))+(((16.0)*x769))+(((16.0)*x770*x771)));
op[4]=((((-1.0)*x786))+(((-1.0)*x785))+x784);
op[5]=x788;
op[6]=((((-1.0)*x787))+(((-1.0)*x785))+x784);
polyroots6(op,zeror,numroots);
IkReal j5array[6], cj5array[6], sj5array[6], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[6]={true,true,true,true,true,true};
_nj5 = 6;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

IkReal x789=(cj4*sj3);
IkReal x790=((8.0)*r11);
IkReal x791=((4.0)*r10);
IkReal x792=((16.0)*r11);
IkReal x793=(cj3*r00);
IkReal x794=((4.0)*cj3*r01);
IkReal x795=(r02*sj3*sj4);
IkReal x796=(cj2*sj1*sj4);
IkReal x797=(cj1*sj2*sj4);
IkReal x798=((4.0)*r00*x789);
IkReal x799=((12.0)*x795);
IkReal x800=((4.0)*x795);
IkReal x801=(cj1*cj4*r12*sj2);
IkReal x802=(cj2*cj4*r12*sj1);
IkReal x803=(x791*x797);
IkReal x804=(x791*x796);
IkReal x805=((4.0)*x801);
IkReal x806=((4.0)*x802);
IkReal x807=((12.0)*x802);
IkReal x808=((12.0)*x801);
IkReal x809=(x805+x806);
IkReal x810=(x808+x807);
IkReal x811=((((8.0)*x793))+(((-8.0)*r01*x789))+(((-1.0)*x790*x797))+(((-1.0)*x790*x796)));
IkReal x812=(x794+x798+x804+x803);
j5evalpoly[0]=((((htj5*htj5*htj5*htj5)*(((((-1.0)*x799))+(((-1.0)*x812))+x810))))+(((htj5*htj5*htj5*htj5*htj5*htj5)*(((((-1.0)*x812))+x809+(((-1.0)*x800))))))+(((htj5*htj5*htj5)*(((((-16.0)*r01*x789))+(((-1.0)*x792*x797))+(((-1.0)*x792*x796))+(((16.0)*x793))))))+((htj5*x811))+x812+x809+(((-1.0)*x800))+((x811*(htj5*htj5*htj5*htj5*htj5)))+(((htj5*htj5)*(((((-1.0)*x799))+x812+x810)))));
if( IKabs(j5evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x813=(cj5*sj4);
IkReal x814=(sj4*sj5);
if( IKabs((((r00*x813))+(((-1.0)*r01*x814))+((cj4*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r11*x814))+(((-1.0)*r10*x813))+(((-1.0)*cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r00*x813))+(((-1.0)*r01*x814))+((cj4*r02))))+IKsqr((((r11*x814))+(((-1.0)*r10*x813))+(((-1.0)*cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r00*x813))+(((-1.0)*r01*x814))+((cj4*r02))), (((r11*x814))+(((-1.0)*r10*x813))+(((-1.0)*cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x815=IKsin(j0);
IkReal x816=IKcos(j0);
IkReal x817=((1.0)*cj5);
IkReal x818=(cj3*r11);
IkReal x819=(cj4*sj3);
IkReal x820=((0.11)*sj5);
IkReal x821=((1.0)*cj3);
IkReal x822=(r02*sj4);
IkReal x823=(cj1*cj2);
IkReal x824=((1.0)*sj1);
IkReal x825=(r11*sj5);
IkReal x826=(r01*sj5);
IkReal x827=(r10*sj5);
IkReal x828=(r12*sj4);
IkReal x829=(cj2*sj1);
IkReal x830=((0.11)*cj5);
IkReal x831=(r00*sj5);
IkReal x832=((0.243)*sj1);
IkReal x833=((0.214)*cj1);
IkReal x834=((1.0)*sj3);
IkReal x835=((1.0)*cj4);
IkReal x836=(sj2*x815);
IkReal x837=(sj2*x816);
IkReal x838=(cj3*cj4*cj5);
evalcond[0]=((((-1.0)*r02*x835))+(((-1.0)*r00*sj4*x817))+x815+((sj4*x826)));
evalcond[1]=((((-1.0)*r10*sj4*x817))+(((-1.0)*x816))+(((-1.0)*r12*x835))+((sj4*x825)));
evalcond[2]=((((-1.0)*x833*x837))+(((0.123)*x815))+(((-0.214)*x816*x829))+(((-1.0)*px))+(((-1.0)*x816*x832))+(((-1.0)*r01*x830))+(((-1.0)*r00*x820)));
evalcond[3]=((((-1.0)*x833*x836))+(((-0.123)*x816))+(((-1.0)*py))+(((-1.0)*r10*x820))+(((-1.0)*r11*x830))+(((-1.0)*x815*x832))+(((-0.214)*x815*x829)));
evalcond[4]=((((-1.0)*x821*x831))+((sj3*x822))+((x819*x826))+((x816*x829))+(((-1.0)*cj3*r01*x817))+(((-1.0)*r00*x817*x819))+((cj1*x837)));
evalcond[5]=((((-1.0)*r10*x817*x819))+((x815*x829))+(((-1.0)*x817*x818))+((sj3*x828))+((x819*x825))+(((-1.0)*x821*x827))+((cj1*x836)));
evalcond[6]=((((-1.0)*r01*sj3*x817))+((r00*x838))+((x816*x823))+(((-1.0)*x824*x837))+(((-1.0)*x821*x822))+(((-1.0)*cj4*x821*x826))+(((-1.0)*x831*x834)));
evalcond[7]=((((-1.0)*r11*sj3*x817))+(((-1.0)*x827*x834))+((x815*x823))+((r10*x838))+(((-1.0)*x824*x836))+(((-1.0)*x821*x828))+(((-1.0)*sj5*x818*x835)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x839=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x839);
rxp1_0=(pz*r11);
rxp1_1=(r01*x839);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=cj3;
j4eval[1]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x840=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x840);
rxp1_0=(pz*r11);
rxp1_1=(r01*x840);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=r22;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x841=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x841);
rxp1_0=(pz*r11);
rxp1_1=(r01*x841);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=1.0;
j3=0;
j4eval[0]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x842=IKPowWithIntegerCheck(r22,-1);
if(!x842.valid){
continue;
}
sj4array[0]=((x842.value)*((((cj2*sj1))+((cj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x843=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x843);
rxp1_0=(pz*r11);
rxp1_1=(r01*x843);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=1.0;
j3=0;
j5eval[0]=cj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x845 = IKatan2WithCheck(IkReal((cj4*r00)),IkReal(((-1.0)*cj4*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x845.valid){
continue;
}
IkReal x844=x845.value;
j5array[0]=((-1.0)*x844);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x844)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[1];
evalcond[0]=(((cj4*r10*(IKcos(j5))))+(((-1.0)*cj4*r11*(IKsin(j5)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x846=((1.0)*sj4);
if( IKabs((((cj5*r00*sj4))+(((-1.0)*r01*sj5*x846)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj5*r10*x846))+((r11*sj4*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r00*sj4))+(((-1.0)*r01*sj5*x846))))+IKsqr(((((-1.0)*cj5*r10*x846))+((r11*sj4*sj5))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((cj5*r00*sj4))+(((-1.0)*r01*sj5*x846))), ((((-1.0)*cj5*r10*x846))+((r11*sj4*sj5))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x847=IKcos(j0);
IkReal x848=IKsin(j0);
IkReal x849=(r10*sj5);
IkReal x850=(sj4*sj5);
IkReal x851=(cj1*sj2);
IkReal x852=(cj5*r11);
IkReal x853=(cj2*sj1);
IkReal x854=(cj5*r01);
IkReal x855=(r00*sj5);
IkReal x856=((0.243)*sj1);
IkReal x857=((0.214)*x848);
IkReal x858=((0.214)*x847);
IkReal x859=((1.0)*cj5*sj4);
evalcond[0]=((((-1.0)*r00*x859))+x848+((r01*x850)));
evalcond[1]=(((r11*x850))+(((-1.0)*x847))+(((-1.0)*r10*x859)));
evalcond[2]=((((-1.0)*x855))+(((-1.0)*x854))+((x847*x851))+((x847*x853)));
evalcond[3]=(((x848*x851))+((x848*x853))+(((-1.0)*x852))+(((-1.0)*x849)));
evalcond[4]=((((-1.0)*x853*x858))+(((0.123)*x848))+(((-1.0)*x847*x856))+(((-1.0)*px))+(((-0.11)*x854))+(((-0.11)*x855))+(((-1.0)*x851*x858)));
evalcond[5]=((((-1.0)*x853*x857))+(((-0.11)*x849))+(((-0.123)*x847))+(((-1.0)*x848*x856))+(((-1.0)*py))+(((-0.11)*x852))+(((-1.0)*x851*x857)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x860=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x860);
rxp1_0=(pz*r11);
rxp1_1=(r01*x860);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j4eval[0]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x861=IKPowWithIntegerCheck(r22,-1);
if(!x861.valid){
continue;
}
sj4array[0]=((-1.0)*(x861.value)*((((cj2*sj1))+((cj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x862=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x862);
rxp1_0=(pz*r11);
rxp1_1=(r01*x862);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j5eval[0]=cj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x864 = IKatan2WithCheck(IkReal(((-1.0)*cj4*r00)),IkReal((cj4*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x864.valid){
continue;
}
IkReal x863=x864.value;
j5array[0]=((-1.0)*x863);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x863)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[1];
evalcond[0]=(((cj4*r11*(IKsin(j5))))+(((-1.0)*cj4*r10*(IKcos(j5)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x865=((1.0)*sj4);
if( IKabs((((cj5*r00*sj4))+(((-1.0)*r01*sj5*x865)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj5*r10*x865))+((r11*sj4*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r00*sj4))+(((-1.0)*r01*sj5*x865))))+IKsqr(((((-1.0)*cj5*r10*x865))+((r11*sj4*sj5))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((cj5*r00*sj4))+(((-1.0)*r01*sj5*x865))), ((((-1.0)*cj5*r10*x865))+((r11*sj4*sj5))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x866=IKcos(j0);
IkReal x867=IKsin(j0);
IkReal x868=((0.11)*sj5);
IkReal x869=(cj5*r01);
IkReal x870=(sj4*sj5);
IkReal x871=(cj1*sj2);
IkReal x872=(cj2*sj1);
IkReal x873=(cj5*r11);
IkReal x874=((0.243)*sj1);
IkReal x875=((0.214)*x867);
IkReal x876=((0.214)*x866);
IkReal x877=((1.0)*cj5*sj4);
evalcond[0]=(((r01*x870))+(((-1.0)*r00*x877))+x867);
evalcond[1]=(((r11*x870))+(((-1.0)*x866))+(((-1.0)*r10*x877)));
evalcond[2]=(((r00*sj5))+((x866*x871))+((x866*x872))+x869);
evalcond[3]=(((x867*x872))+((x867*x871))+((r10*sj5))+x873);
evalcond[4]=((((-1.0)*x872*x876))+(((-1.0)*x866*x874))+(((-1.0)*x871*x876))+(((-1.0)*r00*x868))+(((0.123)*x867))+(((-1.0)*px))+(((-0.11)*x869)));
evalcond[5]=((((-1.0)*r10*x868))+(((-1.0)*x872*x875))+(((-1.0)*x871*x875))+(((-1.0)*py))+(((-1.0)*x867*x874))+(((-0.123)*x866))+(((-0.11)*x873)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x878=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x878);
rxp1_0=(pz*r11);
rxp1_1=(r01*x878);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j4eval[0]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x879=IKPowWithIntegerCheck(r22,-1);
if(!x879.valid){
continue;
}
sj4array[0]=((-1.0)*(x879.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x880=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x880);
rxp1_0=(pz*r11);
rxp1_1=(r01*x880);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j5eval[0]=cj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x882 = IKatan2WithCheck(IkReal(((-1.0)*cj4*r00)),IkReal((cj4*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x882.valid){
continue;
}
IkReal x881=x882.value;
j5array[0]=((-1.0)*x881);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x881)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[1];
evalcond[0]=(((cj4*r11*(IKsin(j5))))+(((-1.0)*cj4*r10*(IKcos(j5)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x883=((1.0)*sj4);
if( IKabs((((cj5*r00*sj4))+(((-1.0)*r01*sj5*x883)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj5*r10*x883))+((r11*sj4*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r00*sj4))+(((-1.0)*r01*sj5*x883))))+IKsqr(((((-1.0)*cj5*r10*x883))+((r11*sj4*sj5))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((cj5*r00*sj4))+(((-1.0)*r01*sj5*x883))), ((((-1.0)*cj5*r10*x883))+((r11*sj4*sj5))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x884=IKcos(j0);
IkReal x885=IKsin(j0);
IkReal x886=(r10*sj5);
IkReal x887=((1.0)*sj2);
IkReal x888=(sj4*sj5);
IkReal x889=(cj1*cj2);
IkReal x890=(cj5*r11);
IkReal x891=(cj5*r01);
IkReal x892=(r00*sj5);
IkReal x893=(sj1*x885);
IkReal x894=(sj1*x884);
IkReal x895=((1.0)*cj5*sj4);
evalcond[0]=(((r01*x888))+x885+(((-1.0)*r00*x895)));
evalcond[1]=(((r11*x888))+(((-1.0)*x884))+(((-1.0)*r10*x895)));
evalcond[2]=((((-1.0)*x892))+(((-1.0)*x891))+((x884*x889))+(((-1.0)*x887*x894)));
evalcond[3]=((((-1.0)*x886))+(((-1.0)*x890))+((x885*x889))+(((-1.0)*x887*x893)));
evalcond[4]=((((-0.11)*x891))+(((-0.11)*x892))+(((-0.243)*x894))+(((0.123)*x885))+(((-1.0)*px)));
evalcond[5]=((((-0.11)*x890))+(((-0.243)*x893))+(((-0.123)*x884))+(((-1.0)*py))+(((-0.11)*x886)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x896=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x896);
rxp1_0=(pz*r11);
rxp1_1=(r01*x896);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j4eval[0]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x897=IKPowWithIntegerCheck(r22,-1);
if(!x897.valid){
continue;
}
sj4array[0]=((x897.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x898=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x898);
rxp1_0=(pz*r11);
rxp1_1=(r01*x898);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j5eval[0]=cj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x900 = IKatan2WithCheck(IkReal((cj4*r00)),IkReal(((-1.0)*cj4*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x900.valid){
continue;
}
IkReal x899=x900.value;
j5array[0]=((-1.0)*x899);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x899)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[1];
evalcond[0]=(((cj4*r10*(IKcos(j5))))+(((-1.0)*cj4*r11*(IKsin(j5)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x901=((1.0)*sj4);
if( IKabs((((cj5*r00*sj4))+(((-1.0)*r01*sj5*x901)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj5*r10*x901))+((r11*sj4*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r00*sj4))+(((-1.0)*r01*sj5*x901))))+IKsqr(((((-1.0)*cj5*r10*x901))+((r11*sj4*sj5))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((cj5*r00*sj4))+(((-1.0)*r01*sj5*x901))), ((((-1.0)*cj5*r10*x901))+((r11*sj4*sj5))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x902=IKcos(j0);
IkReal x903=IKsin(j0);
IkReal x904=((0.11)*sj5);
IkReal x905=(cj5*r01);
IkReal x906=((1.0)*sj2);
IkReal x907=(sj4*sj5);
IkReal x908=(cj1*cj2);
IkReal x909=(cj5*r11);
IkReal x910=(sj1*x903);
IkReal x911=(sj1*x902);
IkReal x912=((1.0)*cj5*sj4);
evalcond[0]=(((r01*x907))+(((-1.0)*r00*x912))+x903);
evalcond[1]=(((r11*x907))+(((-1.0)*x902))+(((-1.0)*r10*x912)));
evalcond[2]=(((r00*sj5))+(((-1.0)*x906*x911))+((x902*x908))+x905);
evalcond[3]=((((-1.0)*x906*x910))+((x903*x908))+((r10*sj5))+x909);
evalcond[4]=((((-0.11)*x905))+(((-0.243)*x911))+(((-1.0)*r00*x904))+(((-1.0)*px))+(((0.123)*x903)));
evalcond[5]=((((-0.11)*x909))+(((-0.123)*x902))+(((-0.243)*x910))+(((-1.0)*py))+(((-1.0)*r10*x904)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4, j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x913=IKPowWithIntegerCheck(r22,-1);
if(!x913.valid){
continue;
}
CheckValue<IkReal> x914=IKPowWithIntegerCheck(sj3,-1);
if(!x914.valid){
continue;
}
sj4array[0]=((-1.0)*(x913.value)*(x914.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
evalcond[1]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*cj3*r22*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x915=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x915);
rxp1_0=(pz*r11);
rxp1_1=(r01*x915);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j5eval[0]=((IKabs(((((8.0)*cj1*r10*sj2*sj3))+(((-8.0)*cj1*cj2*cj3*r10))+(((8.0)*cj3*r10*sj1*sj2))+(((8.0)*cj1*cj3*cj4*r11*sj2))+(((8.0)*cj2*r10*sj1*sj3))+(((8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj4*r11*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r11*sj3)))))+(IKabs(((((4.0)*cj2*cj3*cj4*r00*sj1))+(((4.0)*cj1*cj2*cj3*r01))+(((-4.0)*cj3*r01*sj1*sj2))+(((4.0)*cj1*cj3*cj4*r00*sj2))+(((-4.0)*cj1*r01*sj2*sj3))+(((-4.0)*cj4*r00*sj1*sj2*sj3))+(((-4.0)*cj2*r01*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r00*sj3)))))+(IKabs(((((8.0)*cj2*cj3*cj4*r01*sj1))+(((8.0)*cj1*r00*sj2*sj3))+(((8.0)*cj2*r00*sj1*sj3))+(((8.0)*cj3*r00*sj1*sj2))+(((-8.0)*cj4*r01*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r01*sj3))+(((8.0)*cj1*cj3*cj4*r01*sj2))+(((-8.0)*cj1*cj2*cj3*r00)))))+(((0.5)*(IKabs(((((-4.0)*cj1*cj3*cj4*r00*sj2))+(((-4.0)*cj1*cj2*cj4*r00*sj3))+(((4.0)*cj1*r01*sj2*sj3))+(((4.0)*cj3*r01*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r01))+(((4.0)*cj2*r01*sj1*sj3))+(((4.0)*cj4*r00*sj1*sj2*sj3))+(((-4.0)*cj2*cj3*cj4*r00*sj1)))))))+(((0.5)*(IKabs(((((16.0)*cj2*cj3*cj4*r11*sj1))+(((-16.0)*cj4*r11*sj1*sj2*sj3))+(((16.0)*cj1*r10*sj2*sj3))+(((-16.0)*cj1*cj2*cj3*r10))+(((16.0)*cj1*cj3*cj4*r11*sj2))+(((16.0)*cj3*r10*sj1*sj2))+(((16.0)*cj2*r10*sj1*sj3))+(((16.0)*cj1*cj2*cj4*r11*sj3)))))))+(((0.5)*(IKabs(((((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3)))))))+(IKabs(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3)))))+(((0.5)*(IKabs(((((16.0)*cj2*cj3*cj4*r01*sj1))+(((16.0)*cj1*r00*sj2*sj3))+(((16.0)*cj2*r00*sj1*sj3))+(((16.0)*cj1*cj3*cj4*r01*sj2))+(((-16.0)*cj1*cj2*cj3*r00))+(((16.0)*cj1*cj2*cj4*r01*sj3))+(((-16.0)*cj4*r01*sj1*sj2*sj3))+(((16.0)*cj3*r00*sj1*sj2))))))));
if( IKabs(j5eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j0, j5]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j5evalpoly[1];
IkReal x916=((4.0)*r01);
IkReal x917=((16.0)*r00);
IkReal x918=(cj3*sj2);
IkReal x919=((8.0)*r00);
IkReal x920=(cj2*cj3);
IkReal x921=(cj4*r01);
IkReal x922=((16.0)*cj1);
IkReal x923=((8.0)*sj1);
IkReal x924=((16.0)*sj1);
IkReal x925=((8.0)*cj1);
IkReal x926=(sj2*sj3);
IkReal x927=(cj2*sj3);
IkReal x928=(sj1*x927);
IkReal x929=((4.0)*cj4*r00);
IkReal x930=(((x916*x928))+((cj1*x916*x926))+((sj1*x916*x918))+((sj1*x926*x929)));
IkReal x931=(((cj1*x927*x929))+((cj1*x916*x920))+((cj1*x918*x929))+((sj1*x920*x929)));
IkReal x932=(x931+(((-1.0)*x930)));
IkReal x933=(((x919*x928))+((x918*x921*x925))+((x920*x921*x923))+((cj1*x919*x926))+((sj1*x918*x919))+(((-1.0)*x921*x923*x926))+((x921*x925*x927))+(((-1.0)*cj1*x919*x920)));
IkReal x934=(x930+(((-1.0)*x931)));
op[0]=x932;
op[1]=x933;
op[2]=x932;
op[3]=(((x918*x921*x922))+((cj1*x917*x926))+((x920*x921*x924))+(((-1.0)*x921*x924*x926))+((x917*x928))+((x921*x922*x927))+(((-1.0)*cj1*x917*x920))+((sj1*x917*x918)));
op[4]=x934;
op[5]=x933;
op[6]=x934;
polyroots6(op,zeror,numroots);
IkReal j5array[6], cj5array[6], sj5array[6], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[6]={true,true,true,true,true,true};
_nj5 = 6;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

j5evalpoly[0]=((((htj5*htj5*htj5*htj5*htj5*htj5)*(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3))))))+(((htj5*htj5*htj5*htj5*htj5)*(((((8.0)*cj1*r10*sj2*sj3))+(((-8.0)*cj1*cj2*cj3*r10))+(((8.0)*cj3*r10*sj1*sj2))+(((8.0)*cj1*cj3*cj4*r11*sj2))+(((8.0)*cj2*r10*sj1*sj3))+(((8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj4*r11*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r11*sj3))))))+(((htj5*htj5*htj5)*(((((16.0)*cj2*cj3*cj4*r11*sj1))+(((-16.0)*cj4*r11*sj1*sj2*sj3))+(((16.0)*cj1*r10*sj2*sj3))+(((-16.0)*cj1*cj2*cj3*r10))+(((16.0)*cj1*cj3*cj4*r11*sj2))+(((16.0)*cj3*r10*sj1*sj2))+(((16.0)*cj2*r10*sj1*sj3))+(((16.0)*cj1*cj2*cj4*r11*sj3))))))+(((htj5*htj5*htj5*htj5)*(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3))))))+(((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((htj5*htj5)*(((((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3))))))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3))+((htj5*(((((8.0)*cj1*r10*sj2*sj3))+(((-8.0)*cj1*cj2*cj3*r10))+(((8.0)*cj3*r10*sj1*sj2))+(((8.0)*cj1*cj3*cj4*r11*sj2))+(((8.0)*cj2*r10*sj1*sj3))+(((8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj4*r11*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r11*sj3)))))));
if( IKabs(j5evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x935=((1.0)*sj4);
if( IKabs((((cj5*r00*sj4))+(((-1.0)*r01*sj5*x935)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj5*r10*x935))+((r11*sj4*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r00*sj4))+(((-1.0)*r01*sj5*x935))))+IKsqr(((((-1.0)*cj5*r10*x935))+((r11*sj4*sj5))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((cj5*r00*sj4))+(((-1.0)*r01*sj5*x935))), ((((-1.0)*cj5*r10*x935))+((r11*sj4*sj5))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x936=IKcos(j0);
IkReal x937=IKsin(j0);
IkReal x938=(sj4*sj5);
IkReal x939=(r10*sj5);
IkReal x940=((1.0)*cj4);
IkReal x941=(cj5*sj3);
IkReal x942=((1.0)*sj2);
IkReal x943=((1.0)*cj3);
IkReal x944=(r01*sj5);
IkReal x945=(cj1*cj2);
IkReal x946=(cj5*r01);
IkReal x947=(cj1*sj2);
IkReal x948=(cj4*sj3);
IkReal x949=(cj5*r00);
IkReal x950=(cj3*cj4);
IkReal x951=(r00*sj5);
IkReal x952=((0.214)*cj2);
IkReal x953=(cj5*r11);
IkReal x954=((1.0)*sj3);
IkReal x955=(r11*sj5);
IkReal x956=((1.0)*sj4);
IkReal x957=(cj5*r10);
IkReal x958=(sj1*x937);
IkReal x959=(sj1*x936);
evalcond[0]=(((r01*x938))+(((-1.0)*x949*x956))+x937);
evalcond[1]=((((-1.0)*x956*x957))+(((-1.0)*x936))+((r11*x938)));
evalcond[2]=(((x936*x947))+(((-1.0)*x943*x951))+((cj2*x959))+(((-1.0)*x943*x946))+((x944*x948))+(((-1.0)*r00*x940*x941)));
evalcond[3]=((((-1.0)*x939*x943))+((x937*x947))+(((-1.0)*x943*x953))+((x948*x955))+((cj2*x958))+(((-1.0)*r10*x940*x941)));
evalcond[4]=((((-1.0)*r01*x941))+((x936*x945))+((x949*x950))+(((-1.0)*cj3*x940*x944))+(((-1.0)*x942*x959))+(((-1.0)*x951*x954)));
evalcond[5]=(((x937*x945))+(((-1.0)*cj3*x940*x955))+(((-1.0)*r11*x941))+(((-1.0)*x942*x958))+(((-1.0)*x939*x954))+((x950*x957)));
evalcond[6]=((((-0.243)*x959))+(((0.123)*x937))+(((-1.0)*px))+(((-0.214)*x936*x947))+(((-0.11)*x951))+(((-0.11)*x946))+(((-1.0)*x952*x959)));
evalcond[7]=((((-0.243)*x958))+(((-0.214)*x937*x947))+(((-1.0)*py))+(((-0.123)*x936))+(((-0.11)*x953))+(((-1.0)*x952*x958))+(((-0.11)*x939)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x960=IKPowWithIntegerCheck(cj3,-1);
if(!x960.valid){
continue;
}
CheckValue<IkReal> x961=IKPowWithIntegerCheck(r22,-1);
if(!x961.valid){
continue;
}
sj4array[0]=((x960.value)*(x961.value)*((((cj2*sj1))+((cj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
evalcond[1]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*sj3*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x962=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x962);
rxp1_0=(pz*r11);
rxp1_1=(r01*x962);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j5eval[0]=((IKabs(((((8.0)*cj1*r10*sj2*sj3))+(((-8.0)*cj1*cj2*cj3*r10))+(((8.0)*cj3*r10*sj1*sj2))+(((8.0)*cj1*cj3*cj4*r11*sj2))+(((8.0)*cj2*r10*sj1*sj3))+(((8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj4*r11*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r11*sj3)))))+(IKabs(((((4.0)*cj2*cj3*cj4*r00*sj1))+(((4.0)*cj1*cj2*cj3*r01))+(((-4.0)*cj3*r01*sj1*sj2))+(((4.0)*cj1*cj3*cj4*r00*sj2))+(((-4.0)*cj1*r01*sj2*sj3))+(((-4.0)*cj4*r00*sj1*sj2*sj3))+(((-4.0)*cj2*r01*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r00*sj3)))))+(IKabs(((((8.0)*cj2*cj3*cj4*r01*sj1))+(((8.0)*cj1*r00*sj2*sj3))+(((8.0)*cj2*r00*sj1*sj3))+(((8.0)*cj3*r00*sj1*sj2))+(((-8.0)*cj4*r01*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r01*sj3))+(((8.0)*cj1*cj3*cj4*r01*sj2))+(((-8.0)*cj1*cj2*cj3*r00)))))+(((0.5)*(IKabs(((((-4.0)*cj1*cj3*cj4*r00*sj2))+(((-4.0)*cj1*cj2*cj4*r00*sj3))+(((4.0)*cj1*r01*sj2*sj3))+(((4.0)*cj3*r01*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r01))+(((4.0)*cj2*r01*sj1*sj3))+(((4.0)*cj4*r00*sj1*sj2*sj3))+(((-4.0)*cj2*cj3*cj4*r00*sj1)))))))+(((0.5)*(IKabs(((((16.0)*cj2*cj3*cj4*r11*sj1))+(((-16.0)*cj4*r11*sj1*sj2*sj3))+(((16.0)*cj1*r10*sj2*sj3))+(((-16.0)*cj1*cj2*cj3*r10))+(((16.0)*cj1*cj3*cj4*r11*sj2))+(((16.0)*cj3*r10*sj1*sj2))+(((16.0)*cj2*r10*sj1*sj3))+(((16.0)*cj1*cj2*cj4*r11*sj3)))))))+(((0.5)*(IKabs(((((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3)))))))+(IKabs(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3)))))+(((0.5)*(IKabs(((((16.0)*cj2*cj3*cj4*r01*sj1))+(((16.0)*cj1*r00*sj2*sj3))+(((16.0)*cj2*r00*sj1*sj3))+(((16.0)*cj1*cj3*cj4*r01*sj2))+(((-16.0)*cj1*cj2*cj3*r00))+(((16.0)*cj1*cj2*cj4*r01*sj3))+(((-16.0)*cj4*r01*sj1*sj2*sj3))+(((16.0)*cj3*r00*sj1*sj2))))))));
if( IKabs(j5eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j0, j5]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j5evalpoly[1];
IkReal x963=((4.0)*r01);
IkReal x964=((16.0)*r00);
IkReal x965=(cj3*sj2);
IkReal x966=((8.0)*r00);
IkReal x967=(cj2*cj3);
IkReal x968=(cj4*r01);
IkReal x969=((16.0)*cj1);
IkReal x970=((8.0)*sj1);
IkReal x971=((16.0)*sj1);
IkReal x972=((8.0)*cj1);
IkReal x973=(sj2*sj3);
IkReal x974=(cj2*sj3);
IkReal x975=(sj1*x974);
IkReal x976=((4.0)*cj4*r00);
IkReal x977=(((sj1*x963*x965))+((sj1*x973*x976))+((x963*x975))+((cj1*x963*x973)));
IkReal x978=(((cj1*x963*x967))+((cj1*x974*x976))+((sj1*x967*x976))+((cj1*x965*x976)));
IkReal x979=(x978+(((-1.0)*x977)));
IkReal x980=(((sj1*x965*x966))+(((-1.0)*cj1*x966*x967))+((x965*x968*x972))+((x966*x975))+((x967*x968*x970))+((cj1*x966*x973))+(((-1.0)*x968*x970*x973))+((x968*x972*x974)));
IkReal x981=(x977+(((-1.0)*x978)));
op[0]=x979;
op[1]=x980;
op[2]=x979;
op[3]=(((cj1*x964*x973))+(((-1.0)*cj1*x964*x967))+((x967*x968*x971))+((x964*x975))+(((-1.0)*x968*x971*x973))+((x968*x969*x974))+((x965*x968*x969))+((sj1*x964*x965)));
op[4]=x981;
op[5]=x980;
op[6]=x981;
polyroots6(op,zeror,numroots);
IkReal j5array[6], cj5array[6], sj5array[6], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[6]={true,true,true,true,true,true};
_nj5 = 6;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

j5evalpoly[0]=((((htj5*htj5*htj5*htj5*htj5*htj5)*(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3))))))+(((htj5*htj5*htj5*htj5*htj5)*(((((8.0)*cj1*r10*sj2*sj3))+(((-8.0)*cj1*cj2*cj3*r10))+(((8.0)*cj3*r10*sj1*sj2))+(((8.0)*cj1*cj3*cj4*r11*sj2))+(((8.0)*cj2*r10*sj1*sj3))+(((8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj4*r11*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r11*sj3))))))+(((htj5*htj5*htj5)*(((((16.0)*cj2*cj3*cj4*r11*sj1))+(((-16.0)*cj4*r11*sj1*sj2*sj3))+(((16.0)*cj1*r10*sj2*sj3))+(((-16.0)*cj1*cj2*cj3*r10))+(((16.0)*cj1*cj3*cj4*r11*sj2))+(((16.0)*cj3*r10*sj1*sj2))+(((16.0)*cj2*r10*sj1*sj3))+(((16.0)*cj1*cj2*cj4*r11*sj3))))))+(((htj5*htj5*htj5*htj5)*(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3))))))+(((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((htj5*htj5)*(((((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3))))))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3))+((htj5*(((((8.0)*cj1*r10*sj2*sj3))+(((-8.0)*cj1*cj2*cj3*r10))+(((8.0)*cj3*r10*sj1*sj2))+(((8.0)*cj1*cj3*cj4*r11*sj2))+(((8.0)*cj2*r10*sj1*sj3))+(((8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj4*r11*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r11*sj3)))))));
if( IKabs(j5evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x982=((1.0)*sj4);
if( IKabs((((cj5*r00*sj4))+(((-1.0)*r01*sj5*x982)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj5*r10*x982))+((r11*sj4*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r00*sj4))+(((-1.0)*r01*sj5*x982))))+IKsqr(((((-1.0)*cj5*r10*x982))+((r11*sj4*sj5))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((cj5*r00*sj4))+(((-1.0)*r01*sj5*x982))), ((((-1.0)*cj5*r10*x982))+((r11*sj4*sj5))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x983=IKcos(j0);
IkReal x984=IKsin(j0);
IkReal x985=(sj4*sj5);
IkReal x986=(r10*sj5);
IkReal x987=((1.0)*cj4);
IkReal x988=(cj5*sj3);
IkReal x989=((1.0)*sj2);
IkReal x990=((1.0)*cj3);
IkReal x991=(r01*sj5);
IkReal x992=(cj1*cj2);
IkReal x993=(cj5*r01);
IkReal x994=(cj1*sj2);
IkReal x995=(cj4*sj3);
IkReal x996=(cj5*r00);
IkReal x997=(cj3*cj4);
IkReal x998=(r00*sj5);
IkReal x999=((0.214)*cj2);
IkReal x1000=(cj5*r11);
IkReal x1001=((1.0)*sj3);
IkReal x1002=(r11*sj5);
IkReal x1003=((1.0)*sj4);
IkReal x1004=(cj5*r10);
IkReal x1005=(sj1*x984);
IkReal x1006=(sj1*x983);
evalcond[0]=((((-1.0)*x1003*x996))+((r01*x985))+x984);
evalcond[1]=((((-1.0)*x983))+((r11*x985))+(((-1.0)*x1003*x1004)));
evalcond[2]=(((cj2*x1006))+((x991*x995))+((x983*x994))+(((-1.0)*x990*x998))+(((-1.0)*x990*x993))+(((-1.0)*r00*x987*x988)));
evalcond[3]=(((cj2*x1005))+(((-1.0)*x1000*x990))+((x1002*x995))+(((-1.0)*r10*x987*x988))+(((-1.0)*x986*x990))+((x984*x994)));
evalcond[4]=((((-1.0)*x1006*x989))+((x983*x992))+(((-1.0)*x1001*x998))+(((-1.0)*cj3*x987*x991))+((x996*x997))+(((-1.0)*r01*x988)));
evalcond[5]=((((-1.0)*cj3*x1002*x987))+(((-1.0)*x1005*x989))+(((-1.0)*r11*x988))+(((-1.0)*x1001*x986))+((x1004*x997))+((x984*x992)));
evalcond[6]=((((-0.243)*x1006))+(((-0.11)*x993))+(((-0.11)*x998))+(((-0.214)*x983*x994))+(((-1.0)*px))+(((0.123)*x984))+(((-1.0)*x1006*x999)));
evalcond[7]=((((-0.11)*x1000))+(((-0.243)*x1005))+(((-0.11)*x986))+(((-1.0)*py))+(((-0.214)*x984*x994))+(((-0.123)*x983))+(((-1.0)*x1005*x999)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4, j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x1009 = IKatan2WithCheck(IkReal(((-0.11)*r21)),IkReal(((-0.11)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1009.valid){
continue;
}
IkReal x1007=((1.0)*(x1009.value));
if((((((0.0121)*(r20*r20)))+(((0.0121)*(r21*r21))))) < -0.00001)
continue;
CheckValue<IkReal> x1010=IKPowWithIntegerCheck(IKabs(IKsqrt(((((0.0121)*(r20*r20)))+(((0.0121)*(r21*r21)))))),-1);
if(!x1010.valid){
continue;
}
if( (((x1010.value)*(((((0.243)*cj1))+(((-0.214)*sj1*sj2))+(((0.214)*cj1*cj2))+(((-1.0)*pz)))))) < -1-IKFAST_SINCOS_THRESH || (((x1010.value)*(((((0.243)*cj1))+(((-0.214)*sj1*sj2))+(((0.214)*cj1*cj2))+(((-1.0)*pz)))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x1008=IKasin(((x1010.value)*(((((0.243)*cj1))+(((-0.214)*sj1*sj2))+(((0.214)*cj1*cj2))+(((-1.0)*pz))))));
j5array[0]=((((-1.0)*x1008))+(((-1.0)*x1007)));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+x1008+(((-1.0)*x1007)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];

{
IkReal j4eval[2];
IkReal x1011=cj5*cj5;
IkReal x1012=r21*r21;
IkReal x1013=(cj3*x1011);
IkReal x1014=(((x1013*(r20*r20)))+(((-2.0)*cj3*cj5*r20*r21*sj5))+((cj3*x1012))+((cj3*(r22*r22)))+(((-1.0)*x1012*x1013)));
j4eval[0]=x1014;
j4eval[1]=IKsign(x1014);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x1015=r21*r21;
IkReal x1016=cj5*cj5;
IkReal x1017=((1.0)*sj3);
IkReal x1018=(sj3*x1016);
IkReal x1019=((((-1.0)*x1017*(r22*r22)))+(((-1.0)*x1015*x1017))+((x1015*x1018))+(((-1.0)*x1016*x1017*(r20*r20)))+(((2.0)*cj5*r20*r21*sj3*sj5)));
j4eval[0]=x1019;
j4eval[1]=IKsign(x1019);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
IkReal x1020=cj1*cj1;
IkReal x1021=cj2*cj2;
IkReal x1022=((7.84758167961971)*cj2);
IkReal x1023=((104004.0)*cj2);
IkReal x1024=(cj1*sj1*sj2);
IkReal x1025=(x1020*x1021);
j0eval[0]=((-5.59707236097487)+(((-7.84758167961971)*x1024))+x1020+(((6.91103901003546)*x1025))+(((-6.91103901003546)*cj2*x1024))+(((-1.0)*x1022))+((x1020*x1022))+(((-3.45551950501773)*x1021)));
j0eval[1]=IKsign(((-74178.0)+(((-91592.0)*cj2*x1024))+(((-45796.0)*x1021))+(((-1.0)*x1023))+((x1020*x1023))+(((13253.0)*x1020))+(((-104004.0)*x1024))+(((91592.0)*x1025))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x1026=(((cj2*sj1))+((cj1*sj2)));
j0eval[0]=x1026;
j0eval[1]=IKsign(x1026);
j0eval[2]=((IKabs((((r00*sj5))+((cj5*r01)))))+(IKabs((((cj5*r11))+((r10*sj5))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x1027=cj5*cj5;
IkReal x1028=r21*r21;
IkReal x1029=(cj2*sj1);
IkReal x1030=(cj1*sj2);
IkReal x1031=(r21*sj5);
IkReal x1032=((1.0)*cj5*r20);
IkReal x1033=(x1028+(r22*r22)+((x1027*(r20*r20)))+(((-1.0)*x1027*x1028))+(((-2.0)*cj5*r20*x1031)));
j4eval[0]=x1033;
j4eval[1]=IKsign(x1033);
j4eval[2]=((IKabs((((r22*x1030))+((r22*x1029)))))+(IKabs((((x1030*x1031))+(((-1.0)*x1029*x1032))+((x1029*x1031))+(((-1.0)*x1030*x1032))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj3=0;
cj3=1.0;
j3=0;
j0eval[0]=(((cj2*sj1))+((cj1*sj2)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((8.13008130081301)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-8.13008130081301)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((8.13008130081301)*px))+IKsqr(((-8.13008130081301)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((8.13008130081301)*px), ((-8.13008130081301)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((0.123)*(IKsin(j0))))+(((-1.0)*px)));
evalcond[1]=((((-1.0)*py))+(((-0.123)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1034=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x1034;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x1034);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1035=cj5*cj5;
IkReal x1036=((1.0)*r21);
IkReal x1037=(cj5*sj5);
IkReal x1038=((1.0)*r20);
IkReal x1039=((((-1.0)*r01*x1035*x1036))+((r00*r20*x1035))+((r01*r21))+(((-1.0)*r00*x1036*x1037))+((r02*r22))+(((-1.0)*r01*x1037*x1038)));
j4eval[0]=x1039;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1038))))));
j4eval[2]=IKsign(x1039);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1040=cj5*cj5;
IkReal x1041=(r21*sj5);
IkReal x1042=(r11*r21);
IkReal x1043=((1.0)*cj5*r20);
IkReal x1044=(x1042+(((-1.0)*x1040*x1042))+((r12*r22))+(((-1.0)*r11*sj5*x1043))+(((-1.0)*cj5*r10*x1041))+((r10*r20*x1040)));
j4eval[0]=x1044;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((sj0*x1041))+(((-1.0)*sj0*x1043))))));
j4eval[2]=IKsign(x1044);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1045=cj5*cj5;
IkReal x1046=(r21*sj5);
IkReal x1047=(r11*r21);
IkReal x1048=((1.0)*cj5*r20);
CheckValue<IkReal> x1049=IKPowWithIntegerCheck(IKsign((x1047+((r12*r22))+(((-1.0)*r11*sj5*x1048))+(((-1.0)*x1045*x1047))+(((-1.0)*cj5*r10*x1046))+((r10*r20*x1045)))),-1);
if(!x1049.valid){
continue;
}
CheckValue<IkReal> x1050 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((sj0*x1046))+(((-1.0)*sj0*x1048)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1050.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1049.value)))+(x1050.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1051=IKsin(j4);
IkReal x1052=IKcos(j4);
IkReal x1053=(r11*sj5);
IkReal x1054=(cj5*r00);
IkReal x1055=(cj5*r10);
IkReal x1056=(r21*sj5);
IkReal x1057=(cj5*r20);
IkReal x1058=(r01*sj5);
IkReal x1059=((1.0)*x1052);
IkReal x1060=((1.0)*x1051);
evalcond[0]=((((-1.0)*r22*x1059))+(((-1.0)*x1057*x1060))+((x1051*x1056)));
evalcond[1]=((((-1.0)*r22*x1060))+((x1052*x1057))+(((-1.0)*x1056*x1059)));
evalcond[2]=((((-1.0)*r02*x1059))+sj0+((x1051*x1058))+(((-1.0)*x1054*x1060)));
evalcond[3]=(cj0+(((-1.0)*r02*x1060))+(((-1.0)*x1058*x1059))+((x1052*x1054)));
evalcond[4]=(sj0+((x1052*x1055))+(((-1.0)*r12*x1060))+(((-1.0)*x1053*x1059)));
evalcond[5]=((((-1.0)*r12*x1059))+((x1051*x1053))+(((-1.0)*x1055*x1060))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1061=cj5*cj5;
IkReal x1062=((1.0)*r21);
IkReal x1063=(cj5*sj5);
IkReal x1064=((1.0)*r20);
CheckValue<IkReal> x1065=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x1062*x1063))+((r01*r21))+(((-1.0)*r01*x1061*x1062))+((r02*r22))+((r00*r20*x1061))+(((-1.0)*r01*x1063*x1064)))),-1);
if(!x1065.valid){
continue;
}
CheckValue<IkReal> x1066 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1064)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1066.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1065.value)))+(x1066.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1067=IKsin(j4);
IkReal x1068=IKcos(j4);
IkReal x1069=(r11*sj5);
IkReal x1070=(cj5*r00);
IkReal x1071=(cj5*r10);
IkReal x1072=(r21*sj5);
IkReal x1073=(cj5*r20);
IkReal x1074=(r01*sj5);
IkReal x1075=((1.0)*x1068);
IkReal x1076=((1.0)*x1067);
evalcond[0]=((((-1.0)*x1073*x1076))+(((-1.0)*r22*x1075))+((x1067*x1072)));
evalcond[1]=(((x1068*x1073))+(((-1.0)*r22*x1076))+(((-1.0)*x1072*x1075)));
evalcond[2]=(sj0+(((-1.0)*r02*x1075))+(((-1.0)*x1070*x1076))+((x1067*x1074)));
evalcond[3]=(((x1068*x1070))+(((-1.0)*x1074*x1075))+cj0+(((-1.0)*r02*x1076)));
evalcond[4]=(((x1068*x1071))+sj0+(((-1.0)*r12*x1076))+(((-1.0)*x1069*x1075)));
evalcond[5]=((((-1.0)*r12*x1075))+(((-1.0)*x1071*x1076))+((x1067*x1069))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1077=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x1077.valid){
continue;
}
CheckValue<IkReal> x1078 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1078.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1077.value)))+(x1078.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1079=IKsin(j4);
IkReal x1080=IKcos(j4);
IkReal x1081=(r11*sj5);
IkReal x1082=(cj5*r00);
IkReal x1083=(cj5*r10);
IkReal x1084=(r21*sj5);
IkReal x1085=(cj5*r20);
IkReal x1086=(r01*sj5);
IkReal x1087=((1.0)*x1080);
IkReal x1088=((1.0)*x1079);
evalcond[0]=(((x1079*x1084))+(((-1.0)*x1085*x1088))+(((-1.0)*r22*x1087)));
evalcond[1]=(((x1080*x1085))+(((-1.0)*x1084*x1087))+(((-1.0)*r22*x1088)));
evalcond[2]=(((x1079*x1086))+sj0+(((-1.0)*r02*x1087))+(((-1.0)*x1082*x1088)));
evalcond[3]=(cj0+(((-1.0)*r02*x1088))+((x1080*x1082))+(((-1.0)*x1086*x1087)));
evalcond[4]=(sj0+(((-1.0)*x1081*x1087))+((x1080*x1083))+(((-1.0)*r12*x1088)));
evalcond[5]=(((x1079*x1081))+(((-1.0)*x1083*x1088))+(((-1.0)*cj0))+(((-1.0)*r12*x1087)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((8.13008130081301)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-8.13008130081301)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((8.13008130081301)*px))+IKsqr(((-8.13008130081301)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((8.13008130081301)*px), ((-8.13008130081301)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((0.123)*(IKsin(j0))))+(((-1.0)*px)));
evalcond[1]=((((-1.0)*py))+(((-0.123)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1089=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x1089;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x1089);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1090=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x1090;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1090);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1091=cj5*cj5;
IkReal x1092=((1.0)*r21);
IkReal x1093=(cj5*r20);
IkReal x1094=((((-1.0)*r01*x1091*x1092))+((r01*r21))+((r00*r20*x1091))+(((-1.0)*cj5*r00*sj5*x1092))+((r02*r22))+(((-1.0)*r01*sj5*x1093)));
j4eval[0]=x1094;
j4eval[1]=IKsign(x1094);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*sj0*sj5*x1092))+((sj0*x1093))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1095=cj5*cj5;
IkReal x1096=((1.0)*r21);
IkReal x1097=(cj5*r20);
CheckValue<IkReal> x1098=IKPowWithIntegerCheck(IKsign((((r01*r21))+(((-1.0)*r01*x1095*x1096))+((r00*r20*x1095))+(((-1.0)*cj5*r00*sj5*x1096))+((r02*r22))+(((-1.0)*r01*sj5*x1097)))),-1);
if(!x1098.valid){
continue;
}
CheckValue<IkReal> x1099 = IKatan2WithCheck(IkReal(((((-1.0)*sj0*sj5*x1096))+((sj0*x1097)))),IkReal((r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x1099.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1098.value)))+(x1099.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1100=IKsin(j4);
IkReal x1101=IKcos(j4);
IkReal x1102=((1.0)*cj0);
IkReal x1103=(cj5*r00);
IkReal x1104=(r11*sj5);
IkReal x1105=(cj5*r10);
IkReal x1106=(r21*sj5);
IkReal x1107=(cj5*r20);
IkReal x1108=(r01*sj5);
IkReal x1109=((1.0)*x1101);
IkReal x1110=((1.0)*x1100);
evalcond[0]=((((-1.0)*r22*x1109))+(((-1.0)*x1107*x1110))+((x1100*x1106)));
evalcond[1]=((((-1.0)*r22*x1110))+((x1101*x1107))+(((-1.0)*x1106*x1109)));
evalcond[2]=((((-1.0)*x1103*x1110))+sj0+(((-1.0)*r02*x1109))+((x1100*x1108)));
evalcond[3]=((((-1.0)*r12*x1109))+((x1100*x1104))+(((-1.0)*x1102))+(((-1.0)*x1105*x1110)));
evalcond[4]=(((x1101*x1103))+(((-1.0)*x1108*x1109))+(((-1.0)*r02*x1110))+(((-1.0)*x1102)));
evalcond[5]=((((-1.0)*r12*x1110))+(((-1.0)*sj0))+((x1101*x1105))+(((-1.0)*x1104*x1109)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1111=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x1111.valid){
continue;
}
CheckValue<IkReal> x1112 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1112.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1111.value)))+(x1112.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1113=IKsin(j4);
IkReal x1114=IKcos(j4);
IkReal x1115=((1.0)*cj0);
IkReal x1116=(cj5*r00);
IkReal x1117=(r11*sj5);
IkReal x1118=(cj5*r10);
IkReal x1119=(r21*sj5);
IkReal x1120=(cj5*r20);
IkReal x1121=(r01*sj5);
IkReal x1122=((1.0)*x1114);
IkReal x1123=((1.0)*x1113);
evalcond[0]=(((x1113*x1119))+(((-1.0)*r22*x1122))+(((-1.0)*x1120*x1123)));
evalcond[1]=(((x1114*x1120))+(((-1.0)*r22*x1123))+(((-1.0)*x1119*x1122)));
evalcond[2]=(sj0+(((-1.0)*x1116*x1123))+((x1113*x1121))+(((-1.0)*r02*x1122)));
evalcond[3]=((((-1.0)*r12*x1122))+((x1113*x1117))+(((-1.0)*x1118*x1123))+(((-1.0)*x1115)));
evalcond[4]=(((x1114*x1116))+(((-1.0)*x1121*x1122))+(((-1.0)*r02*x1123))+(((-1.0)*x1115)));
evalcond[5]=(((x1114*x1118))+(((-1.0)*r12*x1123))+(((-1.0)*sj0))+(((-1.0)*x1117*x1122)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1124=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x1124.valid){
continue;
}
CheckValue<IkReal> x1125 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1125.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1124.value)))+(x1125.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1126=IKsin(j4);
IkReal x1127=IKcos(j4);
IkReal x1128=((1.0)*cj0);
IkReal x1129=(cj5*r00);
IkReal x1130=(r11*sj5);
IkReal x1131=(cj5*r10);
IkReal x1132=(r21*sj5);
IkReal x1133=(cj5*r20);
IkReal x1134=(r01*sj5);
IkReal x1135=((1.0)*x1127);
IkReal x1136=((1.0)*x1126);
evalcond[0]=(((x1126*x1132))+(((-1.0)*r22*x1135))+(((-1.0)*x1133*x1136)));
evalcond[1]=((((-1.0)*r22*x1136))+(((-1.0)*x1132*x1135))+((x1127*x1133)));
evalcond[2]=(((x1126*x1134))+sj0+(((-1.0)*r02*x1135))+(((-1.0)*x1129*x1136)));
evalcond[3]=(((x1126*x1130))+(((-1.0)*r12*x1135))+(((-1.0)*x1131*x1136))+(((-1.0)*x1128)));
evalcond[4]=(((x1127*x1129))+(((-1.0)*x1134*x1135))+(((-1.0)*x1128))+(((-1.0)*r02*x1136)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r12*x1136))+(((-1.0)*x1130*x1135))+((x1127*x1131)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-3.27590390681873)*py))+(((1.6581735824638)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-3.27590390681873)*px))+(((-1.6581735824638)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-3.27590390681873)*py))+(((1.6581735824638)*px))))+IKsqr(((((-3.27590390681873)*px))+(((-1.6581735824638)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-3.27590390681873)*py))+(((1.6581735824638)*px))), ((((-3.27590390681873)*px))+(((-1.6581735824638)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1137=IKsin(j0);
IkReal x1138=IKcos(j0);
evalcond[0]=((((-1.0)*px))+(((0.123)*x1137))+(((-0.243)*x1138)));
evalcond[1]=((((-1.0)*py))+(((-0.123)*x1138))+(((-0.243)*x1137)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1139=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x1139;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x1139);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1140=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x1140;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1140);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1141=cj5*cj5;
IkReal x1142=((1.0)*r21);
IkReal x1143=(cj5*r20);
IkReal x1144=((((-1.0)*r01*sj5*x1143))+(((-1.0)*r01*x1141*x1142))+(((-1.0)*cj5*r00*sj5*x1142))+((r01*r21))+((r00*r20*x1141))+((r02*r22)));
j4eval[0]=x1144;
j4eval[1]=IKsign(x1144);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*sj0*sj5*x1142))+((sj0*x1143))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1145=cj5*cj5;
IkReal x1146=((1.0)*r21);
IkReal x1147=(cj5*r20);
CheckValue<IkReal> x1148=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*sj5*x1147))+(((-1.0)*cj5*r00*sj5*x1146))+((r01*r21))+((r00*r20*x1145))+((r02*r22))+(((-1.0)*r01*x1145*x1146)))),-1);
if(!x1148.valid){
continue;
}
CheckValue<IkReal> x1149 = IKatan2WithCheck(IkReal(((((-1.0)*sj0*sj5*x1146))+((sj0*x1147)))),IkReal((r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x1149.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1148.value)))+(x1149.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1150=IKsin(j4);
IkReal x1151=IKcos(j4);
IkReal x1152=((1.0)*cj0);
IkReal x1153=(cj5*r00);
IkReal x1154=(r11*sj5);
IkReal x1155=(cj5*r10);
IkReal x1156=(r21*sj5);
IkReal x1157=(cj5*r20);
IkReal x1158=(r01*sj5);
IkReal x1159=((1.0)*x1151);
IkReal x1160=((1.0)*x1150);
evalcond[0]=(((x1150*x1156))+(((-1.0)*r22*x1159))+(((-1.0)*x1157*x1160)));
evalcond[1]=((((-1.0)*x1156*x1159))+(((-1.0)*r22*x1160))+((x1151*x1157)));
evalcond[2]=(sj0+(((-1.0)*x1153*x1160))+(((-1.0)*r02*x1159))+((x1150*x1158)));
evalcond[3]=((((-1.0)*x1152))+((x1150*x1154))+(((-1.0)*r12*x1159))+(((-1.0)*x1155*x1160)));
evalcond[4]=((((-1.0)*r02*x1160))+(((-1.0)*x1152))+(((-1.0)*x1158*x1159))+((x1151*x1153)));
evalcond[5]=((((-1.0)*x1154*x1159))+(((-1.0)*sj0))+(((-1.0)*r12*x1160))+((x1151*x1155)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1161=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x1161.valid){
continue;
}
CheckValue<IkReal> x1162 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1162.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1161.value)))+(x1162.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1163=IKsin(j4);
IkReal x1164=IKcos(j4);
IkReal x1165=((1.0)*cj0);
IkReal x1166=(cj5*r00);
IkReal x1167=(r11*sj5);
IkReal x1168=(cj5*r10);
IkReal x1169=(r21*sj5);
IkReal x1170=(cj5*r20);
IkReal x1171=(r01*sj5);
IkReal x1172=((1.0)*x1164);
IkReal x1173=((1.0)*x1163);
evalcond[0]=(((x1163*x1169))+(((-1.0)*r22*x1172))+(((-1.0)*x1170*x1173)));
evalcond[1]=(((x1164*x1170))+(((-1.0)*r22*x1173))+(((-1.0)*x1169*x1172)));
evalcond[2]=((((-1.0)*r02*x1172))+sj0+((x1163*x1171))+(((-1.0)*x1166*x1173)));
evalcond[3]=((((-1.0)*x1168*x1173))+((x1163*x1167))+(((-1.0)*r12*x1172))+(((-1.0)*x1165)));
evalcond[4]=((((-1.0)*r02*x1173))+((x1164*x1166))+(((-1.0)*x1171*x1172))+(((-1.0)*x1165)));
evalcond[5]=(((x1164*x1168))+(((-1.0)*sj0))+(((-1.0)*r12*x1173))+(((-1.0)*x1167*x1172)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1174=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x1174.valid){
continue;
}
CheckValue<IkReal> x1175 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1175.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1174.value)))+(x1175.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1176=IKsin(j4);
IkReal x1177=IKcos(j4);
IkReal x1178=((1.0)*cj0);
IkReal x1179=(cj5*r00);
IkReal x1180=(r11*sj5);
IkReal x1181=(cj5*r10);
IkReal x1182=(r21*sj5);
IkReal x1183=(cj5*r20);
IkReal x1184=(r01*sj5);
IkReal x1185=((1.0)*x1177);
IkReal x1186=((1.0)*x1176);
evalcond[0]=(((x1176*x1182))+(((-1.0)*r22*x1185))+(((-1.0)*x1183*x1186)));
evalcond[1]=(((x1177*x1183))+(((-1.0)*r22*x1186))+(((-1.0)*x1182*x1185)));
evalcond[2]=(sj0+((x1176*x1184))+(((-1.0)*x1179*x1186))+(((-1.0)*r02*x1185)));
evalcond[3]=((((-1.0)*x1181*x1186))+((x1176*x1180))+(((-1.0)*x1178))+(((-1.0)*r12*x1185)));
evalcond[4]=(((x1177*x1179))+(((-1.0)*x1184*x1185))+(((-1.0)*x1178))+(((-1.0)*r02*x1186)));
evalcond[5]=((((-1.0)*sj0))+((x1177*x1181))+(((-1.0)*x1180*x1185))+(((-1.0)*r12*x1186)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-3.27590390681873)*py))+(((1.6581735824638)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-3.27590390681873)*px))+(((-1.6581735824638)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-3.27590390681873)*py))+(((1.6581735824638)*px))))+IKsqr(((((-3.27590390681873)*px))+(((-1.6581735824638)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-3.27590390681873)*py))+(((1.6581735824638)*px))), ((((-3.27590390681873)*px))+(((-1.6581735824638)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1187=IKsin(j0);
IkReal x1188=IKcos(j0);
evalcond[0]=((((-0.243)*x1188))+(((0.123)*x1187))+(((-1.0)*px)));
evalcond[1]=((((-0.243)*x1187))+(((-1.0)*py))+(((-0.123)*x1188)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1189=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x1189;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x1189);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1190=cj5*cj5;
IkReal x1191=((1.0)*r21);
IkReal x1192=(cj5*sj5);
IkReal x1193=((1.0)*r20);
IkReal x1194=(((r01*r21))+(((-1.0)*r01*x1192*x1193))+(((-1.0)*r00*x1191*x1192))+(((-1.0)*r01*x1190*x1191))+((r00*r20*x1190))+((r02*r22)));
j4eval[0]=x1194;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1193)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1194);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1195=cj5*cj5;
IkReal x1196=(r21*sj5);
IkReal x1197=(r11*r21);
IkReal x1198=((1.0)*cj5*r20);
IkReal x1199=(x1197+(((-1.0)*cj5*r10*x1196))+(((-1.0)*x1195*x1197))+((r10*r20*x1195))+((r12*r22))+(((-1.0)*r11*sj5*x1198)));
j4eval[0]=x1199;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((sj0*x1196))+(((-1.0)*sj0*x1198))))));
j4eval[2]=IKsign(x1199);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1200=cj5*cj5;
IkReal x1201=(r21*sj5);
IkReal x1202=(r11*r21);
IkReal x1203=((1.0)*cj5*r20);
CheckValue<IkReal> x1204 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*sj0*x1203))+((sj0*x1201)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1204.valid){
continue;
}
CheckValue<IkReal> x1205=IKPowWithIntegerCheck(IKsign((x1202+(((-1.0)*x1200*x1202))+((r12*r22))+((r10*r20*x1200))+(((-1.0)*r11*sj5*x1203))+(((-1.0)*cj5*r10*x1201)))),-1);
if(!x1205.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1204.value)+(((1.5707963267949)*(x1205.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1206=IKsin(j4);
IkReal x1207=IKcos(j4);
IkReal x1208=(r11*sj5);
IkReal x1209=(cj5*r00);
IkReal x1210=(cj5*r10);
IkReal x1211=(r21*sj5);
IkReal x1212=(cj5*r20);
IkReal x1213=(r01*sj5);
IkReal x1214=((1.0)*x1207);
IkReal x1215=((1.0)*x1206);
evalcond[0]=((((-1.0)*r22*x1214))+((x1206*x1211))+(((-1.0)*x1212*x1215)));
evalcond[1]=((((-1.0)*r22*x1215))+((x1207*x1212))+(((-1.0)*x1211*x1214)));
evalcond[2]=((((-1.0)*x1209*x1215))+sj0+(((-1.0)*r02*x1214))+((x1206*x1213)));
evalcond[3]=((((-1.0)*r02*x1215))+cj0+(((-1.0)*x1213*x1214))+((x1207*x1209)));
evalcond[4]=((((-1.0)*x1208*x1214))+sj0+((x1207*x1210))+(((-1.0)*r12*x1215)));
evalcond[5]=((((-1.0)*x1210*x1215))+(((-1.0)*r12*x1214))+((x1206*x1208))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1216=cj5*cj5;
IkReal x1217=((1.0)*r21);
IkReal x1218=(cj5*sj5);
IkReal x1219=((1.0)*r20);
CheckValue<IkReal> x1220 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*cj5*x1219))+((cj0*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1220.valid){
continue;
}
CheckValue<IkReal> x1221=IKPowWithIntegerCheck(IKsign((((r00*r20*x1216))+((r01*r21))+(((-1.0)*r01*x1216*x1217))+(((-1.0)*r01*x1218*x1219))+((r02*r22))+(((-1.0)*r00*x1217*x1218)))),-1);
if(!x1221.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1220.value)+(((1.5707963267949)*(x1221.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1222=IKsin(j4);
IkReal x1223=IKcos(j4);
IkReal x1224=(r11*sj5);
IkReal x1225=(cj5*r00);
IkReal x1226=(cj5*r10);
IkReal x1227=(r21*sj5);
IkReal x1228=(cj5*r20);
IkReal x1229=(r01*sj5);
IkReal x1230=((1.0)*x1223);
IkReal x1231=((1.0)*x1222);
evalcond[0]=((((-1.0)*x1228*x1231))+((x1222*x1227))+(((-1.0)*r22*x1230)));
evalcond[1]=(((x1223*x1228))+(((-1.0)*x1227*x1230))+(((-1.0)*r22*x1231)));
evalcond[2]=((((-1.0)*x1225*x1231))+sj0+((x1222*x1229))+(((-1.0)*r02*x1230)));
evalcond[3]=(cj0+((x1223*x1225))+(((-1.0)*x1229*x1230))+(((-1.0)*r02*x1231)));
evalcond[4]=(sj0+(((-1.0)*x1224*x1230))+((x1223*x1226))+(((-1.0)*r12*x1231)));
evalcond[5]=((((-1.0)*x1226*x1231))+(((-1.0)*r12*x1230))+((x1222*x1224))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1232=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x1232.valid){
continue;
}
CheckValue<IkReal> x1233 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1233.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1232.value)))+(x1233.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1234=IKsin(j4);
IkReal x1235=IKcos(j4);
IkReal x1236=(r11*sj5);
IkReal x1237=(cj5*r00);
IkReal x1238=(cj5*r10);
IkReal x1239=(r21*sj5);
IkReal x1240=(cj5*r20);
IkReal x1241=(r01*sj5);
IkReal x1242=((1.0)*x1235);
IkReal x1243=((1.0)*x1234);
evalcond[0]=(((x1234*x1239))+(((-1.0)*r22*x1242))+(((-1.0)*x1240*x1243)));
evalcond[1]=((((-1.0)*x1239*x1242))+(((-1.0)*r22*x1243))+((x1235*x1240)));
evalcond[2]=((((-1.0)*r02*x1242))+sj0+(((-1.0)*x1237*x1243))+((x1234*x1241)));
evalcond[3]=((((-1.0)*r02*x1243))+cj0+((x1235*x1237))+(((-1.0)*x1241*x1242)));
evalcond[4]=(sj0+((x1235*x1238))+(((-1.0)*x1236*x1242))+(((-1.0)*r12*x1243)));
evalcond[5]=(((x1234*x1236))+(((-1.0)*r12*x1242))+(((-1.0)*x1238*x1243))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((8.13008130081301)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-8.13008130081301)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((8.13008130081301)*px))+IKsqr(((-8.13008130081301)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((8.13008130081301)*px), ((-8.13008130081301)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((0.123)*(IKsin(j0))))+(((-1.0)*px)));
evalcond[1]=((((-1.0)*py))+(((-0.123)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1244=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x1244;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x1244);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1245=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x1245;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1245);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1246=cj5*cj5;
IkReal x1247=((1.0)*r21);
IkReal x1248=(cj5*r20);
IkReal x1249=((((-1.0)*r01*sj5*x1248))+((r01*r21))+(((-1.0)*cj5*r00*sj5*x1247))+(((-1.0)*r01*x1246*x1247))+((r00*r20*x1246))+((r02*r22)));
j4eval[0]=x1249;
j4eval[1]=IKsign(x1249);
j4eval[2]=((IKabs(((((-1.0)*sj0*sj5*x1247))+((sj0*x1248)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1250=cj5*cj5;
IkReal x1251=((1.0)*r21);
IkReal x1252=(cj5*r20);
CheckValue<IkReal> x1253=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r00*sj5*x1251))+((r00*r20*x1250))+((r01*r21))+(((-1.0)*r01*sj5*x1252))+(((-1.0)*r01*x1250*x1251))+((r02*r22)))),-1);
if(!x1253.valid){
continue;
}
CheckValue<IkReal> x1254 = IKatan2WithCheck(IkReal((((sj0*x1252))+(((-1.0)*sj0*sj5*x1251)))),IkReal((r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x1254.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1253.value)))+(x1254.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1255=IKsin(j4);
IkReal x1256=IKcos(j4);
IkReal x1257=((1.0)*cj0);
IkReal x1258=(cj5*r00);
IkReal x1259=(r11*sj5);
IkReal x1260=(cj5*r10);
IkReal x1261=(r21*sj5);
IkReal x1262=(cj5*r20);
IkReal x1263=(r01*sj5);
IkReal x1264=((1.0)*x1256);
IkReal x1265=((1.0)*x1255);
evalcond[0]=((((-1.0)*r22*x1264))+(((-1.0)*x1262*x1265))+((x1255*x1261)));
evalcond[1]=((((-1.0)*x1261*x1264))+(((-1.0)*r22*x1265))+((x1256*x1262)));
evalcond[2]=((((-1.0)*x1258*x1265))+sj0+((x1255*x1263))+(((-1.0)*r02*x1264)));
evalcond[3]=((((-1.0)*x1257))+(((-1.0)*r12*x1264))+(((-1.0)*x1260*x1265))+((x1255*x1259)));
evalcond[4]=((((-1.0)*x1257))+(((-1.0)*x1263*x1264))+((x1256*x1258))+(((-1.0)*r02*x1265)));
evalcond[5]=((((-1.0)*r12*x1265))+(((-1.0)*sj0))+((x1256*x1260))+(((-1.0)*x1259*x1264)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1266=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x1266.valid){
continue;
}
CheckValue<IkReal> x1267 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1267.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1266.value)))+(x1267.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1268=IKsin(j4);
IkReal x1269=IKcos(j4);
IkReal x1270=((1.0)*cj0);
IkReal x1271=(cj5*r00);
IkReal x1272=(r11*sj5);
IkReal x1273=(cj5*r10);
IkReal x1274=(r21*sj5);
IkReal x1275=(cj5*r20);
IkReal x1276=(r01*sj5);
IkReal x1277=((1.0)*x1269);
IkReal x1278=((1.0)*x1268);
evalcond[0]=((((-1.0)*x1275*x1278))+(((-1.0)*r22*x1277))+((x1268*x1274)));
evalcond[1]=(((x1269*x1275))+(((-1.0)*r22*x1278))+(((-1.0)*x1274*x1277)));
evalcond[2]=(sj0+(((-1.0)*x1271*x1278))+(((-1.0)*r02*x1277))+((x1268*x1276)));
evalcond[3]=((((-1.0)*x1270))+(((-1.0)*r12*x1277))+(((-1.0)*x1273*x1278))+((x1268*x1272)));
evalcond[4]=(((x1269*x1271))+(((-1.0)*x1270))+(((-1.0)*x1276*x1277))+(((-1.0)*r02*x1278)));
evalcond[5]=(((x1269*x1273))+(((-1.0)*sj0))+(((-1.0)*r12*x1278))+(((-1.0)*x1272*x1277)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1279=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x1279.valid){
continue;
}
CheckValue<IkReal> x1280 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1280.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1279.value)))+(x1280.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1281=IKsin(j4);
IkReal x1282=IKcos(j4);
IkReal x1283=((1.0)*cj0);
IkReal x1284=(cj5*r00);
IkReal x1285=(r11*sj5);
IkReal x1286=(cj5*r10);
IkReal x1287=(r21*sj5);
IkReal x1288=(cj5*r20);
IkReal x1289=(r01*sj5);
IkReal x1290=((1.0)*x1282);
IkReal x1291=((1.0)*x1281);
evalcond[0]=((((-1.0)*x1288*x1291))+(((-1.0)*r22*x1290))+((x1281*x1287)));
evalcond[1]=((((-1.0)*x1287*x1290))+(((-1.0)*r22*x1291))+((x1282*x1288)));
evalcond[2]=((((-1.0)*x1284*x1291))+sj0+(((-1.0)*r02*x1290))+((x1281*x1289)));
evalcond[3]=((((-1.0)*x1286*x1291))+(((-1.0)*r12*x1290))+(((-1.0)*x1283))+((x1281*x1285)));
evalcond[4]=((((-1.0)*x1289*x1290))+(((-1.0)*r02*x1291))+(((-1.0)*x1283))+((x1282*x1284)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r12*x1291))+((x1282*x1286))+(((-1.0)*x1285*x1290)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((8.13008130081301)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-8.13008130081301)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((8.13008130081301)*px))+IKsqr(((-8.13008130081301)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((8.13008130081301)*px), ((-8.13008130081301)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((0.123)*(IKsin(j0))))+(((-1.0)*px)));
evalcond[1]=((((-1.0)*py))+(((-0.123)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1292=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x1292;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x1292);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1293=cj5*cj5;
IkReal x1294=((1.0)*r21);
IkReal x1295=(cj5*sj5);
IkReal x1296=((1.0)*r20);
IkReal x1297=((((-1.0)*r00*x1294*x1295))+((r01*r21))+((r00*r20*x1293))+((r02*r22))+(((-1.0)*r01*x1295*x1296))+(((-1.0)*r01*x1293*x1294)));
j4eval[0]=x1297;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1296)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1297);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1298=cj5*cj5;
IkReal x1299=(r21*sj5);
IkReal x1300=(r11*r21);
IkReal x1301=((1.0)*cj5*r20);
IkReal x1302=(x1300+(((-1.0)*x1298*x1300))+((r12*r22))+(((-1.0)*cj5*r10*x1299))+((r10*r20*x1298))+(((-1.0)*r11*sj5*x1301)));
j4eval[0]=x1302;
j4eval[1]=((IKabs(((((-1.0)*sj0*x1301))+((sj0*x1299)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x1302);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1303=cj5*cj5;
IkReal x1304=(r21*sj5);
IkReal x1305=(r11*r21);
IkReal x1306=((1.0)*cj5*r20);
CheckValue<IkReal> x1307 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*sj0*x1306))+((sj0*x1304)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1307.valid){
continue;
}
CheckValue<IkReal> x1308=IKPowWithIntegerCheck(IKsign((x1305+((r10*r20*x1303))+(((-1.0)*x1303*x1305))+((r12*r22))+(((-1.0)*r11*sj5*x1306))+(((-1.0)*cj5*r10*x1304)))),-1);
if(!x1308.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1307.value)+(((1.5707963267949)*(x1308.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1309=IKsin(j4);
IkReal x1310=IKcos(j4);
IkReal x1311=(r11*sj5);
IkReal x1312=(cj5*r00);
IkReal x1313=(cj5*r10);
IkReal x1314=(r21*sj5);
IkReal x1315=(cj5*r20);
IkReal x1316=(r01*sj5);
IkReal x1317=((1.0)*x1310);
IkReal x1318=((1.0)*x1309);
evalcond[0]=((((-1.0)*x1315*x1318))+(((-1.0)*r22*x1317))+((x1309*x1314)));
evalcond[1]=(((x1310*x1315))+(((-1.0)*r22*x1318))+(((-1.0)*x1314*x1317)));
evalcond[2]=(sj0+((x1309*x1316))+(((-1.0)*r02*x1317))+(((-1.0)*x1312*x1318)));
evalcond[3]=(((x1310*x1312))+cj0+(((-1.0)*r02*x1318))+(((-1.0)*x1316*x1317)));
evalcond[4]=((((-1.0)*x1311*x1317))+((x1310*x1313))+sj0+(((-1.0)*r12*x1318)));
evalcond[5]=((((-1.0)*x1313*x1318))+((x1309*x1311))+(((-1.0)*r12*x1317))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1319=cj5*cj5;
IkReal x1320=((1.0)*r21);
IkReal x1321=(cj5*sj5);
IkReal x1322=((1.0)*r20);
CheckValue<IkReal> x1323=IKPowWithIntegerCheck(IKsign((((r00*r20*x1319))+(((-1.0)*r01*x1321*x1322))+((r01*r21))+(((-1.0)*r01*x1319*x1320))+((r02*r22))+(((-1.0)*r00*x1320*x1321)))),-1);
if(!x1323.valid){
continue;
}
CheckValue<IkReal> x1324 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1322)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1324.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1323.value)))+(x1324.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1325=IKsin(j4);
IkReal x1326=IKcos(j4);
IkReal x1327=(r11*sj5);
IkReal x1328=(cj5*r00);
IkReal x1329=(cj5*r10);
IkReal x1330=(r21*sj5);
IkReal x1331=(cj5*r20);
IkReal x1332=(r01*sj5);
IkReal x1333=((1.0)*x1326);
IkReal x1334=((1.0)*x1325);
evalcond[0]=((((-1.0)*r22*x1333))+((x1325*x1330))+(((-1.0)*x1331*x1334)));
evalcond[1]=((((-1.0)*r22*x1334))+(((-1.0)*x1330*x1333))+((x1326*x1331)));
evalcond[2]=(sj0+(((-1.0)*x1328*x1334))+((x1325*x1332))+(((-1.0)*r02*x1333)));
evalcond[3]=(cj0+((x1326*x1328))+(((-1.0)*x1332*x1333))+(((-1.0)*r02*x1334)));
evalcond[4]=((((-1.0)*x1327*x1333))+sj0+((x1326*x1329))+(((-1.0)*r12*x1334)));
evalcond[5]=((((-1.0)*x1329*x1334))+((x1325*x1327))+(((-1.0)*r12*x1333))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1335=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x1335.valid){
continue;
}
CheckValue<IkReal> x1336 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1336.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1335.value)))+(x1336.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1337=IKsin(j4);
IkReal x1338=IKcos(j4);
IkReal x1339=(r11*sj5);
IkReal x1340=(cj5*r00);
IkReal x1341=(cj5*r10);
IkReal x1342=(r21*sj5);
IkReal x1343=(cj5*r20);
IkReal x1344=(r01*sj5);
IkReal x1345=((1.0)*x1338);
IkReal x1346=((1.0)*x1337);
evalcond[0]=(((x1337*x1342))+(((-1.0)*r22*x1345))+(((-1.0)*x1343*x1346)));
evalcond[1]=(((x1338*x1343))+(((-1.0)*r22*x1346))+(((-1.0)*x1342*x1345)));
evalcond[2]=((((-1.0)*x1340*x1346))+sj0+(((-1.0)*r02*x1345))+((x1337*x1344)));
evalcond[3]=((((-1.0)*r02*x1346))+cj0+((x1338*x1340))+(((-1.0)*x1344*x1345)));
evalcond[4]=(sj0+(((-1.0)*r12*x1346))+((x1338*x1341))+(((-1.0)*x1339*x1345)));
evalcond[5]=(((x1337*x1339))+(((-1.0)*x1341*x1346))+(((-1.0)*r12*x1345))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((3.27590390681873)*py))+(((1.6581735824638)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((3.27590390681873)*px))+(((-1.6581735824638)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((3.27590390681873)*py))+(((1.6581735824638)*px))))+IKsqr(((((3.27590390681873)*px))+(((-1.6581735824638)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((3.27590390681873)*py))+(((1.6581735824638)*px))), ((((3.27590390681873)*px))+(((-1.6581735824638)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1347=IKsin(j0);
IkReal x1348=IKcos(j0);
evalcond[0]=((((-1.0)*px))+(((0.123)*x1347))+(((0.243)*x1348)));
evalcond[1]=((((-0.123)*x1348))+(((-1.0)*py))+(((0.243)*x1347)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1349=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x1349;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x1349);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1350=cj5*cj5;
IkReal x1351=((1.0)*r21);
IkReal x1352=(cj5*sj5);
IkReal x1353=((1.0)*r20);
IkReal x1354=(((r01*r21))+(((-1.0)*r01*x1350*x1351))+((r00*r20*x1350))+(((-1.0)*r00*x1351*x1352))+((r02*r22))+(((-1.0)*r01*x1352*x1353)));
j4eval[0]=x1354;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1353)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1354);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1355=cj5*cj5;
IkReal x1356=(r21*sj5);
IkReal x1357=(r11*r21);
IkReal x1358=((1.0)*cj5*r20);
IkReal x1359=(x1357+((r10*r20*x1355))+(((-1.0)*cj5*r10*x1356))+((r12*r22))+(((-1.0)*r11*sj5*x1358))+(((-1.0)*x1355*x1357)));
j4eval[0]=x1359;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((sj0*x1356))+(((-1.0)*sj0*x1358))))));
j4eval[2]=IKsign(x1359);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1360=cj5*cj5;
IkReal x1361=(r21*sj5);
IkReal x1362=(r11*r21);
IkReal x1363=((1.0)*cj5*r20);
CheckValue<IkReal> x1364 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((sj0*x1361))+(((-1.0)*sj0*x1363)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1364.valid){
continue;
}
CheckValue<IkReal> x1365=IKPowWithIntegerCheck(IKsign((x1362+((r10*r20*x1360))+(((-1.0)*cj5*r10*x1361))+((r12*r22))+(((-1.0)*r11*sj5*x1363))+(((-1.0)*x1360*x1362)))),-1);
if(!x1365.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1364.value)+(((1.5707963267949)*(x1365.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1366=IKsin(j4);
IkReal x1367=IKcos(j4);
IkReal x1368=(r11*sj5);
IkReal x1369=(cj5*r00);
IkReal x1370=(cj5*r10);
IkReal x1371=(r21*sj5);
IkReal x1372=(cj5*r20);
IkReal x1373=(r01*sj5);
IkReal x1374=((1.0)*x1367);
IkReal x1375=((1.0)*x1366);
evalcond[0]=(((x1366*x1371))+(((-1.0)*r22*x1374))+(((-1.0)*x1372*x1375)));
evalcond[1]=((((-1.0)*x1371*x1374))+(((-1.0)*r22*x1375))+((x1367*x1372)));
evalcond[2]=(sj0+((x1366*x1373))+(((-1.0)*r02*x1374))+(((-1.0)*x1369*x1375)));
evalcond[3]=(((x1367*x1369))+cj0+(((-1.0)*r02*x1375))+(((-1.0)*x1373*x1374)));
evalcond[4]=(sj0+((x1367*x1370))+(((-1.0)*r12*x1375))+(((-1.0)*x1368*x1374)));
evalcond[5]=(((x1366*x1368))+(((-1.0)*x1370*x1375))+(((-1.0)*r12*x1374))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1376=cj5*cj5;
IkReal x1377=((1.0)*r21);
IkReal x1378=(cj5*sj5);
IkReal x1379=((1.0)*r20);
CheckValue<IkReal> x1380=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1376*x1377))+((r00*r20*x1376))+((r01*r21))+(((-1.0)*r00*x1377*x1378))+(((-1.0)*r01*x1378*x1379))+((r02*r22)))),-1);
if(!x1380.valid){
continue;
}
CheckValue<IkReal> x1381 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1379)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1381.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1380.value)))+(x1381.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1382=IKsin(j4);
IkReal x1383=IKcos(j4);
IkReal x1384=(r11*sj5);
IkReal x1385=(cj5*r00);
IkReal x1386=(cj5*r10);
IkReal x1387=(r21*sj5);
IkReal x1388=(cj5*r20);
IkReal x1389=(r01*sj5);
IkReal x1390=((1.0)*x1383);
IkReal x1391=((1.0)*x1382);
evalcond[0]=((((-1.0)*r22*x1390))+(((-1.0)*x1388*x1391))+((x1382*x1387)));
evalcond[1]=((((-1.0)*r22*x1391))+(((-1.0)*x1387*x1390))+((x1383*x1388)));
evalcond[2]=((((-1.0)*x1385*x1391))+sj0+(((-1.0)*r02*x1390))+((x1382*x1389)));
evalcond[3]=((((-1.0)*r02*x1391))+(((-1.0)*x1389*x1390))+cj0+((x1383*x1385)));
evalcond[4]=((((-1.0)*r12*x1391))+(((-1.0)*x1384*x1390))+sj0+((x1383*x1386)));
evalcond[5]=((((-1.0)*r12*x1390))+(((-1.0)*x1386*x1391))+(((-1.0)*cj0))+((x1382*x1384)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1392=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x1392.valid){
continue;
}
CheckValue<IkReal> x1393 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1393.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1392.value)))+(x1393.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1394=IKsin(j4);
IkReal x1395=IKcos(j4);
IkReal x1396=(r11*sj5);
IkReal x1397=(cj5*r00);
IkReal x1398=(cj5*r10);
IkReal x1399=(r21*sj5);
IkReal x1400=(cj5*r20);
IkReal x1401=(r01*sj5);
IkReal x1402=((1.0)*x1395);
IkReal x1403=((1.0)*x1394);
evalcond[0]=((((-1.0)*r22*x1402))+((x1394*x1399))+(((-1.0)*x1400*x1403)));
evalcond[1]=((((-1.0)*x1399*x1402))+(((-1.0)*r22*x1403))+((x1395*x1400)));
evalcond[2]=(sj0+(((-1.0)*r02*x1402))+((x1394*x1401))+(((-1.0)*x1397*x1403)));
evalcond[3]=(cj0+((x1395*x1397))+(((-1.0)*r02*x1403))+(((-1.0)*x1401*x1402)));
evalcond[4]=((((-1.0)*r12*x1403))+sj0+((x1395*x1398))+(((-1.0)*x1396*x1402)));
evalcond[5]=((((-1.0)*r12*x1402))+(((-1.0)*x1398*x1403))+((x1394*x1396))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((3.27590390681873)*py))+(((1.6581735824638)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((3.27590390681873)*px))+(((-1.6581735824638)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((3.27590390681873)*py))+(((1.6581735824638)*px))))+IKsqr(((((3.27590390681873)*px))+(((-1.6581735824638)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((3.27590390681873)*py))+(((1.6581735824638)*px))), ((((3.27590390681873)*px))+(((-1.6581735824638)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1404=IKsin(j0);
IkReal x1405=IKcos(j0);
evalcond[0]=((((0.243)*x1405))+(((0.123)*x1404))+(((-1.0)*px)));
evalcond[1]=((((0.243)*x1404))+(((-1.0)*py))+(((-0.123)*x1405)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1406=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x1406;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x1406);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1407=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x1407;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1407);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1408=cj5*cj5;
IkReal x1409=((1.0)*r21);
IkReal x1410=(cj5*r20);
IkReal x1411=((((-1.0)*r01*sj5*x1410))+(((-1.0)*r01*x1408*x1409))+((r01*r21))+((r00*r20*x1408))+((r02*r22))+(((-1.0)*cj5*r00*sj5*x1409)));
j4eval[0]=x1411;
j4eval[1]=IKsign(x1411);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*sj0*sj5*x1409))+((sj0*x1410))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1412=cj5*cj5;
IkReal x1413=((1.0)*r21);
IkReal x1414=(cj5*r20);
CheckValue<IkReal> x1415=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*sj5*x1414))+(((-1.0)*cj5*r00*sj5*x1413))+((r01*r21))+(((-1.0)*r01*x1412*x1413))+((r00*r20*x1412))+((r02*r22)))),-1);
if(!x1415.valid){
continue;
}
CheckValue<IkReal> x1416 = IKatan2WithCheck(IkReal(((((-1.0)*sj0*sj5*x1413))+((sj0*x1414)))),IkReal((r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x1416.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1415.value)))+(x1416.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1417=IKsin(j4);
IkReal x1418=IKcos(j4);
IkReal x1419=((1.0)*cj0);
IkReal x1420=(cj5*r00);
IkReal x1421=(r11*sj5);
IkReal x1422=(cj5*r10);
IkReal x1423=(r21*sj5);
IkReal x1424=(cj5*r20);
IkReal x1425=(r01*sj5);
IkReal x1426=((1.0)*x1418);
IkReal x1427=((1.0)*x1417);
evalcond[0]=((((-1.0)*x1424*x1427))+(((-1.0)*r22*x1426))+((x1417*x1423)));
evalcond[1]=((((-1.0)*x1423*x1426))+((x1418*x1424))+(((-1.0)*r22*x1427)));
evalcond[2]=(sj0+(((-1.0)*x1420*x1427))+(((-1.0)*r02*x1426))+((x1417*x1425)));
evalcond[3]=((((-1.0)*x1419))+(((-1.0)*r12*x1426))+(((-1.0)*x1422*x1427))+((x1417*x1421)));
evalcond[4]=((((-1.0)*x1419))+(((-1.0)*x1425*x1426))+((x1418*x1420))+(((-1.0)*r02*x1427)));
evalcond[5]=((((-1.0)*x1421*x1426))+(((-1.0)*sj0))+(((-1.0)*r12*x1427))+((x1418*x1422)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1428=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x1428.valid){
continue;
}
CheckValue<IkReal> x1429 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1429.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1428.value)))+(x1429.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1430=IKsin(j4);
IkReal x1431=IKcos(j4);
IkReal x1432=((1.0)*cj0);
IkReal x1433=(cj5*r00);
IkReal x1434=(r11*sj5);
IkReal x1435=(cj5*r10);
IkReal x1436=(r21*sj5);
IkReal x1437=(cj5*r20);
IkReal x1438=(r01*sj5);
IkReal x1439=((1.0)*x1431);
IkReal x1440=((1.0)*x1430);
evalcond[0]=(((x1430*x1436))+(((-1.0)*r22*x1439))+(((-1.0)*x1437*x1440)));
evalcond[1]=((((-1.0)*x1436*x1439))+(((-1.0)*r22*x1440))+((x1431*x1437)));
evalcond[2]=((((-1.0)*x1433*x1440))+sj0+((x1430*x1438))+(((-1.0)*r02*x1439)));
evalcond[3]=((((-1.0)*r12*x1439))+((x1430*x1434))+(((-1.0)*x1432))+(((-1.0)*x1435*x1440)));
evalcond[4]=((((-1.0)*x1438*x1439))+(((-1.0)*x1432))+(((-1.0)*r02*x1440))+((x1431*x1433)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x1434*x1439))+(((-1.0)*r12*x1440))+((x1431*x1435)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1441=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x1441.valid){
continue;
}
CheckValue<IkReal> x1442 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1442.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1441.value)))+(x1442.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1443=IKsin(j4);
IkReal x1444=IKcos(j4);
IkReal x1445=((1.0)*cj0);
IkReal x1446=(cj5*r00);
IkReal x1447=(r11*sj5);
IkReal x1448=(cj5*r10);
IkReal x1449=(r21*sj5);
IkReal x1450=(cj5*r20);
IkReal x1451=(r01*sj5);
IkReal x1452=((1.0)*x1444);
IkReal x1453=((1.0)*x1443);
evalcond[0]=((((-1.0)*r22*x1452))+((x1443*x1449))+(((-1.0)*x1450*x1453)));
evalcond[1]=((((-1.0)*r22*x1453))+(((-1.0)*x1449*x1452))+((x1444*x1450)));
evalcond[2]=(sj0+(((-1.0)*r02*x1452))+(((-1.0)*x1446*x1453))+((x1443*x1451)));
evalcond[3]=(((x1443*x1447))+(((-1.0)*x1448*x1453))+(((-1.0)*x1445))+(((-1.0)*r12*x1452)));
evalcond[4]=(((x1444*x1446))+(((-1.0)*r02*x1453))+(((-1.0)*x1445))+(((-1.0)*x1451*x1452)));
evalcond[5]=(((x1444*x1448))+(((-1.0)*sj0))+(((-1.0)*x1447*x1452))+(((-1.0)*r12*x1453)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1454=(r00*sj5);
IkReal x1455=(cj1*sj2);
IkReal x1456=((243.0)*sj1);
IkReal x1457=(cj5*r01);
IkReal x1458=((1000.0)*px);
IkReal x1459=(cj2*sj1);
CheckValue<IkReal> x1460=IKPowWithIntegerCheck(((((123.0)*x1455))+(((123.0)*x1459))),-1);
if(!x1460.valid){
continue;
}
CheckValue<IkReal> x1461=IKPowWithIntegerCheck((x1455+x1459),-1);
if(!x1461.valid){
continue;
}
if( IKabs(((x1460.value)*((((x1456*x1457))+((x1455*x1458))+((x1454*x1456))+((x1458*x1459))+(((324.0)*x1454*x1455))+(((324.0)*x1454*x1459))+(((324.0)*x1457*x1459))+(((324.0)*x1455*x1457)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1461.value)*((x1454+x1457)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1460.value)*((((x1456*x1457))+((x1455*x1458))+((x1454*x1456))+((x1458*x1459))+(((324.0)*x1454*x1455))+(((324.0)*x1454*x1459))+(((324.0)*x1457*x1459))+(((324.0)*x1455*x1457))))))+IKsqr(((x1461.value)*((x1454+x1457))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x1460.value)*((((x1456*x1457))+((x1455*x1458))+((x1454*x1456))+((x1458*x1459))+(((324.0)*x1454*x1455))+(((324.0)*x1454*x1459))+(((324.0)*x1457*x1459))+(((324.0)*x1455*x1457))))), ((x1461.value)*((x1454+x1457))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x1462=IKcos(j0);
IkReal x1463=IKsin(j0);
IkReal x1464=(r10*sj5);
IkReal x1465=(cj5*r11);
IkReal x1466=(cj2*sj1);
IkReal x1467=(cj5*r01);
IkReal x1468=(r00*sj5);
IkReal x1469=((0.243)*sj1);
IkReal x1470=(cj1*sj2);
IkReal x1471=((0.214)*x1462);
IkReal x1472=((0.214)*x1463);
evalcond[0]=(((x1462*x1470))+((x1462*x1466))+(((-1.0)*x1468))+(((-1.0)*x1467)));
evalcond[1]=(((x1463*x1466))+((x1463*x1470))+(((-1.0)*x1465))+(((-1.0)*x1464)));
evalcond[2]=((((-1.0)*x1470*x1471))+(((-1.0)*x1462*x1469))+(((0.123)*x1463))+(((-1.0)*px))+(((-0.11)*x1468))+(((-0.11)*x1467))+(((-1.0)*x1466*x1471)));
evalcond[3]=((((-1.0)*x1470*x1472))+(((-1.0)*x1463*x1469))+(((-1.0)*py))+(((-0.11)*x1464))+(((-0.11)*x1465))+(((-1.0)*x1466*x1472))+(((-0.123)*x1462)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x1473=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x1473;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x1473);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x1474=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x1474;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1474);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x1475=((1.0)*cj5);
IkReal x1476=((((-1.0)*r21*x1475))+(((-1.0)*r20*sj5)));
j4eval[0]=x1476;
j4eval[1]=((IKabs((((r12*sj0))+((cj0*r02)))))+(IKabs(((((-1.0)*cj0*r00*x1475))+((r11*sj0*sj5))+((cj0*r01*sj5))+(((-1.0)*r10*sj0*x1475))))));
j4eval[2]=IKsign(x1476);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x1477=((-1.0)*r20);
IkReal x1479 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x1479)==0){
continue;
}
IkReal x1478=pow(x1479,-0.5);
CheckValue<IkReal> x1480 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x1477),IKFAST_ATAN2_MAGTHRESH);
if(!x1480.valid){
continue;
}
IkReal gconst78=((-1.0)*(x1480.value));
IkReal gconst79=(r21*x1478);
IkReal gconst80=(x1477*x1478);
CheckValue<IkReal> x1481 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1481.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x1481.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x1482=((-1.0)*r20);
IkReal x1483=x1478;
CheckValue<IkReal> x1485 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x1482),IKFAST_ATAN2_MAGTHRESH);
if(!x1485.valid){
continue;
}
IkReal x1484=((-1.0)*(x1485.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst79;
cj5=gconst80;
j5=x1484;
IkReal gconst78=x1484;
IkReal gconst79=(r21*x1483);
IkReal gconst80=(x1482*x1483);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x1486=((-1.0)*r20);
IkReal x1487=x1478;
CheckValue<IkReal> x1489 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x1486),IKFAST_ATAN2_MAGTHRESH);
if(!x1489.valid){
continue;
}
IkReal x1488=((-1.0)*(x1489.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst79;
cj5=gconst80;
j5=x1488;
IkReal gconst78=x1488;
IkReal gconst79=(r21*x1487);
IkReal gconst80=(x1486*x1487);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x1490=((-1.0)*r20);
IkReal x1491=x1478;
CheckValue<IkReal> x1493 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x1490),IKFAST_ATAN2_MAGTHRESH);
if(!x1493.valid){
continue;
}
IkReal x1492=((-1.0)*(x1493.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst79;
cj5=gconst80;
j5=x1492;
IkReal gconst78=x1492;
IkReal gconst79=(r21*x1491);
IkReal gconst80=(x1490*x1491);
IkReal x1494=r22*r22;
CheckValue<IkReal> x1497=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x1494))),-1);
if(!x1497.valid){
continue;
}
IkReal x1495=x1497.value;
IkReal x1496=(((x1495*(r21*r21*r21*r21)))+((x1495*(r20*r20*r20*r20)))+x1494+(((2.0)*x1495*(r20*r20)*(r21*r21))));
j4eval[0]=x1496;
j4eval[1]=IKsign(x1496);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1498=(gconst79*r21);
IkReal x1499=(cj2*sj1);
IkReal x1500=(cj1*sj2);
IkReal x1501=(gconst80*r20);
CheckValue<IkReal> x1502=IKPowWithIntegerCheck(IKsign(((r22*r22)+(((-2.0)*x1498*x1501))+(x1498*x1498)+(x1501*x1501))),-1);
if(!x1502.valid){
continue;
}
CheckValue<IkReal> x1503 = IKatan2WithCheck(IkReal((((r22*x1500))+((r22*x1499)))),IkReal((((x1498*x1499))+(((-1.0)*x1500*x1501))+((x1498*x1500))+(((-1.0)*x1499*x1501)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1503.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1502.value)))+(x1503.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1504=IKsin(j4);
IkReal x1505=IKcos(j4);
IkReal x1506=(gconst79*r01);
IkReal x1507=(cj1*cj2);
IkReal x1508=(gconst79*r21);
IkReal x1509=(gconst79*r11);
IkReal x1510=((1.0)*cj0);
IkReal x1511=(sj1*sj2);
IkReal x1512=((1.0)*x1505);
IkReal x1513=(gconst80*x1505);
IkReal x1514=((1.0)*x1504);
IkReal x1515=(gconst80*x1514);
evalcond[0]=((((-1.0)*r20*x1515))+(((-1.0)*r22*x1512))+((x1504*x1508)));
evalcond[1]=(sj0+((x1504*x1506))+(((-1.0)*r00*x1515))+(((-1.0)*r02*x1512)));
evalcond[2]=((((-1.0)*x1510))+((x1504*x1509))+(((-1.0)*r10*x1515))+(((-1.0)*r12*x1512)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x1514))+((r20*x1513))+((cj1*sj2))+(((-1.0)*x1508*x1512)));
evalcond[4]=(((cj0*x1507))+(((-1.0)*x1506*x1512))+(((-1.0)*x1510*x1511))+((r00*x1513))+(((-1.0)*r02*x1514)));
evalcond[5]=(((r10*x1513))+((sj0*x1507))+(((-1.0)*sj0*x1511))+(((-1.0)*x1509*x1512))+(((-1.0)*r12*x1514)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1516=IKPowWithIntegerCheck(IKsign((((gconst79*r00))+((gconst80*r01)))),-1);
if(!x1516.valid){
continue;
}
CheckValue<IkReal> x1517 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst79*r21))+(((-1.0)*cj0*gconst80*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1517.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1516.value)))+(x1517.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1518=IKsin(j4);
IkReal x1519=IKcos(j4);
IkReal x1520=(gconst79*r01);
IkReal x1521=(cj1*cj2);
IkReal x1522=(gconst79*r21);
IkReal x1523=(gconst79*r11);
IkReal x1524=((1.0)*cj0);
IkReal x1525=(sj1*sj2);
IkReal x1526=((1.0)*x1519);
IkReal x1527=(gconst80*x1519);
IkReal x1528=((1.0)*x1518);
IkReal x1529=(gconst80*x1528);
evalcond[0]=(((x1518*x1522))+(((-1.0)*r22*x1526))+(((-1.0)*r20*x1529)));
evalcond[1]=(sj0+(((-1.0)*r00*x1529))+((x1518*x1520))+(((-1.0)*r02*x1526)));
evalcond[2]=((((-1.0)*r12*x1526))+((x1518*x1523))+(((-1.0)*x1524))+(((-1.0)*r10*x1529)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x1528))+((r20*x1527))+(((-1.0)*x1522*x1526)));
evalcond[4]=(((cj0*x1521))+(((-1.0)*x1524*x1525))+((r00*x1527))+(((-1.0)*r02*x1528))+(((-1.0)*x1520*x1526)));
evalcond[5]=((((-1.0)*r12*x1528))+((r10*x1527))+((sj0*x1521))+(((-1.0)*sj0*x1525))+(((-1.0)*x1523*x1526)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1530=IKPowWithIntegerCheck(IKsign((((gconst80*r11))+((gconst79*r10)))),-1);
if(!x1530.valid){
continue;
}
CheckValue<IkReal> x1531 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst79*r21*sj0))+(((-1.0)*gconst80*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1531.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1530.value)))+(x1531.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1532=IKsin(j4);
IkReal x1533=IKcos(j4);
IkReal x1534=(gconst79*r01);
IkReal x1535=(cj1*cj2);
IkReal x1536=(gconst79*r21);
IkReal x1537=(gconst79*r11);
IkReal x1538=((1.0)*cj0);
IkReal x1539=(sj1*sj2);
IkReal x1540=((1.0)*x1533);
IkReal x1541=(gconst80*x1533);
IkReal x1542=((1.0)*x1532);
IkReal x1543=(gconst80*x1542);
evalcond[0]=((((-1.0)*r22*x1540))+((x1532*x1536))+(((-1.0)*r20*x1543)));
evalcond[1]=((((-1.0)*r02*x1540))+sj0+((x1532*x1534))+(((-1.0)*r00*x1543)));
evalcond[2]=((((-1.0)*x1538))+((x1532*x1537))+(((-1.0)*r10*x1543))+(((-1.0)*r12*x1540)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x1542))+(((-1.0)*x1536*x1540))+((r20*x1541)));
evalcond[4]=((((-1.0)*r02*x1542))+(((-1.0)*x1534*x1540))+(((-1.0)*x1538*x1539))+((cj0*x1535))+((r00*x1541)));
evalcond[5]=(((sj0*x1535))+(((-1.0)*sj0*x1539))+(((-1.0)*x1537*x1540))+((r10*x1541))+(((-1.0)*r12*x1542)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1544=((-1.0)*r21);
IkReal x1546 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x1546)==0){
continue;
}
IkReal x1545=pow(x1546,-0.5);
CheckValue<IkReal> x1547 = IKatan2WithCheck(IkReal(x1544),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1547.valid){
continue;
}
IkReal gconst81=((3.14159265358979)+(((-1.0)*(x1547.value))));
IkReal gconst82=(x1544*x1545);
IkReal gconst83=((1.0)*r20*x1545);
CheckValue<IkReal> x1548 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1548.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x1548.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x1549=((-1.0)*r21);
CheckValue<IkReal> x1552 = IKatan2WithCheck(IkReal(x1549),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1552.valid){
continue;
}
IkReal x1550=((1.0)*(x1552.value));
IkReal x1551=x1545;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x1550)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x1550)));
IkReal gconst82=(x1549*x1551);
IkReal gconst83=((1.0)*r20*x1551);
IkReal x1553=r22*r22;
IkReal x1554=((1.0)*x1553);
CheckValue<IkReal> x1558=IKPowWithIntegerCheck(((-1.0)+x1553),-1);
if(!x1558.valid){
continue;
}
IkReal x1555=x1558.value;
if((((1.0)+(((-1.0)*x1554)))) < -0.00001)
continue;
IkReal x1556=IKsqrt(((1.0)+(((-1.0)*x1554))));
IkReal x1557=(sj0*x1555*x1556);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs((x1557+(((-1.0)*x1554*x1557))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x1559=((-1.0)*r21);
CheckValue<IkReal> x1562 = IKatan2WithCheck(IkReal(x1559),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1562.valid){
continue;
}
IkReal x1560=((1.0)*(x1562.value));
IkReal x1561=x1545;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x1560)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x1560)));
IkReal gconst82=(x1559*x1561);
IkReal gconst83=((1.0)*r20*x1561);
IkReal x1563=r22*r22;
IkReal x1564=((1.0)*x1563);
CheckValue<IkReal> x1568=IKPowWithIntegerCheck(((-1.0)+x1563),-1);
if(!x1568.valid){
continue;
}
IkReal x1565=x1568.value;
if((((1.0)+(((-1.0)*x1564)))) < -0.00001)
continue;
IkReal x1566=IKsqrt(((1.0)+(((-1.0)*x1564))));
IkReal x1567=(cj0*x1565*x1566);
j4eval[0]=((IKabs((x1567+(((-1.0)*x1564*x1567)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x1569=((-1.0)*r21);
CheckValue<IkReal> x1572 = IKatan2WithCheck(IkReal(x1569),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1572.valid){
continue;
}
IkReal x1570=((1.0)*(x1572.value));
IkReal x1571=x1545;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x1570)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x1570)));
IkReal gconst82=(x1569*x1571);
IkReal gconst83=((1.0)*r20*x1571);
IkReal x1573=r22*r22;
IkReal x1574=(cj0*r02);
IkReal x1575=(r12*sj0);
CheckValue<IkReal> x1579=IKPowWithIntegerCheck(((-1.0)+x1573),-1);
if(!x1579.valid){
continue;
}
IkReal x1576=x1579.value;
if((((1.0)+(((-1.0)*x1573)))) < -0.00001)
continue;
IkReal x1577=IKsqrt(((1.0)+(((-1.0)*x1573))));
IkReal x1578=((1.0)*r22*x1576*x1577);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=((IKabs((x1575+x1574)))+(IKabs(((((-1.0)*x1575*x1578))+(((-1.0)*x1574*x1578))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1580=((1.0)*gconst83);
CheckValue<IkReal> x1581=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst82*r20))+(((-1.0)*r21*x1580)))),-1);
if(!x1581.valid){
continue;
}
CheckValue<IkReal> x1582 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*cj0*r00*x1580))+(((-1.0)*r10*sj0*x1580))+((gconst82*r11*sj0))+((cj0*gconst82*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1582.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1581.value)))+(x1582.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1583=IKsin(j4);
IkReal x1584=IKcos(j4);
IkReal x1585=(cj1*cj2);
IkReal x1586=(gconst82*r11);
IkReal x1587=((1.0)*cj0);
IkReal x1588=(sj1*sj2);
IkReal x1589=((1.0)*x1584);
IkReal x1590=(gconst83*x1584);
IkReal x1591=(gconst82*x1583);
IkReal x1592=((1.0)*x1583);
evalcond[0]=((((-1.0)*r22*x1589))+(((-1.0)*gconst83*r20*x1592))+((r21*x1591)));
evalcond[1]=(((r01*x1591))+sj0+(((-1.0)*r02*x1589))+(((-1.0)*gconst83*r00*x1592)));
evalcond[2]=((((-1.0)*x1587))+((x1583*x1586))+(((-1.0)*gconst83*r10*x1592))+(((-1.0)*r12*x1589)));
evalcond[3]=(((cj2*sj1))+((r20*x1590))+((cj1*sj2))+(((-1.0)*r22*x1592))+(((-1.0)*gconst82*r21*x1589)));
evalcond[4]=(((r00*x1590))+(((-1.0)*r02*x1592))+((cj0*x1585))+(((-1.0)*gconst82*r01*x1589))+(((-1.0)*x1587*x1588)));
evalcond[5]=(((sj0*x1585))+(((-1.0)*sj0*x1588))+(((-1.0)*x1586*x1589))+((r10*x1590))+(((-1.0)*r12*x1592)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1593 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst82*r21))+(((-1.0)*cj0*gconst83*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1593.valid){
continue;
}
CheckValue<IkReal> x1594=IKPowWithIntegerCheck(IKsign((((gconst83*r01))+((gconst82*r00)))),-1);
if(!x1594.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1593.value)+(((1.5707963267949)*(x1594.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1595=IKsin(j4);
IkReal x1596=IKcos(j4);
IkReal x1597=(cj1*cj2);
IkReal x1598=(gconst82*r11);
IkReal x1599=((1.0)*cj0);
IkReal x1600=(sj1*sj2);
IkReal x1601=((1.0)*x1596);
IkReal x1602=(gconst83*x1596);
IkReal x1603=(gconst82*x1595);
IkReal x1604=((1.0)*x1595);
evalcond[0]=(((r21*x1603))+(((-1.0)*r22*x1601))+(((-1.0)*gconst83*r20*x1604)));
evalcond[1]=(sj0+((r01*x1603))+(((-1.0)*gconst83*r00*x1604))+(((-1.0)*r02*x1601)));
evalcond[2]=((((-1.0)*x1599))+(((-1.0)*gconst83*r10*x1604))+((x1595*x1598))+(((-1.0)*r12*x1601)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*gconst82*r21*x1601))+((cj1*sj2))+(((-1.0)*r22*x1604))+((r20*x1602)));
evalcond[4]=((((-1.0)*gconst82*r01*x1601))+((r00*x1602))+(((-1.0)*x1599*x1600))+(((-1.0)*r02*x1604))+((cj0*x1597)));
evalcond[5]=(((sj0*x1597))+(((-1.0)*r12*x1604))+(((-1.0)*sj0*x1600))+((r10*x1602))+(((-1.0)*x1598*x1601)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1605 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst82*r21*sj0))+(((-1.0)*gconst83*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1605.valid){
continue;
}
CheckValue<IkReal> x1606=IKPowWithIntegerCheck(IKsign((((gconst83*r11))+((gconst82*r10)))),-1);
if(!x1606.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1605.value)+(((1.5707963267949)*(x1606.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1607=IKsin(j4);
IkReal x1608=IKcos(j4);
IkReal x1609=(cj1*cj2);
IkReal x1610=(gconst82*r11);
IkReal x1611=((1.0)*cj0);
IkReal x1612=(sj1*sj2);
IkReal x1613=((1.0)*x1608);
IkReal x1614=(gconst83*x1608);
IkReal x1615=(gconst82*x1607);
IkReal x1616=((1.0)*x1607);
evalcond[0]=(((r21*x1615))+(((-1.0)*r22*x1613))+(((-1.0)*gconst83*r20*x1616)));
evalcond[1]=(sj0+((r01*x1615))+(((-1.0)*r02*x1613))+(((-1.0)*gconst83*r00*x1616)));
evalcond[2]=((((-1.0)*r12*x1613))+(((-1.0)*x1611))+(((-1.0)*gconst83*r10*x1616))+((x1607*x1610)));
evalcond[3]=(((cj2*sj1))+((r20*x1614))+((cj1*sj2))+(((-1.0)*gconst82*r21*x1613))+(((-1.0)*r22*x1616)));
evalcond[4]=((((-1.0)*x1611*x1612))+((r00*x1614))+(((-1.0)*r02*x1616))+(((-1.0)*gconst82*r01*x1613))+((cj0*x1609)));
evalcond[5]=((((-1.0)*r12*x1616))+(((-1.0)*x1610*x1613))+((sj0*x1609))+(((-1.0)*sj0*x1612))+((r10*x1614)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1618 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x1618)==0){
continue;
}
IkReal x1617=pow(x1618,-0.5);
CheckValue<IkReal> x1619 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x1619.valid){
continue;
}
IkReal gconst84=((-1.0)*(x1619.value));
IkReal gconst85=((-1.0)*r01*x1617);
IkReal gconst86=(r00*x1617);
CheckValue<IkReal> x1620 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x1620.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x1620.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x1623 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x1623.valid){
continue;
}
IkReal x1621=((-1.0)*(x1623.value));
IkReal x1622=x1617;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst85;
cj5=gconst86;
j5=x1621;
IkReal gconst84=x1621;
IkReal gconst85=((-1.0)*r01*x1622);
IkReal gconst86=(r00*x1622);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1624=((1.0)*gconst86);
CheckValue<IkReal> x1625=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst85*r20))+(((-1.0)*r21*x1624)))),-1);
if(!x1625.valid){
continue;
}
CheckValue<IkReal> x1626 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*cj0*r00*x1624))+(((-1.0)*r10*sj0*x1624))+((gconst85*r11*sj0))+((cj0*gconst85*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1626.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1625.value)))+(x1626.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1627=IKsin(j4);
IkReal x1628=IKcos(j4);
IkReal x1629=(gconst85*r21);
IkReal x1630=(cj1*cj2);
IkReal x1631=(gconst86*r00);
IkReal x1632=(gconst86*r10);
IkReal x1633=(gconst85*r11);
IkReal x1634=(gconst85*r01);
IkReal x1635=(gconst86*r20);
IkReal x1636=((1.0)*cj0);
IkReal x1637=(sj1*sj2);
IkReal x1638=((1.0)*x1628);
IkReal x1639=((1.0)*x1627);
evalcond[0]=((((-1.0)*x1635*x1639))+(((-1.0)*r22*x1638))+((x1627*x1629)));
evalcond[1]=(((x1627*x1634))+sj0+(((-1.0)*x1631*x1639))+(((-1.0)*r02*x1638)));
evalcond[2]=(((x1627*x1633))+(((-1.0)*r12*x1638))+(((-1.0)*x1636))+(((-1.0)*x1632*x1639)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x1639))+((cj1*sj2))+((x1628*x1635))+(((-1.0)*x1629*x1638)));
evalcond[4]=((((-1.0)*x1634*x1638))+((x1628*x1631))+(((-1.0)*x1636*x1637))+((cj0*x1630))+(((-1.0)*r02*x1639)));
evalcond[5]=(((sj0*x1630))+(((-1.0)*r12*x1639))+((x1628*x1632))+(((-1.0)*x1633*x1638))+(((-1.0)*sj0*x1637)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1640=IKPowWithIntegerCheck(IKsign((((gconst86*r11))+((gconst85*r10)))),-1);
if(!x1640.valid){
continue;
}
CheckValue<IkReal> x1641 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*gconst86*r20*sj0))+((gconst85*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1641.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1640.value)))+(x1641.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1642=IKsin(j4);
IkReal x1643=IKcos(j4);
IkReal x1644=(gconst85*r21);
IkReal x1645=(cj1*cj2);
IkReal x1646=(gconst86*r00);
IkReal x1647=(gconst86*r10);
IkReal x1648=(gconst85*r11);
IkReal x1649=(gconst85*r01);
IkReal x1650=(gconst86*r20);
IkReal x1651=((1.0)*cj0);
IkReal x1652=(sj1*sj2);
IkReal x1653=((1.0)*x1643);
IkReal x1654=((1.0)*x1642);
evalcond[0]=((((-1.0)*r22*x1653))+(((-1.0)*x1650*x1654))+((x1642*x1644)));
evalcond[1]=(sj0+(((-1.0)*x1646*x1654))+((x1642*x1649))+(((-1.0)*r02*x1653)));
evalcond[2]=((((-1.0)*x1647*x1654))+(((-1.0)*r12*x1653))+(((-1.0)*x1651))+((x1642*x1648)));
evalcond[3]=((((-1.0)*x1644*x1653))+((cj2*sj1))+(((-1.0)*r22*x1654))+((cj1*sj2))+((x1643*x1650)));
evalcond[4]=((((-1.0)*x1649*x1653))+(((-1.0)*r02*x1654))+((cj0*x1645))+((x1643*x1646))+(((-1.0)*x1651*x1652)));
evalcond[5]=(((sj0*x1645))+(((-1.0)*r12*x1654))+(((-1.0)*sj0*x1652))+((x1643*x1647))+(((-1.0)*x1648*x1653)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1656 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x1656)==0){
continue;
}
IkReal x1655=pow(x1656,-0.5);
CheckValue<IkReal> x1657 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x1657.valid){
continue;
}
IkReal gconst87=((3.14159265358979)+(((-1.0)*(x1657.value))));
IkReal gconst88=((1.0)*r01*x1655);
IkReal gconst89=((-1.0)*r00*x1655);
CheckValue<IkReal> x1658 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x1658.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x1658.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x1661 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x1661.valid){
continue;
}
IkReal x1659=((1.0)*(x1661.value));
IkReal x1660=x1655;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x1659)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x1659)));
IkReal gconst88=((1.0)*r01*x1660);
IkReal gconst89=((-1.0)*r00*x1660);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[5];
CheckValue<IkReal> x1664 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x1664.valid){
continue;
}
IkReal x1662=((1.0)*(x1664.value));
IkReal x1663=x1655;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x1662)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x1662)));
IkReal gconst88=((1.0)*r01*x1663);
IkReal gconst89=((-1.0)*r00*x1663);
j4eval[0]=0;
j4eval[1]=cj0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
j4eval[4]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x1667 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x1667.valid){
continue;
}
IkReal x1665=((1.0)*(x1667.value));
IkReal x1666=x1655;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x1665)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x1665)));
IkReal gconst88=((1.0)*r01*x1666);
IkReal gconst89=((-1.0)*r00*x1666);
IkReal x1668=r02*r02;
IkReal x1669=(r12*sj0);
IkReal x1670=x1655;
IkReal x1671=(cj0*x1670);
j4eval[0]=((IKabs((((x1668*x1671))+(((-1.0)*x1671))+((r02*x1669*x1670)))))+(IKabs((x1669+((cj0*r02))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1672=((1.0)*gconst89);
CheckValue<IkReal> x1673=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst88*r20))+(((-1.0)*r21*x1672)))),-1);
if(!x1673.valid){
continue;
}
CheckValue<IkReal> x1674 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((cj0*gconst88*r01))+(((-1.0)*r10*sj0*x1672))+((gconst88*r11*sj0))+(((-1.0)*cj0*r00*x1672)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1674.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1673.value)))+(x1674.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1675=IKsin(j4);
IkReal x1676=IKcos(j4);
IkReal x1677=(cj1*cj2);
IkReal x1678=(gconst89*r20);
IkReal x1679=(gconst89*r10);
IkReal x1680=(gconst89*r00);
IkReal x1681=((1.0)*cj0);
IkReal x1682=(sj1*sj2);
IkReal x1683=((1.0)*x1676);
IkReal x1684=((1.0)*x1675);
IkReal x1685=(gconst88*x1675);
evalcond[0]=((((-1.0)*x1678*x1684))+((r21*x1685))+(((-1.0)*r22*x1683)));
evalcond[1]=(sj0+((r01*x1685))+(((-1.0)*x1680*x1684))+(((-1.0)*r02*x1683)));
evalcond[2]=((((-1.0)*r12*x1683))+((r11*x1685))+(((-1.0)*x1681))+(((-1.0)*x1679*x1684)));
evalcond[3]=(((x1676*x1678))+((cj2*sj1))+(((-1.0)*gconst88*r21*x1683))+((cj1*sj2))+(((-1.0)*r22*x1684)));
evalcond[4]=(((cj0*x1677))+(((-1.0)*x1681*x1682))+((x1676*x1680))+(((-1.0)*r02*x1684))+(((-1.0)*gconst88*r01*x1683)));
evalcond[5]=(((sj0*x1677))+((x1676*x1679))+(((-1.0)*r12*x1684))+(((-1.0)*gconst88*r11*x1683))+(((-1.0)*sj0*x1682)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1686=IKPowWithIntegerCheck(IKsign((((gconst88*r00))+((gconst89*r01)))),-1);
if(!x1686.valid){
continue;
}
CheckValue<IkReal> x1687 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*gconst89*r20))+((cj0*gconst88*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1687.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1686.value)))+(x1687.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1688=IKsin(j4);
IkReal x1689=IKcos(j4);
IkReal x1690=(cj1*cj2);
IkReal x1691=(gconst89*r20);
IkReal x1692=(gconst89*r10);
IkReal x1693=(gconst89*r00);
IkReal x1694=((1.0)*cj0);
IkReal x1695=(sj1*sj2);
IkReal x1696=((1.0)*x1689);
IkReal x1697=((1.0)*x1688);
IkReal x1698=(gconst88*x1688);
evalcond[0]=(((r21*x1698))+(((-1.0)*x1691*x1697))+(((-1.0)*r22*x1696)));
evalcond[1]=(((r01*x1698))+sj0+(((-1.0)*r02*x1696))+(((-1.0)*x1693*x1697)));
evalcond[2]=((((-1.0)*x1692*x1697))+(((-1.0)*x1694))+(((-1.0)*r12*x1696))+((r11*x1698)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst88*r21*x1696))+((x1689*x1691))+(((-1.0)*r22*x1697)));
evalcond[4]=((((-1.0)*x1694*x1695))+((x1689*x1693))+(((-1.0)*r02*x1697))+((cj0*x1690))+(((-1.0)*gconst88*r01*x1696)));
evalcond[5]=(((sj0*x1690))+(((-1.0)*gconst88*r11*x1696))+(((-1.0)*r12*x1697))+((x1689*x1692))+(((-1.0)*sj0*x1695)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1699=IKPowWithIntegerCheck(IKsign((((gconst88*r10))+((gconst89*r11)))),-1);
if(!x1699.valid){
continue;
}
CheckValue<IkReal> x1700 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*gconst89*r20*sj0))+((gconst88*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1700.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1699.value)))+(x1700.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1701=IKsin(j4);
IkReal x1702=IKcos(j4);
IkReal x1703=(cj1*cj2);
IkReal x1704=(gconst89*r20);
IkReal x1705=(gconst89*r10);
IkReal x1706=(gconst89*r00);
IkReal x1707=((1.0)*cj0);
IkReal x1708=(sj1*sj2);
IkReal x1709=((1.0)*x1702);
IkReal x1710=((1.0)*x1701);
IkReal x1711=(gconst88*x1701);
evalcond[0]=((((-1.0)*x1704*x1710))+((r21*x1711))+(((-1.0)*r22*x1709)));
evalcond[1]=(sj0+(((-1.0)*r02*x1709))+((r01*x1711))+(((-1.0)*x1706*x1710)));
evalcond[2]=(((r11*x1711))+(((-1.0)*x1707))+(((-1.0)*x1705*x1710))+(((-1.0)*r12*x1709)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst88*r21*x1709))+(((-1.0)*r22*x1710))+((x1702*x1704)));
evalcond[4]=((((-1.0)*gconst88*r01*x1709))+(((-1.0)*x1707*x1708))+((cj0*x1703))+(((-1.0)*r02*x1710))+((x1702*x1706)));
evalcond[5]=((((-1.0)*gconst88*r11*x1709))+(((-1.0)*sj0*x1708))+((x1702*x1705))+((sj0*x1703))+(((-1.0)*r12*x1710)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x1712=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x1712;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x1712);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x1713=((1.0)*cj5);
IkReal x1714=((((-1.0)*r21*x1713))+(((-1.0)*r20*sj5)));
j4eval[0]=x1714;
j4eval[1]=((IKabs((((r11*sj5))+(((-1.0)*r10*x1713)))))+(IKabs(r12)));
j4eval[2]=IKsign(x1714);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x1715=cj5*cj5;
IkReal x1716=r01*r01;
IkReal x1717=(cj5*r00);
IkReal x1718=(r01*sj5);
IkReal x1719=(x1716+(((-1.0)*x1715*x1716))+((x1715*(r00*r00)))+(((-2.0)*x1717*x1718))+(r02*r02));
j4eval[0]=x1719;
j4eval[1]=((IKabs(r02))+(IKabs((x1717+(((-1.0)*x1718))))));
j4eval[2]=IKsign(x1719);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1720=cj5*cj5;
IkReal x1721=r01*r01;
IkReal x1722=(r01*sj5);
IkReal x1723=(cj5*r00);
CheckValue<IkReal> x1724=IKPowWithIntegerCheck(IKsign(((((-2.0)*x1722*x1723))+x1721+(((-1.0)*x1720*x1721))+(r02*r02)+((x1720*(r00*r00))))),-1);
if(!x1724.valid){
continue;
}
CheckValue<IkReal> x1725 = IKatan2WithCheck(IkReal((x1723+(((-1.0)*x1722)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x1725.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1724.value)))+(x1725.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1726=IKsin(j4);
IkReal x1727=IKcos(j4);
IkReal x1728=(cj5*r10);
IkReal x1729=(r01*sj5);
IkReal x1730=(cj5*r00);
IkReal x1731=(cj5*r20);
IkReal x1732=((1.0)*x1727);
IkReal x1733=((1.0)*x1726);
IkReal x1734=(sj5*x1726);
evalcond[0]=((((-1.0)*x1731*x1733))+((r21*x1734))+(((-1.0)*r22*x1732)));
evalcond[1]=((((-1.0)*x1728*x1733))+(((-1.0)*r12*x1732))+((r11*x1734)));
evalcond[2]=((((-1.0)*x1729*x1732))+((x1727*x1730))+(((-1.0)*r02*x1733)));
evalcond[3]=((1.0)+((x1726*x1729))+(((-1.0)*x1730*x1733))+(((-1.0)*r02*x1732)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x1727*x1731))+(((-1.0)*r22*x1733))+(((-1.0)*r21*sj5*x1732)));
evalcond[5]=((((-1.0)*r12*x1733))+(((-1.0)*sj1*sj2))+((cj1*cj2))+((x1727*x1728))+(((-1.0)*r11*sj5*x1732)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1735=((1.0)*cj5);
CheckValue<IkReal> x1736 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x1735))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1736.valid){
continue;
}
CheckValue<IkReal> x1737=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x1735))+(((-1.0)*r20*sj5)))),-1);
if(!x1737.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1736.value)+(((1.5707963267949)*(x1737.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1738=IKsin(j4);
IkReal x1739=IKcos(j4);
IkReal x1740=(cj5*r10);
IkReal x1741=(r01*sj5);
IkReal x1742=(cj5*r00);
IkReal x1743=(cj5*r20);
IkReal x1744=((1.0)*x1739);
IkReal x1745=((1.0)*x1738);
IkReal x1746=(sj5*x1738);
evalcond[0]=((((-1.0)*r22*x1744))+((r21*x1746))+(((-1.0)*x1743*x1745)));
evalcond[1]=((((-1.0)*r12*x1744))+(((-1.0)*x1740*x1745))+((r11*x1746)));
evalcond[2]=((((-1.0)*x1741*x1744))+((x1739*x1742))+(((-1.0)*r02*x1745)));
evalcond[3]=((1.0)+(((-1.0)*x1742*x1745))+((x1738*x1741))+(((-1.0)*r02*x1744)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r21*sj5*x1744))+((x1739*x1743))+((cj1*sj2))+(((-1.0)*r22*x1745)));
evalcond[5]=((((-1.0)*r12*x1745))+((x1739*x1740))+(((-1.0)*sj1*sj2))+((cj1*cj2))+(((-1.0)*r11*sj5*x1744)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1747 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1747.valid){
continue;
}
CheckValue<IkReal> x1748=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x1748.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1747.value)+(((1.5707963267949)*(x1748.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1749=IKsin(j4);
IkReal x1750=IKcos(j4);
IkReal x1751=(cj5*r10);
IkReal x1752=(r01*sj5);
IkReal x1753=(cj5*r00);
IkReal x1754=(cj5*r20);
IkReal x1755=((1.0)*x1750);
IkReal x1756=((1.0)*x1749);
IkReal x1757=(sj5*x1749);
evalcond[0]=((((-1.0)*r22*x1755))+((r21*x1757))+(((-1.0)*x1754*x1756)));
evalcond[1]=((((-1.0)*r12*x1755))+(((-1.0)*x1751*x1756))+((r11*x1757)));
evalcond[2]=(((x1750*x1753))+(((-1.0)*x1752*x1755))+(((-1.0)*r02*x1756)));
evalcond[3]=((1.0)+((x1749*x1752))+(((-1.0)*x1753*x1756))+(((-1.0)*r02*x1755)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x1756))+((cj1*sj2))+((x1750*x1754))+(((-1.0)*r21*sj5*x1755)));
evalcond[5]=((((-1.0)*r12*x1756))+(((-1.0)*sj1*sj2))+((x1750*x1751))+((cj1*cj2))+(((-1.0)*r11*sj5*x1755)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x1758=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x1758;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x1758);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x1759=((1.0)*cj5);
IkReal x1760=((((-1.0)*r11*x1759))+(((-1.0)*r10*sj5)));
j4eval[0]=x1760;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x1759))))));
j4eval[2]=IKsign(x1760);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x1761=cj5*cj5;
IkReal x1762=r01*r01;
IkReal x1763=(r01*sj5);
IkReal x1764=(cj5*r00);
IkReal x1765=((((-1.0)*x1762))+(((-1.0)*(r02*r02)))+((x1761*x1762))+(((-1.0)*x1761*(r00*r00)))+(((2.0)*x1763*x1764)));
j4eval[0]=x1765;
j4eval[1]=IKsign(x1765);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x1763))+x1764))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1766=cj5*cj5;
IkReal x1767=r01*r01;
IkReal x1768=(r01*sj5);
IkReal x1769=(cj5*r00);
CheckValue<IkReal> x1770=IKPowWithIntegerCheck(IKsign(((((-1.0)*x1767))+(((-1.0)*(r02*r02)))+(((2.0)*x1768*x1769))+((x1766*x1767))+(((-1.0)*x1766*(r00*r00))))),-1);
if(!x1770.valid){
continue;
}
CheckValue<IkReal> x1771 = IKatan2WithCheck(IkReal(((((-1.0)*x1768))+x1769)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x1771.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1770.value)))+(x1771.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1772=IKsin(j4);
IkReal x1773=IKcos(j4);
IkReal x1774=(cj5*r10);
IkReal x1775=(r01*sj5);
IkReal x1776=(cj5*r00);
IkReal x1777=(cj5*r20);
IkReal x1778=((1.0)*x1773);
IkReal x1779=((1.0)*x1772);
IkReal x1780=(sj5*x1772);
evalcond[0]=(((r21*x1780))+(((-1.0)*r22*x1778))+(((-1.0)*x1777*x1779)));
evalcond[1]=(((r11*x1780))+(((-1.0)*x1774*x1779))+(((-1.0)*r12*x1778)));
evalcond[2]=(((x1773*x1776))+(((-1.0)*r02*x1779))+(((-1.0)*x1775*x1778)));
evalcond[3]=((-1.0)+(((-1.0)*x1776*x1779))+(((-1.0)*r02*x1778))+((x1772*x1775)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x1773*x1777))+(((-1.0)*r22*x1779))+(((-1.0)*r21*sj5*x1778)));
evalcond[5]=((((-1.0)*r11*sj5*x1778))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x1773*x1774))+(((-1.0)*r12*x1779)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1781=((1.0)*cj5);
CheckValue<IkReal> x1782 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x1781)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1782.valid){
continue;
}
CheckValue<IkReal> x1783=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x1781)))),-1);
if(!x1783.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1782.value)+(((1.5707963267949)*(x1783.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1784=IKsin(j4);
IkReal x1785=IKcos(j4);
IkReal x1786=(cj5*r10);
IkReal x1787=(r01*sj5);
IkReal x1788=(cj5*r00);
IkReal x1789=(cj5*r20);
IkReal x1790=((1.0)*x1785);
IkReal x1791=((1.0)*x1784);
IkReal x1792=(sj5*x1784);
evalcond[0]=((((-1.0)*r22*x1790))+((r21*x1792))+(((-1.0)*x1789*x1791)));
evalcond[1]=((((-1.0)*r12*x1790))+(((-1.0)*x1786*x1791))+((r11*x1792)));
evalcond[2]=((((-1.0)*x1787*x1790))+((x1785*x1788))+(((-1.0)*r02*x1791)));
evalcond[3]=((-1.0)+((x1784*x1787))+(((-1.0)*x1788*x1791))+(((-1.0)*r02*x1790)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x1791))+(((-1.0)*r21*sj5*x1790))+((cj1*sj2))+((x1785*x1789)));
evalcond[5]=((((-1.0)*r11*sj5*x1790))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r12*x1791))+((x1785*x1786)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1793=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x1793.valid){
continue;
}
CheckValue<IkReal> x1794 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1794.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1793.value)))+(x1794.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1795=IKsin(j4);
IkReal x1796=IKcos(j4);
IkReal x1797=(cj5*r10);
IkReal x1798=(r01*sj5);
IkReal x1799=(cj5*r00);
IkReal x1800=(cj5*r20);
IkReal x1801=((1.0)*x1796);
IkReal x1802=((1.0)*x1795);
IkReal x1803=(sj5*x1795);
evalcond[0]=(((r21*x1803))+(((-1.0)*x1800*x1802))+(((-1.0)*r22*x1801)));
evalcond[1]=((((-1.0)*x1797*x1802))+((r11*x1803))+(((-1.0)*r12*x1801)));
evalcond[2]=((((-1.0)*x1798*x1801))+((x1796*x1799))+(((-1.0)*r02*x1802)));
evalcond[3]=((-1.0)+(((-1.0)*x1799*x1802))+(((-1.0)*r02*x1801))+((x1795*x1798)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x1796*x1800))+(((-1.0)*r21*sj5*x1801))+(((-1.0)*r22*x1802)));
evalcond[5]=((((-1.0)*r11*sj5*x1801))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x1796*x1797))+(((-1.0)*r12*x1802)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1805 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x1805)==0){
continue;
}
IkReal x1804=pow(x1805,-0.5);
CheckValue<IkReal> x1806 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x1806.valid){
continue;
}
IkReal gconst90=((-1.0)*(x1806.value));
IkReal gconst91=((-1.0)*r11*x1804);
IkReal gconst92=(r10*x1804);
CheckValue<IkReal> x1807 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x1807.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x1807.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x1810 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x1810.valid){
continue;
}
IkReal x1808=((-1.0)*(x1810.value));
IkReal x1809=x1804;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst91;
cj5=gconst92;
j5=x1808;
IkReal gconst90=x1808;
IkReal gconst91=((-1.0)*r11*x1809);
IkReal gconst92=(r10*x1809);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1811=((1.0)*gconst92);
CheckValue<IkReal> x1812=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst91*r20))+(((-1.0)*r21*x1811)))),-1);
if(!x1812.valid){
continue;
}
CheckValue<IkReal> x1813 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*cj0*r00*x1811))+((gconst91*r11*sj0))+(((-1.0)*r10*sj0*x1811))+((cj0*gconst91*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1813.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1812.value)))+(x1813.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1814=IKsin(j4);
IkReal x1815=IKcos(j4);
IkReal x1816=(cj1*cj2);
IkReal x1817=(gconst92*r00);
IkReal x1818=(gconst92*r20);
IkReal x1819=(gconst92*r10);
IkReal x1820=((1.0)*cj0);
IkReal x1821=(sj1*sj2);
IkReal x1822=((1.0)*x1815);
IkReal x1823=(gconst91*x1814);
IkReal x1824=((1.0)*x1814);
evalcond[0]=((((-1.0)*x1818*x1824))+(((-1.0)*r22*x1822))+((r21*x1823)));
evalcond[1]=(sj0+(((-1.0)*x1817*x1824))+((r01*x1823))+(((-1.0)*r02*x1822)));
evalcond[2]=((((-1.0)*x1820))+(((-1.0)*x1819*x1824))+(((-1.0)*r12*x1822))+((r11*x1823)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x1824))+((x1815*x1818))+(((-1.0)*gconst91*r21*x1822)));
evalcond[4]=(((cj0*x1816))+(((-1.0)*gconst91*r01*x1822))+((x1815*x1817))+(((-1.0)*r02*x1824))+(((-1.0)*x1820*x1821)));
evalcond[5]=((((-1.0)*sj0*x1821))+(((-1.0)*gconst91*r11*x1822))+((sj0*x1816))+(((-1.0)*r12*x1824))+((x1815*x1819)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1825 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst91*r21))+(((-1.0)*cj0*gconst92*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1825.valid){
continue;
}
CheckValue<IkReal> x1826=IKPowWithIntegerCheck(IKsign((((gconst91*r00))+((gconst92*r01)))),-1);
if(!x1826.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1825.value)+(((1.5707963267949)*(x1826.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1827=IKsin(j4);
IkReal x1828=IKcos(j4);
IkReal x1829=(cj1*cj2);
IkReal x1830=(gconst92*r00);
IkReal x1831=(gconst92*r20);
IkReal x1832=(gconst92*r10);
IkReal x1833=((1.0)*cj0);
IkReal x1834=(sj1*sj2);
IkReal x1835=((1.0)*x1828);
IkReal x1836=(gconst91*x1827);
IkReal x1837=((1.0)*x1827);
evalcond[0]=(((r21*x1836))+(((-1.0)*x1831*x1837))+(((-1.0)*r22*x1835)));
evalcond[1]=(((r01*x1836))+sj0+(((-1.0)*r02*x1835))+(((-1.0)*x1830*x1837)));
evalcond[2]=((((-1.0)*x1832*x1837))+(((-1.0)*x1833))+((r11*x1836))+(((-1.0)*r12*x1835)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst91*r21*x1835))+((x1828*x1831))+(((-1.0)*r22*x1837)));
evalcond[4]=(((cj0*x1829))+(((-1.0)*x1833*x1834))+(((-1.0)*gconst91*r01*x1835))+(((-1.0)*r02*x1837))+((x1828*x1830)));
evalcond[5]=((((-1.0)*gconst91*r11*x1835))+(((-1.0)*sj0*x1834))+((sj0*x1829))+(((-1.0)*r12*x1837))+((x1828*x1832)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1839 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x1839)==0){
continue;
}
IkReal x1838=pow(x1839,-0.5);
CheckValue<IkReal> x1840 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x1840.valid){
continue;
}
IkReal gconst93=((3.14159265358979)+(((-1.0)*(x1840.value))));
IkReal gconst94=((1.0)*r11*x1838);
IkReal gconst95=((-1.0)*r10*x1838);
CheckValue<IkReal> x1841 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x1841.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x1841.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x1844 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x1844.valid){
continue;
}
IkReal x1842=((1.0)*(x1844.value));
IkReal x1843=x1838;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x1842)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x1842)));
IkReal gconst94=((1.0)*r11*x1843);
IkReal gconst95=((-1.0)*r10*x1843);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x1847 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x1847.valid){
continue;
}
IkReal x1845=((1.0)*(x1847.value));
IkReal x1846=x1838;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x1845)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x1845)));
IkReal gconst94=((1.0)*r11*x1846);
IkReal gconst95=((-1.0)*r10*x1846);
IkReal x1848=r12*r12;
IkReal x1849=(cj0*r02);
IkReal x1850=x1838;
IkReal x1851=(sj0*x1850);
j4eval[0]=((IKabs((x1849+((r12*sj0)))))+(IKabs((((x1848*x1851))+((r12*x1849*x1850))+(((-1.0)*x1851))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x1854 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x1854.valid){
continue;
}
IkReal x1852=((1.0)*(x1854.value));
IkReal x1853=x1838;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x1852)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x1852)));
IkReal gconst94=((1.0)*r11*x1853);
IkReal gconst95=((-1.0)*r10*x1853);
IkReal x1855=(cj1*r22*sj2);
IkReal x1856=(cj2*r22*sj1);
IkReal x1857=x1838;
IkReal x1858=(r12*x1857);
j4eval[0]=((IKabs((x1855+x1856)))+(IKabs((((x1856*x1858))+((x1855*x1858))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1859=(cj2*sj1);
IkReal x1860=(gconst95*r20);
IkReal x1861=(gconst94*r21);
IkReal x1862=(cj1*sj2);
CheckValue<IkReal> x1863=IKPowWithIntegerCheck(IKsign(((r22*r22)+(((-2.0)*x1860*x1861))+(x1860*x1860)+(x1861*x1861))),-1);
if(!x1863.valid){
continue;
}
CheckValue<IkReal> x1864 = IKatan2WithCheck(IkReal((((r22*x1862))+((r22*x1859)))),IkReal(((((-1.0)*x1859*x1860))+((x1859*x1861))+((x1861*x1862))+(((-1.0)*x1860*x1862)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1864.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1863.value)))+(x1864.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1865=IKsin(j4);
IkReal x1866=IKcos(j4);
IkReal x1867=(cj1*cj2);
IkReal x1868=(gconst94*r11);
IkReal x1869=(gconst95*r10);
IkReal x1870=(gconst94*r21);
IkReal x1871=(gconst94*r01);
IkReal x1872=((1.0)*cj0);
IkReal x1873=(sj1*sj2);
IkReal x1874=((1.0)*x1866);
IkReal x1875=((1.0)*x1865);
IkReal x1876=(gconst95*x1866);
evalcond[0]=((((-1.0)*r22*x1874))+(((-1.0)*gconst95*r20*x1875))+((x1865*x1870)));
evalcond[1]=(sj0+(((-1.0)*r02*x1874))+((x1865*x1871))+(((-1.0)*gconst95*r00*x1875)));
evalcond[2]=((((-1.0)*x1872))+(((-1.0)*x1869*x1875))+((x1865*x1868))+(((-1.0)*r12*x1874)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x1875))+((cj1*sj2))+(((-1.0)*x1870*x1874))+((r20*x1876)));
evalcond[4]=((((-1.0)*x1872*x1873))+(((-1.0)*r02*x1875))+((cj0*x1867))+((r00*x1876))+(((-1.0)*x1871*x1874)));
evalcond[5]=((((-1.0)*x1868*x1874))+((x1866*x1869))+(((-1.0)*r12*x1875))+(((-1.0)*sj0*x1873))+((sj0*x1867)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1877=((1.0)*gconst95);
CheckValue<IkReal> x1878 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*cj0*r00*x1877))+((gconst94*r11*sj0))+(((-1.0)*r10*sj0*x1877))+((cj0*gconst94*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1878.valid){
continue;
}
CheckValue<IkReal> x1879=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x1877))+(((-1.0)*gconst94*r20)))),-1);
if(!x1879.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1878.value)+(((1.5707963267949)*(x1879.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1880=IKsin(j4);
IkReal x1881=IKcos(j4);
IkReal x1882=(cj1*cj2);
IkReal x1883=(gconst94*r11);
IkReal x1884=(gconst95*r10);
IkReal x1885=(gconst94*r21);
IkReal x1886=(gconst94*r01);
IkReal x1887=((1.0)*cj0);
IkReal x1888=(sj1*sj2);
IkReal x1889=((1.0)*x1881);
IkReal x1890=((1.0)*x1880);
IkReal x1891=(gconst95*x1881);
evalcond[0]=(((x1880*x1885))+(((-1.0)*r22*x1889))+(((-1.0)*gconst95*r20*x1890)));
evalcond[1]=(sj0+((x1880*x1886))+(((-1.0)*r02*x1889))+(((-1.0)*gconst95*r00*x1890)));
evalcond[2]=(((x1880*x1883))+(((-1.0)*r12*x1889))+(((-1.0)*x1887))+(((-1.0)*x1884*x1890)));
evalcond[3]=(((cj2*sj1))+((r20*x1891))+((cj1*sj2))+(((-1.0)*r22*x1890))+(((-1.0)*x1885*x1889)));
evalcond[4]=((((-1.0)*r02*x1890))+((r00*x1891))+(((-1.0)*x1887*x1888))+(((-1.0)*x1886*x1889))+((cj0*x1882)));
evalcond[5]=(((x1881*x1884))+(((-1.0)*sj0*x1888))+(((-1.0)*x1883*x1889))+(((-1.0)*r12*x1890))+((sj0*x1882)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1892 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*gconst95*r20))+((cj0*gconst94*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1892.valid){
continue;
}
CheckValue<IkReal> x1893=IKPowWithIntegerCheck(IKsign((((gconst95*r01))+((gconst94*r00)))),-1);
if(!x1893.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1892.value)+(((1.5707963267949)*(x1893.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1894=IKsin(j4);
IkReal x1895=IKcos(j4);
IkReal x1896=(cj1*cj2);
IkReal x1897=(gconst94*r11);
IkReal x1898=(gconst95*r10);
IkReal x1899=(gconst94*r21);
IkReal x1900=(gconst94*r01);
IkReal x1901=((1.0)*cj0);
IkReal x1902=(sj1*sj2);
IkReal x1903=((1.0)*x1895);
IkReal x1904=((1.0)*x1894);
IkReal x1905=(gconst95*x1895);
evalcond[0]=((((-1.0)*r22*x1903))+((x1894*x1899))+(((-1.0)*gconst95*r20*x1904)));
evalcond[1]=((((-1.0)*gconst95*r00*x1904))+sj0+((x1894*x1900))+(((-1.0)*r02*x1903)));
evalcond[2]=((((-1.0)*x1898*x1904))+(((-1.0)*r12*x1903))+((x1894*x1897))+(((-1.0)*x1901)));
evalcond[3]=((((-1.0)*x1899*x1903))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x1904))+((r20*x1905)));
evalcond[4]=(((r00*x1905))+(((-1.0)*x1901*x1902))+(((-1.0)*x1900*x1903))+((cj0*x1896))+(((-1.0)*r02*x1904)));
evalcond[5]=((((-1.0)*sj0*x1902))+(((-1.0)*r12*x1904))+((sj0*x1896))+((x1895*x1898))+(((-1.0)*x1897*x1903)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x1906=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x1906;
j4eval[1]=IKsign(x1906);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x1907=((1.0)*cj5);
IkReal x1908=((((-1.0)*r21*x1907))+(((-1.0)*r20*sj5)));
j4eval[0]=x1908;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x1907))))));
j4eval[2]=IKsign(x1908);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x1909=cj5*cj5;
IkReal x1910=r11*r11;
IkReal x1911=(cj5*r10);
IkReal x1912=(r11*sj5);
IkReal x1913=((((2.0)*x1911*x1912))+(((-1.0)*x1910))+(((-1.0)*(r12*r12)))+((x1909*x1910))+(((-1.0)*x1909*(r10*r10))));
j4eval[0]=x1913;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*x1912))+x1911))));
j4eval[2]=IKsign(x1913);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1914=cj5*cj5;
IkReal x1915=r11*r11;
IkReal x1916=(cj5*r10);
IkReal x1917=(r11*sj5);
CheckValue<IkReal> x1918=IKPowWithIntegerCheck(IKsign((((x1914*x1915))+(((-1.0)*x1915))+(((-1.0)*(r12*r12)))+(((2.0)*x1916*x1917))+(((-1.0)*x1914*(r10*r10))))),-1);
if(!x1918.valid){
continue;
}
CheckValue<IkReal> x1919 = IKatan2WithCheck(IkReal(((((-1.0)*x1917))+x1916)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x1919.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1918.value)))+(x1919.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1920=IKsin(j4);
IkReal x1921=IKcos(j4);
IkReal x1922=(cj5*r10);
IkReal x1923=(r01*sj5);
IkReal x1924=(cj5*r00);
IkReal x1925=(cj5*r20);
IkReal x1926=((1.0)*x1921);
IkReal x1927=((1.0)*x1920);
IkReal x1928=(sj5*x1920);
evalcond[0]=((((-1.0)*r22*x1926))+(((-1.0)*x1925*x1927))+((r21*x1928)));
evalcond[1]=((((-1.0)*x1924*x1927))+(((-1.0)*r02*x1926))+((x1920*x1923)));
evalcond[2]=((((-1.0)*r12*x1927))+((x1921*x1922))+(((-1.0)*r11*sj5*x1926)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x1926))+(((-1.0)*x1922*x1927))+((r11*x1928)));
evalcond[4]=(((cj2*sj1))+((x1921*x1925))+((cj1*sj2))+(((-1.0)*r21*sj5*x1926))+(((-1.0)*r22*x1927)));
evalcond[5]=(((x1921*x1924))+(((-1.0)*sj1*sj2))+(((-1.0)*r02*x1927))+((cj1*cj2))+(((-1.0)*x1923*x1926)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1929=((1.0)*cj5);
CheckValue<IkReal> x1930 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x1929)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1930.valid){
continue;
}
CheckValue<IkReal> x1931=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x1929))+(((-1.0)*r20*sj5)))),-1);
if(!x1931.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1930.value)+(((1.5707963267949)*(x1931.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1932=IKsin(j4);
IkReal x1933=IKcos(j4);
IkReal x1934=(cj5*r10);
IkReal x1935=(r01*sj5);
IkReal x1936=(cj5*r00);
IkReal x1937=(cj5*r20);
IkReal x1938=((1.0)*x1933);
IkReal x1939=((1.0)*x1932);
IkReal x1940=(sj5*x1932);
evalcond[0]=((((-1.0)*x1937*x1939))+(((-1.0)*r22*x1938))+((r21*x1940)));
evalcond[1]=(((x1932*x1935))+(((-1.0)*x1936*x1939))+(((-1.0)*r02*x1938)));
evalcond[2]=((((-1.0)*r11*sj5*x1938))+(((-1.0)*r12*x1939))+((x1933*x1934)));
evalcond[3]=((-1.0)+((r11*x1940))+(((-1.0)*x1934*x1939))+(((-1.0)*r12*x1938)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x1939))+((x1933*x1937))+(((-1.0)*r21*sj5*x1938)));
evalcond[5]=((((-1.0)*sj1*sj2))+((cj1*cj2))+((x1933*x1936))+(((-1.0)*x1935*x1938))+(((-1.0)*r02*x1939)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1941 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1941.valid){
continue;
}
CheckValue<IkReal> x1942=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x1942.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1941.value)+(((1.5707963267949)*(x1942.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1943=IKsin(j4);
IkReal x1944=IKcos(j4);
IkReal x1945=(cj5*r10);
IkReal x1946=(r01*sj5);
IkReal x1947=(cj5*r00);
IkReal x1948=(cj5*r20);
IkReal x1949=((1.0)*x1944);
IkReal x1950=((1.0)*x1943);
IkReal x1951=(sj5*x1943);
evalcond[0]=((((-1.0)*x1948*x1950))+(((-1.0)*r22*x1949))+((r21*x1951)));
evalcond[1]=(((x1943*x1946))+(((-1.0)*r02*x1949))+(((-1.0)*x1947*x1950)));
evalcond[2]=(((x1944*x1945))+(((-1.0)*r11*sj5*x1949))+(((-1.0)*r12*x1950)));
evalcond[3]=((-1.0)+((r11*x1951))+(((-1.0)*x1945*x1950))+(((-1.0)*r12*x1949)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x1950))+(((-1.0)*r21*sj5*x1949))+((x1944*x1948))+((cj1*sj2)));
evalcond[5]=(((x1944*x1947))+(((-1.0)*sj1*sj2))+(((-1.0)*r02*x1950))+(((-1.0)*x1946*x1949))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x1952=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x1952;
j4eval[1]=IKsign(x1952);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x1953=((1.0)*cj5);
IkReal x1954=((((-1.0)*r00*sj5))+(((-1.0)*r01*x1953)));
j4eval[0]=x1954;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x1953))))));
j4eval[2]=IKsign(x1954);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x1955=cj5*cj5;
IkReal x1956=r11*r11;
IkReal x1957=(r11*sj5);
IkReal x1958=(cj5*r10);
IkReal x1959=((((-2.0)*x1957*x1958))+(r12*r12)+(((-1.0)*x1955*x1956))+x1956+((x1955*(r10*r10))));
j4eval[0]=x1959;
j4eval[1]=IKsign(x1959);
j4eval[2]=((IKabs(r12))+(IKabs((x1958+(((-1.0)*x1957))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1960=cj5*cj5;
IkReal x1961=r11*r11;
IkReal x1962=(cj5*r10);
IkReal x1963=(r11*sj5);
CheckValue<IkReal> x1964=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-1.0)*x1960*x1961))+((x1960*(r10*r10)))+x1961+(((-2.0)*x1962*x1963)))),-1);
if(!x1964.valid){
continue;
}
CheckValue<IkReal> x1965 = IKatan2WithCheck(IkReal(((((-1.0)*x1963))+x1962)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x1965.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1964.value)))+(x1965.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1966=IKsin(j4);
IkReal x1967=IKcos(j4);
IkReal x1968=(cj5*r10);
IkReal x1969=(r01*sj5);
IkReal x1970=(cj5*r00);
IkReal x1971=(cj5*r20);
IkReal x1972=((1.0)*x1967);
IkReal x1973=((1.0)*x1966);
IkReal x1974=(sj5*x1966);
evalcond[0]=((((-1.0)*r22*x1972))+(((-1.0)*x1971*x1973))+((r21*x1974)));
evalcond[1]=((((-1.0)*r02*x1972))+(((-1.0)*x1970*x1973))+((x1966*x1969)));
evalcond[2]=((((-1.0)*r11*sj5*x1972))+(((-1.0)*r12*x1973))+((x1967*x1968)));
evalcond[3]=((1.0)+((r11*x1974))+(((-1.0)*x1968*x1973))+(((-1.0)*r12*x1972)));
evalcond[4]=(((x1967*x1971))+((cj2*sj1))+(((-1.0)*r21*sj5*x1972))+((cj1*sj2))+(((-1.0)*r22*x1973)));
evalcond[5]=(((x1967*x1970))+(((-1.0)*r02*x1973))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x1969*x1972)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1975=((1.0)*cj5);
CheckValue<IkReal> x1976 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x1975)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1976.valid){
continue;
}
CheckValue<IkReal> x1977=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x1975)))),-1);
if(!x1977.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1976.value)+(((1.5707963267949)*(x1977.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1978=IKsin(j4);
IkReal x1979=IKcos(j4);
IkReal x1980=(cj5*r10);
IkReal x1981=(r01*sj5);
IkReal x1982=(cj5*r00);
IkReal x1983=(cj5*r20);
IkReal x1984=((1.0)*x1979);
IkReal x1985=((1.0)*x1978);
IkReal x1986=(sj5*x1978);
evalcond[0]=((((-1.0)*x1983*x1985))+((r21*x1986))+(((-1.0)*r22*x1984)));
evalcond[1]=((((-1.0)*r02*x1984))+((x1978*x1981))+(((-1.0)*x1982*x1985)));
evalcond[2]=((((-1.0)*r11*sj5*x1984))+(((-1.0)*r12*x1985))+((x1979*x1980)));
evalcond[3]=((1.0)+(((-1.0)*x1980*x1985))+((r11*x1986))+(((-1.0)*r12*x1984)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x1979*x1983))+(((-1.0)*r21*sj5*x1984))+(((-1.0)*r22*x1985)));
evalcond[5]=((((-1.0)*x1981*x1984))+(((-1.0)*r02*x1985))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x1979*x1982)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1987=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x1987.valid){
continue;
}
CheckValue<IkReal> x1988 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1988.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1987.value)))+(x1988.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1989=IKsin(j4);
IkReal x1990=IKcos(j4);
IkReal x1991=(cj5*r10);
IkReal x1992=(r01*sj5);
IkReal x1993=(cj5*r00);
IkReal x1994=(cj5*r20);
IkReal x1995=((1.0)*x1990);
IkReal x1996=((1.0)*x1989);
IkReal x1997=(sj5*x1989);
evalcond[0]=(((r21*x1997))+(((-1.0)*x1994*x1996))+(((-1.0)*r22*x1995)));
evalcond[1]=((((-1.0)*x1993*x1996))+(((-1.0)*r02*x1995))+((x1989*x1992)));
evalcond[2]=(((x1990*x1991))+(((-1.0)*r12*x1996))+(((-1.0)*r11*sj5*x1995)));
evalcond[3]=((1.0)+((r11*x1997))+(((-1.0)*x1991*x1996))+(((-1.0)*r12*x1995)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r21*sj5*x1995))+((cj1*sj2))+((x1990*x1994))+(((-1.0)*r22*x1996)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r02*x1996))+(((-1.0)*x1992*x1995))+((x1990*x1993)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x1998=((-1.0)*py);
sj3=0;
cj3=1.0;
j3=0;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x1998);
rxp0_2=(py*r00);
rxp1_0=(r21*x1998);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x1999=((-1.0)*py);
sj3=0;
cj3=1.0;
j3=0;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x1999);
rxp0_2=(py*r00);
rxp1_0=(r21*x1999);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2000=((-1.0)*py);
sj3=0;
cj3=1.0;
j3=0;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x2000);
rxp0_2=(py*r00);
rxp1_0=(r21*x2000);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=((((-1.0)*r01*sj5))+((cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x2003=IKPowWithIntegerCheck(((((-1.0)*r01*sj5))+((cj5*r00))),-1);
if(!x2003.valid){
continue;
}
IkReal x2001=x2003.value;
IkReal x2002=(cj0*x2001);
cj4array[0]=(((sj1*sj2*x2002))+(((-1.0)*cj1*cj2*x2002)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x2004=IKsin(j4);
IkReal x2005=IKcos(j4);
IkReal x2006=(r21*sj5);
IkReal x2007=((1.0)*x2005);
IkReal x2008=((1.0)*cj5*x2004);
evalcond[0]=((-1.0)*r12*x2004);
evalcond[1]=((((-1.0)*r12*x2007))+(((-1.0)*cj0)));
evalcond[2]=(((x2004*x2006))+(((-1.0)*r20*x2008)));
evalcond[3]=((((-1.0)*r00*x2008))+((r01*sj5*x2004)));
evalcond[4]=((((-1.0)*x2006*x2007))+((cj2*sj1))+((cj1*sj2))+((cj5*r20*x2005)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x2011=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x2011.valid){
continue;
}
IkReal x2009=x2011.value;
IkReal x2010=((1.0)*x2009);
cj4array[0]=((((-1.0)*cj1*sj2*x2010))+(((-1.0)*cj2*sj1*x2010)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x2012=IKsin(j4);
IkReal x2013=IKcos(j4);
IkReal x2014=(cj5*r00);
IkReal x2015=((1.0)*cj0);
IkReal x2016=((1.0)*x2012);
IkReal x2017=(sj5*x2012);
IkReal x2018=((1.0)*x2013);
evalcond[0]=((-1.0)*r12*x2012);
evalcond[1]=((((-1.0)*x2015))+(((-1.0)*r12*x2018)));
evalcond[2]=(((r21*x2017))+(((-1.0)*cj5*r20*x2016)));
evalcond[3]=(((r01*x2017))+(((-1.0)*x2014*x2016)));
evalcond[4]=((((-1.0)*sj1*sj2*x2015))+((cj0*cj1*cj2))+(((-1.0)*r01*sj5*x2018))+((x2013*x2014)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x2019=IKPowWithIntegerCheck(r12,-1);
if(!x2019.valid){
continue;
}
cj4array[0]=((-1.0)*cj0*(x2019.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x2020=IKsin(j4);
IkReal x2021=IKcos(j4);
IkReal x2022=(cj5*r00);
IkReal x2023=(r21*sj5);
IkReal x2024=(cj5*r20);
IkReal x2025=(r01*sj5);
IkReal x2026=((1.0)*x2020);
IkReal x2027=((1.0)*x2021);
evalcond[0]=((-1.0)*r12*x2020);
evalcond[1]=(((x2020*x2023))+(((-1.0)*x2024*x2026)));
evalcond[2]=(((x2020*x2025))+(((-1.0)*x2022*x2026)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x2023*x2027))+((cj1*sj2))+((x2021*x2024)));
evalcond[4]=((((-1.0)*cj0*sj1*sj2))+(((-1.0)*x2025*x2027))+((cj0*cj1*cj2))+((x2021*x2022)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2028=((1.0)*cj5);
CheckValue<IkReal> x2029 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((r11*sj0*sj5))+((cj0*r01*sj5))+(((-1.0)*r10*sj0*x2028))+(((-1.0)*cj0*r00*x2028)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2029.valid){
continue;
}
CheckValue<IkReal> x2030=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x2028))+(((-1.0)*r20*sj5)))),-1);
if(!x2030.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2029.value)+(((1.5707963267949)*(x2030.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2031=IKsin(j4);
IkReal x2032=IKcos(j4);
IkReal x2033=(cj1*cj2);
IkReal x2034=(cj5*r10);
IkReal x2035=(r01*sj5);
IkReal x2036=(cj5*r00);
IkReal x2037=(cj5*r20);
IkReal x2038=((1.0)*cj0);
IkReal x2039=(sj1*sj2);
IkReal x2040=((1.0)*x2032);
IkReal x2041=((1.0)*x2031);
IkReal x2042=(sj5*x2031);
evalcond[0]=(((r21*x2042))+(((-1.0)*r22*x2040))+(((-1.0)*x2037*x2041)));
evalcond[1]=(((x2031*x2035))+sj0+(((-1.0)*r02*x2040))+(((-1.0)*x2036*x2041)));
evalcond[2]=(((r11*x2042))+(((-1.0)*x2034*x2041))+(((-1.0)*x2038))+(((-1.0)*r12*x2040)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x2041))+((cj1*sj2))+((x2032*x2037))+(((-1.0)*r21*sj5*x2040)));
evalcond[4]=((((-1.0)*r02*x2041))+((x2032*x2036))+((cj0*x2033))+(((-1.0)*x2035*x2040))+(((-1.0)*x2038*x2039)));
evalcond[5]=((((-1.0)*r11*sj5*x2040))+((x2032*x2034))+(((-1.0)*sj0*x2039))+((sj0*x2033))+(((-1.0)*r12*x2041)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2043=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x2043.valid){
continue;
}
CheckValue<IkReal> x2044 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2044.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2043.value)))+(x2044.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2045=IKsin(j4);
IkReal x2046=IKcos(j4);
IkReal x2047=(cj1*cj2);
IkReal x2048=(cj5*r10);
IkReal x2049=(r01*sj5);
IkReal x2050=(cj5*r00);
IkReal x2051=(cj5*r20);
IkReal x2052=((1.0)*cj0);
IkReal x2053=(sj1*sj2);
IkReal x2054=((1.0)*x2046);
IkReal x2055=((1.0)*x2045);
IkReal x2056=(sj5*x2045);
evalcond[0]=((((-1.0)*r22*x2054))+(((-1.0)*x2051*x2055))+((r21*x2056)));
evalcond[1]=(sj0+(((-1.0)*r02*x2054))+((x2045*x2049))+(((-1.0)*x2050*x2055)));
evalcond[2]=(((r11*x2056))+(((-1.0)*r12*x2054))+(((-1.0)*x2048*x2055))+(((-1.0)*x2052)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r21*sj5*x2054))+(((-1.0)*r22*x2055))+((cj1*sj2))+((x2046*x2051)));
evalcond[4]=(((cj0*x2047))+(((-1.0)*r02*x2055))+(((-1.0)*x2049*x2054))+((x2046*x2050))+(((-1.0)*x2052*x2053)));
evalcond[5]=((((-1.0)*r12*x2055))+(((-1.0)*sj0*x2053))+(((-1.0)*r11*sj5*x2054))+((x2046*x2048))+((sj0*x2047)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2057=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x2057.valid){
continue;
}
CheckValue<IkReal> x2058 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2058.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2057.value)))+(x2058.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2059=IKsin(j4);
IkReal x2060=IKcos(j4);
IkReal x2061=(cj1*cj2);
IkReal x2062=(cj5*r10);
IkReal x2063=(r01*sj5);
IkReal x2064=(cj5*r00);
IkReal x2065=(cj5*r20);
IkReal x2066=((1.0)*cj0);
IkReal x2067=(sj1*sj2);
IkReal x2068=((1.0)*x2060);
IkReal x2069=((1.0)*x2059);
IkReal x2070=(sj5*x2059);
evalcond[0]=((((-1.0)*r22*x2068))+(((-1.0)*x2065*x2069))+((r21*x2070)));
evalcond[1]=(sj0+(((-1.0)*r02*x2068))+(((-1.0)*x2064*x2069))+((x2059*x2063)));
evalcond[2]=((((-1.0)*r12*x2068))+((r11*x2070))+(((-1.0)*x2066))+(((-1.0)*x2062*x2069)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x2069))+((x2060*x2065))+(((-1.0)*r21*sj5*x2068)));
evalcond[4]=(((cj0*x2061))+(((-1.0)*x2063*x2068))+(((-1.0)*r02*x2069))+((x2060*x2064))+(((-1.0)*x2066*x2067)));
evalcond[5]=((((-1.0)*r12*x2069))+(((-1.0)*r11*sj5*x2068))+((x2060*x2062))+((sj0*x2061))+(((-1.0)*sj0*x2067)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2071=cj5*cj5;
IkReal x2072=r21*r21;
IkReal x2073=(cj2*sj1);
IkReal x2074=(cj1*sj2);
IkReal x2075=(r21*sj5);
IkReal x2076=((1.0)*cj5*r20);
CheckValue<IkReal> x2077 = IKatan2WithCheck(IkReal((((r22*x2073))+((r22*x2074)))),IkReal(((((-1.0)*x2074*x2076))+(((-1.0)*x2073*x2076))+((x2074*x2075))+((x2073*x2075)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2077.valid){
continue;
}
CheckValue<IkReal> x2078=IKPowWithIntegerCheck(IKsign(((r22*r22)+x2072+(((-2.0)*cj5*r20*x2075))+(((-1.0)*x2071*x2072))+((x2071*(r20*r20))))),-1);
if(!x2078.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2077.value)+(((1.5707963267949)*(x2078.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x2079=IKsin(j4);
IkReal x2080=IKcos(j4);
IkReal x2081=(r21*sj5);
IkReal x2082=(cj5*r20);
IkReal x2083=((1.0)*x2080);
IkReal x2084=((1.0)*x2079);
evalcond[0]=((((-1.0)*r22*x2083))+(((-1.0)*x2082*x2084))+((x2079*x2081)));
evalcond[1]=(((cj2*sj1))+(((-1.0)*r22*x2084))+((cj1*sj2))+(((-1.0)*x2081*x2083))+((x2080*x2082)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x2085=(cj5*sj4);
IkReal x2086=(sj4*sj5);
if( IKabs((((r00*x2085))+(((-1.0)*r01*x2086))+((cj4*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r11*x2086))+(((-1.0)*r10*x2085))+(((-1.0)*cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r00*x2085))+(((-1.0)*r01*x2086))+((cj4*r02))))+IKsqr((((r11*x2086))+(((-1.0)*r10*x2085))+(((-1.0)*cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r00*x2085))+(((-1.0)*r01*x2086))+((cj4*r02))), (((r11*x2086))+(((-1.0)*r10*x2085))+(((-1.0)*cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x2087=IKcos(j0);
IkReal x2088=IKsin(j0);
IkReal x2089=(cj4*cj5);
IkReal x2090=(r10*sj5);
IkReal x2091=((1.0)*sj1);
IkReal x2092=(r11*sj5);
IkReal x2093=(cj1*cj2);
IkReal x2094=(cj5*r11);
IkReal x2095=((1.0)*sj4);
IkReal x2096=(cj2*sj1);
IkReal x2097=(cj5*r01);
IkReal x2098=(r00*sj5);
IkReal x2099=((0.214)*cj1);
IkReal x2100=((0.243)*sj1);
IkReal x2101=((1.0)*cj4);
IkReal x2102=(r01*sj5);
IkReal x2103=(sj2*x2088);
IkReal x2104=(sj2*x2087);
evalcond[0]=((((-1.0)*r02*x2101))+(((-1.0)*cj5*r00*x2095))+x2088+((sj4*x2102)));
evalcond[1]=((((-1.0)*x2087))+(((-1.0)*r12*x2101))+((sj4*x2092))+(((-1.0)*cj5*r10*x2095)));
evalcond[2]=(((x2087*x2096))+((cj1*x2104))+(((-1.0)*x2098))+(((-1.0)*x2097)));
evalcond[3]=(((x2088*x2096))+((cj1*x2103))+(((-1.0)*x2090))+(((-1.0)*x2094)));
evalcond[4]=((((-1.0)*x2101*x2102))+((x2087*x2093))+(((-1.0)*x2091*x2104))+(((-1.0)*r02*x2095))+((r00*x2089)));
evalcond[5]=((((-1.0)*x2092*x2101))+((x2088*x2093))+((r10*x2089))+(((-1.0)*x2091*x2103))+(((-1.0)*r12*x2095)));
evalcond[6]=((((-1.0)*x2087*x2100))+(((-1.0)*x2099*x2104))+(((-0.11)*x2097))+(((-0.11)*x2098))+(((-1.0)*px))+(((-0.214)*x2087*x2096))+(((0.123)*x2088)));
evalcond[7]=((((-0.123)*x2087))+(((-1.0)*x2099*x2103))+(((-0.11)*x2090))+(((-0.11)*x2094))+(((-1.0)*py))+(((-0.214)*x2088*x2096))+(((-1.0)*x2088*x2100)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x2105=IKPowWithIntegerCheck(IKsign((((cj2*sj1))+((cj1*sj2)))),-1);
if(!x2105.valid){
continue;
}
CheckValue<IkReal> x2106 = IKatan2WithCheck(IkReal((((cj5*r11))+((r10*sj5)))),IkReal((((r00*sj5))+((cj5*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2106.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2105.value)))+(x2106.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x2107=IKcos(j0);
IkReal x2108=IKsin(j0);
IkReal x2109=(r10*sj5);
IkReal x2110=(cj5*r11);
IkReal x2111=(cj2*sj1);
IkReal x2112=(cj5*r01);
IkReal x2113=(r00*sj5);
IkReal x2114=((0.243)*sj1);
IkReal x2115=(cj1*sj2);
IkReal x2116=((0.214)*x2107);
IkReal x2117=((0.214)*x2108);
evalcond[0]=(((x2107*x2111))+((x2107*x2115))+(((-1.0)*x2112))+(((-1.0)*x2113)));
evalcond[1]=((((-1.0)*x2109))+(((-1.0)*x2110))+((x2108*x2111))+((x2108*x2115)));
evalcond[2]=((((-1.0)*x2107*x2114))+(((-1.0)*px))+(((0.123)*x2108))+(((-1.0)*x2111*x2116))+(((-0.11)*x2113))+(((-0.11)*x2112))+(((-1.0)*x2115*x2116)));
evalcond[3]=((((-1.0)*py))+(((-1.0)*x2108*x2114))+(((-1.0)*x2111*x2117))+(((-0.11)*x2110))+(((-0.123)*x2107))+(((-0.11)*x2109))+(((-1.0)*x2115*x2117)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x2118=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x2118;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x2118);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x2119=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x2119;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x2119);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x2120=((1.0)*cj5);
IkReal x2121=((((-1.0)*r21*x2120))+(((-1.0)*r20*sj5)));
j4eval[0]=x2121;
j4eval[1]=((IKabs((((r11*sj0*sj5))+(((-1.0)*cj0*r00*x2120))+((cj0*r01*sj5))+(((-1.0)*r10*sj0*x2120)))))+(IKabs((((r12*sj0))+((cj0*r02))))));
j4eval[2]=IKsign(x2121);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x2122=((-1.0)*r20);
IkReal x2124 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x2124)==0){
continue;
}
IkReal x2123=pow(x2124,-0.5);
CheckValue<IkReal> x2125 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x2122),IKFAST_ATAN2_MAGTHRESH);
if(!x2125.valid){
continue;
}
IkReal gconst78=((-1.0)*(x2125.value));
IkReal gconst79=(r21*x2123);
IkReal gconst80=(x2122*x2123);
CheckValue<IkReal> x2126 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2126.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x2126.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x2127=((-1.0)*r20);
IkReal x2128=x2123;
CheckValue<IkReal> x2130 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x2127),IKFAST_ATAN2_MAGTHRESH);
if(!x2130.valid){
continue;
}
IkReal x2129=((-1.0)*(x2130.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst79;
cj5=gconst80;
j5=x2129;
IkReal gconst78=x2129;
IkReal gconst79=(r21*x2128);
IkReal gconst80=(x2127*x2128);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2131=((-1.0)*r20);
IkReal x2132=x2123;
CheckValue<IkReal> x2134 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x2131),IKFAST_ATAN2_MAGTHRESH);
if(!x2134.valid){
continue;
}
IkReal x2133=((-1.0)*(x2134.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst79;
cj5=gconst80;
j5=x2133;
IkReal gconst78=x2133;
IkReal gconst79=(r21*x2132);
IkReal gconst80=(x2131*x2132);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x2135=((-1.0)*r20);
IkReal x2136=x2123;
CheckValue<IkReal> x2138 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x2135),IKFAST_ATAN2_MAGTHRESH);
if(!x2138.valid){
continue;
}
IkReal x2137=((-1.0)*(x2138.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst79;
cj5=gconst80;
j5=x2137;
IkReal gconst78=x2137;
IkReal gconst79=(r21*x2136);
IkReal gconst80=(x2135*x2136);
IkReal x2139=r22*r22;
CheckValue<IkReal> x2142=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x2139))),-1);
if(!x2142.valid){
continue;
}
IkReal x2140=x2142.value;
IkReal x2141=((((2.0)*x2140*(r20*r20)*(r21*r21)))+((x2140*(r21*r21*r21*r21)))+x2139+((x2140*(r20*r20*r20*r20))));
j4eval[0]=x2141;
j4eval[1]=IKsign(x2141);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2143=(gconst79*r21);
IkReal x2144=(cj2*sj1);
IkReal x2145=(cj1*sj2);
IkReal x2146=(gconst80*r20);
CheckValue<IkReal> x2147=IKPowWithIntegerCheck(IKsign(((r22*r22)+(((-2.0)*x2143*x2146))+(x2146*x2146)+(x2143*x2143))),-1);
if(!x2147.valid){
continue;
}
CheckValue<IkReal> x2148 = IKatan2WithCheck(IkReal((((r22*x2145))+((r22*x2144)))),IkReal(((((-1.0)*x2145*x2146))+((x2143*x2145))+((x2143*x2144))+(((-1.0)*x2144*x2146)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2148.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2147.value)))+(x2148.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2149=IKsin(j4);
IkReal x2150=IKcos(j4);
IkReal x2151=(gconst79*r01);
IkReal x2152=(cj1*cj2);
IkReal x2153=(gconst79*r21);
IkReal x2154=(gconst79*r11);
IkReal x2155=((1.0)*cj0);
IkReal x2156=(sj1*sj2);
IkReal x2157=((1.0)*x2150);
IkReal x2158=(gconst80*x2150);
IkReal x2159=((1.0)*x2149);
IkReal x2160=(gconst80*x2159);
evalcond[0]=(((x2149*x2153))+(((-1.0)*r20*x2160))+(((-1.0)*r22*x2157)));
evalcond[1]=(sj0+((x2149*x2151))+(((-1.0)*r02*x2157))+(((-1.0)*r00*x2160)));
evalcond[2]=((((-1.0)*r10*x2160))+((x2149*x2154))+(((-1.0)*r12*x2157))+(((-1.0)*x2155)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r20*x2158))+(((-1.0)*x2153*x2157))+(((-1.0)*r22*x2159)));
evalcond[4]=((((-1.0)*r02*x2159))+((cj0*x2152))+((r00*x2158))+(((-1.0)*x2155*x2156))+(((-1.0)*x2151*x2157)));
evalcond[5]=((((-1.0)*r12*x2159))+((sj0*x2152))+((r10*x2158))+(((-1.0)*x2154*x2157))+(((-1.0)*sj0*x2156)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2161=IKPowWithIntegerCheck(IKsign((((gconst79*r00))+((gconst80*r01)))),-1);
if(!x2161.valid){
continue;
}
CheckValue<IkReal> x2162 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst79*r21))+(((-1.0)*cj0*gconst80*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2162.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2161.value)))+(x2162.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2163=IKsin(j4);
IkReal x2164=IKcos(j4);
IkReal x2165=(gconst79*r01);
IkReal x2166=(cj1*cj2);
IkReal x2167=(gconst79*r21);
IkReal x2168=(gconst79*r11);
IkReal x2169=((1.0)*cj0);
IkReal x2170=(sj1*sj2);
IkReal x2171=((1.0)*x2164);
IkReal x2172=(gconst80*x2164);
IkReal x2173=((1.0)*x2163);
IkReal x2174=(gconst80*x2173);
evalcond[0]=((((-1.0)*r20*x2174))+((x2163*x2167))+(((-1.0)*r22*x2171)));
evalcond[1]=(sj0+(((-1.0)*r02*x2171))+((x2163*x2165))+(((-1.0)*r00*x2174)));
evalcond[2]=((((-1.0)*x2169))+(((-1.0)*r10*x2174))+((x2163*x2168))+(((-1.0)*r12*x2171)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r20*x2172))+(((-1.0)*r22*x2173))+(((-1.0)*x2167*x2171)));
evalcond[4]=(((r00*x2172))+(((-1.0)*x2169*x2170))+((cj0*x2166))+(((-1.0)*r02*x2173))+(((-1.0)*x2165*x2171)));
evalcond[5]=((((-1.0)*x2168*x2171))+((sj0*x2166))+((r10*x2172))+(((-1.0)*r12*x2173))+(((-1.0)*sj0*x2170)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2175=IKPowWithIntegerCheck(IKsign((((gconst80*r11))+((gconst79*r10)))),-1);
if(!x2175.valid){
continue;
}
CheckValue<IkReal> x2176 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst79*r21*sj0))+(((-1.0)*gconst80*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2176.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2175.value)))+(x2176.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2177=IKsin(j4);
IkReal x2178=IKcos(j4);
IkReal x2179=(gconst79*r01);
IkReal x2180=(cj1*cj2);
IkReal x2181=(gconst79*r21);
IkReal x2182=(gconst79*r11);
IkReal x2183=((1.0)*cj0);
IkReal x2184=(sj1*sj2);
IkReal x2185=((1.0)*x2178);
IkReal x2186=(gconst80*x2178);
IkReal x2187=((1.0)*x2177);
IkReal x2188=(gconst80*x2187);
evalcond[0]=((((-1.0)*r20*x2188))+((x2177*x2181))+(((-1.0)*r22*x2185)));
evalcond[1]=(sj0+((x2177*x2179))+(((-1.0)*r02*x2185))+(((-1.0)*r00*x2188)));
evalcond[2]=((((-1.0)*r10*x2188))+((x2177*x2182))+(((-1.0)*x2183))+(((-1.0)*r12*x2185)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r20*x2186))+(((-1.0)*r22*x2187))+(((-1.0)*x2181*x2185)));
evalcond[4]=(((cj0*x2180))+(((-1.0)*r02*x2187))+(((-1.0)*x2183*x2184))+(((-1.0)*x2179*x2185))+((r00*x2186)));
evalcond[5]=(((sj0*x2180))+(((-1.0)*x2182*x2185))+(((-1.0)*sj0*x2184))+(((-1.0)*r12*x2187))+((r10*x2186)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2189=((-1.0)*r21);
IkReal x2191 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x2191)==0){
continue;
}
IkReal x2190=pow(x2191,-0.5);
CheckValue<IkReal> x2192 = IKatan2WithCheck(IkReal(x2189),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2192.valid){
continue;
}
IkReal gconst81=((3.14159265358979)+(((-1.0)*(x2192.value))));
IkReal gconst82=(x2189*x2190);
IkReal gconst83=((1.0)*r20*x2190);
CheckValue<IkReal> x2193 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2193.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x2193.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x2194=((-1.0)*r21);
CheckValue<IkReal> x2197 = IKatan2WithCheck(IkReal(x2194),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2197.valid){
continue;
}
IkReal x2195=((1.0)*(x2197.value));
IkReal x2196=x2190;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x2195)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x2195)));
IkReal gconst82=(x2194*x2196);
IkReal gconst83=((1.0)*r20*x2196);
IkReal x2198=r22*r22;
IkReal x2199=((1.0)*x2198);
CheckValue<IkReal> x2203=IKPowWithIntegerCheck(((-1.0)+x2198),-1);
if(!x2203.valid){
continue;
}
IkReal x2200=x2203.value;
if((((1.0)+(((-1.0)*x2199)))) < -0.00001)
continue;
IkReal x2201=IKsqrt(((1.0)+(((-1.0)*x2199))));
IkReal x2202=(sj0*x2200*x2201);
j4eval[0]=((IKabs((x2202+(((-1.0)*x2199*x2202)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2204=((-1.0)*r21);
CheckValue<IkReal> x2207 = IKatan2WithCheck(IkReal(x2204),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2207.valid){
continue;
}
IkReal x2205=((1.0)*(x2207.value));
IkReal x2206=x2190;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x2205)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x2205)));
IkReal gconst82=(x2204*x2206);
IkReal gconst83=((1.0)*r20*x2206);
IkReal x2208=r22*r22;
IkReal x2209=((1.0)*x2208);
CheckValue<IkReal> x2213=IKPowWithIntegerCheck(((-1.0)+x2208),-1);
if(!x2213.valid){
continue;
}
IkReal x2210=x2213.value;
if((((1.0)+(((-1.0)*x2209)))) < -0.00001)
continue;
IkReal x2211=IKsqrt(((1.0)+(((-1.0)*x2209))));
IkReal x2212=(cj0*x2210*x2211);
j4eval[0]=((IKabs((x2212+(((-1.0)*x2209*x2212)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x2214=((-1.0)*r21);
CheckValue<IkReal> x2217 = IKatan2WithCheck(IkReal(x2214),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2217.valid){
continue;
}
IkReal x2215=((1.0)*(x2217.value));
IkReal x2216=x2190;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x2215)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x2215)));
IkReal gconst82=(x2214*x2216);
IkReal gconst83=((1.0)*r20*x2216);
IkReal x2218=r22*r22;
IkReal x2219=(cj0*r02);
IkReal x2220=(r12*sj0);
CheckValue<IkReal> x2224=IKPowWithIntegerCheck(((-1.0)+x2218),-1);
if(!x2224.valid){
continue;
}
IkReal x2221=x2224.value;
if((((1.0)+(((-1.0)*x2218)))) < -0.00001)
continue;
IkReal x2222=IKsqrt(((1.0)+(((-1.0)*x2218))));
IkReal x2223=((1.0)*r22*x2221*x2222);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=((IKabs(((((-1.0)*x2219*x2223))+(((-1.0)*x2220*x2223)))))+(IKabs((x2220+x2219))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2225=((1.0)*gconst83);
CheckValue<IkReal> x2226=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst82*r20))+(((-1.0)*r21*x2225)))),-1);
if(!x2226.valid){
continue;
}
CheckValue<IkReal> x2227 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*r10*sj0*x2225))+(((-1.0)*cj0*r00*x2225))+((gconst82*r11*sj0))+((cj0*gconst82*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2227.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2226.value)))+(x2227.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2228=IKsin(j4);
IkReal x2229=IKcos(j4);
IkReal x2230=(cj1*cj2);
IkReal x2231=(gconst82*r11);
IkReal x2232=((1.0)*cj0);
IkReal x2233=(sj1*sj2);
IkReal x2234=((1.0)*x2229);
IkReal x2235=(gconst83*x2229);
IkReal x2236=(gconst82*x2228);
IkReal x2237=((1.0)*x2228);
evalcond[0]=((((-1.0)*gconst83*r20*x2237))+((r21*x2236))+(((-1.0)*r22*x2234)));
evalcond[1]=(sj0+(((-1.0)*r02*x2234))+(((-1.0)*gconst83*r00*x2237))+((r01*x2236)));
evalcond[2]=(((x2228*x2231))+(((-1.0)*x2232))+(((-1.0)*r12*x2234))+(((-1.0)*gconst83*r10*x2237)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst82*r21*x2234))+((r20*x2235))+(((-1.0)*r22*x2237)));
evalcond[4]=((((-1.0)*gconst82*r01*x2234))+((cj0*x2230))+(((-1.0)*r02*x2237))+(((-1.0)*x2232*x2233))+((r00*x2235)));
evalcond[5]=(((sj0*x2230))+((r10*x2235))+(((-1.0)*r12*x2237))+(((-1.0)*sj0*x2233))+(((-1.0)*x2231*x2234)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2238 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst82*r21))+(((-1.0)*cj0*gconst83*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2238.valid){
continue;
}
CheckValue<IkReal> x2239=IKPowWithIntegerCheck(IKsign((((gconst83*r01))+((gconst82*r00)))),-1);
if(!x2239.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2238.value)+(((1.5707963267949)*(x2239.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2240=IKsin(j4);
IkReal x2241=IKcos(j4);
IkReal x2242=(cj1*cj2);
IkReal x2243=(gconst82*r11);
IkReal x2244=((1.0)*cj0);
IkReal x2245=(sj1*sj2);
IkReal x2246=((1.0)*x2241);
IkReal x2247=(gconst83*x2241);
IkReal x2248=(gconst82*x2240);
IkReal x2249=((1.0)*x2240);
evalcond[0]=((((-1.0)*r22*x2246))+((r21*x2248))+(((-1.0)*gconst83*r20*x2249)));
evalcond[1]=(sj0+(((-1.0)*r02*x2246))+(((-1.0)*gconst83*r00*x2249))+((r01*x2248)));
evalcond[2]=((((-1.0)*gconst83*r10*x2249))+(((-1.0)*x2244))+(((-1.0)*r12*x2246))+((x2240*x2243)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x2249))+(((-1.0)*gconst82*r21*x2246))+((cj1*sj2))+((r20*x2247)));
evalcond[4]=((((-1.0)*gconst82*r01*x2246))+(((-1.0)*r02*x2249))+(((-1.0)*x2244*x2245))+((r00*x2247))+((cj0*x2242)));
evalcond[5]=(((r10*x2247))+((sj0*x2242))+(((-1.0)*sj0*x2245))+(((-1.0)*x2243*x2246))+(((-1.0)*r12*x2249)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2250 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst82*r21*sj0))+(((-1.0)*gconst83*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2250.valid){
continue;
}
CheckValue<IkReal> x2251=IKPowWithIntegerCheck(IKsign((((gconst83*r11))+((gconst82*r10)))),-1);
if(!x2251.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2250.value)+(((1.5707963267949)*(x2251.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2252=IKsin(j4);
IkReal x2253=IKcos(j4);
IkReal x2254=(cj1*cj2);
IkReal x2255=(gconst82*r11);
IkReal x2256=((1.0)*cj0);
IkReal x2257=(sj1*sj2);
IkReal x2258=((1.0)*x2253);
IkReal x2259=(gconst83*x2253);
IkReal x2260=(gconst82*x2252);
IkReal x2261=((1.0)*x2252);
evalcond[0]=((((-1.0)*r22*x2258))+((r21*x2260))+(((-1.0)*gconst83*r20*x2261)));
evalcond[1]=(((r01*x2260))+sj0+(((-1.0)*gconst83*r00*x2261))+(((-1.0)*r02*x2258)));
evalcond[2]=((((-1.0)*gconst83*r10*x2261))+((x2252*x2255))+(((-1.0)*r12*x2258))+(((-1.0)*x2256)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*gconst82*r21*x2258))+((cj1*sj2))+((r20*x2259))+(((-1.0)*r22*x2261)));
evalcond[4]=(((cj0*x2254))+(((-1.0)*x2256*x2257))+((r00*x2259))+(((-1.0)*gconst82*r01*x2258))+(((-1.0)*r02*x2261)));
evalcond[5]=((((-1.0)*x2255*x2258))+((r10*x2259))+(((-1.0)*sj0*x2257))+((sj0*x2254))+(((-1.0)*r12*x2261)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2263 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x2263)==0){
continue;
}
IkReal x2262=pow(x2263,-0.5);
CheckValue<IkReal> x2264 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x2264.valid){
continue;
}
IkReal gconst84=((-1.0)*(x2264.value));
IkReal gconst85=((-1.0)*r01*x2262);
IkReal gconst86=(r00*x2262);
CheckValue<IkReal> x2265 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x2265.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x2265.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x2268 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x2268.valid){
continue;
}
IkReal x2266=((-1.0)*(x2268.value));
IkReal x2267=x2262;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst85;
cj5=gconst86;
j5=x2266;
IkReal gconst84=x2266;
IkReal gconst85=((-1.0)*r01*x2267);
IkReal gconst86=(r00*x2267);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2269=((1.0)*gconst86);
CheckValue<IkReal> x2270 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*r10*sj0*x2269))+(((-1.0)*cj0*r00*x2269))+((gconst85*r11*sj0))+((cj0*gconst85*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2270.valid){
continue;
}
CheckValue<IkReal> x2271=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst85*r20))+(((-1.0)*r21*x2269)))),-1);
if(!x2271.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2270.value)+(((1.5707963267949)*(x2271.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2272=IKsin(j4);
IkReal x2273=IKcos(j4);
IkReal x2274=(gconst85*r21);
IkReal x2275=(cj1*cj2);
IkReal x2276=(gconst86*r00);
IkReal x2277=(gconst86*r10);
IkReal x2278=(gconst85*r11);
IkReal x2279=(gconst85*r01);
IkReal x2280=(gconst86*r20);
IkReal x2281=((1.0)*cj0);
IkReal x2282=(sj1*sj2);
IkReal x2283=((1.0)*x2273);
IkReal x2284=((1.0)*x2272);
evalcond[0]=((((-1.0)*x2280*x2284))+((x2272*x2274))+(((-1.0)*r22*x2283)));
evalcond[1]=((((-1.0)*r02*x2283))+(((-1.0)*x2276*x2284))+sj0+((x2272*x2279)));
evalcond[2]=((((-1.0)*x2277*x2284))+(((-1.0)*x2281))+(((-1.0)*r12*x2283))+((x2272*x2278)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((x2273*x2280))+(((-1.0)*x2274*x2283))+(((-1.0)*r22*x2284)));
evalcond[4]=((((-1.0)*r02*x2284))+((x2273*x2276))+((cj0*x2275))+(((-1.0)*x2281*x2282))+(((-1.0)*x2279*x2283)));
evalcond[5]=(((sj0*x2275))+((x2273*x2277))+(((-1.0)*r12*x2284))+(((-1.0)*x2278*x2283))+(((-1.0)*sj0*x2282)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2285=IKPowWithIntegerCheck(IKsign((((gconst86*r11))+((gconst85*r10)))),-1);
if(!x2285.valid){
continue;
}
CheckValue<IkReal> x2286 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*gconst86*r20*sj0))+((gconst85*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2286.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2285.value)))+(x2286.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2287=IKsin(j4);
IkReal x2288=IKcos(j4);
IkReal x2289=(gconst85*r21);
IkReal x2290=(cj1*cj2);
IkReal x2291=(gconst86*r00);
IkReal x2292=(gconst86*r10);
IkReal x2293=(gconst85*r11);
IkReal x2294=(gconst85*r01);
IkReal x2295=(gconst86*r20);
IkReal x2296=((1.0)*cj0);
IkReal x2297=(sj1*sj2);
IkReal x2298=((1.0)*x2288);
IkReal x2299=((1.0)*x2287);
evalcond[0]=(((x2287*x2289))+(((-1.0)*x2295*x2299))+(((-1.0)*r22*x2298)));
evalcond[1]=(sj0+(((-1.0)*r02*x2298))+((x2287*x2294))+(((-1.0)*x2291*x2299)));
evalcond[2]=((((-1.0)*x2292*x2299))+((x2287*x2293))+(((-1.0)*r12*x2298))+(((-1.0)*x2296)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x2289*x2298))+((cj1*sj2))+(((-1.0)*r22*x2299))+((x2288*x2295)));
evalcond[4]=(((cj0*x2290))+(((-1.0)*r02*x2299))+(((-1.0)*x2296*x2297))+((x2288*x2291))+(((-1.0)*x2294*x2298)));
evalcond[5]=(((sj0*x2290))+(((-1.0)*x2293*x2298))+(((-1.0)*sj0*x2297))+(((-1.0)*r12*x2299))+((x2288*x2292)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2301 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x2301)==0){
continue;
}
IkReal x2300=pow(x2301,-0.5);
CheckValue<IkReal> x2302 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x2302.valid){
continue;
}
IkReal gconst87=((3.14159265358979)+(((-1.0)*(x2302.value))));
IkReal gconst88=((1.0)*r01*x2300);
IkReal gconst89=((-1.0)*r00*x2300);
CheckValue<IkReal> x2303 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x2303.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x2303.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x2306 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x2306.valid){
continue;
}
IkReal x2304=((1.0)*(x2306.value));
IkReal x2305=x2300;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x2304)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x2304)));
IkReal gconst88=((1.0)*r01*x2305);
IkReal gconst89=((-1.0)*r00*x2305);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[5];
CheckValue<IkReal> x2309 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x2309.valid){
continue;
}
IkReal x2307=((1.0)*(x2309.value));
IkReal x2308=x2300;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x2307)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x2307)));
IkReal gconst88=((1.0)*r01*x2308);
IkReal gconst89=((-1.0)*r00*x2308);
j4eval[0]=0;
j4eval[1]=cj0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
j4eval[4]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x2312 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x2312.valid){
continue;
}
IkReal x2310=((1.0)*(x2312.value));
IkReal x2311=x2300;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x2310)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x2310)));
IkReal gconst88=((1.0)*r01*x2311);
IkReal gconst89=((-1.0)*r00*x2311);
IkReal x2313=r02*r02;
IkReal x2314=(r12*sj0);
IkReal x2315=x2300;
IkReal x2316=(cj0*x2315);
j4eval[0]=((IKabs((x2314+((cj0*r02)))))+(IKabs(((((-1.0)*x2316))+((r02*x2314*x2315))+((x2313*x2316))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2317=((1.0)*gconst89);
CheckValue<IkReal> x2318=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst88*r20))+(((-1.0)*r21*x2317)))),-1);
if(!x2318.valid){
continue;
}
CheckValue<IkReal> x2319 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((cj0*gconst88*r01))+((gconst88*r11*sj0))+(((-1.0)*r10*sj0*x2317))+(((-1.0)*cj0*r00*x2317)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2319.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2318.value)))+(x2319.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2320=IKsin(j4);
IkReal x2321=IKcos(j4);
IkReal x2322=(cj1*cj2);
IkReal x2323=(gconst89*r20);
IkReal x2324=(gconst89*r10);
IkReal x2325=(gconst89*r00);
IkReal x2326=((1.0)*cj0);
IkReal x2327=(sj1*sj2);
IkReal x2328=((1.0)*x2321);
IkReal x2329=((1.0)*x2320);
IkReal x2330=(gconst88*x2320);
evalcond[0]=(((r21*x2330))+(((-1.0)*r22*x2328))+(((-1.0)*x2323*x2329)));
evalcond[1]=(sj0+((r01*x2330))+(((-1.0)*x2325*x2329))+(((-1.0)*r02*x2328)));
evalcond[2]=((((-1.0)*x2324*x2329))+((r11*x2330))+(((-1.0)*r12*x2328))+(((-1.0)*x2326)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*gconst88*r21*x2328))+(((-1.0)*r22*x2329))+((cj1*sj2))+((x2321*x2323)));
evalcond[4]=(((cj0*x2322))+(((-1.0)*gconst88*r01*x2328))+((x2321*x2325))+(((-1.0)*x2326*x2327))+(((-1.0)*r02*x2329)));
evalcond[5]=((((-1.0)*sj0*x2327))+((x2321*x2324))+((sj0*x2322))+(((-1.0)*r12*x2329))+(((-1.0)*gconst88*r11*x2328)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2331=IKPowWithIntegerCheck(IKsign((((gconst88*r00))+((gconst89*r01)))),-1);
if(!x2331.valid){
continue;
}
CheckValue<IkReal> x2332 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*gconst89*r20))+((cj0*gconst88*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2332.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2331.value)))+(x2332.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2333=IKsin(j4);
IkReal x2334=IKcos(j4);
IkReal x2335=(cj1*cj2);
IkReal x2336=(gconst89*r20);
IkReal x2337=(gconst89*r10);
IkReal x2338=(gconst89*r00);
IkReal x2339=((1.0)*cj0);
IkReal x2340=(sj1*sj2);
IkReal x2341=((1.0)*x2334);
IkReal x2342=((1.0)*x2333);
IkReal x2343=(gconst88*x2333);
evalcond[0]=((((-1.0)*r22*x2341))+(((-1.0)*x2336*x2342))+((r21*x2343)));
evalcond[1]=(((r01*x2343))+sj0+(((-1.0)*r02*x2341))+(((-1.0)*x2338*x2342)));
evalcond[2]=((((-1.0)*x2337*x2342))+(((-1.0)*x2339))+((r11*x2343))+(((-1.0)*r12*x2341)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst88*r21*x2341))+((x2334*x2336))+(((-1.0)*r22*x2342)));
evalcond[4]=((((-1.0)*x2339*x2340))+(((-1.0)*gconst88*r01*x2341))+((x2334*x2338))+(((-1.0)*r02*x2342))+((cj0*x2335)));
evalcond[5]=((((-1.0)*gconst88*r11*x2341))+((sj0*x2335))+((x2334*x2337))+(((-1.0)*sj0*x2340))+(((-1.0)*r12*x2342)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2344=IKPowWithIntegerCheck(IKsign((((gconst88*r10))+((gconst89*r11)))),-1);
if(!x2344.valid){
continue;
}
CheckValue<IkReal> x2345 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*gconst89*r20*sj0))+((gconst88*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2345.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2344.value)))+(x2345.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2346=IKsin(j4);
IkReal x2347=IKcos(j4);
IkReal x2348=(cj1*cj2);
IkReal x2349=(gconst89*r20);
IkReal x2350=(gconst89*r10);
IkReal x2351=(gconst89*r00);
IkReal x2352=((1.0)*cj0);
IkReal x2353=(sj1*sj2);
IkReal x2354=((1.0)*x2347);
IkReal x2355=((1.0)*x2346);
IkReal x2356=(gconst88*x2346);
evalcond[0]=((((-1.0)*r22*x2354))+((r21*x2356))+(((-1.0)*x2349*x2355)));
evalcond[1]=(sj0+((r01*x2356))+(((-1.0)*r02*x2354))+(((-1.0)*x2351*x2355)));
evalcond[2]=(((r11*x2356))+(((-1.0)*x2350*x2355))+(((-1.0)*r12*x2354))+(((-1.0)*x2352)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst88*r21*x2354))+(((-1.0)*r22*x2355))+((x2347*x2349)));
evalcond[4]=((((-1.0)*gconst88*r01*x2354))+(((-1.0)*x2352*x2353))+(((-1.0)*r02*x2355))+((x2347*x2351))+((cj0*x2348)));
evalcond[5]=(((sj0*x2348))+(((-1.0)*gconst88*r11*x2354))+(((-1.0)*sj0*x2353))+(((-1.0)*r12*x2355))+((x2347*x2350)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2357=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x2357;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x2357);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2358=((1.0)*cj5);
IkReal x2359=((((-1.0)*r21*x2358))+(((-1.0)*r20*sj5)));
j4eval[0]=x2359;
j4eval[1]=((IKabs(r12))+(IKabs((((r11*sj5))+(((-1.0)*r10*x2358))))));
j4eval[2]=IKsign(x2359);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2360=cj5*cj5;
IkReal x2361=r01*r01;
IkReal x2362=(cj5*r00);
IkReal x2363=(r01*sj5);
IkReal x2364=(x2361+(((-1.0)*x2360*x2361))+(((-2.0)*x2362*x2363))+((x2360*(r00*r00)))+(r02*r02));
j4eval[0]=x2364;
j4eval[1]=((IKabs(r02))+(IKabs((x2362+(((-1.0)*x2363))))));
j4eval[2]=IKsign(x2364);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2365=cj5*cj5;
IkReal x2366=r01*r01;
IkReal x2367=(r01*sj5);
IkReal x2368=(cj5*r00);
CheckValue<IkReal> x2369 = IKatan2WithCheck(IkReal((x2368+(((-1.0)*x2367)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x2369.valid){
continue;
}
CheckValue<IkReal> x2370=IKPowWithIntegerCheck(IKsign((x2366+(((-1.0)*x2365*x2366))+((x2365*(r00*r00)))+(r02*r02)+(((-2.0)*x2367*x2368)))),-1);
if(!x2370.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2369.value)+(((1.5707963267949)*(x2370.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2371=IKsin(j4);
IkReal x2372=IKcos(j4);
IkReal x2373=(cj5*r10);
IkReal x2374=(r01*sj5);
IkReal x2375=(cj5*r00);
IkReal x2376=(cj5*r20);
IkReal x2377=((1.0)*x2372);
IkReal x2378=((1.0)*x2371);
IkReal x2379=(sj5*x2371);
evalcond[0]=((((-1.0)*x2376*x2378))+(((-1.0)*r22*x2377))+((r21*x2379)));
evalcond[1]=((((-1.0)*x2373*x2378))+(((-1.0)*r12*x2377))+((r11*x2379)));
evalcond[2]=(((x2372*x2375))+(((-1.0)*r02*x2378))+(((-1.0)*x2374*x2377)));
evalcond[3]=((1.0)+(((-1.0)*r02*x2377))+((x2371*x2374))+(((-1.0)*x2375*x2378)));
evalcond[4]=(((x2372*x2376))+((cj2*sj1))+(((-1.0)*r21*sj5*x2377))+((cj1*sj2))+(((-1.0)*r22*x2378)));
evalcond[5]=(((x2372*x2373))+(((-1.0)*r11*sj5*x2377))+(((-1.0)*sj1*sj2))+((cj1*cj2))+(((-1.0)*r12*x2378)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2380=((1.0)*cj5);
CheckValue<IkReal> x2381=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x2380))+(((-1.0)*r20*sj5)))),-1);
if(!x2381.valid){
continue;
}
CheckValue<IkReal> x2382 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x2380))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2382.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2381.value)))+(x2382.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2383=IKsin(j4);
IkReal x2384=IKcos(j4);
IkReal x2385=(cj5*r10);
IkReal x2386=(r01*sj5);
IkReal x2387=(cj5*r00);
IkReal x2388=(cj5*r20);
IkReal x2389=((1.0)*x2384);
IkReal x2390=((1.0)*x2383);
IkReal x2391=(sj5*x2383);
evalcond[0]=((((-1.0)*r22*x2389))+(((-1.0)*x2388*x2390))+((r21*x2391)));
evalcond[1]=((((-1.0)*r12*x2389))+(((-1.0)*x2385*x2390))+((r11*x2391)));
evalcond[2]=(((x2384*x2387))+(((-1.0)*r02*x2390))+(((-1.0)*x2386*x2389)));
evalcond[3]=((1.0)+(((-1.0)*r02*x2389))+((x2383*x2386))+(((-1.0)*x2387*x2390)));
evalcond[4]=(((cj2*sj1))+((x2384*x2388))+(((-1.0)*r21*sj5*x2389))+((cj1*sj2))+(((-1.0)*r22*x2390)));
evalcond[5]=((((-1.0)*r11*sj5*x2389))+((x2384*x2385))+(((-1.0)*sj1*sj2))+((cj1*cj2))+(((-1.0)*r12*x2390)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2392 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2392.valid){
continue;
}
CheckValue<IkReal> x2393=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x2393.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2392.value)+(((1.5707963267949)*(x2393.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2394=IKsin(j4);
IkReal x2395=IKcos(j4);
IkReal x2396=(cj5*r10);
IkReal x2397=(r01*sj5);
IkReal x2398=(cj5*r00);
IkReal x2399=(cj5*r20);
IkReal x2400=((1.0)*x2395);
IkReal x2401=((1.0)*x2394);
IkReal x2402=(sj5*x2394);
evalcond[0]=((((-1.0)*x2399*x2401))+((r21*x2402))+(((-1.0)*r22*x2400)));
evalcond[1]=(((r11*x2402))+(((-1.0)*x2396*x2401))+(((-1.0)*r12*x2400)));
evalcond[2]=((((-1.0)*x2397*x2400))+(((-1.0)*r02*x2401))+((x2395*x2398)));
evalcond[3]=((1.0)+(((-1.0)*r02*x2400))+((x2394*x2397))+(((-1.0)*x2398*x2401)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r21*sj5*x2400))+((cj1*sj2))+(((-1.0)*r22*x2401))+((x2395*x2399)));
evalcond[5]=((((-1.0)*sj1*sj2))+((cj1*cj2))+(((-1.0)*r11*sj5*x2400))+(((-1.0)*r12*x2401))+((x2395*x2396)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x2403=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x2403;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x2403);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x2404=((1.0)*cj5);
IkReal x2405=((((-1.0)*r10*sj5))+(((-1.0)*r11*x2404)));
j4eval[0]=x2405;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x2404)))))+(IKabs(r22)));
j4eval[2]=IKsign(x2405);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x2406=cj5*cj5;
IkReal x2407=r01*r01;
IkReal x2408=(r01*sj5);
IkReal x2409=(cj5*r00);
IkReal x2410=((((-1.0)*x2407))+(((2.0)*x2408*x2409))+(((-1.0)*x2406*(r00*r00)))+(((-1.0)*(r02*r02)))+((x2406*x2407)));
j4eval[0]=x2410;
j4eval[1]=IKsign(x2410);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x2408))+x2409))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2411=cj5*cj5;
IkReal x2412=r01*r01;
IkReal x2413=(r01*sj5);
IkReal x2414=(cj5*r00);
CheckValue<IkReal> x2415=IKPowWithIntegerCheck(IKsign(((((-1.0)*x2412))+(((2.0)*x2413*x2414))+(((-1.0)*x2411*(r00*r00)))+(((-1.0)*(r02*r02)))+((x2411*x2412)))),-1);
if(!x2415.valid){
continue;
}
CheckValue<IkReal> x2416 = IKatan2WithCheck(IkReal((x2414+(((-1.0)*x2413)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x2416.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2415.value)))+(x2416.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2417=IKsin(j4);
IkReal x2418=IKcos(j4);
IkReal x2419=(cj5*r10);
IkReal x2420=(r01*sj5);
IkReal x2421=(cj5*r00);
IkReal x2422=(cj5*r20);
IkReal x2423=((1.0)*x2418);
IkReal x2424=((1.0)*x2417);
IkReal x2425=(sj5*x2417);
evalcond[0]=(((r21*x2425))+(((-1.0)*x2422*x2424))+(((-1.0)*r22*x2423)));
evalcond[1]=((((-1.0)*r12*x2423))+((r11*x2425))+(((-1.0)*x2419*x2424)));
evalcond[2]=(((x2418*x2421))+(((-1.0)*r02*x2424))+(((-1.0)*x2420*x2423)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x2423))+((x2417*x2420))+(((-1.0)*x2421*x2424)));
evalcond[4]=(((cj2*sj1))+((x2418*x2422))+((cj1*sj2))+(((-1.0)*r22*x2424))+(((-1.0)*r21*sj5*x2423)));
evalcond[5]=((((-1.0)*r11*sj5*x2423))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r12*x2424))+((x2418*x2419)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2426=((1.0)*cj5);
CheckValue<IkReal> x2427 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x2426)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2427.valid){
continue;
}
CheckValue<IkReal> x2428=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x2426)))),-1);
if(!x2428.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2427.value)+(((1.5707963267949)*(x2428.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2429=IKsin(j4);
IkReal x2430=IKcos(j4);
IkReal x2431=(cj5*r10);
IkReal x2432=(r01*sj5);
IkReal x2433=(cj5*r00);
IkReal x2434=(cj5*r20);
IkReal x2435=((1.0)*x2430);
IkReal x2436=((1.0)*x2429);
IkReal x2437=(sj5*x2429);
evalcond[0]=((((-1.0)*r22*x2435))+(((-1.0)*x2434*x2436))+((r21*x2437)));
evalcond[1]=(((r11*x2437))+(((-1.0)*x2431*x2436))+(((-1.0)*r12*x2435)));
evalcond[2]=((((-1.0)*r02*x2436))+(((-1.0)*x2432*x2435))+((x2430*x2433)));
evalcond[3]=((-1.0)+((x2429*x2432))+(((-1.0)*x2433*x2436))+(((-1.0)*r02*x2435)));
evalcond[4]=((((-1.0)*r22*x2436))+((cj2*sj1))+(((-1.0)*r21*sj5*x2435))+((cj1*sj2))+((x2430*x2434)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r11*sj5*x2435))+((x2430*x2431))+(((-1.0)*r12*x2436)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2438=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x2438.valid){
continue;
}
CheckValue<IkReal> x2439 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2439.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2438.value)))+(x2439.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2440=IKsin(j4);
IkReal x2441=IKcos(j4);
IkReal x2442=(cj5*r10);
IkReal x2443=(r01*sj5);
IkReal x2444=(cj5*r00);
IkReal x2445=(cj5*r20);
IkReal x2446=((1.0)*x2441);
IkReal x2447=((1.0)*x2440);
IkReal x2448=(sj5*x2440);
evalcond[0]=((((-1.0)*x2445*x2447))+(((-1.0)*r22*x2446))+((r21*x2448)));
evalcond[1]=((((-1.0)*r12*x2446))+((r11*x2448))+(((-1.0)*x2442*x2447)));
evalcond[2]=((((-1.0)*x2443*x2446))+((x2441*x2444))+(((-1.0)*r02*x2447)));
evalcond[3]=((-1.0)+(((-1.0)*x2444*x2447))+((x2440*x2443))+(((-1.0)*r02*x2446)));
evalcond[4]=((((-1.0)*r21*sj5*x2446))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x2447))+((x2441*x2445)));
evalcond[5]=((((-1.0)*r11*sj5*x2446))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r12*x2447))+((x2441*x2442)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2450 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x2450)==0){
continue;
}
IkReal x2449=pow(x2450,-0.5);
CheckValue<IkReal> x2451 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x2451.valid){
continue;
}
IkReal gconst90=((-1.0)*(x2451.value));
IkReal gconst91=((-1.0)*r11*x2449);
IkReal gconst92=(r10*x2449);
CheckValue<IkReal> x2452 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x2452.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x2452.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x2455 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x2455.valid){
continue;
}
IkReal x2453=((-1.0)*(x2455.value));
IkReal x2454=x2449;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst91;
cj5=gconst92;
j5=x2453;
IkReal gconst90=x2453;
IkReal gconst91=((-1.0)*r11*x2454);
IkReal gconst92=(r10*x2454);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2456=((1.0)*gconst92);
CheckValue<IkReal> x2457=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst91*r20))+(((-1.0)*r21*x2456)))),-1);
if(!x2457.valid){
continue;
}
CheckValue<IkReal> x2458 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*cj0*r00*x2456))+((gconst91*r11*sj0))+(((-1.0)*r10*sj0*x2456))+((cj0*gconst91*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2458.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2457.value)))+(x2458.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2459=IKsin(j4);
IkReal x2460=IKcos(j4);
IkReal x2461=(cj1*cj2);
IkReal x2462=(gconst92*r00);
IkReal x2463=(gconst92*r20);
IkReal x2464=(gconst92*r10);
IkReal x2465=((1.0)*cj0);
IkReal x2466=(sj1*sj2);
IkReal x2467=((1.0)*x2460);
IkReal x2468=(gconst91*x2459);
IkReal x2469=((1.0)*x2459);
evalcond[0]=((((-1.0)*r22*x2467))+(((-1.0)*x2463*x2469))+((r21*x2468)));
evalcond[1]=(((r01*x2468))+sj0+(((-1.0)*r02*x2467))+(((-1.0)*x2462*x2469)));
evalcond[2]=((((-1.0)*x2464*x2469))+(((-1.0)*r12*x2467))+((r11*x2468))+(((-1.0)*x2465)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x2469))+((x2460*x2463))+((cj1*sj2))+(((-1.0)*gconst91*r21*x2467)));
evalcond[4]=((((-1.0)*gconst91*r01*x2467))+(((-1.0)*x2465*x2466))+((x2460*x2462))+(((-1.0)*r02*x2469))+((cj0*x2461)));
evalcond[5]=(((x2460*x2464))+(((-1.0)*r12*x2469))+(((-1.0)*gconst91*r11*x2467))+(((-1.0)*sj0*x2466))+((sj0*x2461)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2470 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst91*r21))+(((-1.0)*cj0*gconst92*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2470.valid){
continue;
}
CheckValue<IkReal> x2471=IKPowWithIntegerCheck(IKsign((((gconst91*r00))+((gconst92*r01)))),-1);
if(!x2471.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2470.value)+(((1.5707963267949)*(x2471.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2472=IKsin(j4);
IkReal x2473=IKcos(j4);
IkReal x2474=(cj1*cj2);
IkReal x2475=(gconst92*r00);
IkReal x2476=(gconst92*r20);
IkReal x2477=(gconst92*r10);
IkReal x2478=((1.0)*cj0);
IkReal x2479=(sj1*sj2);
IkReal x2480=((1.0)*x2473);
IkReal x2481=(gconst91*x2472);
IkReal x2482=((1.0)*x2472);
evalcond[0]=((((-1.0)*r22*x2480))+(((-1.0)*x2476*x2482))+((r21*x2481)));
evalcond[1]=(((r01*x2481))+sj0+(((-1.0)*r02*x2480))+(((-1.0)*x2475*x2482)));
evalcond[2]=((((-1.0)*x2477*x2482))+(((-1.0)*x2478))+((r11*x2481))+(((-1.0)*r12*x2480)));
evalcond[3]=((((-1.0)*r22*x2482))+(((-1.0)*gconst91*r21*x2480))+((cj2*sj1))+((cj1*sj2))+((x2473*x2476)));
evalcond[4]=((((-1.0)*r02*x2482))+((cj0*x2474))+(((-1.0)*x2478*x2479))+((x2473*x2475))+(((-1.0)*gconst91*r01*x2480)));
evalcond[5]=((((-1.0)*sj0*x2479))+((sj0*x2474))+(((-1.0)*gconst91*r11*x2480))+(((-1.0)*r12*x2482))+((x2473*x2477)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2484 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x2484)==0){
continue;
}
IkReal x2483=pow(x2484,-0.5);
CheckValue<IkReal> x2485 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x2485.valid){
continue;
}
IkReal gconst93=((3.14159265358979)+(((-1.0)*(x2485.value))));
IkReal gconst94=((1.0)*r11*x2483);
IkReal gconst95=((-1.0)*r10*x2483);
CheckValue<IkReal> x2486 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x2486.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x2486.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x2489 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x2489.valid){
continue;
}
IkReal x2487=((1.0)*(x2489.value));
IkReal x2488=x2483;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x2487)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x2487)));
IkReal gconst94=((1.0)*r11*x2488);
IkReal gconst95=((-1.0)*r10*x2488);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x2492 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x2492.valid){
continue;
}
IkReal x2490=((1.0)*(x2492.value));
IkReal x2491=x2483;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x2490)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x2490)));
IkReal gconst94=((1.0)*r11*x2491);
IkReal gconst95=((-1.0)*r10*x2491);
IkReal x2493=r12*r12;
IkReal x2494=(cj0*r02);
IkReal x2495=x2483;
IkReal x2496=(sj0*x2495);
j4eval[0]=((IKabs((x2494+((r12*sj0)))))+(IKabs((((x2493*x2496))+(((-1.0)*x2496))+((r12*x2494*x2495))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x2499 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x2499.valid){
continue;
}
IkReal x2497=((1.0)*(x2499.value));
IkReal x2498=x2483;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x2497)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x2497)));
IkReal gconst94=((1.0)*r11*x2498);
IkReal gconst95=((-1.0)*r10*x2498);
IkReal x2500=(cj1*r22*sj2);
IkReal x2501=(cj2*r22*sj1);
IkReal x2502=x2483;
IkReal x2503=(r12*x2502);
j4eval[0]=((IKabs((((x2500*x2503))+((x2501*x2503)))))+(IKabs((x2501+x2500))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2504=(cj2*sj1);
IkReal x2505=(gconst95*r20);
IkReal x2506=(gconst94*r21);
IkReal x2507=(cj1*sj2);
CheckValue<IkReal> x2508 = IKatan2WithCheck(IkReal((((r22*x2504))+((r22*x2507)))),IkReal((((x2504*x2506))+(((-1.0)*x2505*x2507))+((x2506*x2507))+(((-1.0)*x2504*x2505)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2508.valid){
continue;
}
CheckValue<IkReal> x2509=IKPowWithIntegerCheck(IKsign(((r22*r22)+(x2506*x2506)+(((-2.0)*x2505*x2506))+(x2505*x2505))),-1);
if(!x2509.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2508.value)+(((1.5707963267949)*(x2509.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2510=IKsin(j4);
IkReal x2511=IKcos(j4);
IkReal x2512=(cj1*cj2);
IkReal x2513=(gconst94*r11);
IkReal x2514=(gconst95*r10);
IkReal x2515=(gconst94*r21);
IkReal x2516=(gconst94*r01);
IkReal x2517=((1.0)*cj0);
IkReal x2518=(sj1*sj2);
IkReal x2519=((1.0)*x2511);
IkReal x2520=((1.0)*x2510);
IkReal x2521=(gconst95*x2511);
evalcond[0]=(((x2510*x2515))+(((-1.0)*r22*x2519))+(((-1.0)*gconst95*r20*x2520)));
evalcond[1]=(sj0+(((-1.0)*gconst95*r00*x2520))+((x2510*x2516))+(((-1.0)*r02*x2519)));
evalcond[2]=((((-1.0)*x2517))+((x2510*x2513))+(((-1.0)*r12*x2519))+(((-1.0)*x2514*x2520)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x2515*x2519))+((r20*x2521))+(((-1.0)*r22*x2520)));
evalcond[4]=(((cj0*x2512))+(((-1.0)*x2517*x2518))+((r00*x2521))+(((-1.0)*r02*x2520))+(((-1.0)*x2516*x2519)));
evalcond[5]=(((x2511*x2514))+(((-1.0)*r12*x2520))+((sj0*x2512))+(((-1.0)*x2513*x2519))+(((-1.0)*sj0*x2518)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2522=((1.0)*gconst95);
CheckValue<IkReal> x2523 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*cj0*r00*x2522))+((gconst94*r11*sj0))+((cj0*gconst94*r01))+(((-1.0)*r10*sj0*x2522)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2523.valid){
continue;
}
CheckValue<IkReal> x2524=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x2522))+(((-1.0)*gconst94*r20)))),-1);
if(!x2524.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2523.value)+(((1.5707963267949)*(x2524.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2525=IKsin(j4);
IkReal x2526=IKcos(j4);
IkReal x2527=(cj1*cj2);
IkReal x2528=(gconst94*r11);
IkReal x2529=(gconst95*r10);
IkReal x2530=(gconst94*r21);
IkReal x2531=(gconst94*r01);
IkReal x2532=((1.0)*cj0);
IkReal x2533=(sj1*sj2);
IkReal x2534=((1.0)*x2526);
IkReal x2535=((1.0)*x2525);
IkReal x2536=(gconst95*x2526);
evalcond[0]=(((x2525*x2530))+(((-1.0)*r22*x2534))+(((-1.0)*gconst95*r20*x2535)));
evalcond[1]=(sj0+(((-1.0)*r02*x2534))+((x2525*x2531))+(((-1.0)*gconst95*r00*x2535)));
evalcond[2]=((((-1.0)*x2532))+(((-1.0)*r12*x2534))+((x2525*x2528))+(((-1.0)*x2529*x2535)));
evalcond[3]=(((cj2*sj1))+((r20*x2536))+((cj1*sj2))+(((-1.0)*x2530*x2534))+(((-1.0)*r22*x2535)));
evalcond[4]=((((-1.0)*r02*x2535))+(((-1.0)*x2531*x2534))+((cj0*x2527))+((r00*x2536))+(((-1.0)*x2532*x2533)));
evalcond[5]=((((-1.0)*x2528*x2534))+((sj0*x2527))+((x2526*x2529))+(((-1.0)*r12*x2535))+(((-1.0)*sj0*x2533)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2537 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*gconst95*r20))+((cj0*gconst94*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2537.valid){
continue;
}
CheckValue<IkReal> x2538=IKPowWithIntegerCheck(IKsign((((gconst95*r01))+((gconst94*r00)))),-1);
if(!x2538.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2537.value)+(((1.5707963267949)*(x2538.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2539=IKsin(j4);
IkReal x2540=IKcos(j4);
IkReal x2541=(cj1*cj2);
IkReal x2542=(gconst94*r11);
IkReal x2543=(gconst95*r10);
IkReal x2544=(gconst94*r21);
IkReal x2545=(gconst94*r01);
IkReal x2546=((1.0)*cj0);
IkReal x2547=(sj1*sj2);
IkReal x2548=((1.0)*x2540);
IkReal x2549=((1.0)*x2539);
IkReal x2550=(gconst95*x2540);
evalcond[0]=(((x2539*x2544))+(((-1.0)*gconst95*r20*x2549))+(((-1.0)*r22*x2548)));
evalcond[1]=(sj0+(((-1.0)*gconst95*r00*x2549))+((x2539*x2545))+(((-1.0)*r02*x2548)));
evalcond[2]=((((-1.0)*r12*x2548))+(((-1.0)*x2543*x2549))+((x2539*x2542))+(((-1.0)*x2546)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x2544*x2548))+((r20*x2550))+(((-1.0)*r22*x2549)));
evalcond[4]=((((-1.0)*x2545*x2548))+((r00*x2550))+(((-1.0)*x2546*x2547))+(((-1.0)*r02*x2549))+((cj0*x2541)));
evalcond[5]=((((-1.0)*x2542*x2548))+(((-1.0)*r12*x2549))+(((-1.0)*sj0*x2547))+((x2540*x2543))+((sj0*x2541)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2551=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x2551;
j4eval[1]=IKsign(x2551);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2552=((1.0)*cj5);
IkReal x2553=((((-1.0)*r21*x2552))+(((-1.0)*r20*sj5)));
j4eval[0]=x2553;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x2552))))));
j4eval[2]=IKsign(x2553);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2554=cj5*cj5;
IkReal x2555=r11*r11;
IkReal x2556=(cj5*r10);
IkReal x2557=(r11*sj5);
IkReal x2558=((((2.0)*x2556*x2557))+(((-1.0)*x2555))+(((-1.0)*(r12*r12)))+(((-1.0)*x2554*(r10*r10)))+((x2554*x2555)));
j4eval[0]=x2558;
j4eval[1]=((IKabs((x2556+(((-1.0)*x2557)))))+(IKabs(r12)));
j4eval[2]=IKsign(x2558);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2559=cj5*cj5;
IkReal x2560=r11*r11;
IkReal x2561=(cj5*r10);
IkReal x2562=(r11*sj5);
CheckValue<IkReal> x2563 = IKatan2WithCheck(IkReal((x2561+(((-1.0)*x2562)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x2563.valid){
continue;
}
CheckValue<IkReal> x2564=IKPowWithIntegerCheck(IKsign(((((-1.0)*x2560))+((x2559*x2560))+(((2.0)*x2561*x2562))+(((-1.0)*(r12*r12)))+(((-1.0)*x2559*(r10*r10))))),-1);
if(!x2564.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2563.value)+(((1.5707963267949)*(x2564.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2565=IKsin(j4);
IkReal x2566=IKcos(j4);
IkReal x2567=(cj5*r10);
IkReal x2568=(r01*sj5);
IkReal x2569=(cj5*r00);
IkReal x2570=(cj5*r20);
IkReal x2571=((1.0)*x2566);
IkReal x2572=((1.0)*x2565);
IkReal x2573=(sj5*x2565);
evalcond[0]=(((r21*x2573))+(((-1.0)*x2570*x2572))+(((-1.0)*r22*x2571)));
evalcond[1]=((((-1.0)*x2569*x2572))+((x2565*x2568))+(((-1.0)*r02*x2571)));
evalcond[2]=((((-1.0)*r12*x2572))+((x2566*x2567))+(((-1.0)*r11*sj5*x2571)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x2571))+((r11*x2573))+(((-1.0)*x2567*x2572)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r21*sj5*x2571))+((x2566*x2570))+(((-1.0)*r22*x2572)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*x2568*x2571))+((x2566*x2569))+((cj1*cj2))+(((-1.0)*r02*x2572)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2574=((1.0)*cj5);
CheckValue<IkReal> x2575=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x2574))+(((-1.0)*r20*sj5)))),-1);
if(!x2575.valid){
continue;
}
CheckValue<IkReal> x2576 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x2574)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2576.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2575.value)))+(x2576.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2577=IKsin(j4);
IkReal x2578=IKcos(j4);
IkReal x2579=(cj5*r10);
IkReal x2580=(r01*sj5);
IkReal x2581=(cj5*r00);
IkReal x2582=(cj5*r20);
IkReal x2583=((1.0)*x2578);
IkReal x2584=((1.0)*x2577);
IkReal x2585=(sj5*x2577);
evalcond[0]=(((r21*x2585))+(((-1.0)*x2582*x2584))+(((-1.0)*r22*x2583)));
evalcond[1]=((((-1.0)*r02*x2583))+((x2577*x2580))+(((-1.0)*x2581*x2584)));
evalcond[2]=(((x2578*x2579))+(((-1.0)*r11*sj5*x2583))+(((-1.0)*r12*x2584)));
evalcond[3]=((-1.0)+(((-1.0)*x2579*x2584))+((r11*x2585))+(((-1.0)*r12*x2583)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r21*sj5*x2583))+((x2578*x2582))+(((-1.0)*r22*x2584)));
evalcond[5]=((((-1.0)*r02*x2584))+(((-1.0)*sj1*sj2))+((cj1*cj2))+((x2578*x2581))+(((-1.0)*x2580*x2583)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2586 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2586.valid){
continue;
}
CheckValue<IkReal> x2587=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x2587.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2586.value)+(((1.5707963267949)*(x2587.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2588=IKsin(j4);
IkReal x2589=IKcos(j4);
IkReal x2590=(cj5*r10);
IkReal x2591=(r01*sj5);
IkReal x2592=(cj5*r00);
IkReal x2593=(cj5*r20);
IkReal x2594=((1.0)*x2589);
IkReal x2595=((1.0)*x2588);
IkReal x2596=(sj5*x2588);
evalcond[0]=((((-1.0)*r22*x2594))+(((-1.0)*x2593*x2595))+((r21*x2596)));
evalcond[1]=((((-1.0)*r02*x2594))+((x2588*x2591))+(((-1.0)*x2592*x2595)));
evalcond[2]=((((-1.0)*r11*sj5*x2594))+((x2589*x2590))+(((-1.0)*r12*x2595)));
evalcond[3]=((-1.0)+(((-1.0)*x2590*x2595))+((r11*x2596))+(((-1.0)*r12*x2594)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x2595))+((cj1*sj2))+(((-1.0)*r21*sj5*x2594))+((x2589*x2593)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*r02*x2595))+(((-1.0)*x2591*x2594))+((x2589*x2592))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2597=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x2597;
j4eval[1]=IKsign(x2597);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2598=((1.0)*cj5);
IkReal x2599=((((-1.0)*r01*x2598))+(((-1.0)*r00*sj5)));
j4eval[0]=x2599;
j4eval[1]=((IKabs(((((-1.0)*r20*x2598))+((r21*sj5)))))+(IKabs(r22)));
j4eval[2]=IKsign(x2599);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2600=cj5*cj5;
IkReal x2601=r11*r11;
IkReal x2602=(r11*sj5);
IkReal x2603=(cj5*r10);
IkReal x2604=((r12*r12)+(((-1.0)*x2600*x2601))+(((-2.0)*x2602*x2603))+((x2600*(r10*r10)))+x2601);
j4eval[0]=x2604;
j4eval[1]=IKsign(x2604);
j4eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*x2602))+x2603))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2605=cj5*cj5;
IkReal x2606=r11*r11;
IkReal x2607=(cj5*r10);
IkReal x2608=(r11*sj5);
CheckValue<IkReal> x2609=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-1.0)*x2605*x2606))+(((-2.0)*x2607*x2608))+x2606+((x2605*(r10*r10))))),-1);
if(!x2609.valid){
continue;
}
CheckValue<IkReal> x2610 = IKatan2WithCheck(IkReal(((((-1.0)*x2608))+x2607)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x2610.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2609.value)))+(x2610.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2611=IKsin(j4);
IkReal x2612=IKcos(j4);
IkReal x2613=(cj5*r10);
IkReal x2614=(r01*sj5);
IkReal x2615=(cj5*r00);
IkReal x2616=(cj5*r20);
IkReal x2617=((1.0)*x2612);
IkReal x2618=((1.0)*x2611);
IkReal x2619=(sj5*x2611);
evalcond[0]=((((-1.0)*r22*x2617))+(((-1.0)*x2616*x2618))+((r21*x2619)));
evalcond[1]=(((x2611*x2614))+(((-1.0)*r02*x2617))+(((-1.0)*x2615*x2618)));
evalcond[2]=((((-1.0)*r12*x2618))+(((-1.0)*r11*sj5*x2617))+((x2612*x2613)));
evalcond[3]=((1.0)+(((-1.0)*r12*x2617))+(((-1.0)*x2613*x2618))+((r11*x2619)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r21*sj5*x2617))+(((-1.0)*r22*x2618))+((x2612*x2616)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r02*x2618))+((x2612*x2615))+(((-1.0)*x2614*x2617)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2620=((1.0)*cj5);
CheckValue<IkReal> x2621 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x2620)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2621.valid){
continue;
}
CheckValue<IkReal> x2622=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x2620))+(((-1.0)*r00*sj5)))),-1);
if(!x2622.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2621.value)+(((1.5707963267949)*(x2622.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2623=IKsin(j4);
IkReal x2624=IKcos(j4);
IkReal x2625=(cj5*r10);
IkReal x2626=(r01*sj5);
IkReal x2627=(cj5*r00);
IkReal x2628=(cj5*r20);
IkReal x2629=((1.0)*x2624);
IkReal x2630=((1.0)*x2623);
IkReal x2631=(sj5*x2623);
evalcond[0]=((((-1.0)*x2628*x2630))+((r21*x2631))+(((-1.0)*r22*x2629)));
evalcond[1]=(((x2623*x2626))+(((-1.0)*r02*x2629))+(((-1.0)*x2627*x2630)));
evalcond[2]=(((x2624*x2625))+(((-1.0)*r11*sj5*x2629))+(((-1.0)*r12*x2630)));
evalcond[3]=((1.0)+((r11*x2631))+(((-1.0)*r12*x2629))+(((-1.0)*x2625*x2630)));
evalcond[4]=(((x2624*x2628))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*r21*sj5*x2629))+(((-1.0)*r22*x2630)));
evalcond[5]=(((x2624*x2627))+(((-1.0)*r02*x2630))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x2626*x2629)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2632=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x2632.valid){
continue;
}
CheckValue<IkReal> x2633 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2633.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2632.value)))+(x2633.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2634=IKsin(j4);
IkReal x2635=IKcos(j4);
IkReal x2636=(cj5*r10);
IkReal x2637=(r01*sj5);
IkReal x2638=(cj5*r00);
IkReal x2639=(cj5*r20);
IkReal x2640=((1.0)*x2635);
IkReal x2641=((1.0)*x2634);
IkReal x2642=(sj5*x2634);
evalcond[0]=((((-1.0)*r22*x2640))+((r21*x2642))+(((-1.0)*x2639*x2641)));
evalcond[1]=((((-1.0)*r02*x2640))+((x2634*x2637))+(((-1.0)*x2638*x2641)));
evalcond[2]=((((-1.0)*r11*sj5*x2640))+(((-1.0)*r12*x2641))+((x2635*x2636)));
evalcond[3]=((1.0)+((r11*x2642))+(((-1.0)*r12*x2640))+(((-1.0)*x2636*x2641)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x2641))+(((-1.0)*r21*sj5*x2640))+((cj1*sj2))+((x2635*x2639)));
evalcond[5]=((((-1.0)*x2637*x2640))+(((-1.0)*r02*x2641))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x2635*x2638)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x2643=((-1.0)*py);
sj3=0;
cj3=1.0;
j3=0;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x2643);
rxp0_2=(py*r00);
rxp1_0=(r21*x2643);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2644=((-1.0)*py);
sj3=0;
cj3=1.0;
j3=0;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x2644);
rxp0_2=(py*r00);
rxp1_0=(r21*x2644);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2645=((-1.0)*py);
sj3=0;
cj3=1.0;
j3=0;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x2645);
rxp0_2=(py*r00);
rxp1_0=(r21*x2645);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=((((-1.0)*r01*sj5))+((cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x2648=IKPowWithIntegerCheck(((((-1.0)*r01*sj5))+((cj5*r00))),-1);
if(!x2648.valid){
continue;
}
IkReal x2646=x2648.value;
IkReal x2647=(cj0*x2646);
cj4array[0]=((((-1.0)*cj1*cj2*x2647))+((sj1*sj2*x2647)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x2649=IKsin(j4);
IkReal x2650=IKcos(j4);
IkReal x2651=(r21*sj5);
IkReal x2652=((1.0)*x2650);
IkReal x2653=((1.0)*cj5*x2649);
evalcond[0]=((-1.0)*r12*x2649);
evalcond[1]=((((-1.0)*r12*x2652))+(((-1.0)*cj0)));
evalcond[2]=(((x2649*x2651))+(((-1.0)*r20*x2653)));
evalcond[3]=((((-1.0)*r00*x2653))+((r01*sj5*x2649)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x2651*x2652))+((cj1*sj2))+((cj5*r20*x2650)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x2656=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x2656.valid){
continue;
}
IkReal x2654=x2656.value;
IkReal x2655=((1.0)*x2654);
cj4array[0]=((((-1.0)*cj2*sj1*x2655))+(((-1.0)*cj1*sj2*x2655)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x2657=IKsin(j4);
IkReal x2658=IKcos(j4);
IkReal x2659=(cj5*r00);
IkReal x2660=((1.0)*cj0);
IkReal x2661=((1.0)*x2657);
IkReal x2662=(sj5*x2657);
IkReal x2663=((1.0)*x2658);
evalcond[0]=((-1.0)*r12*x2657);
evalcond[1]=((((-1.0)*r12*x2663))+(((-1.0)*x2660)));
evalcond[2]=(((r21*x2662))+(((-1.0)*cj5*r20*x2661)));
evalcond[3]=((((-1.0)*x2659*x2661))+((r01*x2662)));
evalcond[4]=(((x2658*x2659))+((cj0*cj1*cj2))+(((-1.0)*sj1*sj2*x2660))+(((-1.0)*r01*sj5*x2663)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x2664=IKPowWithIntegerCheck(r12,-1);
if(!x2664.valid){
continue;
}
cj4array[0]=((-1.0)*cj0*(x2664.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x2665=IKsin(j4);
IkReal x2666=IKcos(j4);
IkReal x2667=(cj5*r00);
IkReal x2668=(r21*sj5);
IkReal x2669=(cj5*r20);
IkReal x2670=(r01*sj5);
IkReal x2671=((1.0)*x2665);
IkReal x2672=((1.0)*x2666);
evalcond[0]=((-1.0)*r12*x2665);
evalcond[1]=((((-1.0)*x2669*x2671))+((x2665*x2668)));
evalcond[2]=((((-1.0)*x2667*x2671))+((x2665*x2670)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((x2666*x2669))+(((-1.0)*x2668*x2672)));
evalcond[4]=((((-1.0)*cj0*sj1*sj2))+(((-1.0)*x2670*x2672))+((x2666*x2667))+((cj0*cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2673=((1.0)*cj5);
CheckValue<IkReal> x2674=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x2673))+(((-1.0)*r20*sj5)))),-1);
if(!x2674.valid){
continue;
}
CheckValue<IkReal> x2675 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((r11*sj0*sj5))+(((-1.0)*r10*sj0*x2673))+(((-1.0)*cj0*r00*x2673))+((cj0*r01*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2675.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2674.value)))+(x2675.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2676=IKsin(j4);
IkReal x2677=IKcos(j4);
IkReal x2678=(cj1*cj2);
IkReal x2679=(cj5*r10);
IkReal x2680=(r01*sj5);
IkReal x2681=(cj5*r00);
IkReal x2682=(cj5*r20);
IkReal x2683=((1.0)*cj0);
IkReal x2684=(sj1*sj2);
IkReal x2685=((1.0)*x2677);
IkReal x2686=((1.0)*x2676);
IkReal x2687=(sj5*x2676);
evalcond[0]=(((r21*x2687))+(((-1.0)*r22*x2685))+(((-1.0)*x2682*x2686)));
evalcond[1]=((((-1.0)*r02*x2685))+sj0+(((-1.0)*x2681*x2686))+((x2676*x2680)));
evalcond[2]=((((-1.0)*r12*x2685))+((r11*x2687))+(((-1.0)*x2679*x2686))+(((-1.0)*x2683)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r21*sj5*x2685))+(((-1.0)*r22*x2686))+((x2677*x2682)));
evalcond[4]=((((-1.0)*r02*x2686))+(((-1.0)*x2683*x2684))+(((-1.0)*x2680*x2685))+((cj0*x2678))+((x2677*x2681)));
evalcond[5]=((((-1.0)*r12*x2686))+((sj0*x2678))+(((-1.0)*r11*sj5*x2685))+(((-1.0)*sj0*x2684))+((x2677*x2679)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2688=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x2688.valid){
continue;
}
CheckValue<IkReal> x2689 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2689.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2688.value)))+(x2689.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2690=IKsin(j4);
IkReal x2691=IKcos(j4);
IkReal x2692=(cj1*cj2);
IkReal x2693=(cj5*r10);
IkReal x2694=(r01*sj5);
IkReal x2695=(cj5*r00);
IkReal x2696=(cj5*r20);
IkReal x2697=((1.0)*cj0);
IkReal x2698=(sj1*sj2);
IkReal x2699=((1.0)*x2691);
IkReal x2700=((1.0)*x2690);
IkReal x2701=(sj5*x2690);
evalcond[0]=((((-1.0)*r22*x2699))+(((-1.0)*x2696*x2700))+((r21*x2701)));
evalcond[1]=(sj0+(((-1.0)*r02*x2699))+(((-1.0)*x2695*x2700))+((x2690*x2694)));
evalcond[2]=(((r11*x2701))+(((-1.0)*x2697))+(((-1.0)*r12*x2699))+(((-1.0)*x2693*x2700)));
evalcond[3]=(((x2691*x2696))+((cj2*sj1))+(((-1.0)*r22*x2700))+((cj1*sj2))+(((-1.0)*r21*sj5*x2699)));
evalcond[4]=(((x2691*x2695))+((cj0*x2692))+(((-1.0)*r02*x2700))+(((-1.0)*x2697*x2698))+(((-1.0)*x2694*x2699)));
evalcond[5]=(((x2691*x2693))+(((-1.0)*r11*sj5*x2699))+(((-1.0)*r12*x2700))+((sj0*x2692))+(((-1.0)*sj0*x2698)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2702=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x2702.valid){
continue;
}
CheckValue<IkReal> x2703 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2703.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2702.value)))+(x2703.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2704=IKsin(j4);
IkReal x2705=IKcos(j4);
IkReal x2706=(cj1*cj2);
IkReal x2707=(cj5*r10);
IkReal x2708=(r01*sj5);
IkReal x2709=(cj5*r00);
IkReal x2710=(cj5*r20);
IkReal x2711=((1.0)*cj0);
IkReal x2712=(sj1*sj2);
IkReal x2713=((1.0)*x2705);
IkReal x2714=((1.0)*x2704);
IkReal x2715=(sj5*x2704);
evalcond[0]=((((-1.0)*r22*x2713))+(((-1.0)*x2710*x2714))+((r21*x2715)));
evalcond[1]=(sj0+((x2704*x2708))+(((-1.0)*r02*x2713))+(((-1.0)*x2709*x2714)));
evalcond[2]=((((-1.0)*x2711))+((r11*x2715))+(((-1.0)*r12*x2713))+(((-1.0)*x2707*x2714)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r21*sj5*x2713))+(((-1.0)*r22*x2714))+((x2705*x2710)));
evalcond[4]=(((x2705*x2709))+(((-1.0)*r02*x2714))+(((-1.0)*x2708*x2713))+((cj0*x2706))+(((-1.0)*x2711*x2712)));
evalcond[5]=(((sj0*x2706))+((x2705*x2707))+(((-1.0)*sj0*x2712))+(((-1.0)*r11*sj5*x2713))+(((-1.0)*r12*x2714)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x2716=((1.0)*cj5);
IkReal x2717=((1.0)*sj5);
IkReal x2718=(((cj2*sj1))+((cj1*sj2)));
j0eval[0]=x2718;
j0eval[1]=((IKabs(((((-1.0)*r10*x2717))+(((-1.0)*r11*x2716)))))+(IKabs(((((-1.0)*r00*x2717))+(((-1.0)*r01*x2716))))));
j0eval[2]=IKsign(x2718);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x2719=r21*r21;
IkReal x2720=cj5*cj5;
IkReal x2721=(cj2*sj1);
IkReal x2722=(cj1*sj2);
IkReal x2723=(r21*sj5);
IkReal x2724=((1.0)*cj5*r20);
IkReal x2725=((((-1.0)*x2719))+(((2.0)*cj5*r20*x2723))+(((-1.0)*(r22*r22)))+((x2719*x2720))+(((-1.0)*x2720*(r20*r20))));
j4eval[0]=x2725;
j4eval[1]=((IKabs((((r22*x2722))+((r22*x2721)))))+(IKabs(((((-1.0)*x2722*x2724))+((x2721*x2723))+(((-1.0)*x2721*x2724))+((x2722*x2723))))));
j4eval[2]=IKsign(x2725);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j0eval[0]=(((cj2*sj1))+((cj1*sj2)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((8.13008130081301)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-8.13008130081301)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((8.13008130081301)*px))+IKsqr(((-8.13008130081301)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((8.13008130081301)*px), ((-8.13008130081301)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((0.123)*(IKsin(j0))))+(((-1.0)*px)));
evalcond[1]=((((-1.0)*py))+(((-0.123)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x2726=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x2726;
j4eval[1]=IKsign(x2726);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x2727=((1.0)*cj5);
IkReal x2728=((((-1.0)*r10*sj5))+(((-1.0)*r11*x2727)));
j4eval[0]=x2728;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x2727))))));
j4eval[2]=IKsign(x2728);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x2729=cj5*cj5;
IkReal x2730=((1.0)*r20);
IkReal x2731=(r01*r21);
IkReal x2732=(r21*sj5);
IkReal x2733=(((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+(((-1.0)*x2731))+((cj5*r00*x2732))+(((-1.0)*r00*x2729*x2730))+((x2729*x2731)));
j4eval[0]=x2733;
j4eval[1]=((IKabs(((((-1.0)*cj0*cj5*x2730))+((cj0*x2732)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x2733);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2734=cj5*cj5;
IkReal x2735=((1.0)*r20);
IkReal x2736=(r01*r21);
IkReal x2737=(r21*sj5);
CheckValue<IkReal> x2738 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*cj5*x2735))+((cj0*x2737)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2738.valid){
continue;
}
CheckValue<IkReal> x2739=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+(((-1.0)*r00*x2734*x2735))+(((-1.0)*x2736))+((cj5*r00*x2737))+((x2734*x2736)))),-1);
if(!x2739.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2738.value)+(((1.5707963267949)*(x2739.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2740=IKcos(j4);
IkReal x2741=IKsin(j4);
IkReal x2742=(cj5*r00);
IkReal x2743=(cj5*r10);
IkReal x2744=(cj5*r20);
IkReal x2745=((1.0)*x2740);
IkReal x2746=((1.0)*x2741);
IkReal x2747=(sj5*x2740);
IkReal x2748=(sj5*x2741);
evalcond[0]=(((r21*x2747))+((r22*x2741))+(((-1.0)*x2744*x2745)));
evalcond[1]=(((r21*x2748))+(((-1.0)*x2744*x2746))+(((-1.0)*r22*x2745)));
evalcond[2]=(cj0+((r01*x2747))+((r02*x2741))+(((-1.0)*x2742*x2745)));
evalcond[3]=((((-1.0)*x2743*x2745))+sj0+((r11*x2747))+((r12*x2741)));
evalcond[4]=(sj0+((r01*x2748))+(((-1.0)*r02*x2745))+(((-1.0)*x2742*x2746)));
evalcond[5]=((((-1.0)*x2743*x2746))+((r11*x2748))+(((-1.0)*r12*x2745))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2749=((1.0)*cj5);
CheckValue<IkReal> x2750 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x2749)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x2750.valid){
continue;
}
CheckValue<IkReal> x2751=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x2749)))),-1);
if(!x2751.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2750.value)+(((1.5707963267949)*(x2751.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2752=IKcos(j4);
IkReal x2753=IKsin(j4);
IkReal x2754=(cj5*r00);
IkReal x2755=(cj5*r10);
IkReal x2756=(cj5*r20);
IkReal x2757=((1.0)*x2752);
IkReal x2758=((1.0)*x2753);
IkReal x2759=(sj5*x2752);
IkReal x2760=(sj5*x2753);
evalcond[0]=(((r22*x2753))+((r21*x2759))+(((-1.0)*x2756*x2757)));
evalcond[1]=((((-1.0)*r22*x2757))+(((-1.0)*x2756*x2758))+((r21*x2760)));
evalcond[2]=(cj0+((r01*x2759))+(((-1.0)*x2754*x2757))+((r02*x2753)));
evalcond[3]=(((r11*x2759))+sj0+((r12*x2753))+(((-1.0)*x2755*x2757)));
evalcond[4]=(sj0+((r01*x2760))+(((-1.0)*x2754*x2758))+(((-1.0)*r02*x2757)));
evalcond[5]=((((-1.0)*r12*x2757))+(((-1.0)*x2755*x2758))+(((-1.0)*cj0))+((r11*x2760)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2761 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x2761.valid){
continue;
}
CheckValue<IkReal> x2762=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x2762.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2761.value)+(((1.5707963267949)*(x2762.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2763=IKcos(j4);
IkReal x2764=IKsin(j4);
IkReal x2765=(cj5*r00);
IkReal x2766=(cj5*r10);
IkReal x2767=(cj5*r20);
IkReal x2768=((1.0)*x2763);
IkReal x2769=((1.0)*x2764);
IkReal x2770=(sj5*x2763);
IkReal x2771=(sj5*x2764);
evalcond[0]=((((-1.0)*x2767*x2768))+((r21*x2770))+((r22*x2764)));
evalcond[1]=((((-1.0)*x2767*x2769))+((r21*x2771))+(((-1.0)*r22*x2768)));
evalcond[2]=(((r01*x2770))+cj0+((r02*x2764))+(((-1.0)*x2765*x2768)));
evalcond[3]=(sj0+((r12*x2764))+((r11*x2770))+(((-1.0)*x2766*x2768)));
evalcond[4]=(((r01*x2771))+sj0+(((-1.0)*r02*x2768))+(((-1.0)*x2765*x2769)));
evalcond[5]=(((r11*x2771))+(((-1.0)*r12*x2768))+(((-1.0)*cj0))+(((-1.0)*x2766*x2769)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((8.13008130081301)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-8.13008130081301)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((8.13008130081301)*px))+IKsqr(((-8.13008130081301)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((8.13008130081301)*px), ((-8.13008130081301)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((0.123)*(IKsin(j0))))+(((-1.0)*px)));
evalcond[1]=((((-1.0)*py))+(((-0.123)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x2772=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x2772;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x2772);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x2773=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x2773;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x2773);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x2774=((1.0)*cj5);
IkReal x2775=((((-1.0)*r01*x2774))+(((-1.0)*r00*sj5)));
j4eval[0]=x2775;
j4eval[1]=IKsign(x2775);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x2774))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2776=((1.0)*cj5);
CheckValue<IkReal> x2777 = IKatan2WithCheck(IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x2776)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x2777.valid){
continue;
}
CheckValue<IkReal> x2778=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x2776))+(((-1.0)*r00*sj5)))),-1);
if(!x2778.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2777.value)+(((1.5707963267949)*(x2778.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2779=IKcos(j4);
IkReal x2780=IKsin(j4);
IkReal x2781=((1.0)*cj0);
IkReal x2782=(cj5*r00);
IkReal x2783=(cj5*r10);
IkReal x2784=(cj5*r20);
IkReal x2785=((1.0)*x2779);
IkReal x2786=((1.0)*x2780);
IkReal x2787=(sj5*x2779);
IkReal x2788=(sj5*x2780);
evalcond[0]=(((r21*x2787))+(((-1.0)*x2784*x2785))+((r22*x2780)));
evalcond[1]=(((r21*x2788))+(((-1.0)*x2784*x2786))+(((-1.0)*r22*x2785)));
evalcond[2]=(sj0+(((-1.0)*x2782*x2786))+((r01*x2788))+(((-1.0)*r02*x2785)));
evalcond[3]=((((-1.0)*x2781))+((r02*x2780))+(((-1.0)*x2782*x2785))+((r01*x2787)));
evalcond[4]=((((-1.0)*sj0))+((r12*x2780))+(((-1.0)*x2783*x2785))+((r11*x2787)));
evalcond[5]=((((-1.0)*x2781))+(((-1.0)*r12*x2785))+(((-1.0)*x2783*x2786))+((r11*x2788)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2789 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x2789.valid){
continue;
}
CheckValue<IkReal> x2790=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x2790.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2789.value)+(((1.5707963267949)*(x2790.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2791=IKcos(j4);
IkReal x2792=IKsin(j4);
IkReal x2793=((1.0)*cj0);
IkReal x2794=(cj5*r00);
IkReal x2795=(cj5*r10);
IkReal x2796=(cj5*r20);
IkReal x2797=((1.0)*x2791);
IkReal x2798=((1.0)*x2792);
IkReal x2799=(sj5*x2791);
IkReal x2800=(sj5*x2792);
evalcond[0]=(((r21*x2799))+(((-1.0)*x2796*x2797))+((r22*x2792)));
evalcond[1]=((((-1.0)*x2796*x2798))+(((-1.0)*r22*x2797))+((r21*x2800)));
evalcond[2]=(sj0+((r01*x2800))+(((-1.0)*x2794*x2798))+(((-1.0)*r02*x2797)));
evalcond[3]=((((-1.0)*x2793))+((r02*x2792))+((r01*x2799))+(((-1.0)*x2794*x2797)));
evalcond[4]=((((-1.0)*x2795*x2797))+(((-1.0)*sj0))+((r12*x2792))+((r11*x2799)));
evalcond[5]=((((-1.0)*x2795*x2798))+(((-1.0)*x2793))+(((-1.0)*r12*x2797))+((r11*x2800)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2801=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x2801.valid){
continue;
}
CheckValue<IkReal> x2802 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2802.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2801.value)))+(x2802.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2803=IKcos(j4);
IkReal x2804=IKsin(j4);
IkReal x2805=((1.0)*cj0);
IkReal x2806=(cj5*r00);
IkReal x2807=(cj5*r10);
IkReal x2808=(cj5*r20);
IkReal x2809=((1.0)*x2803);
IkReal x2810=((1.0)*x2804);
IkReal x2811=(sj5*x2803);
IkReal x2812=(sj5*x2804);
evalcond[0]=((((-1.0)*x2808*x2809))+((r21*x2811))+((r22*x2804)));
evalcond[1]=(((r21*x2812))+(((-1.0)*r22*x2809))+(((-1.0)*x2808*x2810)));
evalcond[2]=(((r01*x2812))+sj0+(((-1.0)*x2806*x2810))+(((-1.0)*r02*x2809)));
evalcond[3]=(((r01*x2811))+(((-1.0)*x2805))+((r02*x2804))+(((-1.0)*x2806*x2809)));
evalcond[4]=(((r12*x2804))+(((-1.0)*sj0))+(((-1.0)*x2807*x2809))+((r11*x2811)));
evalcond[5]=((((-1.0)*x2805))+(((-1.0)*r12*x2809))+(((-1.0)*x2807*x2810))+((r11*x2812)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-3.27590390681873)*py))+(((1.6581735824638)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-3.27590390681873)*px))+(((-1.6581735824638)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-3.27590390681873)*py))+(((1.6581735824638)*px))))+IKsqr(((((-3.27590390681873)*px))+(((-1.6581735824638)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-3.27590390681873)*py))+(((1.6581735824638)*px))), ((((-3.27590390681873)*px))+(((-1.6581735824638)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x2813=IKsin(j0);
IkReal x2814=IKcos(j0);
evalcond[0]=((((-0.243)*x2814))+(((-1.0)*px))+(((0.123)*x2813)));
evalcond[1]=((((-0.243)*x2813))+(((-1.0)*py))+(((-0.123)*x2814)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x2815=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x2815;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x2815);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x2816=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x2816;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x2816);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x2817=((1.0)*cj5);
IkReal x2818=((((-1.0)*r00*sj5))+(((-1.0)*r01*x2817)));
j4eval[0]=x2818;
j4eval[1]=IKsign(x2818);
j4eval[2]=((IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x2817)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2819=((1.0)*cj5);
CheckValue<IkReal> x2820=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x2819)))),-1);
if(!x2820.valid){
continue;
}
CheckValue<IkReal> x2821 = IKatan2WithCheck(IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x2819)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x2821.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2820.value)))+(x2821.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2822=IKcos(j4);
IkReal x2823=IKsin(j4);
IkReal x2824=((1.0)*cj0);
IkReal x2825=(cj5*r00);
IkReal x2826=(cj5*r10);
IkReal x2827=(cj5*r20);
IkReal x2828=((1.0)*x2822);
IkReal x2829=((1.0)*x2823);
IkReal x2830=(sj5*x2822);
IkReal x2831=(sj5*x2823);
evalcond[0]=(((r22*x2823))+((r21*x2830))+(((-1.0)*x2827*x2828)));
evalcond[1]=((((-1.0)*r22*x2828))+((r21*x2831))+(((-1.0)*x2827*x2829)));
evalcond[2]=(sj0+(((-1.0)*r02*x2828))+(((-1.0)*x2825*x2829))+((r01*x2831)));
evalcond[3]=(((r02*x2823))+(((-1.0)*x2825*x2828))+(((-1.0)*x2824))+((r01*x2830)));
evalcond[4]=((((-1.0)*sj0))+(((-1.0)*x2826*x2828))+((r11*x2830))+((r12*x2823)));
evalcond[5]=((((-1.0)*r12*x2828))+(((-1.0)*x2826*x2829))+(((-1.0)*x2824))+((r11*x2831)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2832 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x2832.valid){
continue;
}
CheckValue<IkReal> x2833=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x2833.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2832.value)+(((1.5707963267949)*(x2833.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2834=IKcos(j4);
IkReal x2835=IKsin(j4);
IkReal x2836=((1.0)*cj0);
IkReal x2837=(cj5*r00);
IkReal x2838=(cj5*r10);
IkReal x2839=(cj5*r20);
IkReal x2840=((1.0)*x2834);
IkReal x2841=((1.0)*x2835);
IkReal x2842=(sj5*x2834);
IkReal x2843=(sj5*x2835);
evalcond[0]=(((r21*x2842))+(((-1.0)*x2839*x2840))+((r22*x2835)));
evalcond[1]=(((r21*x2843))+(((-1.0)*x2839*x2841))+(((-1.0)*r22*x2840)));
evalcond[2]=(sj0+(((-1.0)*r02*x2840))+((r01*x2843))+(((-1.0)*x2837*x2841)));
evalcond[3]=((((-1.0)*x2836))+((r02*x2835))+((r01*x2842))+(((-1.0)*x2837*x2840)));
evalcond[4]=(((r12*x2835))+(((-1.0)*sj0))+((r11*x2842))+(((-1.0)*x2838*x2840)));
evalcond[5]=((((-1.0)*x2836))+((r11*x2843))+(((-1.0)*r12*x2840))+(((-1.0)*x2838*x2841)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2844=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x2844.valid){
continue;
}
CheckValue<IkReal> x2845 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2845.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2844.value)))+(x2845.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2846=IKcos(j4);
IkReal x2847=IKsin(j4);
IkReal x2848=((1.0)*cj0);
IkReal x2849=(cj5*r00);
IkReal x2850=(cj5*r10);
IkReal x2851=(cj5*r20);
IkReal x2852=((1.0)*x2846);
IkReal x2853=((1.0)*x2847);
IkReal x2854=(sj5*x2846);
IkReal x2855=(sj5*x2847);
evalcond[0]=(((r21*x2854))+(((-1.0)*x2851*x2852))+((r22*x2847)));
evalcond[1]=(((r21*x2855))+(((-1.0)*x2851*x2853))+(((-1.0)*r22*x2852)));
evalcond[2]=(sj0+(((-1.0)*x2849*x2853))+(((-1.0)*r02*x2852))+((r01*x2855)));
evalcond[3]=((((-1.0)*x2849*x2852))+((r01*x2854))+((r02*x2847))+(((-1.0)*x2848)));
evalcond[4]=((((-1.0)*sj0))+((r11*x2854))+(((-1.0)*x2850*x2852))+((r12*x2847)));
evalcond[5]=(((r11*x2855))+(((-1.0)*r12*x2852))+(((-1.0)*x2850*x2853))+(((-1.0)*x2848)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-3.27590390681873)*py))+(((1.6581735824638)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-3.27590390681873)*px))+(((-1.6581735824638)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-3.27590390681873)*py))+(((1.6581735824638)*px))))+IKsqr(((((-3.27590390681873)*px))+(((-1.6581735824638)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-3.27590390681873)*py))+(((1.6581735824638)*px))), ((((-3.27590390681873)*px))+(((-1.6581735824638)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x2856=IKsin(j0);
IkReal x2857=IKcos(j0);
evalcond[0]=((((0.123)*x2856))+(((-1.0)*px))+(((-0.243)*x2857)));
evalcond[1]=((((-0.123)*x2857))+(((-1.0)*py))+(((-0.243)*x2856)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x2858=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x2858;
j4eval[1]=IKsign(x2858);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x2859=((1.0)*cj5);
IkReal x2860=((((-1.0)*r10*sj5))+(((-1.0)*r11*x2859)));
j4eval[0]=x2860;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x2859))))));
j4eval[2]=IKsign(x2860);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x2861=cj5*cj5;
IkReal x2862=((1.0)*r20);
IkReal x2863=(r01*r21);
IkReal x2864=(r21*sj5);
IkReal x2865=(((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+(((-1.0)*x2863))+((x2861*x2863))+(((-1.0)*r00*x2861*x2862))+((cj5*r00*x2864)));
j4eval[0]=x2865;
j4eval[1]=((IKabs(((((-1.0)*cj0*cj5*x2862))+((cj0*x2864)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x2865);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2866=cj5*cj5;
IkReal x2867=((1.0)*r20);
IkReal x2868=(r01*r21);
IkReal x2869=(r21*sj5);
CheckValue<IkReal> x2870 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*cj5*x2867))+((cj0*x2869)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2870.valid){
continue;
}
CheckValue<IkReal> x2871=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+(((-1.0)*x2868))+((x2866*x2868))+(((-1.0)*r00*x2866*x2867))+((cj5*r00*x2869)))),-1);
if(!x2871.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2870.value)+(((1.5707963267949)*(x2871.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2872=IKcos(j4);
IkReal x2873=IKsin(j4);
IkReal x2874=(cj5*r00);
IkReal x2875=(cj5*r10);
IkReal x2876=(cj5*r20);
IkReal x2877=((1.0)*x2872);
IkReal x2878=((1.0)*x2873);
IkReal x2879=(sj5*x2872);
IkReal x2880=(sj5*x2873);
evalcond[0]=(((r22*x2873))+(((-1.0)*x2876*x2877))+((r21*x2879)));
evalcond[1]=((((-1.0)*x2876*x2878))+((r21*x2880))+(((-1.0)*r22*x2877)));
evalcond[2]=(cj0+((r01*x2879))+((r02*x2873))+(((-1.0)*x2874*x2877)));
evalcond[3]=(sj0+((r11*x2879))+((r12*x2873))+(((-1.0)*x2875*x2877)));
evalcond[4]=(sj0+(((-1.0)*r02*x2877))+((r01*x2880))+(((-1.0)*x2874*x2878)));
evalcond[5]=(((r11*x2880))+(((-1.0)*x2875*x2878))+(((-1.0)*r12*x2877))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2881=((1.0)*cj5);
CheckValue<IkReal> x2882 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x2881)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x2882.valid){
continue;
}
CheckValue<IkReal> x2883=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x2881))+(((-1.0)*r10*sj5)))),-1);
if(!x2883.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2882.value)+(((1.5707963267949)*(x2883.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2884=IKcos(j4);
IkReal x2885=IKsin(j4);
IkReal x2886=(cj5*r00);
IkReal x2887=(cj5*r10);
IkReal x2888=(cj5*r20);
IkReal x2889=((1.0)*x2884);
IkReal x2890=((1.0)*x2885);
IkReal x2891=(sj5*x2884);
IkReal x2892=(sj5*x2885);
evalcond[0]=(((r22*x2885))+((r21*x2891))+(((-1.0)*x2888*x2889)));
evalcond[1]=((((-1.0)*r22*x2889))+(((-1.0)*x2888*x2890))+((r21*x2892)));
evalcond[2]=(cj0+((r01*x2891))+((r02*x2885))+(((-1.0)*x2886*x2889)));
evalcond[3]=(sj0+(((-1.0)*x2887*x2889))+((r11*x2891))+((r12*x2885)));
evalcond[4]=(sj0+(((-1.0)*r02*x2889))+((r01*x2892))+(((-1.0)*x2886*x2890)));
evalcond[5]=((((-1.0)*x2887*x2890))+((r11*x2892))+(((-1.0)*r12*x2889))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2893 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x2893.valid){
continue;
}
CheckValue<IkReal> x2894=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x2894.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2893.value)+(((1.5707963267949)*(x2894.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2895=IKcos(j4);
IkReal x2896=IKsin(j4);
IkReal x2897=(cj5*r00);
IkReal x2898=(cj5*r10);
IkReal x2899=(cj5*r20);
IkReal x2900=((1.0)*x2895);
IkReal x2901=((1.0)*x2896);
IkReal x2902=(sj5*x2895);
IkReal x2903=(sj5*x2896);
evalcond[0]=(((r21*x2902))+((r22*x2896))+(((-1.0)*x2899*x2900)));
evalcond[1]=(((r21*x2903))+(((-1.0)*x2899*x2901))+(((-1.0)*r22*x2900)));
evalcond[2]=(cj0+(((-1.0)*x2897*x2900))+((r01*x2902))+((r02*x2896)));
evalcond[3]=(sj0+(((-1.0)*x2898*x2900))+((r12*x2896))+((r11*x2902)));
evalcond[4]=((((-1.0)*r02*x2900))+sj0+(((-1.0)*x2897*x2901))+((r01*x2903)));
evalcond[5]=((((-1.0)*x2898*x2901))+(((-1.0)*r12*x2900))+((r11*x2903))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((8.13008130081301)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-8.13008130081301)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((8.13008130081301)*px))+IKsqr(((-8.13008130081301)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((8.13008130081301)*px), ((-8.13008130081301)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((0.123)*(IKsin(j0))))+(((-1.0)*px)));
evalcond[1]=((((-1.0)*py))+(((-0.123)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x2904=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x2904;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x2904);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x2905=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x2905;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x2905);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x2906=((1.0)*cj5);
IkReal x2907=((((-1.0)*r00*sj5))+(((-1.0)*r01*x2906)));
j4eval[0]=x2907;
j4eval[1]=IKsign(x2907);
j4eval[2]=((IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x2906)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2908=((1.0)*cj5);
CheckValue<IkReal> x2909=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x2908)))),-1);
if(!x2909.valid){
continue;
}
CheckValue<IkReal> x2910 = IKatan2WithCheck(IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x2908)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x2910.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2909.value)))+(x2910.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2911=IKcos(j4);
IkReal x2912=IKsin(j4);
IkReal x2913=((1.0)*cj0);
IkReal x2914=(cj5*r00);
IkReal x2915=(cj5*r10);
IkReal x2916=(cj5*r20);
IkReal x2917=((1.0)*x2911);
IkReal x2918=((1.0)*x2912);
IkReal x2919=(sj5*x2911);
IkReal x2920=(sj5*x2912);
evalcond[0]=(((r21*x2919))+((r22*x2912))+(((-1.0)*x2916*x2917)));
evalcond[1]=(((r21*x2920))+(((-1.0)*x2916*x2918))+(((-1.0)*r22*x2917)));
evalcond[2]=(sj0+(((-1.0)*x2914*x2918))+((r01*x2920))+(((-1.0)*r02*x2917)));
evalcond[3]=(((r01*x2919))+(((-1.0)*x2914*x2917))+((r02*x2912))+(((-1.0)*x2913)));
evalcond[4]=((((-1.0)*x2915*x2917))+((r11*x2919))+(((-1.0)*sj0))+((r12*x2912)));
evalcond[5]=((((-1.0)*x2915*x2918))+(((-1.0)*r12*x2917))+((r11*x2920))+(((-1.0)*x2913)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2921 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x2921.valid){
continue;
}
CheckValue<IkReal> x2922=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x2922.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2921.value)+(((1.5707963267949)*(x2922.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2923=IKcos(j4);
IkReal x2924=IKsin(j4);
IkReal x2925=((1.0)*cj0);
IkReal x2926=(cj5*r00);
IkReal x2927=(cj5*r10);
IkReal x2928=(cj5*r20);
IkReal x2929=((1.0)*x2923);
IkReal x2930=((1.0)*x2924);
IkReal x2931=(sj5*x2923);
IkReal x2932=(sj5*x2924);
evalcond[0]=(((r22*x2924))+((r21*x2931))+(((-1.0)*x2928*x2929)));
evalcond[1]=(((r21*x2932))+(((-1.0)*r22*x2929))+(((-1.0)*x2928*x2930)));
evalcond[2]=(sj0+(((-1.0)*r02*x2929))+((r01*x2932))+(((-1.0)*x2926*x2930)));
evalcond[3]=(((r01*x2931))+(((-1.0)*x2925))+(((-1.0)*x2926*x2929))+((r02*x2924)));
evalcond[4]=((((-1.0)*sj0))+(((-1.0)*x2927*x2929))+((r12*x2924))+((r11*x2931)));
evalcond[5]=((((-1.0)*x2927*x2930))+(((-1.0)*x2925))+(((-1.0)*r12*x2929))+((r11*x2932)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2933=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x2933.valid){
continue;
}
CheckValue<IkReal> x2934 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2934.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2933.value)))+(x2934.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2935=IKcos(j4);
IkReal x2936=IKsin(j4);
IkReal x2937=((1.0)*cj0);
IkReal x2938=(cj5*r00);
IkReal x2939=(cj5*r10);
IkReal x2940=(cj5*r20);
IkReal x2941=((1.0)*x2935);
IkReal x2942=((1.0)*x2936);
IkReal x2943=(sj5*x2935);
IkReal x2944=(sj5*x2936);
evalcond[0]=(((r21*x2943))+(((-1.0)*x2940*x2941))+((r22*x2936)));
evalcond[1]=(((r21*x2944))+(((-1.0)*x2940*x2942))+(((-1.0)*r22*x2941)));
evalcond[2]=(sj0+(((-1.0)*r02*x2941))+((r01*x2944))+(((-1.0)*x2938*x2942)));
evalcond[3]=(((r02*x2936))+(((-1.0)*x2937))+((r01*x2943))+(((-1.0)*x2938*x2941)));
evalcond[4]=((((-1.0)*x2939*x2941))+(((-1.0)*sj0))+((r11*x2943))+((r12*x2936)));
evalcond[5]=((((-1.0)*r12*x2941))+(((-1.0)*x2939*x2942))+(((-1.0)*x2937))+((r11*x2944)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((8.13008130081301)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-8.13008130081301)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((8.13008130081301)*px))+IKsqr(((-8.13008130081301)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((8.13008130081301)*px), ((-8.13008130081301)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((0.123)*(IKsin(j0))))+(((-1.0)*px)));
evalcond[1]=((((-1.0)*py))+(((-0.123)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x2945=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x2945;
j4eval[1]=IKsign(x2945);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x2946=((1.0)*cj5);
IkReal x2947=((((-1.0)*r10*sj5))+(((-1.0)*r11*x2946)));
j4eval[0]=x2947;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x2946)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x2947);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x2948=cj5*cj5;
IkReal x2949=((1.0)*r20);
IkReal x2950=(r01*r21);
IkReal x2951=(r21*sj5);
IkReal x2952=(((cj5*r01*r20*sj5))+(((-1.0)*x2950))+((cj5*r00*x2951))+(((-1.0)*r02*r22))+((x2948*x2950))+(((-1.0)*r00*x2948*x2949)));
j4eval[0]=x2952;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*cj5*x2949))+((cj0*x2951))))));
j4eval[2]=IKsign(x2952);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2953=cj5*cj5;
IkReal x2954=((1.0)*r20);
IkReal x2955=(r01*r21);
IkReal x2956=(r21*sj5);
CheckValue<IkReal> x2957=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*x2955))+((cj5*r00*x2956))+(((-1.0)*r02*r22))+((x2953*x2955))+(((-1.0)*r00*x2953*x2954)))),-1);
if(!x2957.valid){
continue;
}
CheckValue<IkReal> x2958 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*cj5*x2954))+((cj0*x2956)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2958.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2957.value)))+(x2958.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2959=IKcos(j4);
IkReal x2960=IKsin(j4);
IkReal x2961=(cj5*r00);
IkReal x2962=(cj5*r10);
IkReal x2963=(cj5*r20);
IkReal x2964=((1.0)*x2959);
IkReal x2965=((1.0)*x2960);
IkReal x2966=(sj5*x2959);
IkReal x2967=(sj5*x2960);
evalcond[0]=((((-1.0)*x2963*x2964))+((r21*x2966))+((r22*x2960)));
evalcond[1]=((((-1.0)*x2963*x2965))+((r21*x2967))+(((-1.0)*r22*x2964)));
evalcond[2]=(((r02*x2960))+cj0+((r01*x2966))+(((-1.0)*x2961*x2964)));
evalcond[3]=(sj0+((r11*x2966))+(((-1.0)*x2962*x2964))+((r12*x2960)));
evalcond[4]=(sj0+(((-1.0)*r02*x2964))+((r01*x2967))+(((-1.0)*x2961*x2965)));
evalcond[5]=(((r11*x2967))+(((-1.0)*x2962*x2965))+(((-1.0)*cj0))+(((-1.0)*r12*x2964)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2968=((1.0)*cj5);
CheckValue<IkReal> x2969=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x2968))+(((-1.0)*r10*sj5)))),-1);
if(!x2969.valid){
continue;
}
CheckValue<IkReal> x2970 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x2968)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x2970.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2969.value)))+(x2970.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2971=IKcos(j4);
IkReal x2972=IKsin(j4);
IkReal x2973=(cj5*r00);
IkReal x2974=(cj5*r10);
IkReal x2975=(cj5*r20);
IkReal x2976=((1.0)*x2971);
IkReal x2977=((1.0)*x2972);
IkReal x2978=(sj5*x2971);
IkReal x2979=(sj5*x2972);
evalcond[0]=((((-1.0)*x2975*x2976))+((r22*x2972))+((r21*x2978)));
evalcond[1]=((((-1.0)*x2975*x2977))+(((-1.0)*r22*x2976))+((r21*x2979)));
evalcond[2]=(cj0+((r02*x2972))+((r01*x2978))+(((-1.0)*x2973*x2976)));
evalcond[3]=(sj0+((r12*x2972))+(((-1.0)*x2974*x2976))+((r11*x2978)));
evalcond[4]=(sj0+(((-1.0)*r02*x2976))+((r01*x2979))+(((-1.0)*x2973*x2977)));
evalcond[5]=((((-1.0)*r12*x2976))+(((-1.0)*x2974*x2977))+((r11*x2979))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2980 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x2980.valid){
continue;
}
CheckValue<IkReal> x2981=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x2981.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2980.value)+(((1.5707963267949)*(x2981.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2982=IKcos(j4);
IkReal x2983=IKsin(j4);
IkReal x2984=(cj5*r00);
IkReal x2985=(cj5*r10);
IkReal x2986=(cj5*r20);
IkReal x2987=((1.0)*x2982);
IkReal x2988=((1.0)*x2983);
IkReal x2989=(sj5*x2982);
IkReal x2990=(sj5*x2983);
evalcond[0]=((((-1.0)*x2986*x2987))+((r22*x2983))+((r21*x2989)));
evalcond[1]=((((-1.0)*r22*x2987))+((r21*x2990))+(((-1.0)*x2986*x2988)));
evalcond[2]=(cj0+(((-1.0)*x2984*x2987))+((r01*x2989))+((r02*x2983)));
evalcond[3]=((((-1.0)*x2985*x2987))+sj0+((r11*x2989))+((r12*x2983)));
evalcond[4]=(sj0+(((-1.0)*x2984*x2988))+((r01*x2990))+(((-1.0)*r02*x2987)));
evalcond[5]=((((-1.0)*x2985*x2988))+(((-1.0)*r12*x2987))+(((-1.0)*cj0))+((r11*x2990)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((3.27590390681873)*py))+(((1.6581735824638)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((3.27590390681873)*px))+(((-1.6581735824638)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((3.27590390681873)*py))+(((1.6581735824638)*px))))+IKsqr(((((3.27590390681873)*px))+(((-1.6581735824638)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((3.27590390681873)*py))+(((1.6581735824638)*px))), ((((3.27590390681873)*px))+(((-1.6581735824638)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x2991=IKsin(j0);
IkReal x2992=IKcos(j0);
evalcond[0]=((((-1.0)*px))+(((0.123)*x2991))+(((0.243)*x2992)));
evalcond[1]=((((-0.123)*x2992))+(((-1.0)*py))+(((0.243)*x2991)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x2993=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x2993;
j4eval[1]=IKsign(x2993);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x2994=((1.0)*cj5);
IkReal x2995=((((-1.0)*r10*sj5))+(((-1.0)*r11*x2994)));
j4eval[0]=x2995;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x2994))))));
j4eval[2]=IKsign(x2995);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x2996=cj5*cj5;
IkReal x2997=((1.0)*r20);
IkReal x2998=(r01*r21);
IkReal x2999=(r21*sj5);
IkReal x3000=(((cj5*r01*r20*sj5))+((x2996*x2998))+(((-1.0)*r02*r22))+(((-1.0)*x2998))+((cj5*r00*x2999))+(((-1.0)*r00*x2996*x2997)));
j4eval[0]=x3000;
j4eval[1]=((IKabs((((cj0*x2999))+(((-1.0)*cj0*cj5*x2997)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3000);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3001=cj5*cj5;
IkReal x3002=((1.0)*r20);
IkReal x3003=(r01*r21);
IkReal x3004=(r21*sj5);
CheckValue<IkReal> x3005=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*x3003))+(((-1.0)*r02*r22))+((cj5*r00*x3004))+((x3001*x3003))+(((-1.0)*r00*x3001*x3002)))),-1);
if(!x3005.valid){
continue;
}
CheckValue<IkReal> x3006 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*x3004))+(((-1.0)*cj0*cj5*x3002)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3006.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3005.value)))+(x3006.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3007=IKcos(j4);
IkReal x3008=IKsin(j4);
IkReal x3009=(cj5*r00);
IkReal x3010=(cj5*r10);
IkReal x3011=(cj5*r20);
IkReal x3012=((1.0)*x3007);
IkReal x3013=((1.0)*x3008);
IkReal x3014=(sj5*x3007);
IkReal x3015=(sj5*x3008);
evalcond[0]=(((r22*x3008))+(((-1.0)*x3011*x3012))+((r21*x3014)));
evalcond[1]=((((-1.0)*r22*x3012))+(((-1.0)*x3011*x3013))+((r21*x3015)));
evalcond[2]=(((r01*x3014))+cj0+((r02*x3008))+(((-1.0)*x3009*x3012)));
evalcond[3]=(sj0+((r12*x3008))+(((-1.0)*x3010*x3012))+((r11*x3014)));
evalcond[4]=(sj0+((r01*x3015))+(((-1.0)*r02*x3012))+(((-1.0)*x3009*x3013)));
evalcond[5]=((((-1.0)*r12*x3012))+(((-1.0)*x3010*x3013))+((r11*x3015))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3016=((1.0)*cj5);
CheckValue<IkReal> x3017=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x3016)))),-1);
if(!x3017.valid){
continue;
}
CheckValue<IkReal> x3018 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3016)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3018.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3017.value)))+(x3018.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3019=IKcos(j4);
IkReal x3020=IKsin(j4);
IkReal x3021=(cj5*r00);
IkReal x3022=(cj5*r10);
IkReal x3023=(cj5*r20);
IkReal x3024=((1.0)*x3019);
IkReal x3025=((1.0)*x3020);
IkReal x3026=(sj5*x3019);
IkReal x3027=(sj5*x3020);
evalcond[0]=(((r21*x3026))+((r22*x3020))+(((-1.0)*x3023*x3024)));
evalcond[1]=(((r21*x3027))+(((-1.0)*x3023*x3025))+(((-1.0)*r22*x3024)));
evalcond[2]=(cj0+(((-1.0)*x3021*x3024))+((r02*x3020))+((r01*x3026)));
evalcond[3]=(((r12*x3020))+sj0+((r11*x3026))+(((-1.0)*x3022*x3024)));
evalcond[4]=(sj0+(((-1.0)*x3021*x3025))+((r01*x3027))+(((-1.0)*r02*x3024)));
evalcond[5]=((((-1.0)*r12*x3024))+((r11*x3027))+(((-1.0)*x3022*x3025))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3028 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3028.valid){
continue;
}
CheckValue<IkReal> x3029=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x3029.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3028.value)+(((1.5707963267949)*(x3029.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3030=IKcos(j4);
IkReal x3031=IKsin(j4);
IkReal x3032=(cj5*r00);
IkReal x3033=(cj5*r10);
IkReal x3034=(cj5*r20);
IkReal x3035=((1.0)*x3030);
IkReal x3036=((1.0)*x3031);
IkReal x3037=(sj5*x3030);
IkReal x3038=(sj5*x3031);
evalcond[0]=(((r22*x3031))+((r21*x3037))+(((-1.0)*x3034*x3035)));
evalcond[1]=(((r21*x3038))+(((-1.0)*r22*x3035))+(((-1.0)*x3034*x3036)));
evalcond[2]=(((r02*x3031))+cj0+((r01*x3037))+(((-1.0)*x3032*x3035)));
evalcond[3]=(sj0+((r11*x3037))+((r12*x3031))+(((-1.0)*x3033*x3035)));
evalcond[4]=(sj0+((r01*x3038))+(((-1.0)*r02*x3035))+(((-1.0)*x3032*x3036)));
evalcond[5]=(((r11*x3038))+(((-1.0)*x3033*x3036))+(((-1.0)*r12*x3035))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((3.27590390681873)*py))+(((1.6581735824638)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((3.27590390681873)*px))+(((-1.6581735824638)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((3.27590390681873)*py))+(((1.6581735824638)*px))))+IKsqr(((((3.27590390681873)*px))+(((-1.6581735824638)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((3.27590390681873)*py))+(((1.6581735824638)*px))), ((((3.27590390681873)*px))+(((-1.6581735824638)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x3039=IKsin(j0);
IkReal x3040=IKcos(j0);
evalcond[0]=((((-1.0)*px))+(((0.243)*x3040))+(((0.123)*x3039)));
evalcond[1]=((((0.243)*x3039))+(((-1.0)*py))+(((-0.123)*x3040)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3041=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x3041;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x3041);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3042=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x3042;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3042);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3043=((1.0)*cj5);
IkReal x3044=((((-1.0)*r00*sj5))+(((-1.0)*r01*x3043)));
j4eval[0]=x3044;
j4eval[1]=IKsign(x3044);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x3043))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3045=((1.0)*cj5);
CheckValue<IkReal> x3046=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x3045)))),-1);
if(!x3046.valid){
continue;
}
CheckValue<IkReal> x3047 = IKatan2WithCheck(IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x3045)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3047.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3046.value)))+(x3047.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3048=IKcos(j4);
IkReal x3049=IKsin(j4);
IkReal x3050=((1.0)*cj0);
IkReal x3051=(cj5*r00);
IkReal x3052=(cj5*r10);
IkReal x3053=(cj5*r20);
IkReal x3054=((1.0)*x3048);
IkReal x3055=((1.0)*x3049);
IkReal x3056=(sj5*x3048);
IkReal x3057=(sj5*x3049);
evalcond[0]=(((r22*x3049))+(((-1.0)*x3053*x3054))+((r21*x3056)));
evalcond[1]=((((-1.0)*x3053*x3055))+((r21*x3057))+(((-1.0)*r22*x3054)));
evalcond[2]=(sj0+(((-1.0)*x3051*x3055))+((r01*x3057))+(((-1.0)*r02*x3054)));
evalcond[3]=((((-1.0)*x3051*x3054))+((r01*x3056))+((r02*x3049))+(((-1.0)*x3050)));
evalcond[4]=((((-1.0)*sj0))+(((-1.0)*x3052*x3054))+((r11*x3056))+((r12*x3049)));
evalcond[5]=((((-1.0)*x3052*x3055))+((r11*x3057))+(((-1.0)*x3050))+(((-1.0)*r12*x3054)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3058 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3058.valid){
continue;
}
CheckValue<IkReal> x3059=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x3059.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3058.value)+(((1.5707963267949)*(x3059.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3060=IKcos(j4);
IkReal x3061=IKsin(j4);
IkReal x3062=((1.0)*cj0);
IkReal x3063=(cj5*r00);
IkReal x3064=(cj5*r10);
IkReal x3065=(cj5*r20);
IkReal x3066=((1.0)*x3060);
IkReal x3067=((1.0)*x3061);
IkReal x3068=(sj5*x3060);
IkReal x3069=(sj5*x3061);
evalcond[0]=(((r22*x3061))+(((-1.0)*x3065*x3066))+((r21*x3068)));
evalcond[1]=((((-1.0)*r22*x3066))+(((-1.0)*x3065*x3067))+((r21*x3069)));
evalcond[2]=(sj0+((r01*x3069))+(((-1.0)*x3063*x3067))+(((-1.0)*r02*x3066)));
evalcond[3]=(((r01*x3068))+(((-1.0)*x3063*x3066))+(((-1.0)*x3062))+((r02*x3061)));
evalcond[4]=((((-1.0)*sj0))+((r11*x3068))+((r12*x3061))+(((-1.0)*x3064*x3066)));
evalcond[5]=((((-1.0)*r12*x3066))+(((-1.0)*x3062))+((r11*x3069))+(((-1.0)*x3064*x3067)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3070=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x3070.valid){
continue;
}
CheckValue<IkReal> x3071 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3071.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3070.value)))+(x3071.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3072=IKcos(j4);
IkReal x3073=IKsin(j4);
IkReal x3074=((1.0)*cj0);
IkReal x3075=(cj5*r00);
IkReal x3076=(cj5*r10);
IkReal x3077=(cj5*r20);
IkReal x3078=((1.0)*x3072);
IkReal x3079=((1.0)*x3073);
IkReal x3080=(sj5*x3072);
IkReal x3081=(sj5*x3073);
evalcond[0]=(((r22*x3073))+((r21*x3080))+(((-1.0)*x3077*x3078)));
evalcond[1]=((((-1.0)*r22*x3078))+((r21*x3081))+(((-1.0)*x3077*x3079)));
evalcond[2]=(sj0+(((-1.0)*r02*x3078))+((r01*x3081))+(((-1.0)*x3075*x3079)));
evalcond[3]=((((-1.0)*x3074))+((r01*x3080))+(((-1.0)*x3075*x3078))+((r02*x3073)));
evalcond[4]=((((-1.0)*sj0))+((r11*x3080))+((r12*x3073))+(((-1.0)*x3076*x3078)));
evalcond[5]=(((r11*x3081))+(((-1.0)*x3074))+(((-1.0)*r12*x3078))+(((-1.0)*x3076*x3079)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x3082=((104.0)*cj2);
IkReal x3083=(cj1*sj2);
IkReal x3084=((1000.0)*px);
IkReal x3085=(cj5*r01);
IkReal x3086=(cj2*sj1);
IkReal x3087=(r00*sj5);
IkReal x3088=(sj1*x3085);
CheckValue<IkReal> x3089=IKPowWithIntegerCheck(((((123.0)*x3086))+(((123.0)*x3083))),-1);
if(!x3089.valid){
continue;
}
CheckValue<IkReal> x3090=IKPowWithIntegerCheck((x3086+x3083),-1);
if(!x3090.valid){
continue;
}
if( IKabs(((x3089.value)*(((((-104.0)*x3083*x3087))+(((-104.0)*x3083*x3085))+((x3083*x3084))+(((-1.0)*x3082*x3088))+(((-1.0)*sj1*x3082*x3087))+(((-243.0)*sj1*x3087))+(((-243.0)*x3088))+((x3084*x3086)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x3090.value)*(((((-1.0)*x3085))+(((-1.0)*x3087)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x3089.value)*(((((-104.0)*x3083*x3087))+(((-104.0)*x3083*x3085))+((x3083*x3084))+(((-1.0)*x3082*x3088))+(((-1.0)*sj1*x3082*x3087))+(((-243.0)*sj1*x3087))+(((-243.0)*x3088))+((x3084*x3086))))))+IKsqr(((x3090.value)*(((((-1.0)*x3085))+(((-1.0)*x3087))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x3089.value)*(((((-104.0)*x3083*x3087))+(((-104.0)*x3083*x3085))+((x3083*x3084))+(((-1.0)*x3082*x3088))+(((-1.0)*sj1*x3082*x3087))+(((-243.0)*sj1*x3087))+(((-243.0)*x3088))+((x3084*x3086))))), ((x3090.value)*(((((-1.0)*x3085))+(((-1.0)*x3087))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x3091=IKcos(j0);
IkReal x3092=IKsin(j0);
IkReal x3093=((0.11)*sj5);
IkReal x3094=(cj5*r01);
IkReal x3095=(cj2*sj1);
IkReal x3096=(cj5*r11);
IkReal x3097=((0.243)*sj1);
IkReal x3098=(cj1*sj2);
IkReal x3099=((0.214)*x3091);
IkReal x3100=((0.214)*x3092);
evalcond[0]=(((r00*sj5))+x3094+((x3091*x3095))+((x3091*x3098)));
evalcond[1]=(((r10*sj5))+x3096+((x3092*x3098))+((x3092*x3095)));
evalcond[2]=((((-1.0)*x3098*x3099))+(((-0.11)*x3094))+(((0.123)*x3092))+(((-1.0)*px))+(((-1.0)*r00*x3093))+(((-1.0)*x3091*x3097))+(((-1.0)*x3095*x3099)));
evalcond[3]=((((-0.123)*x3091))+(((-0.11)*x3096))+(((-1.0)*x3092*x3097))+(((-1.0)*x3095*x3100))+(((-1.0)*r10*x3093))+(((-1.0)*py))+(((-1.0)*x3098*x3100)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x3101=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x3101;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x3101);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x3102=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x3102;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3102);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x3103=((1.0)*cj5);
IkReal x3104=((((-1.0)*r21*x3103))+(((-1.0)*r20*sj5)));
j4eval[0]=x3104;
j4eval[1]=((IKabs((((r11*sj0*sj5))+(((-1.0)*cj0*r00*x3103))+(((-1.0)*r10*sj0*x3103))+((cj0*r01*sj5)))))+(IKabs((((r12*sj0))+((cj0*r02))))));
j4eval[2]=IKsign(x3104);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x3105=((-1.0)*r20);
IkReal x3107 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x3107)==0){
continue;
}
IkReal x3106=pow(x3107,-0.5);
CheckValue<IkReal> x3108 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x3105),IKFAST_ATAN2_MAGTHRESH);
if(!x3108.valid){
continue;
}
IkReal gconst96=((-1.0)*(x3108.value));
IkReal gconst97=(r21*x3106);
IkReal gconst98=(x3105*x3106);
CheckValue<IkReal> x3109 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3109.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x3109.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x3110=((-1.0)*r20);
IkReal x3111=x3106;
CheckValue<IkReal> x3113 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x3110),IKFAST_ATAN2_MAGTHRESH);
if(!x3113.valid){
continue;
}
IkReal x3112=((-1.0)*(x3113.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst97;
cj5=gconst98;
j5=x3112;
IkReal gconst96=x3112;
IkReal gconst97=(r21*x3111);
IkReal gconst98=(x3110*x3111);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x3114=((-1.0)*r20);
IkReal x3115=x3106;
CheckValue<IkReal> x3117 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x3114),IKFAST_ATAN2_MAGTHRESH);
if(!x3117.valid){
continue;
}
IkReal x3116=((-1.0)*(x3117.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst97;
cj5=gconst98;
j5=x3116;
IkReal gconst96=x3116;
IkReal gconst97=(r21*x3115);
IkReal gconst98=(x3114*x3115);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x3118=((-1.0)*r20);
IkReal x3119=x3106;
CheckValue<IkReal> x3121 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x3118),IKFAST_ATAN2_MAGTHRESH);
if(!x3121.valid){
continue;
}
IkReal x3120=((-1.0)*(x3121.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst97;
cj5=gconst98;
j5=x3120;
IkReal gconst96=x3120;
IkReal gconst97=(r21*x3119);
IkReal gconst98=(x3118*x3119);
IkReal x3122=((1.0)*(r22*r22));
CheckValue<IkReal> x3126=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x3122))),-1);
if(!x3126.valid){
continue;
}
IkReal x3123=x3126.value;
IkReal x3124=((1.0)*x3123);
IkReal x3125=((((-2.0)*x3123*(r20*r20)*(r21*r21)))+(((-1.0)*x3124*(r21*r21*r21*r21)))+(((-1.0)*x3122))+(((-1.0)*x3124*(r20*r20*r20*r20))));
j4eval[0]=x3125;
j4eval[1]=IKsign(x3125);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3127=(gconst97*r21);
IkReal x3128=(cj2*sj1);
IkReal x3129=(cj1*sj2);
IkReal x3130=((1.0)*gconst98*r20);
CheckValue<IkReal> x3131 = IKatan2WithCheck(IkReal((((r22*x3128))+((r22*x3129)))),IkReal((((x3127*x3128))+((x3127*x3129))+(((-1.0)*x3128*x3130))+(((-1.0)*x3129*x3130)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3131.valid){
continue;
}
CheckValue<IkReal> x3132=IKPowWithIntegerCheck(IKsign(((((2.0)*gconst98*r20*x3127))+(((-1.0)*(x3127*x3127)))+(((-1.0)*gconst98*r20*x3130))+(((-1.0)*(r22*r22))))),-1);
if(!x3132.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3131.value)+(((1.5707963267949)*(x3132.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3133=IKsin(j4);
IkReal x3134=IKcos(j4);
IkReal x3135=(gconst98*r10);
IkReal x3136=(cj1*cj2);
IkReal x3137=(gconst98*r20);
IkReal x3138=(gconst98*r00);
IkReal x3139=((1.0)*cj0);
IkReal x3140=(sj1*sj2);
IkReal x3141=((1.0)*x3134);
IkReal x3142=(gconst97*x3133);
IkReal x3143=((1.0)*x3133);
IkReal x3144=(gconst97*x3134);
evalcond[0]=((((-1.0)*r22*x3141))+((r21*x3142))+(((-1.0)*x3137*x3143)));
evalcond[1]=(sj0+((r01*x3142))+(((-1.0)*r02*x3141))+(((-1.0)*x3138*x3143)));
evalcond[2]=((((-1.0)*r12*x3141))+((r11*x3142))+(((-1.0)*x3135*x3143))+(((-1.0)*x3139)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r22*x3133))+((r21*x3144))+(((-1.0)*x3137*x3141)));
evalcond[4]=(((r01*x3144))+((r02*x3133))+(((-1.0)*x3138*x3141))+(((-1.0)*x3139*x3140))+((cj0*x3136)));
evalcond[5]=(((r11*x3144))+(((-1.0)*x3135*x3141))+((r12*x3133))+(((-1.0)*sj0*x3140))+((sj0*x3136)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3145 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst97*r21))+(((-1.0)*cj0*gconst98*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3145.valid){
continue;
}
CheckValue<IkReal> x3146=IKPowWithIntegerCheck(IKsign((((gconst98*r01))+((gconst97*r00)))),-1);
if(!x3146.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3145.value)+(((1.5707963267949)*(x3146.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3147=IKsin(j4);
IkReal x3148=IKcos(j4);
IkReal x3149=(gconst98*r10);
IkReal x3150=(cj1*cj2);
IkReal x3151=(gconst98*r20);
IkReal x3152=(gconst98*r00);
IkReal x3153=((1.0)*cj0);
IkReal x3154=(sj1*sj2);
IkReal x3155=((1.0)*x3148);
IkReal x3156=(gconst97*x3147);
IkReal x3157=((1.0)*x3147);
IkReal x3158=(gconst97*x3148);
evalcond[0]=((((-1.0)*r22*x3155))+((r21*x3156))+(((-1.0)*x3151*x3157)));
evalcond[1]=(sj0+((r01*x3156))+(((-1.0)*r02*x3155))+(((-1.0)*x3152*x3157)));
evalcond[2]=((((-1.0)*x3153))+((r11*x3156))+(((-1.0)*x3149*x3157))+(((-1.0)*r12*x3155)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r22*x3147))+((r21*x3158))+(((-1.0)*x3151*x3155)));
evalcond[4]=((((-1.0)*x3153*x3154))+((r02*x3147))+((cj0*x3150))+((r01*x3158))+(((-1.0)*x3152*x3155)));
evalcond[5]=(((r12*x3147))+((r11*x3158))+((sj0*x3150))+(((-1.0)*x3149*x3155))+(((-1.0)*sj0*x3154)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3159 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst97*r21*sj0))+(((-1.0)*gconst98*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3159.valid){
continue;
}
CheckValue<IkReal> x3160=IKPowWithIntegerCheck(IKsign((((gconst98*r11))+((gconst97*r10)))),-1);
if(!x3160.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3159.value)+(((1.5707963267949)*(x3160.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3161=IKsin(j4);
IkReal x3162=IKcos(j4);
IkReal x3163=(gconst98*r10);
IkReal x3164=(cj1*cj2);
IkReal x3165=(gconst98*r20);
IkReal x3166=(gconst98*r00);
IkReal x3167=((1.0)*cj0);
IkReal x3168=(sj1*sj2);
IkReal x3169=((1.0)*x3162);
IkReal x3170=(gconst97*x3161);
IkReal x3171=((1.0)*x3161);
IkReal x3172=(gconst97*x3162);
evalcond[0]=((((-1.0)*x3165*x3171))+((r21*x3170))+(((-1.0)*r22*x3169)));
evalcond[1]=(sj0+(((-1.0)*x3166*x3171))+(((-1.0)*r02*x3169))+((r01*x3170)));
evalcond[2]=((((-1.0)*r12*x3169))+((r11*x3170))+(((-1.0)*x3163*x3171))+(((-1.0)*x3167)));
evalcond[3]=(((cj2*sj1))+((r22*x3161))+(((-1.0)*x3165*x3169))+((cj1*sj2))+((r21*x3172)));
evalcond[4]=(((r02*x3161))+(((-1.0)*x3167*x3168))+((cj0*x3164))+(((-1.0)*x3166*x3169))+((r01*x3172)));
evalcond[5]=(((r11*x3172))+(((-1.0)*x3163*x3169))+((r12*x3161))+((sj0*x3164))+(((-1.0)*sj0*x3168)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3173=((-1.0)*r21);
IkReal x3175 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x3175)==0){
continue;
}
IkReal x3174=pow(x3175,-0.5);
CheckValue<IkReal> x3176 = IKatan2WithCheck(IkReal(x3173),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3176.valid){
continue;
}
IkReal gconst99=((3.14159265358979)+(((-1.0)*(x3176.value))));
IkReal gconst100=(x3173*x3174);
IkReal gconst101=((1.0)*r20*x3174);
CheckValue<IkReal> x3177 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3177.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x3177.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x3178=((-1.0)*r21);
CheckValue<IkReal> x3181 = IKatan2WithCheck(IkReal(x3178),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3181.valid){
continue;
}
IkReal x3179=((1.0)*(x3181.value));
IkReal x3180=x3174;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x3179)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x3179)));
IkReal gconst100=(x3178*x3180);
IkReal gconst101=((1.0)*r20*x3180);
IkReal x3182=r22*r22;
IkReal x3183=((1.0)*x3182);
CheckValue<IkReal> x3187=IKPowWithIntegerCheck(((-1.0)+x3182),-1);
if(!x3187.valid){
continue;
}
IkReal x3184=x3187.value;
if((((1.0)+(((-1.0)*x3183)))) < -0.00001)
continue;
IkReal x3185=IKsqrt(((1.0)+(((-1.0)*x3183))));
IkReal x3186=(sj0*x3184*x3185);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs((x3186+(((-1.0)*x3183*x3186))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x3188=((-1.0)*r21);
CheckValue<IkReal> x3191 = IKatan2WithCheck(IkReal(x3188),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3191.valid){
continue;
}
IkReal x3189=((1.0)*(x3191.value));
IkReal x3190=x3174;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x3189)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x3189)));
IkReal gconst100=(x3188*x3190);
IkReal gconst101=((1.0)*r20*x3190);
IkReal x3192=r22*r22;
IkReal x3193=((1.0)*x3192);
CheckValue<IkReal> x3197=IKPowWithIntegerCheck(((-1.0)+x3192),-1);
if(!x3197.valid){
continue;
}
IkReal x3194=x3197.value;
if((((1.0)+(((-1.0)*x3193)))) < -0.00001)
continue;
IkReal x3195=IKsqrt(((1.0)+(((-1.0)*x3193))));
IkReal x3196=(cj0*x3194*x3195);
j4eval[0]=((IKabs((x3196+(((-1.0)*x3193*x3196)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x3198=((-1.0)*r21);
CheckValue<IkReal> x3201 = IKatan2WithCheck(IkReal(x3198),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3201.valid){
continue;
}
IkReal x3199=((1.0)*(x3201.value));
IkReal x3200=x3174;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x3199)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x3199)));
IkReal gconst100=(x3198*x3200);
IkReal gconst101=((1.0)*r20*x3200);
IkReal x3202=r22*r22;
IkReal x3203=(cj0*r02);
IkReal x3204=(r12*sj0);
CheckValue<IkReal> x3208=IKPowWithIntegerCheck(((-1.0)+x3202),-1);
if(!x3208.valid){
continue;
}
IkReal x3205=x3208.value;
if((((1.0)+(((-1.0)*x3202)))) < -0.00001)
continue;
IkReal x3206=IKsqrt(((1.0)+(((-1.0)*x3202))));
IkReal x3207=((1.0)*r22*x3205*x3206);
j4eval[0]=0;
j4eval[1]=((IKabs(((((-1.0)*x3204*x3207))+(((-1.0)*x3203*x3207)))))+(IKabs((x3204+x3203))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3209=((1.0)*gconst101);
CheckValue<IkReal> x3210=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst100*r20))+(((-1.0)*r21*x3209)))),-1);
if(!x3210.valid){
continue;
}
CheckValue<IkReal> x3211 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*cj0*r00*x3209))+(((-1.0)*r10*sj0*x3209))+((cj0*gconst100*r01))+((gconst100*r11*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3211.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3210.value)))+(x3211.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3212=IKsin(j4);
IkReal x3213=IKcos(j4);
IkReal x3214=(cj1*cj2);
IkReal x3215=(gconst101*r20);
IkReal x3216=(gconst101*r10);
IkReal x3217=(gconst101*r00);
IkReal x3218=((1.0)*cj0);
IkReal x3219=(sj1*sj2);
IkReal x3220=((1.0)*x3213);
IkReal x3221=((1.0)*x3212);
IkReal x3222=(gconst100*x3212);
IkReal x3223=(gconst100*x3213);
evalcond[0]=(((r21*x3222))+(((-1.0)*x3215*x3221))+(((-1.0)*r22*x3220)));
evalcond[1]=((((-1.0)*r02*x3220))+sj0+((r01*x3222))+(((-1.0)*x3217*x3221)));
evalcond[2]=((((-1.0)*x3216*x3221))+((r11*x3222))+(((-1.0)*x3218))+(((-1.0)*r12*x3220)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r22*x3212))+((r21*x3223))+(((-1.0)*x3215*x3220)));
evalcond[4]=(((r01*x3223))+(((-1.0)*x3218*x3219))+((cj0*x3214))+((r02*x3212))+(((-1.0)*x3217*x3220)));
evalcond[5]=((((-1.0)*x3216*x3220))+((r11*x3223))+((r12*x3212))+(((-1.0)*sj0*x3219))+((sj0*x3214)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3224 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst100*r21))+(((-1.0)*cj0*gconst101*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3224.valid){
continue;
}
CheckValue<IkReal> x3225=IKPowWithIntegerCheck(IKsign((((gconst100*r00))+((gconst101*r01)))),-1);
if(!x3225.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3224.value)+(((1.5707963267949)*(x3225.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3226=IKsin(j4);
IkReal x3227=IKcos(j4);
IkReal x3228=(cj1*cj2);
IkReal x3229=(gconst101*r20);
IkReal x3230=(gconst101*r10);
IkReal x3231=(gconst101*r00);
IkReal x3232=((1.0)*cj0);
IkReal x3233=(sj1*sj2);
IkReal x3234=((1.0)*x3227);
IkReal x3235=((1.0)*x3226);
IkReal x3236=(gconst100*x3226);
IkReal x3237=(gconst100*x3227);
evalcond[0]=((((-1.0)*x3229*x3235))+(((-1.0)*r22*x3234))+((r21*x3236)));
evalcond[1]=((((-1.0)*r02*x3234))+sj0+((r01*x3236))+(((-1.0)*x3231*x3235)));
evalcond[2]=((((-1.0)*x3230*x3235))+((r11*x3236))+(((-1.0)*r12*x3234))+(((-1.0)*x3232)));
evalcond[3]=((((-1.0)*x3229*x3234))+((cj2*sj1))+((cj1*sj2))+((r22*x3226))+((r21*x3237)));
evalcond[4]=(((cj0*x3228))+((r02*x3226))+((r01*x3237))+(((-1.0)*x3231*x3234))+(((-1.0)*x3232*x3233)));
evalcond[5]=(((r12*x3226))+(((-1.0)*x3230*x3234))+((r11*x3237))+((sj0*x3228))+(((-1.0)*sj0*x3233)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3238=IKPowWithIntegerCheck(IKsign((((gconst100*r10))+((gconst101*r11)))),-1);
if(!x3238.valid){
continue;
}
CheckValue<IkReal> x3239 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*gconst101*r20*sj0))+((gconst100*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3239.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3238.value)))+(x3239.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3240=IKsin(j4);
IkReal x3241=IKcos(j4);
IkReal x3242=(cj1*cj2);
IkReal x3243=(gconst101*r20);
IkReal x3244=(gconst101*r10);
IkReal x3245=(gconst101*r00);
IkReal x3246=((1.0)*cj0);
IkReal x3247=(sj1*sj2);
IkReal x3248=((1.0)*x3241);
IkReal x3249=((1.0)*x3240);
IkReal x3250=(gconst100*x3240);
IkReal x3251=(gconst100*x3241);
evalcond[0]=((((-1.0)*x3243*x3249))+((r21*x3250))+(((-1.0)*r22*x3248)));
evalcond[1]=(sj0+((r01*x3250))+(((-1.0)*x3245*x3249))+(((-1.0)*r02*x3248)));
evalcond[2]=(((r11*x3250))+(((-1.0)*r12*x3248))+(((-1.0)*x3244*x3249))+(((-1.0)*x3246)));
evalcond[3]=(((r22*x3240))+(((-1.0)*x3243*x3248))+((cj2*sj1))+((cj1*sj2))+((r21*x3251)));
evalcond[4]=(((r01*x3251))+(((-1.0)*x3245*x3248))+((r02*x3240))+(((-1.0)*x3246*x3247))+((cj0*x3242)));
evalcond[5]=(((r11*x3251))+(((-1.0)*x3244*x3248))+(((-1.0)*sj0*x3247))+((r12*x3240))+((sj0*x3242)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3253 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x3253)==0){
continue;
}
IkReal x3252=pow(x3253,-0.5);
CheckValue<IkReal> x3254 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x3254.valid){
continue;
}
IkReal gconst102=((-1.0)*(x3254.value));
IkReal gconst103=((-1.0)*r01*x3252);
IkReal gconst104=(r00*x3252);
CheckValue<IkReal> x3255 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x3255.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x3255.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x3258 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x3258.valid){
continue;
}
IkReal x3256=((-1.0)*(x3258.value));
IkReal x3257=x3252;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst103;
cj5=gconst104;
j5=x3256;
IkReal gconst102=x3256;
IkReal gconst103=((-1.0)*r01*x3257);
IkReal gconst104=(r00*x3257);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3259=((1.0)*gconst104);
CheckValue<IkReal> x3260 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*cj0*r00*x3259))+(((-1.0)*r10*sj0*x3259))+((cj0*gconst103*r01))+((gconst103*r11*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3260.valid){
continue;
}
CheckValue<IkReal> x3261=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst103*r20))+(((-1.0)*r21*x3259)))),-1);
if(!x3261.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3260.value)+(((1.5707963267949)*(x3261.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3262=IKsin(j4);
IkReal x3263=IKcos(j4);
IkReal x3264=(gconst103*r11);
IkReal x3265=(cj1*cj2);
IkReal x3266=((1.0)*cj0);
IkReal x3267=(sj1*sj2);
IkReal x3268=((1.0)*x3263);
IkReal x3269=(gconst103*x3263);
IkReal x3270=(gconst103*x3262);
IkReal x3271=((1.0)*gconst104*x3262);
evalcond[0]=(((r21*x3270))+(((-1.0)*r20*x3271))+(((-1.0)*r22*x3268)));
evalcond[1]=(sj0+((r01*x3270))+(((-1.0)*r00*x3271))+(((-1.0)*r02*x3268)));
evalcond[2]=(((x3262*x3264))+(((-1.0)*r12*x3268))+(((-1.0)*x3266))+(((-1.0)*r10*x3271)));
evalcond[3]=(((cj2*sj1))+((r21*x3269))+((cj1*sj2))+(((-1.0)*gconst104*r20*x3268))+((r22*x3262)));
evalcond[4]=(((r01*x3269))+((r02*x3262))+(((-1.0)*x3266*x3267))+(((-1.0)*gconst104*r00*x3268))+((cj0*x3265)));
evalcond[5]=(((sj0*x3265))+((x3263*x3264))+(((-1.0)*gconst104*r10*x3268))+(((-1.0)*sj0*x3267))+((r12*x3262)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3272 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst103*r21*sj0))+(((-1.0)*gconst104*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3272.valid){
continue;
}
CheckValue<IkReal> x3273=IKPowWithIntegerCheck(IKsign((((gconst104*r11))+((gconst103*r10)))),-1);
if(!x3273.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3272.value)+(((1.5707963267949)*(x3273.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3274=IKsin(j4);
IkReal x3275=IKcos(j4);
IkReal x3276=(gconst103*r11);
IkReal x3277=(cj1*cj2);
IkReal x3278=((1.0)*cj0);
IkReal x3279=(sj1*sj2);
IkReal x3280=((1.0)*x3275);
IkReal x3281=(gconst103*x3275);
IkReal x3282=(gconst103*x3274);
IkReal x3283=((1.0)*gconst104*x3274);
evalcond[0]=((((-1.0)*r20*x3283))+(((-1.0)*r22*x3280))+((r21*x3282)));
evalcond[1]=(sj0+(((-1.0)*r02*x3280))+(((-1.0)*r00*x3283))+((r01*x3282)));
evalcond[2]=((((-1.0)*r10*x3283))+(((-1.0)*r12*x3280))+((x3274*x3276))+(((-1.0)*x3278)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r21*x3281))+((r22*x3274))+(((-1.0)*gconst104*r20*x3280)));
evalcond[4]=(((cj0*x3277))+(((-1.0)*gconst104*r00*x3280))+(((-1.0)*x3278*x3279))+((r02*x3274))+((r01*x3281)));
evalcond[5]=(((sj0*x3277))+((x3275*x3276))+(((-1.0)*sj0*x3279))+((r12*x3274))+(((-1.0)*gconst104*r10*x3280)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3285 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x3285)==0){
continue;
}
IkReal x3284=pow(x3285,-0.5);
CheckValue<IkReal> x3286 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x3286.valid){
continue;
}
IkReal gconst105=((3.14159265358979)+(((-1.0)*(x3286.value))));
IkReal gconst106=((1.0)*r01*x3284);
IkReal gconst107=((-1.0)*r00*x3284);
CheckValue<IkReal> x3287 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x3287.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x3287.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x3290 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x3290.valid){
continue;
}
IkReal x3288=((1.0)*(x3290.value));
IkReal x3289=x3284;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x3288)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x3288)));
IkReal gconst106=((1.0)*r01*x3289);
IkReal gconst107=((-1.0)*r00*x3289);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[5];
CheckValue<IkReal> x3293 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x3293.valid){
continue;
}
IkReal x3291=((1.0)*(x3293.value));
IkReal x3292=x3284;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x3291)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x3291)));
IkReal gconst106=((1.0)*r01*x3292);
IkReal gconst107=((-1.0)*r00*x3292);
j4eval[0]=0;
j4eval[1]=cj0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
j4eval[4]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x3296 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x3296.valid){
continue;
}
IkReal x3294=((1.0)*(x3296.value));
IkReal x3295=x3284;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x3294)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x3294)));
IkReal gconst106=((1.0)*r01*x3295);
IkReal gconst107=((-1.0)*r00*x3295);
IkReal x3297=r02*r02;
IkReal x3298=(r12*sj0);
IkReal x3299=x3284;
IkReal x3300=(cj0*x3299);
j4eval[0]=((IKabs((x3298+((cj0*r02)))))+(IKabs((((r02*x3298*x3299))+(((-1.0)*x3300))+((x3297*x3300))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3301=((1.0)*gconst107);
CheckValue<IkReal> x3302 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((cj0*gconst106*r01))+(((-1.0)*r10*sj0*x3301))+(((-1.0)*cj0*r00*x3301))+((gconst106*r11*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3302.valid){
continue;
}
CheckValue<IkReal> x3303=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x3301))+(((-1.0)*gconst106*r20)))),-1);
if(!x3303.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3302.value)+(((1.5707963267949)*(x3303.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3304=IKsin(j4);
IkReal x3305=IKcos(j4);
IkReal x3306=(cj1*cj2);
IkReal x3307=(gconst107*r10);
IkReal x3308=(gconst107*r00);
IkReal x3309=(gconst107*r20);
IkReal x3310=((1.0)*cj0);
IkReal x3311=(sj1*sj2);
IkReal x3312=((1.0)*x3305);
IkReal x3313=(gconst106*x3305);
IkReal x3314=(gconst106*x3304);
IkReal x3315=((1.0)*x3304);
evalcond[0]=(((r21*x3314))+(((-1.0)*r22*x3312))+(((-1.0)*x3309*x3315)));
evalcond[1]=(sj0+(((-1.0)*r02*x3312))+(((-1.0)*x3308*x3315))+((r01*x3314)));
evalcond[2]=((((-1.0)*x3310))+((r11*x3314))+(((-1.0)*r12*x3312))+(((-1.0)*x3307*x3315)));
evalcond[3]=(((cj2*sj1))+((r21*x3313))+((cj1*sj2))+((r22*x3304))+(((-1.0)*x3309*x3312)));
evalcond[4]=(((r02*x3304))+((cj0*x3306))+(((-1.0)*x3308*x3312))+(((-1.0)*x3310*x3311))+((r01*x3313)));
evalcond[5]=(((r11*x3313))+((r12*x3304))+(((-1.0)*x3307*x3312))+((sj0*x3306))+(((-1.0)*sj0*x3311)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3316 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst106*r21))+(((-1.0)*cj0*gconst107*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3316.valid){
continue;
}
CheckValue<IkReal> x3317=IKPowWithIntegerCheck(IKsign((((gconst107*r01))+((gconst106*r00)))),-1);
if(!x3317.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3316.value)+(((1.5707963267949)*(x3317.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3318=IKsin(j4);
IkReal x3319=IKcos(j4);
IkReal x3320=(cj1*cj2);
IkReal x3321=(gconst107*r10);
IkReal x3322=(gconst107*r00);
IkReal x3323=(gconst107*r20);
IkReal x3324=((1.0)*cj0);
IkReal x3325=(sj1*sj2);
IkReal x3326=((1.0)*x3319);
IkReal x3327=(gconst106*x3319);
IkReal x3328=(gconst106*x3318);
IkReal x3329=((1.0)*x3318);
evalcond[0]=(((r21*x3328))+(((-1.0)*x3323*x3329))+(((-1.0)*r22*x3326)));
evalcond[1]=(sj0+(((-1.0)*r02*x3326))+((r01*x3328))+(((-1.0)*x3322*x3329)));
evalcond[2]=((((-1.0)*x3324))+((r11*x3328))+(((-1.0)*x3321*x3329))+(((-1.0)*r12*x3326)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r22*x3318))+((r21*x3327))+(((-1.0)*x3323*x3326)));
evalcond[4]=((((-1.0)*x3324*x3325))+((r01*x3327))+((r02*x3318))+(((-1.0)*x3322*x3326))+((cj0*x3320)));
evalcond[5]=(((sj0*x3320))+((r11*x3327))+(((-1.0)*x3321*x3326))+(((-1.0)*sj0*x3325))+((r12*x3318)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3330=IKPowWithIntegerCheck(IKsign((((gconst107*r11))+((gconst106*r10)))),-1);
if(!x3330.valid){
continue;
}
CheckValue<IkReal> x3331 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst106*r21*sj0))+(((-1.0)*gconst107*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3331.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3330.value)))+(x3331.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3332=IKsin(j4);
IkReal x3333=IKcos(j4);
IkReal x3334=(cj1*cj2);
IkReal x3335=(gconst107*r10);
IkReal x3336=(gconst107*r00);
IkReal x3337=(gconst107*r20);
IkReal x3338=((1.0)*cj0);
IkReal x3339=(sj1*sj2);
IkReal x3340=((1.0)*x3333);
IkReal x3341=(gconst106*x3333);
IkReal x3342=(gconst106*x3332);
IkReal x3343=((1.0)*x3332);
evalcond[0]=((((-1.0)*x3337*x3343))+((r21*x3342))+(((-1.0)*r22*x3340)));
evalcond[1]=(sj0+(((-1.0)*r02*x3340))+((r01*x3342))+(((-1.0)*x3336*x3343)));
evalcond[2]=((((-1.0)*x3338))+(((-1.0)*r12*x3340))+((r11*x3342))+(((-1.0)*x3335*x3343)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x3337*x3340))+((cj1*sj2))+((r21*x3341))+((r22*x3332)));
evalcond[4]=(((cj0*x3334))+(((-1.0)*x3338*x3339))+((r02*x3332))+((r01*x3341))+(((-1.0)*x3336*x3340)));
evalcond[5]=(((r12*x3332))+((sj0*x3334))+(((-1.0)*sj0*x3339))+((r11*x3341))+(((-1.0)*x3335*x3340)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x3344=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x3344;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x3344);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x3345=((1.0)*cj5);
IkReal x3346=((((-1.0)*r21*x3345))+(((-1.0)*r20*sj5)));
j4eval[0]=x3346;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x3345))+((r11*sj5))))));
j4eval[2]=IKsign(x3346);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x3347=(r01*sj5);
IkReal x3348=(cj1*sj2);
IkReal x3349=(cj2*sj1);
IkReal x3350=((1.0)*r02);
IkReal x3351=((1.0)*cj5*r00);
IkReal x3352=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x3352;
j4eval[1]=((IKabs(((((-1.0)*x3348*x3350))+(((-1.0)*x3349*x3350)))))+(IKabs(((((-1.0)*x3348*x3351))+((x3347*x3349))+((x3347*x3348))+(((-1.0)*x3349*x3351))))));
j4eval[2]=IKsign(x3352);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3353=(r01*sj5);
IkReal x3354=(cj1*sj2);
IkReal x3355=(cj2*sj1);
IkReal x3356=((1.0)*r02);
IkReal x3357=((1.0)*cj5*r00);
CheckValue<IkReal> x3358 = IKatan2WithCheck(IkReal(((((-1.0)*x3355*x3357))+(((-1.0)*x3354*x3357))+((x3353*x3355))+((x3353*x3354)))),IkReal(((((-1.0)*x3355*x3356))+(((-1.0)*x3354*x3356)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3358.valid){
continue;
}
CheckValue<IkReal> x3359=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x3359.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3358.value)+(((1.5707963267949)*(x3359.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3360=IKcos(j4);
IkReal x3361=IKsin(j4);
IkReal x3362=(cj5*r00);
IkReal x3363=(cj5*r10);
IkReal x3364=(r21*sj5);
IkReal x3365=(cj5*r20);
IkReal x3366=((1.0)*x3360);
IkReal x3367=((1.0)*x3361);
IkReal x3368=(sj5*x3361);
IkReal x3369=(sj5*x3360);
evalcond[0]=(((r02*x3361))+(((-1.0)*x3362*x3366))+((r01*x3369)));
evalcond[1]=((((-1.0)*r22*x3366))+((x3361*x3364))+(((-1.0)*x3365*x3367)));
evalcond[2]=((((-1.0)*r12*x3366))+(((-1.0)*x3363*x3367))+((r11*x3368)));
evalcond[3]=((1.0)+(((-1.0)*x3362*x3367))+((r01*x3368))+(((-1.0)*r02*x3366)));
evalcond[4]=(((cj2*sj1))+((r22*x3361))+((cj1*sj2))+((x3360*x3364))+(((-1.0)*x3365*x3366)));
evalcond[5]=((((-1.0)*sj1*sj2))+((cj1*cj2))+((r12*x3361))+(((-1.0)*x3363*x3366))+((r11*x3369)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3370=((1.0)*cj5);
CheckValue<IkReal> x3371=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x3370))+(((-1.0)*r20*sj5)))),-1);
if(!x3371.valid){
continue;
}
CheckValue<IkReal> x3372 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x3370))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3372.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3371.value)))+(x3372.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3373=IKcos(j4);
IkReal x3374=IKsin(j4);
IkReal x3375=(cj5*r00);
IkReal x3376=(cj5*r10);
IkReal x3377=(r21*sj5);
IkReal x3378=(cj5*r20);
IkReal x3379=((1.0)*x3373);
IkReal x3380=((1.0)*x3374);
IkReal x3381=(sj5*x3374);
IkReal x3382=(sj5*x3373);
evalcond[0]=(((r01*x3382))+((r02*x3374))+(((-1.0)*x3375*x3379)));
evalcond[1]=((((-1.0)*r22*x3379))+(((-1.0)*x3378*x3380))+((x3374*x3377)));
evalcond[2]=((((-1.0)*x3376*x3380))+(((-1.0)*r12*x3379))+((r11*x3381)));
evalcond[3]=((1.0)+((r01*x3381))+(((-1.0)*x3375*x3380))+(((-1.0)*r02*x3379)));
evalcond[4]=(((cj2*sj1))+((r22*x3374))+((cj1*sj2))+((x3373*x3377))+(((-1.0)*x3378*x3379)));
evalcond[5]=(((r12*x3374))+(((-1.0)*sj1*sj2))+(((-1.0)*x3376*x3379))+((cj1*cj2))+((r11*x3382)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3383 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3383.valid){
continue;
}
CheckValue<IkReal> x3384=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x3384.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3383.value)+(((1.5707963267949)*(x3384.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3385=IKcos(j4);
IkReal x3386=IKsin(j4);
IkReal x3387=(cj5*r00);
IkReal x3388=(cj5*r10);
IkReal x3389=(r21*sj5);
IkReal x3390=(cj5*r20);
IkReal x3391=((1.0)*x3385);
IkReal x3392=((1.0)*x3386);
IkReal x3393=(sj5*x3386);
IkReal x3394=(sj5*x3385);
evalcond[0]=((((-1.0)*x3387*x3391))+((r01*x3394))+((r02*x3386)));
evalcond[1]=((((-1.0)*r22*x3391))+(((-1.0)*x3390*x3392))+((x3386*x3389)));
evalcond[2]=(((r11*x3393))+(((-1.0)*r12*x3391))+(((-1.0)*x3388*x3392)));
evalcond[3]=((1.0)+(((-1.0)*x3387*x3392))+((r01*x3393))+(((-1.0)*r02*x3391)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r22*x3386))+((x3385*x3389))+(((-1.0)*x3390*x3391)));
evalcond[5]=((((-1.0)*sj1*sj2))+((r11*x3394))+((r12*x3386))+(((-1.0)*x3388*x3391))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x3395=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x3395;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x3395);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x3396=((1.0)*cj5);
IkReal x3397=((((-1.0)*r10*sj5))+(((-1.0)*r11*x3396)));
j4eval[0]=x3397;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x3396)))))+(IKabs(r22)));
j4eval[2]=IKsign(x3397);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x3398=cj5*cj5;
IkReal x3399=r01*r01;
IkReal x3400=(cj5*r00);
IkReal x3401=(r01*sj5);
IkReal x3402=((((-1.0)*x3398*x3399))+x3399+((x3398*(r00*r00)))+(r02*r02)+(((-2.0)*x3400*x3401)));
j4eval[0]=x3402;
j4eval[1]=IKsign(x3402);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x3400))+x3401))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3403=cj5*cj5;
IkReal x3404=r01*r01;
IkReal x3405=(r01*sj5);
IkReal x3406=(cj5*r00);
CheckValue<IkReal> x3407=IKPowWithIntegerCheck(IKsign(((((-2.0)*x3405*x3406))+((x3403*(r00*r00)))+x3404+(((-1.0)*x3403*x3404))+(r02*r02))),-1);
if(!x3407.valid){
continue;
}
CheckValue<IkReal> x3408 = IKatan2WithCheck(IkReal(((((-1.0)*x3406))+x3405)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x3408.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3407.value)))+(x3408.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3409=IKcos(j4);
IkReal x3410=IKsin(j4);
IkReal x3411=(cj5*r00);
IkReal x3412=(cj5*r10);
IkReal x3413=(r21*sj5);
IkReal x3414=(cj5*r20);
IkReal x3415=((1.0)*x3409);
IkReal x3416=((1.0)*x3410);
IkReal x3417=(sj5*x3410);
IkReal x3418=(sj5*x3409);
evalcond[0]=((((-1.0)*x3411*x3415))+((r02*x3410))+((r01*x3418)));
evalcond[1]=((((-1.0)*r22*x3415))+(((-1.0)*x3414*x3416))+((x3410*x3413)));
evalcond[2]=((((-1.0)*x3412*x3416))+((r11*x3417))+(((-1.0)*r12*x3415)));
evalcond[3]=((-1.0)+(((-1.0)*x3411*x3416))+(((-1.0)*r02*x3415))+((r01*x3417)));
evalcond[4]=(((x3409*x3413))+((cj2*sj1))+((r22*x3410))+((cj1*sj2))+(((-1.0)*x3414*x3415)));
evalcond[5]=((((-1.0)*x3412*x3415))+((r12*x3410))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r11*x3418)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3419=((1.0)*cj5);
CheckValue<IkReal> x3420 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x3419)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3420.valid){
continue;
}
CheckValue<IkReal> x3421=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x3419)))),-1);
if(!x3421.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3420.value)+(((1.5707963267949)*(x3421.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3422=IKcos(j4);
IkReal x3423=IKsin(j4);
IkReal x3424=(cj5*r00);
IkReal x3425=(cj5*r10);
IkReal x3426=(r21*sj5);
IkReal x3427=(cj5*r20);
IkReal x3428=((1.0)*x3422);
IkReal x3429=((1.0)*x3423);
IkReal x3430=(sj5*x3423);
IkReal x3431=(sj5*x3422);
evalcond[0]=(((r01*x3431))+(((-1.0)*x3424*x3428))+((r02*x3423)));
evalcond[1]=((((-1.0)*x3427*x3429))+(((-1.0)*r22*x3428))+((x3423*x3426)));
evalcond[2]=((((-1.0)*r12*x3428))+(((-1.0)*x3425*x3429))+((r11*x3430)));
evalcond[3]=((-1.0)+((r01*x3430))+(((-1.0)*x3424*x3429))+(((-1.0)*r02*x3428)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x3427*x3428))+((cj1*sj2))+((x3422*x3426))+((r22*x3423)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x3425*x3428))+((r12*x3423))+((r11*x3431)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3432=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x3432.valid){
continue;
}
CheckValue<IkReal> x3433 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3433.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3432.value)))+(x3433.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3434=IKcos(j4);
IkReal x3435=IKsin(j4);
IkReal x3436=(cj5*r00);
IkReal x3437=(cj5*r10);
IkReal x3438=(r21*sj5);
IkReal x3439=(cj5*r20);
IkReal x3440=((1.0)*x3434);
IkReal x3441=((1.0)*x3435);
IkReal x3442=(sj5*x3435);
IkReal x3443=(sj5*x3434);
evalcond[0]=((((-1.0)*x3436*x3440))+((r01*x3443))+((r02*x3435)));
evalcond[1]=(((x3435*x3438))+(((-1.0)*x3439*x3441))+(((-1.0)*r22*x3440)));
evalcond[2]=(((r11*x3442))+(((-1.0)*x3437*x3441))+(((-1.0)*r12*x3440)));
evalcond[3]=((-1.0)+(((-1.0)*x3436*x3441))+(((-1.0)*r02*x3440))+((r01*x3442)));
evalcond[4]=(((cj2*sj1))+((x3434*x3438))+(((-1.0)*x3439*x3440))+((cj1*sj2))+((r22*x3435)));
evalcond[5]=(((r11*x3443))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x3437*x3440))+((r12*x3435)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3445 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x3445)==0){
continue;
}
IkReal x3444=pow(x3445,-0.5);
CheckValue<IkReal> x3446 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x3446.valid){
continue;
}
IkReal gconst108=((-1.0)*(x3446.value));
IkReal gconst109=((-1.0)*r11*x3444);
IkReal gconst110=(r10*x3444);
CheckValue<IkReal> x3447 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x3447.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x3447.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x3450 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x3450.valid){
continue;
}
IkReal x3448=((-1.0)*(x3450.value));
IkReal x3449=x3444;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst109;
cj5=gconst110;
j5=x3448;
IkReal gconst108=x3448;
IkReal gconst109=((-1.0)*r11*x3449);
IkReal gconst110=(r10*x3449);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3451=((1.0)*gconst110);
CheckValue<IkReal> x3452 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*cj0*r00*x3451))+((cj0*gconst109*r01))+(((-1.0)*r10*sj0*x3451))+((gconst109*r11*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3452.valid){
continue;
}
CheckValue<IkReal> x3453=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst109*r20))+(((-1.0)*r21*x3451)))),-1);
if(!x3453.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3452.value)+(((1.5707963267949)*(x3453.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3454=IKsin(j4);
IkReal x3455=IKcos(j4);
IkReal x3456=(cj1*cj2);
IkReal x3457=(gconst109*r21);
IkReal x3458=((1.0)*cj0);
IkReal x3459=(sj1*sj2);
IkReal x3460=((1.0)*x3455);
IkReal x3461=(gconst109*x3454);
IkReal x3462=(gconst109*x3455);
IkReal x3463=((1.0)*gconst110*x3454);
evalcond[0]=((((-1.0)*r20*x3463))+(((-1.0)*r22*x3460))+((x3454*x3457)));
evalcond[1]=((((-1.0)*r00*x3463))+sj0+(((-1.0)*r02*x3460))+((r01*x3461)));
evalcond[2]=((((-1.0)*x3458))+(((-1.0)*r10*x3463))+(((-1.0)*r12*x3460))+((r11*x3461)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*gconst110*r20*x3460))+((cj1*sj2))+((r22*x3454))+((x3455*x3457)));
evalcond[4]=((((-1.0)*gconst110*r00*x3460))+((r01*x3462))+(((-1.0)*x3458*x3459))+((r02*x3454))+((cj0*x3456)));
evalcond[5]=(((sj0*x3456))+(((-1.0)*gconst110*r10*x3460))+((r12*x3454))+(((-1.0)*sj0*x3459))+((r11*x3462)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3464=IKPowWithIntegerCheck(IKsign((((gconst109*r00))+((gconst110*r01)))),-1);
if(!x3464.valid){
continue;
}
CheckValue<IkReal> x3465 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst109*r21))+(((-1.0)*cj0*gconst110*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3465.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3464.value)))+(x3465.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3466=IKsin(j4);
IkReal x3467=IKcos(j4);
IkReal x3468=(cj1*cj2);
IkReal x3469=(gconst109*r21);
IkReal x3470=((1.0)*cj0);
IkReal x3471=(sj1*sj2);
IkReal x3472=((1.0)*x3467);
IkReal x3473=(gconst109*x3466);
IkReal x3474=(gconst109*x3467);
IkReal x3475=((1.0)*gconst110*x3466);
evalcond[0]=((((-1.0)*r20*x3475))+((x3466*x3469))+(((-1.0)*r22*x3472)));
evalcond[1]=((((-1.0)*r00*x3475))+sj0+(((-1.0)*r02*x3472))+((r01*x3473)));
evalcond[2]=((((-1.0)*r10*x3475))+(((-1.0)*r12*x3472))+((r11*x3473))+(((-1.0)*x3470)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*gconst110*r20*x3472))+((cj1*sj2))+((x3467*x3469))+((r22*x3466)));
evalcond[4]=((((-1.0)*gconst110*r00*x3472))+((cj0*x3468))+((r01*x3474))+(((-1.0)*x3470*x3471))+((r02*x3466)));
evalcond[5]=((((-1.0)*gconst110*r10*x3472))+((r12*x3466))+((sj0*x3468))+((r11*x3474))+(((-1.0)*sj0*x3471)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3477 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x3477)==0){
continue;
}
IkReal x3476=pow(x3477,-0.5);
CheckValue<IkReal> x3478 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x3478.valid){
continue;
}
IkReal gconst111=((3.14159265358979)+(((-1.0)*(x3478.value))));
IkReal gconst112=((1.0)*r11*x3476);
IkReal gconst113=((-1.0)*r10*x3476);
CheckValue<IkReal> x3479 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x3479.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x3479.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x3482 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x3482.valid){
continue;
}
IkReal x3480=((1.0)*(x3482.value));
IkReal x3481=x3476;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x3480)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x3480)));
IkReal gconst112=((1.0)*r11*x3481);
IkReal gconst113=((-1.0)*r10*x3481);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x3485 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x3485.valid){
continue;
}
IkReal x3483=((1.0)*(x3485.value));
IkReal x3484=x3476;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x3483)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x3483)));
IkReal gconst112=((1.0)*r11*x3484);
IkReal gconst113=((-1.0)*r10*x3484);
IkReal x3486=r12*r12;
IkReal x3487=(cj0*r02);
IkReal x3488=x3476;
IkReal x3489=(sj0*x3488);
j4eval[0]=((IKabs((x3487+((r12*sj0)))))+(IKabs((((r12*x3487*x3488))+((x3486*x3489))+(((-1.0)*x3489))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x3492 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x3492.valid){
continue;
}
IkReal x3490=((1.0)*(x3492.value));
IkReal x3491=x3476;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x3490)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x3490)));
IkReal gconst112=((1.0)*r11*x3491);
IkReal gconst113=((-1.0)*r10*x3491);
IkReal x3493=(cj1*sj2);
IkReal x3494=(cj2*sj1);
IkReal x3495=((1.0)+(((-1.0)*(r12*r12))));
CheckValue<IkReal> x3501=IKPowWithIntegerCheck(x3495,-1);
if(!x3501.valid){
continue;
}
IkReal x3496=x3501.value;
IkReal x3497=((1.0)*x3496);
IkReal x3498=x3476;
IkReal x3499=(r12*r22*x3498);
IkReal x3500=((((-2.0)*r10*r11*r20*r21*x3496))+(((-1.0)*(r22*r22)))+(((-1.0)*x3497*(r11*r11)*(r21*r21)))+(((-1.0)*x3497*(r10*r10)*(r20*r20))));
j4eval[0]=x3500;
j4eval[1]=IKsign(x3500);
j4eval[2]=((IKabs((((x3494*x3499))+((x3493*x3499)))))+(IKabs((((r22*x3494))+((r22*x3493))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3502=(gconst113*r20);
IkReal x3503=(cj1*sj2);
IkReal x3504=(cj2*sj1);
IkReal x3505=(gconst112*r21);
CheckValue<IkReal> x3506=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x3505*x3505)))+(((2.0)*x3502*x3505))+(((-1.0)*(r22*r22)))+(((-1.0)*(x3502*x3502))))),-1);
if(!x3506.valid){
continue;
}
CheckValue<IkReal> x3507 = IKatan2WithCheck(IkReal((((r22*x3503))+((r22*x3504)))),IkReal(((((-1.0)*x3502*x3503))+(((-1.0)*x3502*x3504))+((x3503*x3505))+((x3504*x3505)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3507.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3506.value)))+(x3507.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3508=IKsin(j4);
IkReal x3509=IKcos(j4);
IkReal x3510=(cj1*cj2);
IkReal x3511=(gconst113*r20);
IkReal x3512=(gconst112*r21);
IkReal x3513=(gconst113*r00);
IkReal x3514=((1.0)*cj0);
IkReal x3515=(gconst113*r10);
IkReal x3516=(sj1*sj2);
IkReal x3517=((1.0)*x3509);
IkReal x3518=((1.0)*x3508);
IkReal x3519=(gconst112*x3509);
IkReal x3520=(gconst112*x3508);
evalcond[0]=((((-1.0)*x3511*x3518))+((x3508*x3512))+(((-1.0)*r22*x3517)));
evalcond[1]=((((-1.0)*r02*x3517))+sj0+((r01*x3520))+(((-1.0)*x3513*x3518)));
evalcond[2]=((((-1.0)*x3515*x3518))+(((-1.0)*x3514))+((r11*x3520))+(((-1.0)*r12*x3517)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x3511*x3517))+((cj1*sj2))+((x3509*x3512))+((r22*x3508)));
evalcond[4]=((((-1.0)*x3514*x3516))+(((-1.0)*x3513*x3517))+((r01*x3519))+((cj0*x3510))+((r02*x3508)));
evalcond[5]=((((-1.0)*x3515*x3517))+((r12*x3508))+((r11*x3519))+((sj0*x3510))+(((-1.0)*sj0*x3516)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3521=((1.0)*gconst113);
CheckValue<IkReal> x3522 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((cj0*gconst112*r01))+(((-1.0)*cj0*r00*x3521))+(((-1.0)*r10*sj0*x3521))+((gconst112*r11*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3522.valid){
continue;
}
CheckValue<IkReal> x3523=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst112*r20))+(((-1.0)*r21*x3521)))),-1);
if(!x3523.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3522.value)+(((1.5707963267949)*(x3523.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3524=IKsin(j4);
IkReal x3525=IKcos(j4);
IkReal x3526=(cj1*cj2);
IkReal x3527=(gconst113*r20);
IkReal x3528=(gconst112*r21);
IkReal x3529=(gconst113*r00);
IkReal x3530=((1.0)*cj0);
IkReal x3531=(gconst113*r10);
IkReal x3532=(sj1*sj2);
IkReal x3533=((1.0)*x3525);
IkReal x3534=((1.0)*x3524);
IkReal x3535=(gconst112*x3525);
IkReal x3536=(gconst112*x3524);
evalcond[0]=(((x3524*x3528))+(((-1.0)*x3527*x3534))+(((-1.0)*r22*x3533)));
evalcond[1]=(sj0+(((-1.0)*x3529*x3534))+(((-1.0)*r02*x3533))+((r01*x3536)));
evalcond[2]=(((r11*x3536))+(((-1.0)*r12*x3533))+(((-1.0)*x3531*x3534))+(((-1.0)*x3530)));
evalcond[3]=(((x3525*x3528))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*x3527*x3533))+((r22*x3524)));
evalcond[4]=(((cj0*x3526))+((r02*x3524))+(((-1.0)*x3529*x3533))+((r01*x3535))+(((-1.0)*x3530*x3532)));
evalcond[5]=(((r11*x3535))+(((-1.0)*x3531*x3533))+((r12*x3524))+((sj0*x3526))+(((-1.0)*sj0*x3532)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3537=IKPowWithIntegerCheck(IKsign((((gconst112*r00))+((gconst113*r01)))),-1);
if(!x3537.valid){
continue;
}
CheckValue<IkReal> x3538 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*gconst113*r20))+((cj0*gconst112*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3538.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3537.value)))+(x3538.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3539=IKsin(j4);
IkReal x3540=IKcos(j4);
IkReal x3541=(cj1*cj2);
IkReal x3542=(gconst113*r20);
IkReal x3543=(gconst112*r21);
IkReal x3544=(gconst113*r00);
IkReal x3545=((1.0)*cj0);
IkReal x3546=(gconst113*r10);
IkReal x3547=(sj1*sj2);
IkReal x3548=((1.0)*x3540);
IkReal x3549=((1.0)*x3539);
IkReal x3550=(gconst112*x3540);
IkReal x3551=(gconst112*x3539);
evalcond[0]=(((x3539*x3543))+(((-1.0)*x3542*x3549))+(((-1.0)*r22*x3548)));
evalcond[1]=((((-1.0)*r02*x3548))+sj0+((r01*x3551))+(((-1.0)*x3544*x3549)));
evalcond[2]=((((-1.0)*r12*x3548))+(((-1.0)*x3546*x3549))+((r11*x3551))+(((-1.0)*x3545)));
evalcond[3]=(((cj2*sj1))+((r22*x3539))+((cj1*sj2))+(((-1.0)*x3542*x3548))+((x3540*x3543)));
evalcond[4]=((((-1.0)*x3545*x3547))+((r02*x3539))+((r01*x3550))+((cj0*x3541))+(((-1.0)*x3544*x3548)));
evalcond[5]=(((r12*x3539))+((sj0*x3541))+(((-1.0)*x3546*x3548))+((r11*x3550))+(((-1.0)*sj0*x3547)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x3552=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x3552;
j4eval[1]=IKsign(x3552);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x3553=((1.0)*cj5);
IkReal x3554=((((-1.0)*r21*x3553))+(((-1.0)*r20*sj5)));
j4eval[0]=x3554;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x3553))))));
j4eval[2]=IKsign(x3554);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x3555=cj5*cj5;
IkReal x3556=r11*r11;
IkReal x3557=(r11*sj5);
IkReal x3558=(cj5*r10);
IkReal x3559=((r12*r12)+((x3555*(r10*r10)))+x3556+(((-1.0)*x3555*x3556))+(((-2.0)*x3557*x3558)));
j4eval[0]=x3559;
j4eval[1]=IKsign(x3559);
j4eval[2]=((IKabs(r12))+(IKabs((x3557+(((-1.0)*x3558))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3560=cj5*cj5;
IkReal x3561=r11*r11;
IkReal x3562=(cj5*r10);
IkReal x3563=(r11*sj5);
CheckValue<IkReal> x3564 = IKatan2WithCheck(IkReal((x3563+(((-1.0)*x3562)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x3564.valid){
continue;
}
CheckValue<IkReal> x3565=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-1.0)*x3560*x3561))+((x3560*(r10*r10)))+x3561+(((-2.0)*x3562*x3563)))),-1);
if(!x3565.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3564.value)+(((1.5707963267949)*(x3565.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3566=IKcos(j4);
IkReal x3567=IKsin(j4);
IkReal x3568=(cj5*r00);
IkReal x3569=(cj5*r10);
IkReal x3570=(r21*sj5);
IkReal x3571=(cj5*r20);
IkReal x3572=((1.0)*x3566);
IkReal x3573=((1.0)*x3567);
IkReal x3574=(sj5*x3567);
IkReal x3575=(sj5*x3566);
evalcond[0]=((((-1.0)*x3569*x3572))+((r11*x3575))+((r12*x3567)));
evalcond[1]=(((x3567*x3570))+(((-1.0)*x3571*x3573))+(((-1.0)*r22*x3572)));
evalcond[2]=((((-1.0)*x3568*x3573))+((r01*x3574))+(((-1.0)*r02*x3572)));
evalcond[3]=((-1.0)+(((-1.0)*x3569*x3573))+((r11*x3574))+(((-1.0)*r12*x3572)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x3571*x3572))+((r22*x3567))+((x3566*x3570)));
evalcond[5]=((((-1.0)*x3568*x3572))+((r01*x3575))+(((-1.0)*sj1*sj2))+((cj1*cj2))+((r02*x3567)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3576=((1.0)*cj5);
CheckValue<IkReal> x3577 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x3576)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3577.valid){
continue;
}
CheckValue<IkReal> x3578=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x3576))+(((-1.0)*r20*sj5)))),-1);
if(!x3578.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3577.value)+(((1.5707963267949)*(x3578.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3579=IKcos(j4);
IkReal x3580=IKsin(j4);
IkReal x3581=(cj5*r00);
IkReal x3582=(cj5*r10);
IkReal x3583=(r21*sj5);
IkReal x3584=(cj5*r20);
IkReal x3585=((1.0)*x3579);
IkReal x3586=((1.0)*x3580);
IkReal x3587=(sj5*x3580);
IkReal x3588=(sj5*x3579);
evalcond[0]=(((r12*x3580))+((r11*x3588))+(((-1.0)*x3582*x3585)));
evalcond[1]=((((-1.0)*r22*x3585))+(((-1.0)*x3584*x3586))+((x3580*x3583)));
evalcond[2]=((((-1.0)*r02*x3585))+(((-1.0)*x3581*x3586))+((r01*x3587)));
evalcond[3]=((-1.0)+((r11*x3587))+(((-1.0)*x3582*x3586))+(((-1.0)*r12*x3585)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x3579*x3583))+(((-1.0)*x3584*x3585))+((r22*x3580)));
evalcond[5]=(((r02*x3580))+(((-1.0)*x3581*x3585))+(((-1.0)*sj1*sj2))+((r01*x3588))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3589 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3589.valid){
continue;
}
CheckValue<IkReal> x3590=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x3590.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3589.value)+(((1.5707963267949)*(x3590.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3591=IKcos(j4);
IkReal x3592=IKsin(j4);
IkReal x3593=(cj5*r00);
IkReal x3594=(cj5*r10);
IkReal x3595=(r21*sj5);
IkReal x3596=(cj5*r20);
IkReal x3597=((1.0)*x3591);
IkReal x3598=((1.0)*x3592);
IkReal x3599=(sj5*x3592);
IkReal x3600=(sj5*x3591);
evalcond[0]=((((-1.0)*x3594*x3597))+((r11*x3600))+((r12*x3592)));
evalcond[1]=((((-1.0)*r22*x3597))+((x3592*x3595))+(((-1.0)*x3596*x3598)));
evalcond[2]=((((-1.0)*r02*x3597))+(((-1.0)*x3593*x3598))+((r01*x3599)));
evalcond[3]=((-1.0)+(((-1.0)*x3594*x3598))+((r11*x3599))+(((-1.0)*r12*x3597)));
evalcond[4]=(((cj2*sj1))+((x3591*x3595))+((cj1*sj2))+((r22*x3592))+(((-1.0)*x3596*x3597)));
evalcond[5]=(((r02*x3592))+(((-1.0)*sj1*sj2))+((r01*x3600))+(((-1.0)*x3593*x3597))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x3601=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x3601;
j4eval[1]=IKsign(x3601);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x3602=((1.0)*cj5);
IkReal x3603=((((-1.0)*r01*x3602))+(((-1.0)*r00*sj5)));
j4eval[0]=x3603;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x3602))))));
j4eval[2]=IKsign(x3603);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x3604=cj5*cj5;
IkReal x3605=r11*r11;
IkReal x3606=(cj5*r10);
IkReal x3607=(r11*sj5);
IkReal x3608=(((x3604*x3605))+(((-1.0)*x3605))+(((2.0)*x3606*x3607))+(((-1.0)*(r12*r12)))+(((-1.0)*x3604*(r10*r10))));
j4eval[0]=x3608;
j4eval[1]=IKsign(x3608);
j4eval[2]=((IKabs(((((-1.0)*x3606))+x3607)))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3609=cj5*cj5;
IkReal x3610=r11*r11;
IkReal x3611=(cj5*r10);
IkReal x3612=(r11*sj5);
CheckValue<IkReal> x3613 = IKatan2WithCheck(IkReal(((((-1.0)*x3611))+x3612)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x3613.valid){
continue;
}
CheckValue<IkReal> x3614=IKPowWithIntegerCheck(IKsign(((((-1.0)*x3609*(r10*r10)))+((x3609*x3610))+(((-1.0)*x3610))+(((-1.0)*(r12*r12)))+(((2.0)*x3611*x3612)))),-1);
if(!x3614.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3613.value)+(((1.5707963267949)*(x3614.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3615=IKcos(j4);
IkReal x3616=IKsin(j4);
IkReal x3617=(cj5*r00);
IkReal x3618=(cj5*r10);
IkReal x3619=(r21*sj5);
IkReal x3620=(cj5*r20);
IkReal x3621=((1.0)*x3615);
IkReal x3622=((1.0)*x3616);
IkReal x3623=(sj5*x3616);
IkReal x3624=(sj5*x3615);
evalcond[0]=(((r11*x3624))+(((-1.0)*x3618*x3621))+((r12*x3616)));
evalcond[1]=(((x3616*x3619))+(((-1.0)*r22*x3621))+(((-1.0)*x3620*x3622)));
evalcond[2]=(((r01*x3623))+(((-1.0)*x3617*x3622))+(((-1.0)*r02*x3621)));
evalcond[3]=((1.0)+(((-1.0)*r12*x3621))+((r11*x3623))+(((-1.0)*x3618*x3622)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r22*x3616))+((x3615*x3619))+(((-1.0)*x3620*x3621)));
evalcond[5]=(((r02*x3616))+((r01*x3624))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x3617*x3621)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3625=((1.0)*cj5);
CheckValue<IkReal> x3626 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x3625)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3626.valid){
continue;
}
CheckValue<IkReal> x3627=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x3625)))),-1);
if(!x3627.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3626.value)+(((1.5707963267949)*(x3627.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3628=IKcos(j4);
IkReal x3629=IKsin(j4);
IkReal x3630=(cj5*r00);
IkReal x3631=(cj5*r10);
IkReal x3632=(r21*sj5);
IkReal x3633=(cj5*r20);
IkReal x3634=((1.0)*x3628);
IkReal x3635=((1.0)*x3629);
IkReal x3636=(sj5*x3629);
IkReal x3637=(sj5*x3628);
evalcond[0]=(((r11*x3637))+(((-1.0)*x3631*x3634))+((r12*x3629)));
evalcond[1]=((((-1.0)*x3633*x3635))+(((-1.0)*r22*x3634))+((x3629*x3632)));
evalcond[2]=((((-1.0)*x3630*x3635))+(((-1.0)*r02*x3634))+((r01*x3636)));
evalcond[3]=((1.0)+((r11*x3636))+(((-1.0)*r12*x3634))+(((-1.0)*x3631*x3635)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x3633*x3634))+((x3628*x3632))+((r22*x3629)));
evalcond[5]=((((-1.0)*x3630*x3634))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r02*x3629))+((r01*x3637)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3638=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x3638.valid){
continue;
}
CheckValue<IkReal> x3639 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3639.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3638.value)))+(x3639.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3640=IKcos(j4);
IkReal x3641=IKsin(j4);
IkReal x3642=(cj5*r00);
IkReal x3643=(cj5*r10);
IkReal x3644=(r21*sj5);
IkReal x3645=(cj5*r20);
IkReal x3646=((1.0)*x3640);
IkReal x3647=((1.0)*x3641);
IkReal x3648=(sj5*x3641);
IkReal x3649=(sj5*x3640);
evalcond[0]=(((r11*x3649))+(((-1.0)*x3643*x3646))+((r12*x3641)));
evalcond[1]=(((x3641*x3644))+(((-1.0)*x3645*x3647))+(((-1.0)*r22*x3646)));
evalcond[2]=(((r01*x3648))+(((-1.0)*x3642*x3647))+(((-1.0)*r02*x3646)));
evalcond[3]=((1.0)+((r11*x3648))+(((-1.0)*x3643*x3647))+(((-1.0)*r12*x3646)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x3645*x3646))+((r22*x3641))+((x3640*x3644)));
evalcond[5]=(((r01*x3649))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r02*x3641))+(((-1.0)*x3642*x3646)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x3650=((-1.0)*py);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x3650);
rxp0_2=(py*r00);
rxp1_0=(r21*x3650);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x3651=((-1.0)*py);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x3651);
rxp0_2=(py*r00);
rxp1_0=(r21*x3651);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x3652=((-1.0)*py);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x3652);
rxp0_2=(py*r00);
rxp1_0=(r21*x3652);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=(((r01*sj5))+(((-1.0)*cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x3655=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*cj5*r00))),-1);
if(!x3655.valid){
continue;
}
IkReal x3653=x3655.value;
IkReal x3654=(cj0*x3653);
cj4array[0]=((((-1.0)*cj1*cj2*x3654))+((sj1*sj2*x3654)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x3656=IKsin(j4);
IkReal x3657=IKcos(j4);
IkReal x3658=(r21*sj5);
IkReal x3659=((1.0)*x3657);
IkReal x3660=((1.0)*cj5*x3656);
evalcond[0]=(r12*x3656);
evalcond[1]=((((-1.0)*r12*x3659))+(((-1.0)*cj0)));
evalcond[2]=((((-1.0)*r20*x3660))+((x3656*x3658)));
evalcond[3]=(((r01*sj5*x3656))+(((-1.0)*r00*x3660)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x3657*x3658))+(((-1.0)*cj5*r20*x3659)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x3663=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x3663.valid){
continue;
}
IkReal x3661=x3663.value;
IkReal x3662=((1.0)*x3661);
cj4array[0]=((((-1.0)*cj2*sj1*x3662))+(((-1.0)*cj1*sj2*x3662)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x3664=IKsin(j4);
IkReal x3665=IKcos(j4);
IkReal x3666=((1.0)*cj0);
IkReal x3667=(r01*sj5);
IkReal x3668=((1.0)*cj5*r00);
evalcond[0]=(r12*x3664);
evalcond[1]=((((-1.0)*x3666))+(((-1.0)*r12*x3665)));
evalcond[2]=(((r21*sj5*x3664))+(((-1.0)*cj5*r20*x3664)));
evalcond[3]=(((x3664*x3667))+(((-1.0)*x3664*x3668)));
evalcond[4]=((((-1.0)*x3665*x3668))+((cj0*cj1*cj2))+(((-1.0)*sj1*sj2*x3666))+((x3665*x3667)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x3669=IKPowWithIntegerCheck(r12,-1);
if(!x3669.valid){
continue;
}
cj4array[0]=((-1.0)*cj0*(x3669.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x3670=IKsin(j4);
IkReal x3671=IKcos(j4);
IkReal x3672=((1.0)*cj5*r00);
IkReal x3673=(sj5*x3671);
IkReal x3674=(sj5*x3670);
IkReal x3675=((1.0)*cj5*r20);
evalcond[0]=(r12*x3670);
evalcond[1]=((((-1.0)*x3670*x3675))+((r21*x3674)));
evalcond[2]=(((r01*x3674))+(((-1.0)*x3670*x3672)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x3671*x3675))+((cj1*sj2))+((r21*x3673)));
evalcond[4]=((((-1.0)*x3671*x3672))+((r01*x3673))+(((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3676=((1.0)*cj5);
CheckValue<IkReal> x3677=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x3676))+(((-1.0)*r20*sj5)))),-1);
if(!x3677.valid){
continue;
}
CheckValue<IkReal> x3678 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((r11*sj0*sj5))+((cj0*r01*sj5))+(((-1.0)*cj0*r00*x3676))+(((-1.0)*r10*sj0*x3676)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3678.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3677.value)))+(x3678.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3679=IKsin(j4);
IkReal x3680=IKcos(j4);
IkReal x3681=(cj5*r00);
IkReal x3682=(cj1*cj2);
IkReal x3683=(cj5*r10);
IkReal x3684=(r21*sj5);
IkReal x3685=(cj5*r20);
IkReal x3686=((1.0)*x3680);
IkReal x3687=((1.0)*x3679);
IkReal x3688=(sj5*x3679);
IkReal x3689=(sj5*x3680);
IkReal x3690=((1.0)*sj1*sj2);
evalcond[0]=((((-1.0)*r22*x3686))+(((-1.0)*x3685*x3687))+((x3679*x3684)));
evalcond[1]=(sj0+((r01*x3688))+(((-1.0)*r02*x3686))+(((-1.0)*x3681*x3687)));
evalcond[2]=((((-1.0)*x3683*x3687))+(((-1.0)*r12*x3686))+((r11*x3688))+(((-1.0)*cj0)));
evalcond[3]=(((cj2*sj1))+((x3680*x3684))+((cj1*sj2))+(((-1.0)*x3685*x3686))+((r22*x3679)));
evalcond[4]=(((r01*x3689))+((cj0*x3682))+((r02*x3679))+(((-1.0)*cj0*x3690))+(((-1.0)*x3681*x3686)));
evalcond[5]=(((sj0*x3682))+((r12*x3679))+(((-1.0)*x3683*x3686))+(((-1.0)*sj0*x3690))+((r11*x3689)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3691=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x3691.valid){
continue;
}
CheckValue<IkReal> x3692 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3692.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3691.value)))+(x3692.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3693=IKsin(j4);
IkReal x3694=IKcos(j4);
IkReal x3695=(cj5*r00);
IkReal x3696=(cj1*cj2);
IkReal x3697=(cj5*r10);
IkReal x3698=(r21*sj5);
IkReal x3699=(cj5*r20);
IkReal x3700=((1.0)*x3694);
IkReal x3701=((1.0)*x3693);
IkReal x3702=(sj5*x3693);
IkReal x3703=(sj5*x3694);
IkReal x3704=((1.0)*sj1*sj2);
evalcond[0]=((((-1.0)*x3699*x3701))+((x3693*x3698))+(((-1.0)*r22*x3700)));
evalcond[1]=((((-1.0)*r02*x3700))+sj0+((r01*x3702))+(((-1.0)*x3695*x3701)));
evalcond[2]=((((-1.0)*x3697*x3701))+((r11*x3702))+(((-1.0)*r12*x3700))+(((-1.0)*cj0)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x3699*x3700))+((cj1*sj2))+((x3694*x3698))+((r22*x3693)));
evalcond[4]=(((cj0*x3696))+((r01*x3703))+((r02*x3693))+(((-1.0)*cj0*x3704))+(((-1.0)*x3695*x3700)));
evalcond[5]=((((-1.0)*x3697*x3700))+((r11*x3703))+((sj0*x3696))+(((-1.0)*sj0*x3704))+((r12*x3693)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3705=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x3705.valid){
continue;
}
CheckValue<IkReal> x3706 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3706.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3705.value)))+(x3706.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3707=IKsin(j4);
IkReal x3708=IKcos(j4);
IkReal x3709=(cj5*r00);
IkReal x3710=(cj1*cj2);
IkReal x3711=(cj5*r10);
IkReal x3712=(r21*sj5);
IkReal x3713=(cj5*r20);
IkReal x3714=((1.0)*x3708);
IkReal x3715=((1.0)*x3707);
IkReal x3716=(sj5*x3707);
IkReal x3717=(sj5*x3708);
IkReal x3718=((1.0)*sj1*sj2);
evalcond[0]=((((-1.0)*x3713*x3715))+((x3707*x3712))+(((-1.0)*r22*x3714)));
evalcond[1]=(sj0+(((-1.0)*r02*x3714))+((r01*x3716))+(((-1.0)*x3709*x3715)));
evalcond[2]=(((r11*x3716))+(((-1.0)*x3711*x3715))+(((-1.0)*r12*x3714))+(((-1.0)*cj0)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x3713*x3714))+((x3708*x3712))+((cj1*sj2))+((r22*x3707)));
evalcond[4]=(((r01*x3717))+((cj0*x3710))+(((-1.0)*x3709*x3714))+((r02*x3707))+(((-1.0)*cj0*x3718)));
evalcond[5]=(((r11*x3717))+((r12*x3707))+(((-1.0)*sj0*x3718))+((sj0*x3710))+(((-1.0)*x3711*x3714)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3719=r21*r21;
IkReal x3720=cj5*cj5;
IkReal x3721=(cj2*sj1);
IkReal x3722=(cj1*sj2);
IkReal x3723=(r21*sj5);
IkReal x3724=((1.0)*cj5*r20);
CheckValue<IkReal> x3725=IKPowWithIntegerCheck(IKsign((((x3719*x3720))+(((2.0)*cj5*r20*x3723))+(((-1.0)*(r22*r22)))+(((-1.0)*x3720*(r20*r20)))+(((-1.0)*x3719)))),-1);
if(!x3725.valid){
continue;
}
CheckValue<IkReal> x3726 = IKatan2WithCheck(IkReal((((r22*x3721))+((r22*x3722)))),IkReal((((x3722*x3723))+(((-1.0)*x3721*x3724))+(((-1.0)*x3722*x3724))+((x3721*x3723)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3726.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3725.value)))+(x3726.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x3727=IKsin(j4);
IkReal x3728=IKcos(j4);
IkReal x3729=(r21*sj5);
IkReal x3730=(cj5*r20);
IkReal x3731=((1.0)*x3728);
evalcond[0]=(((x3727*x3729))+(((-1.0)*x3727*x3730))+(((-1.0)*r22*x3731)));
evalcond[1]=(((cj2*sj1))+((cj1*sj2))+((r22*x3727))+(((-1.0)*x3730*x3731))+((x3728*x3729)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x3732=(cj5*sj4);
IkReal x3733=(sj4*sj5);
if( IKabs((((r00*x3732))+(((-1.0)*r01*x3733))+((cj4*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r10*x3732))+((r11*x3733))+(((-1.0)*cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r00*x3732))+(((-1.0)*r01*x3733))+((cj4*r02))))+IKsqr(((((-1.0)*r10*x3732))+((r11*x3733))+(((-1.0)*cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r00*x3732))+(((-1.0)*r01*x3733))+((cj4*r02))), ((((-1.0)*r10*x3732))+((r11*x3733))+(((-1.0)*cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x3734=IKcos(j0);
IkReal x3735=IKsin(j0);
IkReal x3736=((0.11)*sj5);
IkReal x3737=(cj5*r01);
IkReal x3738=((1.0)*sj2);
IkReal x3739=(r11*sj5);
IkReal x3740=(cj1*cj2);
IkReal x3741=(cj1*sj2);
IkReal x3742=((0.214)*cj2);
IkReal x3743=(cj5*r11);
IkReal x3744=((1.0)*cj4);
IkReal x3745=(r01*sj5);
IkReal x3746=(sj1*x3735);
IkReal x3747=(cj5*x3744);
IkReal x3748=(sj1*x3734);
IkReal x3749=((1.0)*cj5*sj4);
evalcond[0]=((((-1.0)*r00*x3749))+((sj4*x3745))+x3735+(((-1.0)*r02*x3744)));
evalcond[1]=(((sj4*x3739))+(((-1.0)*r12*x3744))+(((-1.0)*r10*x3749))+(((-1.0)*x3734)));
evalcond[2]=(((r00*sj5))+((cj2*x3748))+((x3734*x3741))+x3737);
evalcond[3]=(((r10*sj5))+((cj2*x3746))+((x3735*x3741))+x3743);
evalcond[4]=((((-1.0)*r00*x3747))+((x3734*x3740))+((r02*sj4))+((cj4*x3745))+(((-1.0)*x3738*x3748)));
evalcond[5]=(((x3735*x3740))+((cj4*x3739))+(((-1.0)*r10*x3747))+((r12*sj4))+(((-1.0)*x3738*x3746)));
evalcond[6]=((((0.123)*x3735))+(((-0.243)*x3748))+(((-0.11)*x3737))+(((-1.0)*r00*x3736))+(((-1.0)*px))+(((-1.0)*x3742*x3748))+(((-0.214)*x3734*x3741)));
evalcond[7]=((((-0.11)*x3743))+(((-0.243)*x3746))+(((-1.0)*py))+(((-0.123)*x3734))+(((-1.0)*r10*x3736))+(((-0.214)*x3735*x3741))+(((-1.0)*x3742*x3746)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x3750=((1.0)*cj5);
IkReal x3751=((1.0)*sj5);
CheckValue<IkReal> x3752 = IKatan2WithCheck(IkReal(((((-1.0)*r11*x3750))+(((-1.0)*r10*x3751)))),IkReal(((((-1.0)*r00*x3751))+(((-1.0)*r01*x3750)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3752.valid){
continue;
}
CheckValue<IkReal> x3753=IKPowWithIntegerCheck(IKsign((((cj2*sj1))+((cj1*sj2)))),-1);
if(!x3753.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x3752.value)+(((1.5707963267949)*(x3753.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x3754=IKcos(j0);
IkReal x3755=IKsin(j0);
IkReal x3756=((0.11)*sj5);
IkReal x3757=(cj5*r01);
IkReal x3758=(cj2*sj1);
IkReal x3759=(cj5*r11);
IkReal x3760=((0.243)*sj1);
IkReal x3761=(cj1*sj2);
IkReal x3762=((0.214)*x3754);
IkReal x3763=((0.214)*x3755);
evalcond[0]=(((r00*sj5))+((x3754*x3758))+x3757+((x3754*x3761)));
evalcond[1]=(((x3755*x3758))+((r10*sj5))+x3759+((x3755*x3761)));
evalcond[2]=((((-1.0)*x3761*x3762))+(((-1.0)*r00*x3756))+(((0.123)*x3755))+(((-0.11)*x3757))+(((-1.0)*x3754*x3760))+(((-1.0)*px))+(((-1.0)*x3758*x3762)));
evalcond[3]=((((-1.0)*x3761*x3763))+(((-0.11)*x3759))+(((-1.0)*x3755*x3760))+(((-0.123)*x3754))+(((-1.0)*py))+(((-1.0)*r10*x3756))+(((-1.0)*x3758*x3763)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x3764=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x3764;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x3764);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x3765=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x3765;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3765);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x3766=((1.0)*cj5);
IkReal x3767=((((-1.0)*r21*x3766))+(((-1.0)*r20*sj5)));
j4eval[0]=x3767;
j4eval[1]=((IKabs((((r11*sj0*sj5))+(((-1.0)*cj0*r00*x3766))+((cj0*r01*sj5))+(((-1.0)*r10*sj0*x3766)))))+(IKabs((((r12*sj0))+((cj0*r02))))));
j4eval[2]=IKsign(x3767);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x3768=((-1.0)*r20);
IkReal x3770 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x3770)==0){
continue;
}
IkReal x3769=pow(x3770,-0.5);
CheckValue<IkReal> x3771 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x3768),IKFAST_ATAN2_MAGTHRESH);
if(!x3771.valid){
continue;
}
IkReal gconst96=((-1.0)*(x3771.value));
IkReal gconst97=(r21*x3769);
IkReal gconst98=(x3768*x3769);
CheckValue<IkReal> x3772 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3772.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x3772.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x3773=((-1.0)*r20);
IkReal x3774=x3769;
CheckValue<IkReal> x3776 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x3773),IKFAST_ATAN2_MAGTHRESH);
if(!x3776.valid){
continue;
}
IkReal x3775=((-1.0)*(x3776.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst97;
cj5=gconst98;
j5=x3775;
IkReal gconst96=x3775;
IkReal gconst97=(r21*x3774);
IkReal gconst98=(x3773*x3774);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x3777=((-1.0)*r20);
IkReal x3778=x3769;
CheckValue<IkReal> x3780 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x3777),IKFAST_ATAN2_MAGTHRESH);
if(!x3780.valid){
continue;
}
IkReal x3779=((-1.0)*(x3780.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst97;
cj5=gconst98;
j5=x3779;
IkReal gconst96=x3779;
IkReal gconst97=(r21*x3778);
IkReal gconst98=(x3777*x3778);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x3781=((-1.0)*r20);
IkReal x3782=x3769;
CheckValue<IkReal> x3784 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x3781),IKFAST_ATAN2_MAGTHRESH);
if(!x3784.valid){
continue;
}
IkReal x3783=((-1.0)*(x3784.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst97;
cj5=gconst98;
j5=x3783;
IkReal gconst96=x3783;
IkReal gconst97=(r21*x3782);
IkReal gconst98=(x3781*x3782);
IkReal x3785=((1.0)*(r22*r22));
CheckValue<IkReal> x3789=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x3785))),-1);
if(!x3789.valid){
continue;
}
IkReal x3786=x3789.value;
IkReal x3787=((1.0)*x3786);
IkReal x3788=((((-1.0)*x3787*(r21*r21*r21*r21)))+(((-1.0)*x3785))+(((-2.0)*x3786*(r20*r20)*(r21*r21)))+(((-1.0)*x3787*(r20*r20*r20*r20))));
j4eval[0]=x3788;
j4eval[1]=IKsign(x3788);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3790=(gconst97*r21);
IkReal x3791=(cj2*sj1);
IkReal x3792=(cj1*sj2);
IkReal x3793=((1.0)*gconst98*r20);
CheckValue<IkReal> x3794=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x3790*x3790)))+(((2.0)*gconst98*r20*x3790))+(((-1.0)*(r22*r22)))+(((-1.0)*gconst98*r20*x3793)))),-1);
if(!x3794.valid){
continue;
}
CheckValue<IkReal> x3795 = IKatan2WithCheck(IkReal((((r22*x3792))+((r22*x3791)))),IkReal(((((-1.0)*x3791*x3793))+(((-1.0)*x3792*x3793))+((x3790*x3791))+((x3790*x3792)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3795.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3794.value)))+(x3795.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3796=IKsin(j4);
IkReal x3797=IKcos(j4);
IkReal x3798=(gconst98*r10);
IkReal x3799=(cj1*cj2);
IkReal x3800=(gconst98*r20);
IkReal x3801=(gconst98*r00);
IkReal x3802=((1.0)*cj0);
IkReal x3803=(sj1*sj2);
IkReal x3804=((1.0)*x3797);
IkReal x3805=(gconst97*x3796);
IkReal x3806=((1.0)*x3796);
IkReal x3807=(gconst97*x3797);
evalcond[0]=(((r21*x3805))+(((-1.0)*x3800*x3806))+(((-1.0)*r22*x3804)));
evalcond[1]=(((r01*x3805))+sj0+(((-1.0)*x3801*x3806))+(((-1.0)*r02*x3804)));
evalcond[2]=(((r11*x3805))+(((-1.0)*x3802))+(((-1.0)*r12*x3804))+(((-1.0)*x3798*x3806)));
evalcond[3]=(((cj2*sj1))+((r22*x3796))+((r21*x3807))+((cj1*sj2))+(((-1.0)*x3800*x3804)));
evalcond[4]=(((r01*x3807))+((cj0*x3799))+(((-1.0)*x3801*x3804))+((r02*x3796))+(((-1.0)*x3802*x3803)));
evalcond[5]=(((r11*x3807))+(((-1.0)*sj0*x3803))+((sj0*x3799))+((r12*x3796))+(((-1.0)*x3798*x3804)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3808 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst97*r21))+(((-1.0)*cj0*gconst98*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3808.valid){
continue;
}
CheckValue<IkReal> x3809=IKPowWithIntegerCheck(IKsign((((gconst98*r01))+((gconst97*r00)))),-1);
if(!x3809.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3808.value)+(((1.5707963267949)*(x3809.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3810=IKsin(j4);
IkReal x3811=IKcos(j4);
IkReal x3812=(gconst98*r10);
IkReal x3813=(cj1*cj2);
IkReal x3814=(gconst98*r20);
IkReal x3815=(gconst98*r00);
IkReal x3816=((1.0)*cj0);
IkReal x3817=(sj1*sj2);
IkReal x3818=((1.0)*x3811);
IkReal x3819=(gconst97*x3810);
IkReal x3820=((1.0)*x3810);
IkReal x3821=(gconst97*x3811);
evalcond[0]=((((-1.0)*r22*x3818))+((r21*x3819))+(((-1.0)*x3814*x3820)));
evalcond[1]=(sj0+(((-1.0)*x3815*x3820))+(((-1.0)*r02*x3818))+((r01*x3819)));
evalcond[2]=((((-1.0)*r12*x3818))+((r11*x3819))+(((-1.0)*x3816))+(((-1.0)*x3812*x3820)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x3814*x3818))+((r22*x3810))+((r21*x3821)));
evalcond[4]=((((-1.0)*x3815*x3818))+((r02*x3810))+((cj0*x3813))+(((-1.0)*x3816*x3817))+((r01*x3821)));
evalcond[5]=((((-1.0)*sj0*x3817))+((r12*x3810))+((r11*x3821))+(((-1.0)*x3812*x3818))+((sj0*x3813)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3822 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst97*r21*sj0))+(((-1.0)*gconst98*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3822.valid){
continue;
}
CheckValue<IkReal> x3823=IKPowWithIntegerCheck(IKsign((((gconst98*r11))+((gconst97*r10)))),-1);
if(!x3823.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3822.value)+(((1.5707963267949)*(x3823.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3824=IKsin(j4);
IkReal x3825=IKcos(j4);
IkReal x3826=(gconst98*r10);
IkReal x3827=(cj1*cj2);
IkReal x3828=(gconst98*r20);
IkReal x3829=(gconst98*r00);
IkReal x3830=((1.0)*cj0);
IkReal x3831=(sj1*sj2);
IkReal x3832=((1.0)*x3825);
IkReal x3833=(gconst97*x3824);
IkReal x3834=((1.0)*x3824);
IkReal x3835=(gconst97*x3825);
evalcond[0]=((((-1.0)*x3828*x3834))+((r21*x3833))+(((-1.0)*r22*x3832)));
evalcond[1]=(sj0+(((-1.0)*x3829*x3834))+((r01*x3833))+(((-1.0)*r02*x3832)));
evalcond[2]=((((-1.0)*r12*x3832))+((r11*x3833))+(((-1.0)*x3830))+(((-1.0)*x3826*x3834)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x3828*x3832))+((cj1*sj2))+((r22*x3824))+((r21*x3835)));
evalcond[4]=((((-1.0)*x3830*x3831))+(((-1.0)*x3829*x3832))+((r01*x3835))+((r02*x3824))+((cj0*x3827)));
evalcond[5]=(((r12*x3824))+(((-1.0)*sj0*x3831))+((r11*x3835))+((sj0*x3827))+(((-1.0)*x3826*x3832)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3836=((-1.0)*r21);
IkReal x3838 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x3838)==0){
continue;
}
IkReal x3837=pow(x3838,-0.5);
CheckValue<IkReal> x3839 = IKatan2WithCheck(IkReal(x3836),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3839.valid){
continue;
}
IkReal gconst99=((3.14159265358979)+(((-1.0)*(x3839.value))));
IkReal gconst100=(x3836*x3837);
IkReal gconst101=((1.0)*r20*x3837);
CheckValue<IkReal> x3840 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3840.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x3840.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x3841=((-1.0)*r21);
CheckValue<IkReal> x3844 = IKatan2WithCheck(IkReal(x3841),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3844.valid){
continue;
}
IkReal x3842=((1.0)*(x3844.value));
IkReal x3843=x3837;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x3842)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x3842)));
IkReal gconst100=(x3841*x3843);
IkReal gconst101=((1.0)*r20*x3843);
IkReal x3845=r22*r22;
IkReal x3846=((1.0)*x3845);
CheckValue<IkReal> x3850=IKPowWithIntegerCheck(((-1.0)+x3845),-1);
if(!x3850.valid){
continue;
}
IkReal x3847=x3850.value;
if((((1.0)+(((-1.0)*x3846)))) < -0.00001)
continue;
IkReal x3848=IKsqrt(((1.0)+(((-1.0)*x3846))));
IkReal x3849=(sj0*x3847*x3848);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs((x3849+(((-1.0)*x3846*x3849))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x3851=((-1.0)*r21);
CheckValue<IkReal> x3854 = IKatan2WithCheck(IkReal(x3851),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3854.valid){
continue;
}
IkReal x3852=((1.0)*(x3854.value));
IkReal x3853=x3837;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x3852)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x3852)));
IkReal gconst100=(x3851*x3853);
IkReal gconst101=((1.0)*r20*x3853);
IkReal x3855=r22*r22;
IkReal x3856=((1.0)*x3855);
CheckValue<IkReal> x3860=IKPowWithIntegerCheck(((-1.0)+x3855),-1);
if(!x3860.valid){
continue;
}
IkReal x3857=x3860.value;
if((((1.0)+(((-1.0)*x3856)))) < -0.00001)
continue;
IkReal x3858=IKsqrt(((1.0)+(((-1.0)*x3856))));
IkReal x3859=(cj0*x3857*x3858);
j4eval[0]=((IKabs(((((-1.0)*x3856*x3859))+x3859)))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x3861=((-1.0)*r21);
CheckValue<IkReal> x3864 = IKatan2WithCheck(IkReal(x3861),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3864.valid){
continue;
}
IkReal x3862=((1.0)*(x3864.value));
IkReal x3863=x3837;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x3862)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x3862)));
IkReal gconst100=(x3861*x3863);
IkReal gconst101=((1.0)*r20*x3863);
IkReal x3865=r22*r22;
IkReal x3866=(cj0*r02);
IkReal x3867=(r12*sj0);
CheckValue<IkReal> x3871=IKPowWithIntegerCheck(((-1.0)+x3865),-1);
if(!x3871.valid){
continue;
}
IkReal x3868=x3871.value;
if((((1.0)+(((-1.0)*x3865)))) < -0.00001)
continue;
IkReal x3869=IKsqrt(((1.0)+(((-1.0)*x3865))));
IkReal x3870=((1.0)*r22*x3868*x3869);
j4eval[0]=0;
j4eval[1]=((IKabs((x3867+x3866)))+(IKabs(((((-1.0)*x3867*x3870))+(((-1.0)*x3866*x3870))))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3872=((1.0)*gconst101);
CheckValue<IkReal> x3873 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*r10*sj0*x3872))+((cj0*gconst100*r01))+((gconst100*r11*sj0))+(((-1.0)*cj0*r00*x3872)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3873.valid){
continue;
}
CheckValue<IkReal> x3874=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst100*r20))+(((-1.0)*r21*x3872)))),-1);
if(!x3874.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3873.value)+(((1.5707963267949)*(x3874.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3875=IKsin(j4);
IkReal x3876=IKcos(j4);
IkReal x3877=(cj1*cj2);
IkReal x3878=(gconst101*r20);
IkReal x3879=(gconst101*r10);
IkReal x3880=(gconst101*r00);
IkReal x3881=((1.0)*cj0);
IkReal x3882=(sj1*sj2);
IkReal x3883=((1.0)*x3876);
IkReal x3884=((1.0)*x3875);
IkReal x3885=(gconst100*x3875);
IkReal x3886=(gconst100*x3876);
evalcond[0]=(((r21*x3885))+(((-1.0)*r22*x3883))+(((-1.0)*x3878*x3884)));
evalcond[1]=(sj0+(((-1.0)*r02*x3883))+(((-1.0)*x3880*x3884))+((r01*x3885)));
evalcond[2]=((((-1.0)*x3879*x3884))+(((-1.0)*x3881))+((r11*x3885))+(((-1.0)*r12*x3883)));
evalcond[3]=(((cj2*sj1))+((r21*x3886))+((cj1*sj2))+(((-1.0)*x3878*x3883))+((r22*x3875)));
evalcond[4]=((((-1.0)*x3880*x3883))+((r01*x3886))+((r02*x3875))+(((-1.0)*x3881*x3882))+((cj0*x3877)));
evalcond[5]=((((-1.0)*x3879*x3883))+(((-1.0)*sj0*x3882))+((r11*x3886))+((sj0*x3877))+((r12*x3875)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3887 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst100*r21))+(((-1.0)*cj0*gconst101*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3887.valid){
continue;
}
CheckValue<IkReal> x3888=IKPowWithIntegerCheck(IKsign((((gconst100*r00))+((gconst101*r01)))),-1);
if(!x3888.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3887.value)+(((1.5707963267949)*(x3888.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3889=IKsin(j4);
IkReal x3890=IKcos(j4);
IkReal x3891=(cj1*cj2);
IkReal x3892=(gconst101*r20);
IkReal x3893=(gconst101*r10);
IkReal x3894=(gconst101*r00);
IkReal x3895=((1.0)*cj0);
IkReal x3896=(sj1*sj2);
IkReal x3897=((1.0)*x3890);
IkReal x3898=((1.0)*x3889);
IkReal x3899=(gconst100*x3889);
IkReal x3900=(gconst100*x3890);
evalcond[0]=((((-1.0)*r22*x3897))+(((-1.0)*x3892*x3898))+((r21*x3899)));
evalcond[1]=(sj0+((r01*x3899))+(((-1.0)*x3894*x3898))+(((-1.0)*r02*x3897)));
evalcond[2]=((((-1.0)*r12*x3897))+(((-1.0)*x3893*x3898))+((r11*x3899))+(((-1.0)*x3895)));
evalcond[3]=(((cj2*sj1))+((r22*x3889))+((cj1*sj2))+(((-1.0)*x3892*x3897))+((r21*x3900)));
evalcond[4]=((((-1.0)*x3895*x3896))+((cj0*x3891))+((r01*x3900))+((r02*x3889))+(((-1.0)*x3894*x3897)));
evalcond[5]=(((r12*x3889))+((sj0*x3891))+(((-1.0)*x3893*x3897))+((r11*x3900))+(((-1.0)*sj0*x3896)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3901=IKPowWithIntegerCheck(IKsign((((gconst100*r10))+((gconst101*r11)))),-1);
if(!x3901.valid){
continue;
}
CheckValue<IkReal> x3902 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*gconst101*r20*sj0))+((gconst100*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3902.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3901.value)))+(x3902.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3903=IKsin(j4);
IkReal x3904=IKcos(j4);
IkReal x3905=(cj1*cj2);
IkReal x3906=(gconst101*r20);
IkReal x3907=(gconst101*r10);
IkReal x3908=(gconst101*r00);
IkReal x3909=((1.0)*cj0);
IkReal x3910=(sj1*sj2);
IkReal x3911=((1.0)*x3904);
IkReal x3912=((1.0)*x3903);
IkReal x3913=(gconst100*x3903);
IkReal x3914=(gconst100*x3904);
evalcond[0]=((((-1.0)*x3906*x3912))+((r21*x3913))+(((-1.0)*r22*x3911)));
evalcond[1]=((((-1.0)*r02*x3911))+sj0+(((-1.0)*x3908*x3912))+((r01*x3913)));
evalcond[2]=((((-1.0)*x3909))+(((-1.0)*x3907*x3912))+((r11*x3913))+(((-1.0)*r12*x3911)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x3906*x3911))+((r21*x3914))+((r22*x3903))+((cj1*sj2)));
evalcond[4]=((((-1.0)*x3908*x3911))+(((-1.0)*x3909*x3910))+((cj0*x3905))+((r01*x3914))+((r02*x3903)));
evalcond[5]=((((-1.0)*sj0*x3910))+((sj0*x3905))+(((-1.0)*x3907*x3911))+((r12*x3903))+((r11*x3914)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3916 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x3916)==0){
continue;
}
IkReal x3915=pow(x3916,-0.5);
CheckValue<IkReal> x3917 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x3917.valid){
continue;
}
IkReal gconst102=((-1.0)*(x3917.value));
IkReal gconst103=((-1.0)*r01*x3915);
IkReal gconst104=(r00*x3915);
CheckValue<IkReal> x3918 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x3918.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x3918.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x3921 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x3921.valid){
continue;
}
IkReal x3919=((-1.0)*(x3921.value));
IkReal x3920=x3915;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst103;
cj5=gconst104;
j5=x3919;
IkReal gconst102=x3919;
IkReal gconst103=((-1.0)*r01*x3920);
IkReal gconst104=(r00*x3920);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3922=((1.0)*gconst104);
CheckValue<IkReal> x3923=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst103*r20))+(((-1.0)*r21*x3922)))),-1);
if(!x3923.valid){
continue;
}
CheckValue<IkReal> x3924 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*r10*sj0*x3922))+(((-1.0)*cj0*r00*x3922))+((cj0*gconst103*r01))+((gconst103*r11*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3924.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3923.value)))+(x3924.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3925=IKsin(j4);
IkReal x3926=IKcos(j4);
IkReal x3927=(gconst103*r11);
IkReal x3928=(cj1*cj2);
IkReal x3929=((1.0)*cj0);
IkReal x3930=(sj1*sj2);
IkReal x3931=((1.0)*x3926);
IkReal x3932=(gconst103*x3926);
IkReal x3933=(gconst103*x3925);
IkReal x3934=((1.0)*gconst104*x3925);
evalcond[0]=(((r21*x3933))+(((-1.0)*r22*x3931))+(((-1.0)*r20*x3934)));
evalcond[1]=(sj0+((r01*x3933))+(((-1.0)*r00*x3934))+(((-1.0)*r02*x3931)));
evalcond[2]=((((-1.0)*x3929))+(((-1.0)*r12*x3931))+(((-1.0)*r10*x3934))+((x3925*x3927)));
evalcond[3]=(((r21*x3932))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst104*r20*x3931))+((r22*x3925)));
evalcond[4]=(((cj0*x3928))+(((-1.0)*x3929*x3930))+((r01*x3932))+(((-1.0)*gconst104*r00*x3931))+((r02*x3925)));
evalcond[5]=(((r12*x3925))+(((-1.0)*sj0*x3930))+(((-1.0)*gconst104*r10*x3931))+((sj0*x3928))+((x3926*x3927)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3935 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst103*r21*sj0))+(((-1.0)*gconst104*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3935.valid){
continue;
}
CheckValue<IkReal> x3936=IKPowWithIntegerCheck(IKsign((((gconst104*r11))+((gconst103*r10)))),-1);
if(!x3936.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3935.value)+(((1.5707963267949)*(x3936.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3937=IKsin(j4);
IkReal x3938=IKcos(j4);
IkReal x3939=(gconst103*r11);
IkReal x3940=(cj1*cj2);
IkReal x3941=((1.0)*cj0);
IkReal x3942=(sj1*sj2);
IkReal x3943=((1.0)*x3938);
IkReal x3944=(gconst103*x3938);
IkReal x3945=(gconst103*x3937);
IkReal x3946=((1.0)*gconst104*x3937);
evalcond[0]=((((-1.0)*r22*x3943))+(((-1.0)*r20*x3946))+((r21*x3945)));
evalcond[1]=(((r01*x3945))+sj0+(((-1.0)*r00*x3946))+(((-1.0)*r02*x3943)));
evalcond[2]=((((-1.0)*x3941))+((x3937*x3939))+(((-1.0)*r10*x3946))+(((-1.0)*r12*x3943)));
evalcond[3]=(((cj2*sj1))+((r22*x3937))+((cj1*sj2))+(((-1.0)*gconst104*r20*x3943))+((r21*x3944)));
evalcond[4]=(((r01*x3944))+(((-1.0)*gconst104*r00*x3943))+((cj0*x3940))+(((-1.0)*x3941*x3942))+((r02*x3937)));
evalcond[5]=(((sj0*x3940))+((x3938*x3939))+(((-1.0)*sj0*x3942))+(((-1.0)*gconst104*r10*x3943))+((r12*x3937)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3948 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x3948)==0){
continue;
}
IkReal x3947=pow(x3948,-0.5);
CheckValue<IkReal> x3949 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x3949.valid){
continue;
}
IkReal gconst105=((3.14159265358979)+(((-1.0)*(x3949.value))));
IkReal gconst106=((1.0)*r01*x3947);
IkReal gconst107=((-1.0)*r00*x3947);
CheckValue<IkReal> x3950 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x3950.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x3950.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x3953 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x3953.valid){
continue;
}
IkReal x3951=((1.0)*(x3953.value));
IkReal x3952=x3947;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x3951)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x3951)));
IkReal gconst106=((1.0)*r01*x3952);
IkReal gconst107=((-1.0)*r00*x3952);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[5];
CheckValue<IkReal> x3956 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x3956.valid){
continue;
}
IkReal x3954=((1.0)*(x3956.value));
IkReal x3955=x3947;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x3954)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x3954)));
IkReal gconst106=((1.0)*r01*x3955);
IkReal gconst107=((-1.0)*r00*x3955);
j4eval[0]=0;
j4eval[1]=cj0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
j4eval[4]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x3959 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x3959.valid){
continue;
}
IkReal x3957=((1.0)*(x3959.value));
IkReal x3958=x3947;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x3957)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x3957)));
IkReal gconst106=((1.0)*r01*x3958);
IkReal gconst107=((-1.0)*r00*x3958);
IkReal x3960=r02*r02;
IkReal x3961=(r12*sj0);
IkReal x3962=x3947;
IkReal x3963=(cj0*x3962);
j4eval[0]=((IKabs((x3961+((cj0*r02)))))+(IKabs((((x3960*x3963))+(((-1.0)*x3963))+((r02*x3961*x3962))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3964=((1.0)*gconst107);
CheckValue<IkReal> x3965 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((cj0*gconst106*r01))+(((-1.0)*cj0*r00*x3964))+(((-1.0)*r10*sj0*x3964))+((gconst106*r11*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3965.valid){
continue;
}
CheckValue<IkReal> x3966=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x3964))+(((-1.0)*gconst106*r20)))),-1);
if(!x3966.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3965.value)+(((1.5707963267949)*(x3966.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3967=IKsin(j4);
IkReal x3968=IKcos(j4);
IkReal x3969=(cj1*cj2);
IkReal x3970=(gconst107*r10);
IkReal x3971=(gconst107*r00);
IkReal x3972=(gconst107*r20);
IkReal x3973=((1.0)*cj0);
IkReal x3974=(sj1*sj2);
IkReal x3975=((1.0)*x3968);
IkReal x3976=(gconst106*x3968);
IkReal x3977=(gconst106*x3967);
IkReal x3978=((1.0)*x3967);
evalcond[0]=((((-1.0)*x3972*x3978))+((r21*x3977))+(((-1.0)*r22*x3975)));
evalcond[1]=((((-1.0)*r02*x3975))+sj0+(((-1.0)*x3971*x3978))+((r01*x3977)));
evalcond[2]=((((-1.0)*r12*x3975))+(((-1.0)*x3973))+((r11*x3977))+(((-1.0)*x3970*x3978)));
evalcond[3]=((((-1.0)*x3972*x3975))+((cj2*sj1))+((cj1*sj2))+((r22*x3967))+((r21*x3976)));
evalcond[4]=(((r02*x3967))+(((-1.0)*x3973*x3974))+(((-1.0)*x3971*x3975))+((r01*x3976))+((cj0*x3969)));
evalcond[5]=((((-1.0)*sj0*x3974))+((r11*x3976))+((r12*x3967))+(((-1.0)*x3970*x3975))+((sj0*x3969)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3979 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst106*r21))+(((-1.0)*cj0*gconst107*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3979.valid){
continue;
}
CheckValue<IkReal> x3980=IKPowWithIntegerCheck(IKsign((((gconst107*r01))+((gconst106*r00)))),-1);
if(!x3980.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3979.value)+(((1.5707963267949)*(x3980.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3981=IKsin(j4);
IkReal x3982=IKcos(j4);
IkReal x3983=(cj1*cj2);
IkReal x3984=(gconst107*r10);
IkReal x3985=(gconst107*r00);
IkReal x3986=(gconst107*r20);
IkReal x3987=((1.0)*cj0);
IkReal x3988=(sj1*sj2);
IkReal x3989=((1.0)*x3982);
IkReal x3990=(gconst106*x3982);
IkReal x3991=(gconst106*x3981);
IkReal x3992=((1.0)*x3981);
evalcond[0]=((((-1.0)*r22*x3989))+((r21*x3991))+(((-1.0)*x3986*x3992)));
evalcond[1]=(sj0+(((-1.0)*x3985*x3992))+((r01*x3991))+(((-1.0)*r02*x3989)));
evalcond[2]=((((-1.0)*r12*x3989))+(((-1.0)*x3984*x3992))+((r11*x3991))+(((-1.0)*x3987)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x3986*x3989))+((r21*x3990))+((r22*x3981)));
evalcond[4]=((((-1.0)*x3985*x3989))+(((-1.0)*x3987*x3988))+((cj0*x3983))+((r01*x3990))+((r02*x3981)));
evalcond[5]=((((-1.0)*x3984*x3989))+((sj0*x3983))+(((-1.0)*sj0*x3988))+((r11*x3990))+((r12*x3981)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3993=IKPowWithIntegerCheck(IKsign((((gconst107*r11))+((gconst106*r10)))),-1);
if(!x3993.valid){
continue;
}
CheckValue<IkReal> x3994 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst106*r21*sj0))+(((-1.0)*gconst107*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3994.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3993.value)))+(x3994.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3995=IKsin(j4);
IkReal x3996=IKcos(j4);
IkReal x3997=(cj1*cj2);
IkReal x3998=(gconst107*r10);
IkReal x3999=(gconst107*r00);
IkReal x4000=(gconst107*r20);
IkReal x4001=((1.0)*cj0);
IkReal x4002=(sj1*sj2);
IkReal x4003=((1.0)*x3996);
IkReal x4004=(gconst106*x3996);
IkReal x4005=(gconst106*x3995);
IkReal x4006=((1.0)*x3995);
evalcond[0]=((((-1.0)*r22*x4003))+(((-1.0)*x4000*x4006))+((r21*x4005)));
evalcond[1]=((((-1.0)*x3999*x4006))+sj0+(((-1.0)*r02*x4003))+((r01*x4005)));
evalcond[2]=((((-1.0)*x3998*x4006))+(((-1.0)*x4001))+(((-1.0)*r12*x4003))+((r11*x4005)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x4000*x4003))+((r22*x3995))+((r21*x4004)));
evalcond[4]=((((-1.0)*x3999*x4003))+((r01*x4004))+(((-1.0)*x4001*x4002))+((r02*x3995))+((cj0*x3997)));
evalcond[5]=((((-1.0)*x3998*x4003))+((r12*x3995))+((sj0*x3997))+(((-1.0)*sj0*x4002))+((r11*x4004)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x4007=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x4007;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x4007);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x4008=((1.0)*cj5);
IkReal x4009=((((-1.0)*r21*x4008))+(((-1.0)*r20*sj5)));
j4eval[0]=x4009;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x4008))+((r11*sj5))))));
j4eval[2]=IKsign(x4009);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x4010=(r01*sj5);
IkReal x4011=(cj1*sj2);
IkReal x4012=(cj2*sj1);
IkReal x4013=((1.0)*r02);
IkReal x4014=((1.0)*cj5*r00);
IkReal x4015=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x4015;
j4eval[1]=((IKabs(((((-1.0)*x4012*x4013))+(((-1.0)*x4011*x4013)))))+(IKabs(((((-1.0)*x4012*x4014))+((x4010*x4011))+((x4010*x4012))+(((-1.0)*x4011*x4014))))));
j4eval[2]=IKsign(x4015);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4016=(r01*sj5);
IkReal x4017=(cj1*sj2);
IkReal x4018=(cj2*sj1);
IkReal x4019=((1.0)*r02);
IkReal x4020=((1.0)*cj5*r00);
CheckValue<IkReal> x4021 = IKatan2WithCheck(IkReal(((((-1.0)*x4018*x4020))+((x4016*x4018))+((x4016*x4017))+(((-1.0)*x4017*x4020)))),IkReal(((((-1.0)*x4018*x4019))+(((-1.0)*x4017*x4019)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4021.valid){
continue;
}
CheckValue<IkReal> x4022=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x4022.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4021.value)+(((1.5707963267949)*(x4022.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4023=IKcos(j4);
IkReal x4024=IKsin(j4);
IkReal x4025=(cj5*r00);
IkReal x4026=(cj5*r10);
IkReal x4027=(r21*sj5);
IkReal x4028=(cj5*r20);
IkReal x4029=((1.0)*x4023);
IkReal x4030=((1.0)*x4024);
IkReal x4031=(sj5*x4024);
IkReal x4032=(sj5*x4023);
evalcond[0]=((((-1.0)*x4025*x4029))+((r01*x4032))+((r02*x4024)));
evalcond[1]=((((-1.0)*r22*x4029))+((x4024*x4027))+(((-1.0)*x4028*x4030)));
evalcond[2]=((((-1.0)*r12*x4029))+(((-1.0)*x4026*x4030))+((r11*x4031)));
evalcond[3]=((1.0)+(((-1.0)*r02*x4029))+((r01*x4031))+(((-1.0)*x4025*x4030)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x4028*x4029))+((cj1*sj2))+((x4023*x4027))+((r22*x4024)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*x4026*x4029))+((r12*x4024))+((cj1*cj2))+((r11*x4032)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4033=((1.0)*cj5);
CheckValue<IkReal> x4034=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x4033))+(((-1.0)*r20*sj5)))),-1);
if(!x4034.valid){
continue;
}
CheckValue<IkReal> x4035 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj5))+(((-1.0)*r10*x4033)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4035.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4034.value)))+(x4035.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4036=IKcos(j4);
IkReal x4037=IKsin(j4);
IkReal x4038=(cj5*r00);
IkReal x4039=(cj5*r10);
IkReal x4040=(r21*sj5);
IkReal x4041=(cj5*r20);
IkReal x4042=((1.0)*x4036);
IkReal x4043=((1.0)*x4037);
IkReal x4044=(sj5*x4037);
IkReal x4045=(sj5*x4036);
evalcond[0]=(((r02*x4037))+((r01*x4045))+(((-1.0)*x4038*x4042)));
evalcond[1]=(((x4037*x4040))+(((-1.0)*x4041*x4043))+(((-1.0)*r22*x4042)));
evalcond[2]=((((-1.0)*x4039*x4043))+(((-1.0)*r12*x4042))+((r11*x4044)));
evalcond[3]=((1.0)+(((-1.0)*r02*x4042))+((r01*x4044))+(((-1.0)*x4038*x4043)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x4036*x4040))+(((-1.0)*x4041*x4042))+((r22*x4037)));
evalcond[5]=((((-1.0)*x4039*x4042))+(((-1.0)*sj1*sj2))+((r11*x4045))+((cj1*cj2))+((r12*x4037)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4046 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4046.valid){
continue;
}
CheckValue<IkReal> x4047=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x4047.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4046.value)+(((1.5707963267949)*(x4047.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4048=IKcos(j4);
IkReal x4049=IKsin(j4);
IkReal x4050=(cj5*r00);
IkReal x4051=(cj5*r10);
IkReal x4052=(r21*sj5);
IkReal x4053=(cj5*r20);
IkReal x4054=((1.0)*x4048);
IkReal x4055=((1.0)*x4049);
IkReal x4056=(sj5*x4049);
IkReal x4057=(sj5*x4048);
evalcond[0]=((((-1.0)*x4050*x4054))+((r02*x4049))+((r01*x4057)));
evalcond[1]=(((x4049*x4052))+(((-1.0)*x4053*x4055))+(((-1.0)*r22*x4054)));
evalcond[2]=((((-1.0)*x4051*x4055))+(((-1.0)*r12*x4054))+((r11*x4056)));
evalcond[3]=((1.0)+(((-1.0)*x4050*x4055))+(((-1.0)*r02*x4054))+((r01*x4056)));
evalcond[4]=(((r22*x4049))+((cj2*sj1))+((x4048*x4052))+(((-1.0)*x4053*x4054))+((cj1*sj2)));
evalcond[5]=((((-1.0)*x4051*x4054))+(((-1.0)*sj1*sj2))+((r11*x4057))+((r12*x4049))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x4058=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x4058;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x4058);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x4059=((1.0)*cj5);
IkReal x4060=((((-1.0)*r10*sj5))+(((-1.0)*r11*x4059)));
j4eval[0]=x4060;
j4eval[1]=((IKabs(((((-1.0)*r20*x4059))+((r21*sj5)))))+(IKabs(r22)));
j4eval[2]=IKsign(x4060);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x4061=cj5*cj5;
IkReal x4062=r01*r01;
IkReal x4063=(cj5*r00);
IkReal x4064=(r01*sj5);
IkReal x4065=(((x4061*(r00*r00)))+(((-2.0)*x4063*x4064))+(((-1.0)*x4061*x4062))+x4062+(r02*r02));
j4eval[0]=x4065;
j4eval[1]=IKsign(x4065);
j4eval[2]=((IKabs(r02))+(IKabs((x4064+(((-1.0)*x4063))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4066=cj5*cj5;
IkReal x4067=r01*r01;
IkReal x4068=(r01*sj5);
IkReal x4069=(cj5*r00);
CheckValue<IkReal> x4070=IKPowWithIntegerCheck(IKsign((((x4066*(r00*r00)))+(((-1.0)*x4066*x4067))+(((-2.0)*x4068*x4069))+x4067+(r02*r02))),-1);
if(!x4070.valid){
continue;
}
CheckValue<IkReal> x4071 = IKatan2WithCheck(IkReal((x4068+(((-1.0)*x4069)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x4071.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4070.value)))+(x4071.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4072=IKcos(j4);
IkReal x4073=IKsin(j4);
IkReal x4074=(cj5*r00);
IkReal x4075=(cj5*r10);
IkReal x4076=(r21*sj5);
IkReal x4077=(cj5*r20);
IkReal x4078=((1.0)*x4072);
IkReal x4079=((1.0)*x4073);
IkReal x4080=(sj5*x4073);
IkReal x4081=(sj5*x4072);
evalcond[0]=(((r01*x4081))+(((-1.0)*x4074*x4078))+((r02*x4073)));
evalcond[1]=((((-1.0)*r22*x4078))+((x4073*x4076))+(((-1.0)*x4077*x4079)));
evalcond[2]=((((-1.0)*x4075*x4079))+(((-1.0)*r12*x4078))+((r11*x4080)));
evalcond[3]=((-1.0)+((r01*x4080))+(((-1.0)*x4074*x4079))+(((-1.0)*r02*x4078)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r22*x4073))+((x4072*x4076))+(((-1.0)*x4077*x4078)));
evalcond[5]=((((-1.0)*x4075*x4078))+((r12*x4073))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r11*x4081)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4082=((1.0)*cj5);
CheckValue<IkReal> x4083 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x4082))+((r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4083.valid){
continue;
}
CheckValue<IkReal> x4084=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x4082))+(((-1.0)*r10*sj5)))),-1);
if(!x4084.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4083.value)+(((1.5707963267949)*(x4084.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4085=IKcos(j4);
IkReal x4086=IKsin(j4);
IkReal x4087=(cj5*r00);
IkReal x4088=(cj5*r10);
IkReal x4089=(r21*sj5);
IkReal x4090=(cj5*r20);
IkReal x4091=((1.0)*x4085);
IkReal x4092=((1.0)*x4086);
IkReal x4093=(sj5*x4086);
IkReal x4094=(sj5*x4085);
evalcond[0]=(((r01*x4094))+((r02*x4086))+(((-1.0)*x4087*x4091)));
evalcond[1]=(((x4086*x4089))+(((-1.0)*x4090*x4092))+(((-1.0)*r22*x4091)));
evalcond[2]=((((-1.0)*r12*x4091))+((r11*x4093))+(((-1.0)*x4088*x4092)));
evalcond[3]=((-1.0)+((r01*x4093))+(((-1.0)*r02*x4091))+(((-1.0)*x4087*x4092)));
evalcond[4]=(((cj2*sj1))+((x4085*x4089))+((cj1*sj2))+(((-1.0)*x4090*x4091))+((r22*x4086)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r11*x4094))+((r12*x4086))+(((-1.0)*x4088*x4091)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4095=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x4095.valid){
continue;
}
CheckValue<IkReal> x4096 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4096.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4095.value)))+(x4096.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4097=IKcos(j4);
IkReal x4098=IKsin(j4);
IkReal x4099=(cj5*r00);
IkReal x4100=(cj5*r10);
IkReal x4101=(r21*sj5);
IkReal x4102=(cj5*r20);
IkReal x4103=((1.0)*x4097);
IkReal x4104=((1.0)*x4098);
IkReal x4105=(sj5*x4098);
IkReal x4106=(sj5*x4097);
evalcond[0]=(((r02*x4098))+((r01*x4106))+(((-1.0)*x4099*x4103)));
evalcond[1]=((((-1.0)*r22*x4103))+((x4098*x4101))+(((-1.0)*x4102*x4104)));
evalcond[2]=((((-1.0)*r12*x4103))+((r11*x4105))+(((-1.0)*x4100*x4104)));
evalcond[3]=((-1.0)+((r01*x4105))+(((-1.0)*r02*x4103))+(((-1.0)*x4099*x4104)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r22*x4098))+(((-1.0)*x4102*x4103))+((x4097*x4101)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r12*x4098))+((r11*x4106))+(((-1.0)*x4100*x4103)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4108 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x4108)==0){
continue;
}
IkReal x4107=pow(x4108,-0.5);
CheckValue<IkReal> x4109 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x4109.valid){
continue;
}
IkReal gconst108=((-1.0)*(x4109.value));
IkReal gconst109=((-1.0)*r11*x4107);
IkReal gconst110=(r10*x4107);
CheckValue<IkReal> x4110 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x4110.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x4110.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x4113 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x4113.valid){
continue;
}
IkReal x4111=((-1.0)*(x4113.value));
IkReal x4112=x4107;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst109;
cj5=gconst110;
j5=x4111;
IkReal gconst108=x4111;
IkReal gconst109=((-1.0)*r11*x4112);
IkReal gconst110=(r10*x4112);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4114=((1.0)*gconst110);
CheckValue<IkReal> x4115 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((cj0*gconst109*r01))+(((-1.0)*cj0*r00*x4114))+((gconst109*r11*sj0))+(((-1.0)*r10*sj0*x4114)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4115.valid){
continue;
}
CheckValue<IkReal> x4116=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst109*r20))+(((-1.0)*r21*x4114)))),-1);
if(!x4116.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4115.value)+(((1.5707963267949)*(x4116.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4117=IKsin(j4);
IkReal x4118=IKcos(j4);
IkReal x4119=(cj1*cj2);
IkReal x4120=(gconst109*r21);
IkReal x4121=((1.0)*cj0);
IkReal x4122=(sj1*sj2);
IkReal x4123=((1.0)*x4118);
IkReal x4124=(gconst109*x4117);
IkReal x4125=(gconst109*x4118);
IkReal x4126=((1.0)*gconst110*x4117);
evalcond[0]=((((-1.0)*r22*x4123))+(((-1.0)*r20*x4126))+((x4117*x4120)));
evalcond[1]=((((-1.0)*r00*x4126))+sj0+(((-1.0)*r02*x4123))+((r01*x4124)));
evalcond[2]=((((-1.0)*r12*x4123))+(((-1.0)*x4121))+(((-1.0)*r10*x4126))+((r11*x4124)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst110*r20*x4123))+((r22*x4117))+((x4118*x4120)));
evalcond[4]=((((-1.0)*gconst110*r00*x4123))+((cj0*x4119))+((r02*x4117))+(((-1.0)*x4121*x4122))+((r01*x4125)));
evalcond[5]=(((sj0*x4119))+((r12*x4117))+(((-1.0)*gconst110*r10*x4123))+(((-1.0)*sj0*x4122))+((r11*x4125)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4127=IKPowWithIntegerCheck(IKsign((((gconst109*r00))+((gconst110*r01)))),-1);
if(!x4127.valid){
continue;
}
CheckValue<IkReal> x4128 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst109*r21))+(((-1.0)*cj0*gconst110*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4128.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4127.value)))+(x4128.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4129=IKsin(j4);
IkReal x4130=IKcos(j4);
IkReal x4131=(cj1*cj2);
IkReal x4132=(gconst109*r21);
IkReal x4133=((1.0)*cj0);
IkReal x4134=(sj1*sj2);
IkReal x4135=((1.0)*x4130);
IkReal x4136=(gconst109*x4129);
IkReal x4137=(gconst109*x4130);
IkReal x4138=((1.0)*gconst110*x4129);
evalcond[0]=((((-1.0)*r20*x4138))+((x4129*x4132))+(((-1.0)*r22*x4135)));
evalcond[1]=(sj0+((r01*x4136))+(((-1.0)*r02*x4135))+(((-1.0)*r00*x4138)));
evalcond[2]=(((r11*x4136))+(((-1.0)*r12*x4135))+(((-1.0)*x4133))+(((-1.0)*r10*x4138)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*gconst110*r20*x4135))+((cj1*sj2))+((x4130*x4132))+((r22*x4129)));
evalcond[4]=(((r02*x4129))+((r01*x4137))+(((-1.0)*x4133*x4134))+((cj0*x4131))+(((-1.0)*gconst110*r00*x4135)));
evalcond[5]=(((r12*x4129))+(((-1.0)*sj0*x4134))+((r11*x4137))+((sj0*x4131))+(((-1.0)*gconst110*r10*x4135)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4140 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x4140)==0){
continue;
}
IkReal x4139=pow(x4140,-0.5);
CheckValue<IkReal> x4141 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x4141.valid){
continue;
}
IkReal gconst111=((3.14159265358979)+(((-1.0)*(x4141.value))));
IkReal gconst112=((1.0)*r11*x4139);
IkReal gconst113=((-1.0)*r10*x4139);
CheckValue<IkReal> x4142 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x4142.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x4142.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x4145 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x4145.valid){
continue;
}
IkReal x4143=((1.0)*(x4145.value));
IkReal x4144=x4139;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x4143)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x4143)));
IkReal gconst112=((1.0)*r11*x4144);
IkReal gconst113=((-1.0)*r10*x4144);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x4148 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x4148.valid){
continue;
}
IkReal x4146=((1.0)*(x4148.value));
IkReal x4147=x4139;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x4146)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x4146)));
IkReal gconst112=((1.0)*r11*x4147);
IkReal gconst113=((-1.0)*r10*x4147);
IkReal x4149=r12*r12;
IkReal x4150=(cj0*r02);
IkReal x4151=x4139;
IkReal x4152=(sj0*x4151);
j4eval[0]=((IKabs((x4150+((r12*sj0)))))+(IKabs(((((-1.0)*x4152))+((x4149*x4152))+((r12*x4150*x4151))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x4155 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x4155.valid){
continue;
}
IkReal x4153=((1.0)*(x4155.value));
IkReal x4154=x4139;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x4153)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x4153)));
IkReal gconst112=((1.0)*r11*x4154);
IkReal gconst113=((-1.0)*r10*x4154);
IkReal x4156=(cj1*sj2);
IkReal x4157=(cj2*sj1);
IkReal x4158=((1.0)+(((-1.0)*(r12*r12))));
CheckValue<IkReal> x4164=IKPowWithIntegerCheck(x4158,-1);
if(!x4164.valid){
continue;
}
IkReal x4159=x4164.value;
IkReal x4160=((1.0)*x4159);
IkReal x4161=x4139;
IkReal x4162=(r12*r22*x4161);
IkReal x4163=((((-1.0)*x4160*(r10*r10)*(r20*r20)))+(((-1.0)*(r22*r22)))+(((-1.0)*x4160*(r11*r11)*(r21*r21)))+(((-2.0)*r10*r11*r20*r21*x4159)));
j4eval[0]=x4163;
j4eval[1]=IKsign(x4163);
j4eval[2]=((IKabs((((r22*x4156))+((r22*x4157)))))+(IKabs((((x4157*x4162))+((x4156*x4162))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4165=(gconst113*r20);
IkReal x4166=(cj1*sj2);
IkReal x4167=(cj2*sj1);
IkReal x4168=(gconst112*r21);
CheckValue<IkReal> x4169 = IKatan2WithCheck(IkReal((((r22*x4167))+((r22*x4166)))),IkReal((((x4167*x4168))+((x4166*x4168))+(((-1.0)*x4165*x4166))+(((-1.0)*x4165*x4167)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4169.valid){
continue;
}
CheckValue<IkReal> x4170=IKPowWithIntegerCheck(IKsign(((((2.0)*x4165*x4168))+(((-1.0)*(x4168*x4168)))+(((-1.0)*(r22*r22)))+(((-1.0)*(x4165*x4165))))),-1);
if(!x4170.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4169.value)+(((1.5707963267949)*(x4170.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4171=IKsin(j4);
IkReal x4172=IKcos(j4);
IkReal x4173=(cj1*cj2);
IkReal x4174=(gconst113*r20);
IkReal x4175=(gconst112*r21);
IkReal x4176=(gconst113*r00);
IkReal x4177=((1.0)*cj0);
IkReal x4178=(gconst113*r10);
IkReal x4179=(sj1*sj2);
IkReal x4180=((1.0)*x4172);
IkReal x4181=((1.0)*x4171);
IkReal x4182=(gconst112*x4172);
IkReal x4183=(gconst112*x4171);
evalcond[0]=((((-1.0)*x4174*x4181))+((x4171*x4175))+(((-1.0)*r22*x4180)));
evalcond[1]=(sj0+(((-1.0)*r02*x4180))+(((-1.0)*x4176*x4181))+((r01*x4183)));
evalcond[2]=((((-1.0)*r12*x4180))+(((-1.0)*x4177))+((r11*x4183))+(((-1.0)*x4178*x4181)));
evalcond[3]=(((cj2*sj1))+((r22*x4171))+((cj1*sj2))+(((-1.0)*x4174*x4180))+((x4172*x4175)));
evalcond[4]=((((-1.0)*x4177*x4179))+((cj0*x4173))+(((-1.0)*x4176*x4180))+((r01*x4182))+((r02*x4171)));
evalcond[5]=(((r12*x4171))+((r11*x4182))+((sj0*x4173))+(((-1.0)*sj0*x4179))+(((-1.0)*x4178*x4180)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4184=((1.0)*gconst113);
CheckValue<IkReal> x4185=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x4184))+(((-1.0)*gconst112*r20)))),-1);
if(!x4185.valid){
continue;
}
CheckValue<IkReal> x4186 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((cj0*gconst112*r01))+(((-1.0)*cj0*r00*x4184))+(((-1.0)*r10*sj0*x4184))+((gconst112*r11*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4186.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4185.value)))+(x4186.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4187=IKsin(j4);
IkReal x4188=IKcos(j4);
IkReal x4189=(cj1*cj2);
IkReal x4190=(gconst113*r20);
IkReal x4191=(gconst112*r21);
IkReal x4192=(gconst113*r00);
IkReal x4193=((1.0)*cj0);
IkReal x4194=(gconst113*r10);
IkReal x4195=(sj1*sj2);
IkReal x4196=((1.0)*x4188);
IkReal x4197=((1.0)*x4187);
IkReal x4198=(gconst112*x4188);
IkReal x4199=(gconst112*x4187);
evalcond[0]=(((x4187*x4191))+(((-1.0)*x4190*x4197))+(((-1.0)*r22*x4196)));
evalcond[1]=(sj0+(((-1.0)*r02*x4196))+((r01*x4199))+(((-1.0)*x4192*x4197)));
evalcond[2]=((((-1.0)*r12*x4196))+(((-1.0)*x4194*x4197))+((r11*x4199))+(((-1.0)*x4193)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r22*x4187))+((x4188*x4191))+(((-1.0)*x4190*x4196)));
evalcond[4]=(((r02*x4187))+(((-1.0)*x4193*x4195))+((r01*x4198))+(((-1.0)*x4192*x4196))+((cj0*x4189)));
evalcond[5]=(((r12*x4187))+(((-1.0)*x4194*x4196))+((r11*x4198))+((sj0*x4189))+(((-1.0)*sj0*x4195)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4200=IKPowWithIntegerCheck(IKsign((((gconst112*r00))+((gconst113*r01)))),-1);
if(!x4200.valid){
continue;
}
CheckValue<IkReal> x4201 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*gconst113*r20))+((cj0*gconst112*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4201.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4200.value)))+(x4201.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4202=IKsin(j4);
IkReal x4203=IKcos(j4);
IkReal x4204=(cj1*cj2);
IkReal x4205=(gconst113*r20);
IkReal x4206=(gconst112*r21);
IkReal x4207=(gconst113*r00);
IkReal x4208=((1.0)*cj0);
IkReal x4209=(gconst113*r10);
IkReal x4210=(sj1*sj2);
IkReal x4211=((1.0)*x4203);
IkReal x4212=((1.0)*x4202);
IkReal x4213=(gconst112*x4203);
IkReal x4214=(gconst112*x4202);
evalcond[0]=((((-1.0)*x4205*x4212))+(((-1.0)*r22*x4211))+((x4202*x4206)));
evalcond[1]=(sj0+(((-1.0)*r02*x4211))+(((-1.0)*x4207*x4212))+((r01*x4214)));
evalcond[2]=(((r11*x4214))+(((-1.0)*r12*x4211))+(((-1.0)*x4208))+(((-1.0)*x4209*x4212)));
evalcond[3]=(((cj2*sj1))+((r22*x4202))+((cj1*sj2))+(((-1.0)*x4205*x4211))+((x4203*x4206)));
evalcond[4]=(((cj0*x4204))+((r02*x4202))+(((-1.0)*x4207*x4211))+(((-1.0)*x4208*x4210))+((r01*x4213)));
evalcond[5]=(((r11*x4213))+((sj0*x4204))+(((-1.0)*sj0*x4210))+(((-1.0)*x4209*x4211))+((r12*x4202)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x4215=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x4215;
j4eval[1]=IKsign(x4215);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x4216=((1.0)*cj5);
IkReal x4217=((((-1.0)*r21*x4216))+(((-1.0)*r20*sj5)));
j4eval[0]=x4217;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x4216))))));
j4eval[2]=IKsign(x4217);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x4218=cj5*cj5;
IkReal x4219=r11*r11;
IkReal x4220=(r11*sj5);
IkReal x4221=(cj5*r10);
IkReal x4222=((r12*r12)+((x4218*(r10*r10)))+(((-1.0)*x4218*x4219))+x4219+(((-2.0)*x4220*x4221)));
j4eval[0]=x4222;
j4eval[1]=IKsign(x4222);
j4eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*x4221))+x4220))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4223=cj5*cj5;
IkReal x4224=r11*r11;
IkReal x4225=(cj5*r10);
IkReal x4226=(r11*sj5);
CheckValue<IkReal> x4227 = IKatan2WithCheck(IkReal(((((-1.0)*x4225))+x4226)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x4227.valid){
continue;
}
CheckValue<IkReal> x4228=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-1.0)*x4223*x4224))+x4224+((x4223*(r10*r10)))+(((-2.0)*x4225*x4226)))),-1);
if(!x4228.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4227.value)+(((1.5707963267949)*(x4228.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4229=IKcos(j4);
IkReal x4230=IKsin(j4);
IkReal x4231=(cj5*r00);
IkReal x4232=(cj5*r10);
IkReal x4233=(r21*sj5);
IkReal x4234=(cj5*r20);
IkReal x4235=((1.0)*x4229);
IkReal x4236=((1.0)*x4230);
IkReal x4237=(sj5*x4230);
IkReal x4238=(sj5*x4229);
evalcond[0]=(((r12*x4230))+(((-1.0)*x4232*x4235))+((r11*x4238)));
evalcond[1]=(((x4230*x4233))+(((-1.0)*r22*x4235))+(((-1.0)*x4234*x4236)));
evalcond[2]=((((-1.0)*x4231*x4236))+((r01*x4237))+(((-1.0)*r02*x4235)));
evalcond[3]=((-1.0)+(((-1.0)*x4232*x4236))+(((-1.0)*r12*x4235))+((r11*x4237)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r22*x4230))+((x4229*x4233))+(((-1.0)*x4234*x4235)));
evalcond[5]=((((-1.0)*x4231*x4235))+((r01*x4238))+(((-1.0)*sj1*sj2))+((r02*x4230))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4239=((1.0)*cj5);
CheckValue<IkReal> x4240=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x4239))+(((-1.0)*r20*sj5)))),-1);
if(!x4240.valid){
continue;
}
CheckValue<IkReal> x4241 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x4239)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4241.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4240.value)))+(x4241.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4242=IKcos(j4);
IkReal x4243=IKsin(j4);
IkReal x4244=(cj5*r00);
IkReal x4245=(cj5*r10);
IkReal x4246=(r21*sj5);
IkReal x4247=(cj5*r20);
IkReal x4248=((1.0)*x4242);
IkReal x4249=((1.0)*x4243);
IkReal x4250=(sj5*x4243);
IkReal x4251=(sj5*x4242);
evalcond[0]=(((r11*x4251))+((r12*x4243))+(((-1.0)*x4245*x4248)));
evalcond[1]=((((-1.0)*x4247*x4249))+(((-1.0)*r22*x4248))+((x4243*x4246)));
evalcond[2]=((((-1.0)*x4244*x4249))+((r01*x4250))+(((-1.0)*r02*x4248)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x4248))+((r11*x4250))+(((-1.0)*x4245*x4249)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x4247*x4248))+((cj1*sj2))+((r22*x4243))+((x4242*x4246)));
evalcond[5]=((((-1.0)*x4244*x4248))+(((-1.0)*sj1*sj2))+((r01*x4251))+((r02*x4243))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4252 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4252.valid){
continue;
}
CheckValue<IkReal> x4253=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x4253.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4252.value)+(((1.5707963267949)*(x4253.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4254=IKcos(j4);
IkReal x4255=IKsin(j4);
IkReal x4256=(cj5*r00);
IkReal x4257=(cj5*r10);
IkReal x4258=(r21*sj5);
IkReal x4259=(cj5*r20);
IkReal x4260=((1.0)*x4254);
IkReal x4261=((1.0)*x4255);
IkReal x4262=(sj5*x4255);
IkReal x4263=(sj5*x4254);
evalcond[0]=(((r11*x4263))+((r12*x4255))+(((-1.0)*x4257*x4260)));
evalcond[1]=((((-1.0)*x4259*x4261))+(((-1.0)*r22*x4260))+((x4255*x4258)));
evalcond[2]=(((r01*x4262))+(((-1.0)*x4256*x4261))+(((-1.0)*r02*x4260)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x4260))+((r11*x4262))+(((-1.0)*x4257*x4261)));
evalcond[4]=(((cj2*sj1))+((r22*x4255))+((cj1*sj2))+(((-1.0)*x4259*x4260))+((x4254*x4258)));
evalcond[5]=(((r01*x4263))+((r02*x4255))+(((-1.0)*x4256*x4260))+(((-1.0)*sj1*sj2))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x4264=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x4264;
j4eval[1]=IKsign(x4264);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x4265=((1.0)*cj5);
IkReal x4266=((((-1.0)*r00*sj5))+(((-1.0)*r01*x4265)));
j4eval[0]=x4266;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x4265)))))+(IKabs(r22)));
j4eval[2]=IKsign(x4266);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x4267=cj5*cj5;
IkReal x4268=r11*r11;
IkReal x4269=(cj5*r10);
IkReal x4270=(r11*sj5);
IkReal x4271=(((x4267*x4268))+(((-1.0)*(r12*r12)))+(((2.0)*x4269*x4270))+(((-1.0)*x4268))+(((-1.0)*x4267*(r10*r10))));
j4eval[0]=x4271;
j4eval[1]=IKsign(x4271);
j4eval[2]=((IKabs((x4270+(((-1.0)*x4269)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4272=cj5*cj5;
IkReal x4273=r11*r11;
IkReal x4274=(cj5*r10);
IkReal x4275=(r11*sj5);
CheckValue<IkReal> x4276=IKPowWithIntegerCheck(IKsign(((((-1.0)*x4272*(r10*r10)))+(((-1.0)*(r12*r12)))+(((2.0)*x4274*x4275))+((x4272*x4273))+(((-1.0)*x4273)))),-1);
if(!x4276.valid){
continue;
}
CheckValue<IkReal> x4277 = IKatan2WithCheck(IkReal((x4275+(((-1.0)*x4274)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x4277.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4276.value)))+(x4277.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4278=IKcos(j4);
IkReal x4279=IKsin(j4);
IkReal x4280=(cj5*r00);
IkReal x4281=(cj5*r10);
IkReal x4282=(r21*sj5);
IkReal x4283=(cj5*r20);
IkReal x4284=((1.0)*x4278);
IkReal x4285=((1.0)*x4279);
IkReal x4286=(sj5*x4279);
IkReal x4287=(sj5*x4278);
evalcond[0]=(((r11*x4287))+((r12*x4279))+(((-1.0)*x4281*x4284)));
evalcond[1]=((((-1.0)*x4283*x4285))+((x4279*x4282))+(((-1.0)*r22*x4284)));
evalcond[2]=((((-1.0)*x4280*x4285))+(((-1.0)*r02*x4284))+((r01*x4286)));
evalcond[3]=((1.0)+((r11*x4286))+(((-1.0)*r12*x4284))+(((-1.0)*x4281*x4285)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x4283*x4284))+((x4278*x4282))+((cj1*sj2))+((r22*x4279)));
evalcond[5]=(((r02*x4279))+(((-1.0)*x4280*x4284))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r01*x4287)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4288=((1.0)*cj5);
CheckValue<IkReal> x4289=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x4288))+(((-1.0)*r00*sj5)))),-1);
if(!x4289.valid){
continue;
}
CheckValue<IkReal> x4290 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x4288))+((r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4290.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4289.value)))+(x4290.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4291=IKcos(j4);
IkReal x4292=IKsin(j4);
IkReal x4293=(cj5*r00);
IkReal x4294=(cj5*r10);
IkReal x4295=(r21*sj5);
IkReal x4296=(cj5*r20);
IkReal x4297=((1.0)*x4291);
IkReal x4298=((1.0)*x4292);
IkReal x4299=(sj5*x4292);
IkReal x4300=(sj5*x4291);
evalcond[0]=(((r11*x4300))+(((-1.0)*x4294*x4297))+((r12*x4292)));
evalcond[1]=((((-1.0)*r22*x4297))+((x4292*x4295))+(((-1.0)*x4296*x4298)));
evalcond[2]=(((r01*x4299))+(((-1.0)*x4293*x4298))+(((-1.0)*r02*x4297)));
evalcond[3]=((1.0)+(((-1.0)*x4294*x4298))+(((-1.0)*r12*x4297))+((r11*x4299)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x4296*x4297))+((cj1*sj2))+((x4291*x4295))+((r22*x4292)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x4293*x4297))+((r01*x4300))+((r02*x4292)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4301=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x4301.valid){
continue;
}
CheckValue<IkReal> x4302 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4302.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4301.value)))+(x4302.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4303=IKcos(j4);
IkReal x4304=IKsin(j4);
IkReal x4305=(cj5*r00);
IkReal x4306=(cj5*r10);
IkReal x4307=(r21*sj5);
IkReal x4308=(cj5*r20);
IkReal x4309=((1.0)*x4303);
IkReal x4310=((1.0)*x4304);
IkReal x4311=(sj5*x4304);
IkReal x4312=(sj5*x4303);
evalcond[0]=(((r12*x4304))+((r11*x4312))+(((-1.0)*x4306*x4309)));
evalcond[1]=((((-1.0)*r22*x4309))+((x4304*x4307))+(((-1.0)*x4308*x4310)));
evalcond[2]=((((-1.0)*x4305*x4310))+((r01*x4311))+(((-1.0)*r02*x4309)));
evalcond[3]=((1.0)+(((-1.0)*r12*x4309))+(((-1.0)*x4306*x4310))+((r11*x4311)));
evalcond[4]=(((cj2*sj1))+((r22*x4304))+((cj1*sj2))+((x4303*x4307))+(((-1.0)*x4308*x4309)));
evalcond[5]=(((r02*x4304))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r01*x4312))+(((-1.0)*x4305*x4309)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x4313=((-1.0)*py);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x4313);
rxp0_2=(py*r00);
rxp1_0=(r21*x4313);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4314=((-1.0)*py);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x4314);
rxp0_2=(py*r00);
rxp1_0=(r21*x4314);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4315=((-1.0)*py);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x4315);
rxp0_2=(py*r00);
rxp1_0=(r21*x4315);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=(((r01*sj5))+(((-1.0)*cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x4318=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*cj5*r00))),-1);
if(!x4318.valid){
continue;
}
IkReal x4316=x4318.value;
IkReal x4317=(cj0*x4316);
cj4array[0]=(((sj1*sj2*x4317))+(((-1.0)*cj1*cj2*x4317)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x4319=IKsin(j4);
IkReal x4320=IKcos(j4);
IkReal x4321=(r21*sj5);
IkReal x4322=((1.0)*x4320);
IkReal x4323=((1.0)*cj5*x4319);
evalcond[0]=(r12*x4319);
evalcond[1]=((((-1.0)*r12*x4322))+(((-1.0)*cj0)));
evalcond[2]=((((-1.0)*r20*x4323))+((x4319*x4321)));
evalcond[3]=((((-1.0)*r00*x4323))+((r01*sj5*x4319)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x4320*x4321))+(((-1.0)*cj5*r20*x4322)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x4326=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x4326.valid){
continue;
}
IkReal x4324=x4326.value;
IkReal x4325=((1.0)*x4324);
cj4array[0]=((((-1.0)*cj2*sj1*x4325))+(((-1.0)*cj1*sj2*x4325)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x4327=IKsin(j4);
IkReal x4328=IKcos(j4);
IkReal x4329=((1.0)*cj0);
IkReal x4330=(r01*sj5);
IkReal x4331=((1.0)*cj5*r00);
evalcond[0]=(r12*x4327);
evalcond[1]=((((-1.0)*x4329))+(((-1.0)*r12*x4328)));
evalcond[2]=((((-1.0)*cj5*r20*x4327))+((r21*sj5*x4327)));
evalcond[3]=(((x4327*x4330))+(((-1.0)*x4327*x4331)));
evalcond[4]=((((-1.0)*sj1*sj2*x4329))+((cj0*cj1*cj2))+((x4328*x4330))+(((-1.0)*x4328*x4331)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x4332=IKPowWithIntegerCheck(r12,-1);
if(!x4332.valid){
continue;
}
cj4array[0]=((-1.0)*cj0*(x4332.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x4333=IKsin(j4);
IkReal x4334=IKcos(j4);
IkReal x4335=((1.0)*cj5*r00);
IkReal x4336=(sj5*x4334);
IkReal x4337=(sj5*x4333);
IkReal x4338=((1.0)*cj5*r20);
evalcond[0]=(r12*x4333);
evalcond[1]=((((-1.0)*x4333*x4338))+((r21*x4337)));
evalcond[2]=(((r01*x4337))+(((-1.0)*x4333*x4335)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x4334*x4338))+((r21*x4336))+((cj1*sj2)));
evalcond[4]=(((r01*x4336))+(((-1.0)*x4334*x4335))+(((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4339=((1.0)*cj5);
CheckValue<IkReal> x4340 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((r11*sj0*sj5))+(((-1.0)*r10*sj0*x4339))+((cj0*r01*sj5))+(((-1.0)*cj0*r00*x4339)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4340.valid){
continue;
}
CheckValue<IkReal> x4341=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x4339))+(((-1.0)*r20*sj5)))),-1);
if(!x4341.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4340.value)+(((1.5707963267949)*(x4341.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4342=IKsin(j4);
IkReal x4343=IKcos(j4);
IkReal x4344=(cj5*r00);
IkReal x4345=(cj1*cj2);
IkReal x4346=(cj5*r10);
IkReal x4347=(r21*sj5);
IkReal x4348=(cj5*r20);
IkReal x4349=((1.0)*x4343);
IkReal x4350=((1.0)*x4342);
IkReal x4351=(sj5*x4342);
IkReal x4352=(sj5*x4343);
IkReal x4353=((1.0)*sj1*sj2);
evalcond[0]=(((x4342*x4347))+(((-1.0)*r22*x4349))+(((-1.0)*x4348*x4350)));
evalcond[1]=((((-1.0)*r02*x4349))+sj0+(((-1.0)*x4344*x4350))+((r01*x4351)));
evalcond[2]=((((-1.0)*r12*x4349))+((r11*x4351))+(((-1.0)*cj0))+(((-1.0)*x4346*x4350)));
evalcond[3]=(((cj2*sj1))+((x4343*x4347))+((cj1*sj2))+((r22*x4342))+(((-1.0)*x4348*x4349)));
evalcond[4]=((((-1.0)*x4344*x4349))+(((-1.0)*cj0*x4353))+((r02*x4342))+((cj0*x4345))+((r01*x4352)));
evalcond[5]=((((-1.0)*x4346*x4349))+(((-1.0)*sj0*x4353))+((r12*x4342))+((sj0*x4345))+((r11*x4352)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4354=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x4354.valid){
continue;
}
CheckValue<IkReal> x4355 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4355.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4354.value)))+(x4355.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4356=IKsin(j4);
IkReal x4357=IKcos(j4);
IkReal x4358=(cj5*r00);
IkReal x4359=(cj1*cj2);
IkReal x4360=(cj5*r10);
IkReal x4361=(r21*sj5);
IkReal x4362=(cj5*r20);
IkReal x4363=((1.0)*x4357);
IkReal x4364=((1.0)*x4356);
IkReal x4365=(sj5*x4356);
IkReal x4366=(sj5*x4357);
IkReal x4367=((1.0)*sj1*sj2);
evalcond[0]=((((-1.0)*r22*x4363))+(((-1.0)*x4362*x4364))+((x4356*x4361)));
evalcond[1]=(sj0+(((-1.0)*x4358*x4364))+((r01*x4365))+(((-1.0)*r02*x4363)));
evalcond[2]=((((-1.0)*x4360*x4364))+((r11*x4365))+(((-1.0)*r12*x4363))+(((-1.0)*cj0)));
evalcond[3]=(((cj2*sj1))+((x4357*x4361))+((cj1*sj2))+((r22*x4356))+(((-1.0)*x4362*x4363)));
evalcond[4]=(((cj0*x4359))+(((-1.0)*x4358*x4363))+((r01*x4366))+((r02*x4356))+(((-1.0)*cj0*x4367)));
evalcond[5]=((((-1.0)*x4360*x4363))+((r11*x4366))+(((-1.0)*sj0*x4367))+((r12*x4356))+((sj0*x4359)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4368=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x4368.valid){
continue;
}
CheckValue<IkReal> x4369 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4369.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4368.value)))+(x4369.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4370=IKsin(j4);
IkReal x4371=IKcos(j4);
IkReal x4372=(cj5*r00);
IkReal x4373=(cj1*cj2);
IkReal x4374=(cj5*r10);
IkReal x4375=(r21*sj5);
IkReal x4376=(cj5*r20);
IkReal x4377=((1.0)*x4371);
IkReal x4378=((1.0)*x4370);
IkReal x4379=(sj5*x4370);
IkReal x4380=(sj5*x4371);
IkReal x4381=((1.0)*sj1*sj2);
evalcond[0]=(((x4370*x4375))+(((-1.0)*r22*x4377))+(((-1.0)*x4376*x4378)));
evalcond[1]=(sj0+((r01*x4379))+(((-1.0)*r02*x4377))+(((-1.0)*x4372*x4378)));
evalcond[2]=(((r11*x4379))+(((-1.0)*x4374*x4378))+(((-1.0)*r12*x4377))+(((-1.0)*cj0)));
evalcond[3]=(((x4371*x4375))+((cj2*sj1))+((r22*x4370))+((cj1*sj2))+(((-1.0)*x4376*x4377)));
evalcond[4]=(((r02*x4370))+(((-1.0)*cj0*x4381))+((cj0*x4373))+((r01*x4380))+(((-1.0)*x4372*x4377)));
evalcond[5]=(((sj0*x4373))+((r12*x4370))+(((-1.0)*x4374*x4377))+(((-1.0)*sj0*x4381))+((r11*x4380)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x4382=((((-1.0)*sj1*sj2))+((cj1*cj2)));
j0eval[0]=x4382;
j0eval[1]=IKsign(x4382);
j0eval[2]=((IKabs((((r00*sj5))+((cj5*r01)))))+(IKabs((((cj5*r11))+((r10*sj5))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x4383=r21*r21;
IkReal x4384=cj5*cj5;
IkReal x4385=(sj1*sj2);
IkReal x4386=(r21*sj5);
IkReal x4387=(cj5*r20);
IkReal x4388=(cj1*cj2);
IkReal x4389=((((-1.0)*x4383))+((x4383*x4384))+(((2.0)*x4386*x4387))+(((-1.0)*(r22*r22)))+(((-1.0)*x4384*(r20*r20))));
j4eval[0]=x4389;
j4eval[1]=((IKabs((((x4387*x4388))+(((-1.0)*x4385*x4387))+(((-1.0)*x4386*x4388))+((x4385*x4386)))))+(IKabs((((r22*x4385))+(((-1.0)*r22*x4388))))));
j4eval[2]=IKsign(x4389);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j0eval[0]=((((-1.0)*sj1*sj2))+((cj1*cj2)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((2.01887566680345)*px))+(((-3.51251538777185)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-2.01887566680345)*py))+(((-3.51251538777185)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.01887566680345)*px))+(((-3.51251538777185)*py))))+IKsqr(((((-2.01887566680345)*py))+(((-3.51251538777185)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((2.01887566680345)*px))+(((-3.51251538777185)*py))), ((((-2.01887566680345)*py))+(((-3.51251538777185)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x4390=IKcos(j0);
IkReal x4391=IKsin(j0);
evalcond[0]=((((-0.214)*x4390))+(((-1.0)*px))+(((0.123)*x4391)));
evalcond[1]=((((-0.214)*x4391))+(((-0.123)*x4390))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x4392=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x4392;
j4eval[1]=IKsign(x4392);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x4393=((1.0)*cj5);
IkReal x4394=((((-1.0)*r11*x4393))+(((-1.0)*r10*sj5)));
j4eval[0]=x4394;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x4393)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x4394);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x4395=cj5*cj5;
IkReal x4396=((1.0)*r20);
IkReal x4397=(r01*r21);
IkReal x4398=(r21*sj5);
IkReal x4399=(((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+(((-1.0)*x4397))+((x4395*x4397))+(((-1.0)*r00*x4395*x4396))+((cj5*r00*x4398)));
j4eval[0]=x4399;
j4eval[1]=((IKabs((((cj0*x4398))+(((-1.0)*cj0*cj5*x4396)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x4399);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4400=cj5*cj5;
IkReal x4401=((1.0)*r20);
IkReal x4402=(r01*r21);
IkReal x4403=(r21*sj5);
CheckValue<IkReal> x4404=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+((x4400*x4402))+((cj5*r00*x4403))+(((-1.0)*x4402))+(((-1.0)*r00*x4400*x4401)))),-1);
if(!x4404.valid){
continue;
}
CheckValue<IkReal> x4405 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*cj5*x4401))+((cj0*x4403)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4405.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4404.value)))+(x4405.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4406=IKcos(j4);
IkReal x4407=IKsin(j4);
IkReal x4408=(cj5*r00);
IkReal x4409=(cj5*r10);
IkReal x4410=(cj5*r20);
IkReal x4411=((1.0)*x4406);
IkReal x4412=((1.0)*x4407);
IkReal x4413=(sj5*x4406);
IkReal x4414=(sj5*x4407);
evalcond[0]=(((r21*x4413))+((r22*x4407))+(((-1.0)*x4410*x4411)));
evalcond[1]=(((r21*x4414))+(((-1.0)*x4410*x4412))+(((-1.0)*r22*x4411)));
evalcond[2]=(cj0+(((-1.0)*x4408*x4411))+((r01*x4413))+((r02*x4407)));
evalcond[3]=((((-1.0)*x4409*x4411))+((r11*x4413))+sj0+((r12*x4407)));
evalcond[4]=(sj0+(((-1.0)*x4408*x4412))+((r01*x4414))+(((-1.0)*r02*x4411)));
evalcond[5]=((((-1.0)*x4409*x4412))+((r11*x4414))+(((-1.0)*r12*x4411))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4415=((1.0)*cj5);
CheckValue<IkReal> x4416=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x4415)))),-1);
if(!x4416.valid){
continue;
}
CheckValue<IkReal> x4417 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r20*x4415))+((cj0*r21*sj5)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x4417.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4416.value)))+(x4417.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4418=IKcos(j4);
IkReal x4419=IKsin(j4);
IkReal x4420=(cj5*r00);
IkReal x4421=(cj5*r10);
IkReal x4422=(cj5*r20);
IkReal x4423=((1.0)*x4418);
IkReal x4424=((1.0)*x4419);
IkReal x4425=(sj5*x4418);
IkReal x4426=(sj5*x4419);
evalcond[0]=((((-1.0)*x4422*x4423))+((r22*x4419))+((r21*x4425)));
evalcond[1]=((((-1.0)*x4422*x4424))+(((-1.0)*r22*x4423))+((r21*x4426)));
evalcond[2]=((((-1.0)*x4420*x4423))+cj0+((r01*x4425))+((r02*x4419)));
evalcond[3]=(sj0+((r12*x4419))+(((-1.0)*x4421*x4423))+((r11*x4425)));
evalcond[4]=((((-1.0)*x4420*x4424))+sj0+((r01*x4426))+(((-1.0)*r02*x4423)));
evalcond[5]=((((-1.0)*x4421*x4424))+(((-1.0)*r12*x4423))+((r11*x4426))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4427 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x4427.valid){
continue;
}
CheckValue<IkReal> x4428=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x4428.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4427.value)+(((1.5707963267949)*(x4428.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4429=IKcos(j4);
IkReal x4430=IKsin(j4);
IkReal x4431=(cj5*r00);
IkReal x4432=(cj5*r10);
IkReal x4433=(cj5*r20);
IkReal x4434=((1.0)*x4429);
IkReal x4435=((1.0)*x4430);
IkReal x4436=(sj5*x4429);
IkReal x4437=(sj5*x4430);
evalcond[0]=(((r22*x4430))+(((-1.0)*x4433*x4434))+((r21*x4436)));
evalcond[1]=((((-1.0)*x4433*x4435))+(((-1.0)*r22*x4434))+((r21*x4437)));
evalcond[2]=(cj0+(((-1.0)*x4431*x4434))+((r02*x4430))+((r01*x4436)));
evalcond[3]=(sj0+(((-1.0)*x4432*x4434))+((r12*x4430))+((r11*x4436)));
evalcond[4]=(sj0+(((-1.0)*r02*x4434))+(((-1.0)*x4431*x4435))+((r01*x4437)));
evalcond[5]=((((-1.0)*x4432*x4435))+(((-1.0)*r12*x4434))+((r11*x4437))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((3.51251538777185)*py))+(((2.01887566680345)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-2.01887566680345)*py))+(((3.51251538777185)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((3.51251538777185)*py))+(((2.01887566680345)*px))))+IKsqr(((((-2.01887566680345)*py))+(((3.51251538777185)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((3.51251538777185)*py))+(((2.01887566680345)*px))), ((((-2.01887566680345)*py))+(((3.51251538777185)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x4438=IKsin(j0);
IkReal x4439=IKcos(j0);
evalcond[0]=((((0.214)*x4439))+(((0.123)*x4438))+(((-1.0)*px)));
evalcond[1]=((((0.214)*x4438))+(((-0.123)*x4439))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x4440=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x4440;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x4440);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x4441=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x4441;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x4441);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x4442=((1.0)*cj5);
IkReal x4443=((((-1.0)*r00*sj5))+(((-1.0)*r01*x4442)));
j4eval[0]=x4443;
j4eval[1]=IKsign(x4443);
j4eval[2]=((IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x4442)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4444=((1.0)*cj5);
CheckValue<IkReal> x4445 = IKatan2WithCheck(IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x4444)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x4445.valid){
continue;
}
CheckValue<IkReal> x4446=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x4444)))),-1);
if(!x4446.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4445.value)+(((1.5707963267949)*(x4446.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4447=IKcos(j4);
IkReal x4448=IKsin(j4);
IkReal x4449=((1.0)*cj0);
IkReal x4450=(cj5*r00);
IkReal x4451=(cj5*r10);
IkReal x4452=(cj5*r20);
IkReal x4453=((1.0)*x4447);
IkReal x4454=((1.0)*x4448);
IkReal x4455=(sj5*x4447);
IkReal x4456=(sj5*x4448);
evalcond[0]=(((r21*x4455))+((r22*x4448))+(((-1.0)*x4452*x4453)));
evalcond[1]=(((r21*x4456))+(((-1.0)*r22*x4453))+(((-1.0)*x4452*x4454)));
evalcond[2]=(sj0+((r01*x4456))+(((-1.0)*r02*x4453))+(((-1.0)*x4450*x4454)));
evalcond[3]=(((r01*x4455))+(((-1.0)*x4449))+((r02*x4448))+(((-1.0)*x4450*x4453)));
evalcond[4]=((((-1.0)*sj0))+((r11*x4455))+((r12*x4448))+(((-1.0)*x4451*x4453)));
evalcond[5]=((((-1.0)*x4449))+(((-1.0)*r12*x4453))+((r11*x4456))+(((-1.0)*x4451*x4454)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4457 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x4457.valid){
continue;
}
CheckValue<IkReal> x4458=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x4458.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4457.value)+(((1.5707963267949)*(x4458.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4459=IKcos(j4);
IkReal x4460=IKsin(j4);
IkReal x4461=((1.0)*cj0);
IkReal x4462=(cj5*r00);
IkReal x4463=(cj5*r10);
IkReal x4464=(cj5*r20);
IkReal x4465=((1.0)*x4459);
IkReal x4466=((1.0)*x4460);
IkReal x4467=(sj5*x4459);
IkReal x4468=(sj5*x4460);
evalcond[0]=((((-1.0)*x4464*x4465))+((r22*x4460))+((r21*x4467)));
evalcond[1]=((((-1.0)*x4464*x4466))+(((-1.0)*r22*x4465))+((r21*x4468)));
evalcond[2]=(sj0+(((-1.0)*x4462*x4466))+((r01*x4468))+(((-1.0)*r02*x4465)));
evalcond[3]=((((-1.0)*x4462*x4465))+((r01*x4467))+(((-1.0)*x4461))+((r02*x4460)));
evalcond[4]=((((-1.0)*sj0))+(((-1.0)*x4463*x4465))+((r12*x4460))+((r11*x4467)));
evalcond[5]=((((-1.0)*x4463*x4466))+((r11*x4468))+(((-1.0)*x4461))+(((-1.0)*r12*x4465)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4469=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x4469.valid){
continue;
}
CheckValue<IkReal> x4470 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4470.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4469.value)))+(x4470.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4471=IKcos(j4);
IkReal x4472=IKsin(j4);
IkReal x4473=((1.0)*cj0);
IkReal x4474=(cj5*r00);
IkReal x4475=(cj5*r10);
IkReal x4476=(cj5*r20);
IkReal x4477=((1.0)*x4471);
IkReal x4478=((1.0)*x4472);
IkReal x4479=(sj5*x4471);
IkReal x4480=(sj5*x4472);
evalcond[0]=(((r21*x4479))+(((-1.0)*x4476*x4477))+((r22*x4472)));
evalcond[1]=(((r21*x4480))+(((-1.0)*x4476*x4478))+(((-1.0)*r22*x4477)));
evalcond[2]=(sj0+(((-1.0)*x4474*x4478))+((r01*x4480))+(((-1.0)*r02*x4477)));
evalcond[3]=((((-1.0)*x4473))+(((-1.0)*x4474*x4477))+((r02*x4472))+((r01*x4479)));
evalcond[4]=((((-1.0)*sj0))+(((-1.0)*x4475*x4477))+((r12*x4472))+((r11*x4479)));
evalcond[5]=((((-1.0)*x4473))+((r11*x4480))+(((-1.0)*r12*x4477))+(((-1.0)*x4475*x4478)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-2.04037896579128)*py))+(((0.549161078320192)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-0.549161078320192)*py))+(((-2.04037896579128)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.04037896579128)*py))+(((0.549161078320192)*px))))+IKsqr(((((-0.549161078320192)*py))+(((-2.04037896579128)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-2.04037896579128)*py))+(((0.549161078320192)*px))), ((((-0.549161078320192)*py))+(((-2.04037896579128)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x4481=IKsin(j0);
IkReal x4482=IKcos(j0);
evalcond[0]=((((-0.457)*x4482))+(((-1.0)*px))+(((0.123)*x4481)));
evalcond[1]=((((-0.457)*x4481))+(((-1.0)*py))+(((-0.123)*x4482)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x4483=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x4483;
j4eval[1]=IKsign(x4483);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x4484=((1.0)*cj5);
IkReal x4485=((((-1.0)*r11*x4484))+(((-1.0)*r10*sj5)));
j4eval[0]=x4485;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x4484)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x4485);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x4486=cj5*cj5;
IkReal x4487=((1.0)*r20);
IkReal x4488=(r01*r21);
IkReal x4489=(r21*sj5);
IkReal x4490=((((-1.0)*x4488))+((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+(((-1.0)*r00*x4486*x4487))+((cj5*r00*x4489))+((x4486*x4488)));
j4eval[0]=x4490;
j4eval[1]=((IKabs((((cj0*x4489))+(((-1.0)*cj0*cj5*x4487)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x4490);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4491=cj5*cj5;
IkReal x4492=((1.0)*r20);
IkReal x4493=(r01*r21);
IkReal x4494=(r21*sj5);
CheckValue<IkReal> x4495 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*x4494))+(((-1.0)*cj0*cj5*x4492)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4495.valid){
continue;
}
CheckValue<IkReal> x4496=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+(((-1.0)*x4493))+((cj5*r00*x4494))+(((-1.0)*r00*x4491*x4492))+((x4491*x4493)))),-1);
if(!x4496.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4495.value)+(((1.5707963267949)*(x4496.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4497=IKcos(j4);
IkReal x4498=IKsin(j4);
IkReal x4499=(cj5*r00);
IkReal x4500=(cj5*r10);
IkReal x4501=(cj5*r20);
IkReal x4502=((1.0)*x4497);
IkReal x4503=((1.0)*x4498);
IkReal x4504=(sj5*x4497);
IkReal x4505=(sj5*x4498);
evalcond[0]=(((r21*x4504))+((r22*x4498))+(((-1.0)*x4501*x4502)));
evalcond[1]=(((r21*x4505))+(((-1.0)*x4501*x4503))+(((-1.0)*r22*x4502)));
evalcond[2]=(cj0+((r02*x4498))+((r01*x4504))+(((-1.0)*x4499*x4502)));
evalcond[3]=(((r12*x4498))+sj0+((r11*x4504))+(((-1.0)*x4500*x4502)));
evalcond[4]=(sj0+(((-1.0)*r02*x4502))+((r01*x4505))+(((-1.0)*x4499*x4503)));
evalcond[5]=(((r11*x4505))+(((-1.0)*x4500*x4503))+(((-1.0)*r12*x4502))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4506=((1.0)*cj5);
CheckValue<IkReal> x4507 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x4506)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x4507.valid){
continue;
}
CheckValue<IkReal> x4508=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x4506)))),-1);
if(!x4508.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4507.value)+(((1.5707963267949)*(x4508.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4509=IKcos(j4);
IkReal x4510=IKsin(j4);
IkReal x4511=(cj5*r00);
IkReal x4512=(cj5*r10);
IkReal x4513=(cj5*r20);
IkReal x4514=((1.0)*x4509);
IkReal x4515=((1.0)*x4510);
IkReal x4516=(sj5*x4509);
IkReal x4517=(sj5*x4510);
evalcond[0]=((((-1.0)*x4513*x4514))+((r21*x4516))+((r22*x4510)));
evalcond[1]=((((-1.0)*x4513*x4515))+((r21*x4517))+(((-1.0)*r22*x4514)));
evalcond[2]=(((r02*x4510))+cj0+((r01*x4516))+(((-1.0)*x4511*x4514)));
evalcond[3]=(sj0+(((-1.0)*x4512*x4514))+((r11*x4516))+((r12*x4510)));
evalcond[4]=(sj0+(((-1.0)*r02*x4514))+((r01*x4517))+(((-1.0)*x4511*x4515)));
evalcond[5]=((((-1.0)*x4512*x4515))+(((-1.0)*r12*x4514))+((r11*x4517))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4518 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x4518.valid){
continue;
}
CheckValue<IkReal> x4519=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x4519.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4518.value)+(((1.5707963267949)*(x4519.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4520=IKcos(j4);
IkReal x4521=IKsin(j4);
IkReal x4522=(cj5*r00);
IkReal x4523=(cj5*r10);
IkReal x4524=(cj5*r20);
IkReal x4525=((1.0)*x4520);
IkReal x4526=((1.0)*x4521);
IkReal x4527=(sj5*x4520);
IkReal x4528=(sj5*x4521);
evalcond[0]=(((r21*x4527))+((r22*x4521))+(((-1.0)*x4524*x4525)));
evalcond[1]=(((r21*x4528))+(((-1.0)*r22*x4525))+(((-1.0)*x4524*x4526)));
evalcond[2]=(((r01*x4527))+cj0+((r02*x4521))+(((-1.0)*x4522*x4525)));
evalcond[3]=(((r11*x4527))+((r12*x4521))+sj0+(((-1.0)*x4523*x4525)));
evalcond[4]=(((r01*x4528))+sj0+(((-1.0)*r02*x4525))+(((-1.0)*x4522*x4526)));
evalcond[5]=((((-1.0)*r12*x4525))+((r11*x4528))+(((-1.0)*x4523*x4526))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((7.70194113963682)*px))+(((-1.81590482154039)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-7.70194113963682)*py))+(((-1.81590482154039)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((7.70194113963682)*px))+(((-1.81590482154039)*py))))+IKsqr(((((-7.70194113963682)*py))+(((-1.81590482154039)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((7.70194113963682)*px))+(((-1.81590482154039)*py))), ((((-7.70194113963682)*py))+(((-1.81590482154039)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x4529=IKsin(j0);
IkReal x4530=IKcos(j0);
evalcond[0]=((((-0.029)*x4530))+(((-1.0)*px))+(((0.123)*x4529)));
evalcond[1]=((((-0.029)*x4529))+(((-1.0)*py))+(((-0.123)*x4530)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x4531=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x4531;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x4531);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x4532=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x4532;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x4532);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x4533=((1.0)*cj5);
IkReal x4534=((((-1.0)*r01*x4533))+(((-1.0)*r00*sj5)));
j4eval[0]=x4534;
j4eval[1]=IKsign(x4534);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x4533))+((r21*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4535=((1.0)*cj5);
CheckValue<IkReal> x4536=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x4535))+(((-1.0)*r00*sj5)))),-1);
if(!x4536.valid){
continue;
}
CheckValue<IkReal> x4537 = IKatan2WithCheck(IkReal(((((-1.0)*r20*sj0*x4535))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x4537.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4536.value)))+(x4537.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4538=IKcos(j4);
IkReal x4539=IKsin(j4);
IkReal x4540=((1.0)*cj0);
IkReal x4541=(cj5*r00);
IkReal x4542=(cj5*r10);
IkReal x4543=(cj5*r20);
IkReal x4544=((1.0)*x4538);
IkReal x4545=((1.0)*x4539);
IkReal x4546=(sj5*x4538);
IkReal x4547=(sj5*x4539);
evalcond[0]=(((r22*x4539))+((r21*x4546))+(((-1.0)*x4543*x4544)));
evalcond[1]=((((-1.0)*r22*x4544))+((r21*x4547))+(((-1.0)*x4543*x4545)));
evalcond[2]=((((-1.0)*r02*x4544))+sj0+((r01*x4547))+(((-1.0)*x4541*x4545)));
evalcond[3]=(((r01*x4546))+(((-1.0)*x4541*x4544))+((r02*x4539))+(((-1.0)*x4540)));
evalcond[4]=((((-1.0)*sj0))+((r12*x4539))+(((-1.0)*x4542*x4544))+((r11*x4546)));
evalcond[5]=((((-1.0)*x4542*x4545))+(((-1.0)*r12*x4544))+((r11*x4547))+(((-1.0)*x4540)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4548 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x4548.valid){
continue;
}
CheckValue<IkReal> x4549=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x4549.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4548.value)+(((1.5707963267949)*(x4549.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4550=IKcos(j4);
IkReal x4551=IKsin(j4);
IkReal x4552=((1.0)*cj0);
IkReal x4553=(cj5*r00);
IkReal x4554=(cj5*r10);
IkReal x4555=(cj5*r20);
IkReal x4556=((1.0)*x4550);
IkReal x4557=((1.0)*x4551);
IkReal x4558=(sj5*x4550);
IkReal x4559=(sj5*x4551);
evalcond[0]=((((-1.0)*x4555*x4556))+((r22*x4551))+((r21*x4558)));
evalcond[1]=((((-1.0)*x4555*x4557))+((r21*x4559))+(((-1.0)*r22*x4556)));
evalcond[2]=(sj0+((r01*x4559))+(((-1.0)*x4553*x4557))+(((-1.0)*r02*x4556)));
evalcond[3]=(((r01*x4558))+(((-1.0)*x4553*x4556))+(((-1.0)*x4552))+((r02*x4551)));
evalcond[4]=((((-1.0)*sj0))+((r11*x4558))+((r12*x4551))+(((-1.0)*x4554*x4556)));
evalcond[5]=((((-1.0)*r12*x4556))+(((-1.0)*x4552))+((r11*x4559))+(((-1.0)*x4554*x4557)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4560=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x4560.valid){
continue;
}
CheckValue<IkReal> x4561 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4561.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4560.value)))+(x4561.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4562=IKcos(j4);
IkReal x4563=IKsin(j4);
IkReal x4564=((1.0)*cj0);
IkReal x4565=(cj5*r00);
IkReal x4566=(cj5*r10);
IkReal x4567=(cj5*r20);
IkReal x4568=((1.0)*x4562);
IkReal x4569=((1.0)*x4563);
IkReal x4570=(sj5*x4562);
IkReal x4571=(sj5*x4563);
evalcond[0]=((((-1.0)*x4567*x4568))+((r22*x4563))+((r21*x4570)));
evalcond[1]=((((-1.0)*x4567*x4569))+((r21*x4571))+(((-1.0)*r22*x4568)));
evalcond[2]=(sj0+(((-1.0)*r02*x4568))+((r01*x4571))+(((-1.0)*x4565*x4569)));
evalcond[3]=(((r02*x4563))+((r01*x4570))+(((-1.0)*x4565*x4568))+(((-1.0)*x4564)));
evalcond[4]=((((-1.0)*x4566*x4568))+(((-1.0)*sj0))+((r12*x4563))+((r11*x4570)));
evalcond[5]=((((-1.0)*x4566*x4569))+((r11*x4571))+(((-1.0)*r12*x4568))+(((-1.0)*x4564)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((3.51251538777185)*py))+(((2.01887566680345)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-2.01887566680345)*py))+(((3.51251538777185)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((3.51251538777185)*py))+(((2.01887566680345)*px))))+IKsqr(((((-2.01887566680345)*py))+(((3.51251538777185)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((3.51251538777185)*py))+(((2.01887566680345)*px))), ((((-2.01887566680345)*py))+(((3.51251538777185)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x4572=IKsin(j0);
IkReal x4573=IKcos(j0);
evalcond[0]=((((0.123)*x4572))+(((0.214)*x4573))+(((-1.0)*px)));
evalcond[1]=((((-0.123)*x4573))+(((0.214)*x4572))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x4574=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x4574;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x4574);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x4575=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x4575;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x4575);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x4576=((1.0)*cj5);
IkReal x4577=((((-1.0)*r01*x4576))+(((-1.0)*r00*sj5)));
j4eval[0]=x4577;
j4eval[1]=IKsign(x4577);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x4576))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4578=((1.0)*cj5);
CheckValue<IkReal> x4579=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x4578))+(((-1.0)*r00*sj5)))),-1);
if(!x4579.valid){
continue;
}
CheckValue<IkReal> x4580 = IKatan2WithCheck(IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x4578)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x4580.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4579.value)))+(x4580.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4581=IKcos(j4);
IkReal x4582=IKsin(j4);
IkReal x4583=((1.0)*cj0);
IkReal x4584=(cj5*r00);
IkReal x4585=(cj5*r10);
IkReal x4586=(cj5*r20);
IkReal x4587=((1.0)*x4581);
IkReal x4588=((1.0)*x4582);
IkReal x4589=(sj5*x4581);
IkReal x4590=(sj5*x4582);
evalcond[0]=(((r21*x4589))+((r22*x4582))+(((-1.0)*x4586*x4587)));
evalcond[1]=((((-1.0)*r22*x4587))+((r21*x4590))+(((-1.0)*x4586*x4588)));
evalcond[2]=(sj0+(((-1.0)*r02*x4587))+(((-1.0)*x4584*x4588))+((r01*x4590)));
evalcond[3]=((((-1.0)*x4583))+((r02*x4582))+(((-1.0)*x4584*x4587))+((r01*x4589)));
evalcond[4]=((((-1.0)*sj0))+((r11*x4589))+((r12*x4582))+(((-1.0)*x4585*x4587)));
evalcond[5]=((((-1.0)*x4583))+((r11*x4590))+(((-1.0)*r12*x4587))+(((-1.0)*x4585*x4588)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4591 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x4591.valid){
continue;
}
CheckValue<IkReal> x4592=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x4592.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4591.value)+(((1.5707963267949)*(x4592.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4593=IKcos(j4);
IkReal x4594=IKsin(j4);
IkReal x4595=((1.0)*cj0);
IkReal x4596=(cj5*r00);
IkReal x4597=(cj5*r10);
IkReal x4598=(cj5*r20);
IkReal x4599=((1.0)*x4593);
IkReal x4600=((1.0)*x4594);
IkReal x4601=(sj5*x4593);
IkReal x4602=(sj5*x4594);
evalcond[0]=(((r22*x4594))+((r21*x4601))+(((-1.0)*x4598*x4599)));
evalcond[1]=((((-1.0)*r22*x4599))+((r21*x4602))+(((-1.0)*x4598*x4600)));
evalcond[2]=(sj0+((r01*x4602))+(((-1.0)*x4596*x4600))+(((-1.0)*r02*x4599)));
evalcond[3]=((((-1.0)*x4595))+(((-1.0)*x4596*x4599))+((r01*x4601))+((r02*x4594)));
evalcond[4]=(((r11*x4601))+(((-1.0)*sj0))+(((-1.0)*x4597*x4599))+((r12*x4594)));
evalcond[5]=(((r11*x4602))+(((-1.0)*x4595))+(((-1.0)*x4597*x4600))+(((-1.0)*r12*x4599)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4603=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x4603.valid){
continue;
}
CheckValue<IkReal> x4604 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4604.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4603.value)))+(x4604.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4605=IKcos(j4);
IkReal x4606=IKsin(j4);
IkReal x4607=((1.0)*cj0);
IkReal x4608=(cj5*r00);
IkReal x4609=(cj5*r10);
IkReal x4610=(cj5*r20);
IkReal x4611=((1.0)*x4605);
IkReal x4612=((1.0)*x4606);
IkReal x4613=(sj5*x4605);
IkReal x4614=(sj5*x4606);
evalcond[0]=(((r21*x4613))+((r22*x4606))+(((-1.0)*x4610*x4611)));
evalcond[1]=(((r21*x4614))+(((-1.0)*r22*x4611))+(((-1.0)*x4610*x4612)));
evalcond[2]=((((-1.0)*r02*x4611))+sj0+(((-1.0)*x4608*x4612))+((r01*x4614)));
evalcond[3]=((((-1.0)*x4607))+(((-1.0)*x4608*x4611))+((r01*x4613))+((r02*x4606)));
evalcond[4]=((((-1.0)*sj0))+((r12*x4606))+((r11*x4613))+(((-1.0)*x4609*x4611)));
evalcond[5]=((((-1.0)*x4607))+((r11*x4614))+(((-1.0)*r12*x4611))+(((-1.0)*x4609*x4612)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((2.01887566680345)*px))+(((-3.51251538777185)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-2.01887566680345)*py))+(((-3.51251538777185)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.01887566680345)*px))+(((-3.51251538777185)*py))))+IKsqr(((((-2.01887566680345)*py))+(((-3.51251538777185)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((2.01887566680345)*px))+(((-3.51251538777185)*py))), ((((-2.01887566680345)*py))+(((-3.51251538777185)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x4615=IKcos(j0);
IkReal x4616=IKsin(j0);
evalcond[0]=((((-1.0)*px))+(((0.123)*x4616))+(((-0.214)*x4615)));
evalcond[1]=((((-0.123)*x4615))+(((-1.0)*py))+(((-0.214)*x4616)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x4617=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x4617;
j4eval[1]=IKsign(x4617);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x4618=((1.0)*cj5);
IkReal x4619=((((-1.0)*r10*sj5))+(((-1.0)*r11*x4618)));
j4eval[0]=x4619;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x4618)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x4619);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x4620=cj5*cj5;
IkReal x4621=((1.0)*r20);
IkReal x4622=(r01*r21);
IkReal x4623=(r21*sj5);
IkReal x4624=(((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+((x4620*x4622))+(((-1.0)*x4622))+(((-1.0)*r00*x4620*x4621))+((cj5*r00*x4623)));
j4eval[0]=x4624;
j4eval[1]=((IKabs(((((-1.0)*cj0*cj5*x4621))+((cj0*x4623)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x4624);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4625=cj5*cj5;
IkReal x4626=((1.0)*r20);
IkReal x4627=(r01*r21);
IkReal x4628=(r21*sj5);
CheckValue<IkReal> x4629 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*cj5*x4626))+((cj0*x4628)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4629.valid){
continue;
}
CheckValue<IkReal> x4630=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+(((-1.0)*x4627))+(((-1.0)*r00*x4625*x4626))+((x4625*x4627))+((cj5*r00*x4628)))),-1);
if(!x4630.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4629.value)+(((1.5707963267949)*(x4630.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4631=IKcos(j4);
IkReal x4632=IKsin(j4);
IkReal x4633=(cj5*r00);
IkReal x4634=(cj5*r10);
IkReal x4635=(cj5*r20);
IkReal x4636=((1.0)*x4631);
IkReal x4637=((1.0)*x4632);
IkReal x4638=(sj5*x4631);
IkReal x4639=(sj5*x4632);
evalcond[0]=(((r21*x4638))+(((-1.0)*x4635*x4636))+((r22*x4632)));
evalcond[1]=(((r21*x4639))+(((-1.0)*x4635*x4637))+(((-1.0)*r22*x4636)));
evalcond[2]=(((r01*x4638))+cj0+((r02*x4632))+(((-1.0)*x4633*x4636)));
evalcond[3]=(((r12*x4632))+sj0+(((-1.0)*x4634*x4636))+((r11*x4638)));
evalcond[4]=(((r01*x4639))+sj0+(((-1.0)*r02*x4636))+(((-1.0)*x4633*x4637)));
evalcond[5]=((((-1.0)*x4634*x4637))+((r11*x4639))+(((-1.0)*r12*x4636))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4640=((1.0)*cj5);
CheckValue<IkReal> x4641=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x4640)))),-1);
if(!x4641.valid){
continue;
}
CheckValue<IkReal> x4642 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x4640)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x4642.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4641.value)))+(x4642.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4643=IKcos(j4);
IkReal x4644=IKsin(j4);
IkReal x4645=(cj5*r00);
IkReal x4646=(cj5*r10);
IkReal x4647=(cj5*r20);
IkReal x4648=((1.0)*x4643);
IkReal x4649=((1.0)*x4644);
IkReal x4650=(sj5*x4643);
IkReal x4651=(sj5*x4644);
evalcond[0]=((((-1.0)*x4647*x4648))+((r22*x4644))+((r21*x4650)));
evalcond[1]=((((-1.0)*x4647*x4649))+(((-1.0)*r22*x4648))+((r21*x4651)));
evalcond[2]=(((r02*x4644))+(((-1.0)*x4645*x4648))+cj0+((r01*x4650)));
evalcond[3]=(sj0+((r11*x4650))+((r12*x4644))+(((-1.0)*x4646*x4648)));
evalcond[4]=(sj0+(((-1.0)*r02*x4648))+(((-1.0)*x4645*x4649))+((r01*x4651)));
evalcond[5]=(((r11*x4651))+(((-1.0)*r12*x4648))+(((-1.0)*x4646*x4649))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4652 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x4652.valid){
continue;
}
CheckValue<IkReal> x4653=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x4653.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4652.value)+(((1.5707963267949)*(x4653.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4654=IKcos(j4);
IkReal x4655=IKsin(j4);
IkReal x4656=(cj5*r00);
IkReal x4657=(cj5*r10);
IkReal x4658=(cj5*r20);
IkReal x4659=((1.0)*x4654);
IkReal x4660=((1.0)*x4655);
IkReal x4661=(sj5*x4654);
IkReal x4662=(sj5*x4655);
evalcond[0]=(((r21*x4661))+(((-1.0)*x4658*x4659))+((r22*x4655)));
evalcond[1]=((((-1.0)*x4658*x4660))+((r21*x4662))+(((-1.0)*r22*x4659)));
evalcond[2]=(cj0+((r01*x4661))+((r02*x4655))+(((-1.0)*x4656*x4659)));
evalcond[3]=(((r12*x4655))+sj0+(((-1.0)*x4657*x4659))+((r11*x4661)));
evalcond[4]=(sj0+(((-1.0)*x4656*x4660))+(((-1.0)*r02*x4659))+((r01*x4662)));
evalcond[5]=(((r11*x4662))+(((-1.0)*r12*x4659))+(((-1.0)*cj0))+(((-1.0)*x4657*x4660)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((2.04037896579128)*py))+(((0.549161078320192)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-0.549161078320192)*py))+(((2.04037896579128)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.04037896579128)*py))+(((0.549161078320192)*px))))+IKsqr(((((-0.549161078320192)*py))+(((2.04037896579128)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((2.04037896579128)*py))+(((0.549161078320192)*px))), ((((-0.549161078320192)*py))+(((2.04037896579128)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x4663=IKsin(j0);
IkReal x4664=IKcos(j0);
evalcond[0]=((((-1.0)*px))+(((0.457)*x4664))+(((0.123)*x4663)));
evalcond[1]=((((-0.123)*x4664))+(((-1.0)*py))+(((0.457)*x4663)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x4665=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x4665;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x4665);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x4666=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x4666;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x4666);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x4667=((1.0)*cj5);
IkReal x4668=((((-1.0)*r00*sj5))+(((-1.0)*r01*x4667)));
j4eval[0]=x4668;
j4eval[1]=IKsign(x4668);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x4667))+((r21*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4669=((1.0)*cj5);
CheckValue<IkReal> x4670=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x4669)))),-1);
if(!x4670.valid){
continue;
}
CheckValue<IkReal> x4671 = IKatan2WithCheck(IkReal(((((-1.0)*r20*sj0*x4669))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x4671.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4670.value)))+(x4671.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4672=IKcos(j4);
IkReal x4673=IKsin(j4);
IkReal x4674=((1.0)*cj0);
IkReal x4675=(cj5*r00);
IkReal x4676=(cj5*r10);
IkReal x4677=(cj5*r20);
IkReal x4678=((1.0)*x4672);
IkReal x4679=((1.0)*x4673);
IkReal x4680=(sj5*x4672);
IkReal x4681=(sj5*x4673);
evalcond[0]=(((r22*x4673))+((r21*x4680))+(((-1.0)*x4677*x4678)));
evalcond[1]=((((-1.0)*r22*x4678))+((r21*x4681))+(((-1.0)*x4677*x4679)));
evalcond[2]=((((-1.0)*r02*x4678))+(((-1.0)*x4675*x4679))+sj0+((r01*x4681)));
evalcond[3]=(((r02*x4673))+(((-1.0)*x4675*x4678))+(((-1.0)*x4674))+((r01*x4680)));
evalcond[4]=((((-1.0)*sj0))+(((-1.0)*x4676*x4678))+((r12*x4673))+((r11*x4680)));
evalcond[5]=((((-1.0)*x4676*x4679))+(((-1.0)*r12*x4678))+(((-1.0)*x4674))+((r11*x4681)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4682 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x4682.valid){
continue;
}
CheckValue<IkReal> x4683=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x4683.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4682.value)+(((1.5707963267949)*(x4683.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4684=IKcos(j4);
IkReal x4685=IKsin(j4);
IkReal x4686=((1.0)*cj0);
IkReal x4687=(cj5*r00);
IkReal x4688=(cj5*r10);
IkReal x4689=(cj5*r20);
IkReal x4690=((1.0)*x4684);
IkReal x4691=((1.0)*x4685);
IkReal x4692=(sj5*x4684);
IkReal x4693=(sj5*x4685);
evalcond[0]=(((r22*x4685))+((r21*x4692))+(((-1.0)*x4689*x4690)));
evalcond[1]=(((r21*x4693))+(((-1.0)*r22*x4690))+(((-1.0)*x4689*x4691)));
evalcond[2]=((((-1.0)*x4687*x4691))+sj0+(((-1.0)*r02*x4690))+((r01*x4693)));
evalcond[3]=((((-1.0)*x4687*x4690))+((r02*x4685))+((r01*x4692))+(((-1.0)*x4686)));
evalcond[4]=((((-1.0)*sj0))+(((-1.0)*x4688*x4690))+((r12*x4685))+((r11*x4692)));
evalcond[5]=((((-1.0)*r12*x4690))+(((-1.0)*x4688*x4691))+((r11*x4693))+(((-1.0)*x4686)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4694=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x4694.valid){
continue;
}
CheckValue<IkReal> x4695 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4695.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4694.value)))+(x4695.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4696=IKcos(j4);
IkReal x4697=IKsin(j4);
IkReal x4698=((1.0)*cj0);
IkReal x4699=(cj5*r00);
IkReal x4700=(cj5*r10);
IkReal x4701=(cj5*r20);
IkReal x4702=((1.0)*x4696);
IkReal x4703=((1.0)*x4697);
IkReal x4704=(sj5*x4696);
IkReal x4705=(sj5*x4697);
evalcond[0]=(((r21*x4704))+((r22*x4697))+(((-1.0)*x4701*x4702)));
evalcond[1]=((((-1.0)*r22*x4702))+((r21*x4705))+(((-1.0)*x4701*x4703)));
evalcond[2]=(sj0+(((-1.0)*r02*x4702))+((r01*x4705))+(((-1.0)*x4699*x4703)));
evalcond[3]=(((r02*x4697))+((r01*x4704))+(((-1.0)*x4699*x4702))+(((-1.0)*x4698)));
evalcond[4]=((((-1.0)*x4700*x4702))+(((-1.0)*sj0))+((r12*x4697))+((r11*x4704)));
evalcond[5]=((((-1.0)*x4700*x4703))+(((-1.0)*r12*x4702))+(((-1.0)*x4698))+((r11*x4705)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((7.70194113963682)*px))+(((1.81590482154039)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-7.70194113963682)*py))+(((1.81590482154039)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((7.70194113963682)*px))+(((1.81590482154039)*py))))+IKsqr(((((-7.70194113963682)*py))+(((1.81590482154039)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((7.70194113963682)*px))+(((1.81590482154039)*py))), ((((-7.70194113963682)*py))+(((1.81590482154039)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x4706=IKsin(j0);
IkReal x4707=IKcos(j0);
evalcond[0]=((((0.123)*x4706))+(((-1.0)*px))+(((0.029)*x4707)));
evalcond[1]=((((-1.0)*py))+(((-0.123)*x4707))+(((0.029)*x4706)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x4708=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x4708;
j4eval[1]=IKsign(x4708);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x4709=((1.0)*cj5);
IkReal x4710=((((-1.0)*r10*sj5))+(((-1.0)*r11*x4709)));
j4eval[0]=x4710;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x4709)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x4710);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x4711=cj5*cj5;
IkReal x4712=((1.0)*r20);
IkReal x4713=(r01*r21);
IkReal x4714=(r21*sj5);
IkReal x4715=(((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+(((-1.0)*x4713))+((x4711*x4713))+((cj5*r00*x4714))+(((-1.0)*r00*x4711*x4712)));
j4eval[0]=x4715;
j4eval[1]=((IKabs((((cj0*x4714))+(((-1.0)*cj0*cj5*x4712)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x4715);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4716=cj5*cj5;
IkReal x4717=((1.0)*r20);
IkReal x4718=(r01*r21);
IkReal x4719=(r21*sj5);
CheckValue<IkReal> x4720 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*x4719))+(((-1.0)*cj0*cj5*x4717)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4720.valid){
continue;
}
CheckValue<IkReal> x4721=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+(((-1.0)*x4718))+((x4716*x4718))+((cj5*r00*x4719))+(((-1.0)*r00*x4716*x4717)))),-1);
if(!x4721.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4720.value)+(((1.5707963267949)*(x4721.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4722=IKcos(j4);
IkReal x4723=IKsin(j4);
IkReal x4724=(cj5*r00);
IkReal x4725=(cj5*r10);
IkReal x4726=(cj5*r20);
IkReal x4727=((1.0)*x4722);
IkReal x4728=((1.0)*x4723);
IkReal x4729=(sj5*x4722);
IkReal x4730=(sj5*x4723);
evalcond[0]=(((r21*x4729))+(((-1.0)*x4726*x4727))+((r22*x4723)));
evalcond[1]=(((r21*x4730))+(((-1.0)*x4726*x4728))+(((-1.0)*r22*x4727)));
evalcond[2]=(cj0+(((-1.0)*x4724*x4727))+((r02*x4723))+((r01*x4729)));
evalcond[3]=(((r11*x4729))+sj0+(((-1.0)*x4725*x4727))+((r12*x4723)));
evalcond[4]=(sj0+(((-1.0)*x4724*x4728))+(((-1.0)*r02*x4727))+((r01*x4730)));
evalcond[5]=(((r11*x4730))+(((-1.0)*r12*x4727))+(((-1.0)*x4725*x4728))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4731=((1.0)*cj5);
CheckValue<IkReal> x4732=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x4731)))),-1);
if(!x4732.valid){
continue;
}
CheckValue<IkReal> x4733 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x4731)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x4733.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4732.value)))+(x4733.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4734=IKcos(j4);
IkReal x4735=IKsin(j4);
IkReal x4736=(cj5*r00);
IkReal x4737=(cj5*r10);
IkReal x4738=(cj5*r20);
IkReal x4739=((1.0)*x4734);
IkReal x4740=((1.0)*x4735);
IkReal x4741=(sj5*x4734);
IkReal x4742=(sj5*x4735);
evalcond[0]=(((r22*x4735))+(((-1.0)*x4738*x4739))+((r21*x4741)));
evalcond[1]=(((r21*x4742))+(((-1.0)*x4738*x4740))+(((-1.0)*r22*x4739)));
evalcond[2]=(cj0+(((-1.0)*x4736*x4739))+((r01*x4741))+((r02*x4735)));
evalcond[3]=(((r11*x4741))+sj0+(((-1.0)*x4737*x4739))+((r12*x4735)));
evalcond[4]=(sj0+(((-1.0)*x4736*x4740))+((r01*x4742))+(((-1.0)*r02*x4739)));
evalcond[5]=(((r11*x4742))+(((-1.0)*r12*x4739))+(((-1.0)*x4737*x4740))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4743 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x4743.valid){
continue;
}
CheckValue<IkReal> x4744=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x4744.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4743.value)+(((1.5707963267949)*(x4744.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4745=IKcos(j4);
IkReal x4746=IKsin(j4);
IkReal x4747=(cj5*r00);
IkReal x4748=(cj5*r10);
IkReal x4749=(cj5*r20);
IkReal x4750=((1.0)*x4745);
IkReal x4751=((1.0)*x4746);
IkReal x4752=(sj5*x4745);
IkReal x4753=(sj5*x4746);
evalcond[0]=((((-1.0)*x4749*x4750))+((r21*x4752))+((r22*x4746)));
evalcond[1]=((((-1.0)*x4749*x4751))+(((-1.0)*r22*x4750))+((r21*x4753)));
evalcond[2]=(((r01*x4752))+cj0+((r02*x4746))+(((-1.0)*x4747*x4750)));
evalcond[3]=(sj0+((r11*x4752))+((r12*x4746))+(((-1.0)*x4748*x4750)));
evalcond[4]=(((r01*x4753))+sj0+(((-1.0)*r02*x4750))+(((-1.0)*x4747*x4751)));
evalcond[5]=(((r11*x4753))+(((-1.0)*x4748*x4751))+(((-1.0)*r12*x4750))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x4754=((243.0)*sj1);
IkReal x4755=(cj5*r01);
IkReal x4756=(r00*sj5);
IkReal x4757=(sj1*sj2);
IkReal x4758=(cj1*cj2);
IkReal x4759=((1000.0)*px);
IkReal x4760=((214.0)*cj1*sj2);
IkReal x4761=((214.0)*cj2*sj1);
CheckValue<IkReal> x4762=IKPowWithIntegerCheck(((((123.0)*x4758))+(((-123.0)*x4757))),-1);
if(!x4762.valid){
continue;
}
CheckValue<IkReal> x4763=IKPowWithIntegerCheck((x4758+(((-1.0)*x4757))),-1);
if(!x4763.valid){
continue;
}
if( IKabs(((x4762.value)*(((((110.0)*x4756*x4758))+((x4758*x4759))+((x4754*x4756))+((x4754*x4755))+((x4755*x4760))+((x4755*x4761))+((x4756*x4761))+((x4756*x4760))+(((-110.0)*x4755*x4757))+(((-1.0)*x4757*x4759))+(((-110.0)*x4756*x4757))+(((110.0)*x4755*x4758)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x4763.value)*((x4755+x4756)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x4762.value)*(((((110.0)*x4756*x4758))+((x4758*x4759))+((x4754*x4756))+((x4754*x4755))+((x4755*x4760))+((x4755*x4761))+((x4756*x4761))+((x4756*x4760))+(((-110.0)*x4755*x4757))+(((-1.0)*x4757*x4759))+(((-110.0)*x4756*x4757))+(((110.0)*x4755*x4758))))))+IKsqr(((x4763.value)*((x4755+x4756))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x4762.value)*(((((110.0)*x4756*x4758))+((x4758*x4759))+((x4754*x4756))+((x4754*x4755))+((x4755*x4760))+((x4755*x4761))+((x4756*x4761))+((x4756*x4760))+(((-110.0)*x4755*x4757))+(((-1.0)*x4757*x4759))+(((-110.0)*x4756*x4757))+(((110.0)*x4755*x4758))))), ((x4763.value)*((x4755+x4756))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x4764=IKcos(j0);
IkReal x4765=IKsin(j0);
IkReal x4766=(r10*sj5);
IkReal x4767=(cj1*cj2);
IkReal x4768=((1.0)*sj2);
IkReal x4769=(cj5*r11);
IkReal x4770=(cj5*r01);
IkReal x4771=(r00*sj5);
IkReal x4772=((0.214)*cj2);
IkReal x4773=(sj1*x4765);
IkReal x4774=(sj1*x4764);
IkReal x4775=((0.214)*cj1*sj2);
evalcond[0]=((((-1.0)*x4770))+(((-1.0)*x4771))+((x4764*x4767))+(((-1.0)*x4768*x4774)));
evalcond[1]=((((-1.0)*x4766))+(((-1.0)*x4769))+(((-1.0)*x4768*x4773))+((x4765*x4767)));
evalcond[2]=((((-0.11)*x4771))+(((-0.11)*x4770))+(((0.123)*x4765))+(((-1.0)*px))+(((-0.243)*x4774))+(((-1.0)*x4772*x4774))+(((-1.0)*x4764*x4775)));
evalcond[3]=((((-0.11)*x4769))+(((-0.11)*x4766))+(((-1.0)*x4765*x4775))+(((-0.123)*x4764))+(((-1.0)*py))+(((-0.243)*x4773))+(((-1.0)*x4772*x4773)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x4776=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x4776;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x4776);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x4777=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x4777;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x4777);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x4778=((1.0)*cj5);
IkReal x4779=((((-1.0)*r21*x4778))+(((-1.0)*r20*sj5)));
j4eval[0]=x4779;
j4eval[1]=((IKabs((((r11*sj0*sj5))+(((-1.0)*r10*sj0*x4778))+((cj0*r01*sj5))+(((-1.0)*cj0*r00*x4778)))))+(IKabs((((r12*sj0))+((cj0*r02))))));
j4eval[2]=IKsign(x4779);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x4780=((-1.0)*r20);
IkReal x4782 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x4782)==0){
continue;
}
IkReal x4781=pow(x4782,-0.5);
CheckValue<IkReal> x4783 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x4780),IKFAST_ATAN2_MAGTHRESH);
if(!x4783.valid){
continue;
}
IkReal gconst114=((-1.0)*(x4783.value));
IkReal gconst115=(r21*x4781);
IkReal gconst116=(x4780*x4781);
CheckValue<IkReal> x4784 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4784.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x4784.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x4785=((-1.0)*r20);
IkReal x4786=x4781;
CheckValue<IkReal> x4788 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x4785),IKFAST_ATAN2_MAGTHRESH);
if(!x4788.valid){
continue;
}
IkReal x4787=((-1.0)*(x4788.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst115;
cj5=gconst116;
j5=x4787;
IkReal gconst114=x4787;
IkReal gconst115=(r21*x4786);
IkReal gconst116=(x4785*x4786);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4789=((-1.0)*r20);
IkReal x4790=x4781;
CheckValue<IkReal> x4792 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x4789),IKFAST_ATAN2_MAGTHRESH);
if(!x4792.valid){
continue;
}
IkReal x4791=((-1.0)*(x4792.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst115;
cj5=gconst116;
j5=x4791;
IkReal gconst114=x4791;
IkReal gconst115=(r21*x4790);
IkReal gconst116=(x4789*x4790);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x4793=((-1.0)*r20);
IkReal x4794=x4781;
CheckValue<IkReal> x4796 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x4793),IKFAST_ATAN2_MAGTHRESH);
if(!x4796.valid){
continue;
}
IkReal x4795=((-1.0)*(x4796.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst115;
cj5=gconst116;
j5=x4795;
IkReal gconst114=x4795;
IkReal gconst115=(r21*x4794);
IkReal gconst116=(x4793*x4794);
IkReal x4797=((1.0)*(r22*r22));
CheckValue<IkReal> x4801=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x4797))),-1);
if(!x4801.valid){
continue;
}
IkReal x4798=x4801.value;
IkReal x4799=((1.0)*x4798);
IkReal x4800=((((-2.0)*x4798*(r20*r20)*(r21*r21)))+(((-1.0)*x4799*(r21*r21*r21*r21)))+(((-1.0)*x4797))+(((-1.0)*x4799*(r20*r20*r20*r20))));
j4eval[0]=x4800;
j4eval[1]=IKsign(x4800);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4802=(sj1*sj2);
IkReal x4803=(gconst116*r20);
IkReal x4804=(gconst115*r21);
IkReal x4805=(cj1*cj2);
CheckValue<IkReal> x4806 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x4805))+((r22*x4802)))),IkReal(((((-1.0)*x4804*x4805))+(((-1.0)*x4802*x4803))+((x4803*x4805))+((x4802*x4804)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4806.valid){
continue;
}
CheckValue<IkReal> x4807=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x4803*x4803)))+(((-1.0)*(r22*r22)))+(((-1.0)*(x4804*x4804)))+(((2.0)*x4803*x4804)))),-1);
if(!x4807.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4806.value)+(((1.5707963267949)*(x4807.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4808=IKsin(j4);
IkReal x4809=IKcos(j4);
IkReal x4810=(cj2*sj1);
IkReal x4811=(gconst115*r21);
IkReal x4812=(cj1*sj2);
IkReal x4813=((1.0)*x4809);
IkReal x4814=(gconst115*x4809);
IkReal x4815=(gconst115*x4808);
IkReal x4816=((1.0)*gconst116*x4808);
evalcond[0]=(((x4808*x4811))+(((-1.0)*r22*x4813))+(((-1.0)*r20*x4816)));
evalcond[1]=((((-1.0)*r00*x4816))+sj0+(((-1.0)*r02*x4813))+((r01*x4815)));
evalcond[2]=(((r11*x4815))+(((-1.0)*r10*x4816))+(((-1.0)*r12*x4813))+(((-1.0)*cj0)));
evalcond[3]=(((x4809*x4811))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x4808))+(((-1.0)*gconst116*r20*x4813)));
evalcond[4]=(((r02*x4808))+((cj0*x4810))+((cj0*x4812))+(((-1.0)*gconst116*r00*x4813))+((r01*x4814)));
evalcond[5]=((((-1.0)*gconst116*r10*x4813))+((r11*x4814))+((r12*x4808))+((sj0*x4810))+((sj0*x4812)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4817 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst115*r21))+(((-1.0)*cj0*gconst116*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4817.valid){
continue;
}
CheckValue<IkReal> x4818=IKPowWithIntegerCheck(IKsign((((gconst115*r00))+((gconst116*r01)))),-1);
if(!x4818.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4817.value)+(((1.5707963267949)*(x4818.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4819=IKsin(j4);
IkReal x4820=IKcos(j4);
IkReal x4821=(cj2*sj1);
IkReal x4822=(gconst115*r21);
IkReal x4823=(cj1*sj2);
IkReal x4824=((1.0)*x4820);
IkReal x4825=(gconst115*x4820);
IkReal x4826=(gconst115*x4819);
IkReal x4827=((1.0)*gconst116*x4819);
evalcond[0]=(((x4819*x4822))+(((-1.0)*r22*x4824))+(((-1.0)*r20*x4827)));
evalcond[1]=((((-1.0)*r00*x4827))+sj0+(((-1.0)*r02*x4824))+((r01*x4826)));
evalcond[2]=(((r11*x4826))+(((-1.0)*r10*x4827))+(((-1.0)*cj0))+(((-1.0)*r12*x4824)));
evalcond[3]=(((x4820*x4822))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst116*r20*x4824))+((r22*x4819)));
evalcond[4]=(((r02*x4819))+(((-1.0)*gconst116*r00*x4824))+((r01*x4825))+((cj0*x4823))+((cj0*x4821)));
evalcond[5]=((((-1.0)*gconst116*r10*x4824))+((r11*x4825))+((r12*x4819))+((sj0*x4823))+((sj0*x4821)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4828=IKPowWithIntegerCheck(IKsign((((gconst115*r10))+((gconst116*r11)))),-1);
if(!x4828.valid){
continue;
}
CheckValue<IkReal> x4829 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst115*r21*sj0))+(((-1.0)*gconst116*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4829.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4828.value)))+(x4829.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4830=IKsin(j4);
IkReal x4831=IKcos(j4);
IkReal x4832=(cj2*sj1);
IkReal x4833=(gconst115*r21);
IkReal x4834=(cj1*sj2);
IkReal x4835=((1.0)*x4831);
IkReal x4836=(gconst115*x4831);
IkReal x4837=(gconst115*x4830);
IkReal x4838=((1.0)*gconst116*x4830);
evalcond[0]=((((-1.0)*r22*x4835))+(((-1.0)*r20*x4838))+((x4830*x4833)));
evalcond[1]=(((r01*x4837))+sj0+(((-1.0)*r02*x4835))+(((-1.0)*r00*x4838)));
evalcond[2]=((((-1.0)*r10*x4838))+((r11*x4837))+(((-1.0)*r12*x4835))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x4830))+(((-1.0)*gconst116*r20*x4835))+((x4831*x4833)));
evalcond[4]=(((r01*x4836))+((cj0*x4834))+((cj0*x4832))+(((-1.0)*gconst116*r00*x4835))+((r02*x4830)));
evalcond[5]=(((r12*x4830))+((r11*x4836))+((sj0*x4834))+((sj0*x4832))+(((-1.0)*gconst116*r10*x4835)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4839=((-1.0)*r21);
IkReal x4841 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x4841)==0){
continue;
}
IkReal x4840=pow(x4841,-0.5);
CheckValue<IkReal> x4842 = IKatan2WithCheck(IkReal(x4839),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4842.valid){
continue;
}
IkReal gconst117=((3.14159265358979)+(((-1.0)*(x4842.value))));
IkReal gconst118=(x4839*x4840);
IkReal gconst119=((1.0)*r20*x4840);
CheckValue<IkReal> x4843 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4843.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x4843.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x4844=((-1.0)*r21);
CheckValue<IkReal> x4847 = IKatan2WithCheck(IkReal(x4844),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4847.valid){
continue;
}
IkReal x4845=((1.0)*(x4847.value));
IkReal x4846=x4840;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x4845)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x4845)));
IkReal gconst118=(x4844*x4846);
IkReal gconst119=((1.0)*r20*x4846);
IkReal x4848=r22*r22;
IkReal x4849=((1.0)*x4848);
CheckValue<IkReal> x4853=IKPowWithIntegerCheck(((-1.0)+x4848),-1);
if(!x4853.valid){
continue;
}
IkReal x4850=x4853.value;
if((((1.0)+(((-1.0)*x4849)))) < -0.00001)
continue;
IkReal x4851=IKsqrt(((1.0)+(((-1.0)*x4849))));
IkReal x4852=(sj0*x4850*x4851);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*x4849*x4852))+x4852))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4854=((-1.0)*r21);
CheckValue<IkReal> x4857 = IKatan2WithCheck(IkReal(x4854),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4857.valid){
continue;
}
IkReal x4855=((1.0)*(x4857.value));
IkReal x4856=x4840;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x4855)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x4855)));
IkReal gconst118=(x4854*x4856);
IkReal gconst119=((1.0)*r20*x4856);
IkReal x4858=r22*r22;
IkReal x4859=((1.0)*x4858);
CheckValue<IkReal> x4863=IKPowWithIntegerCheck(((-1.0)+x4858),-1);
if(!x4863.valid){
continue;
}
IkReal x4860=x4863.value;
if((((1.0)+(((-1.0)*x4859)))) < -0.00001)
continue;
IkReal x4861=IKsqrt(((1.0)+(((-1.0)*x4859))));
IkReal x4862=(cj0*x4860*x4861);
j4eval[0]=((IKabs(((((-1.0)*x4859*x4862))+x4862)))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x4864=((-1.0)*r21);
CheckValue<IkReal> x4867 = IKatan2WithCheck(IkReal(x4864),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4867.valid){
continue;
}
IkReal x4865=((1.0)*(x4867.value));
IkReal x4866=x4840;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x4865)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x4865)));
IkReal gconst118=(x4864*x4866);
IkReal gconst119=((1.0)*r20*x4866);
IkReal x4868=r22*r22;
IkReal x4869=(cj0*r02);
IkReal x4870=(r12*sj0);
CheckValue<IkReal> x4874=IKPowWithIntegerCheck(((-1.0)+x4868),-1);
if(!x4874.valid){
continue;
}
IkReal x4871=x4874.value;
if((((1.0)+(((-1.0)*x4868)))) < -0.00001)
continue;
IkReal x4872=IKsqrt(((1.0)+(((-1.0)*x4868))));
IkReal x4873=((1.0)*r22*x4871*x4872);
j4eval[0]=0;
j4eval[1]=((IKabs(((((-1.0)*x4869*x4873))+(((-1.0)*x4870*x4873)))))+(IKabs((x4869+x4870))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4875=((1.0)*gconst119);
CheckValue<IkReal> x4876=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst118*r20))+(((-1.0)*r21*x4875)))),-1);
if(!x4876.valid){
continue;
}
CheckValue<IkReal> x4877 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((gconst118*r11*sj0))+(((-1.0)*cj0*r00*x4875))+((cj0*gconst118*r01))+(((-1.0)*r10*sj0*x4875)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4877.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4876.value)))+(x4877.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4878=IKsin(j4);
IkReal x4879=IKcos(j4);
IkReal x4880=(gconst118*r01);
IkReal x4881=(gconst119*r20);
IkReal x4882=(gconst119*r10);
IkReal x4883=(gconst119*r00);
IkReal x4884=(gconst118*r21);
IkReal x4885=(cj2*sj1);
IkReal x4886=(gconst118*r11);
IkReal x4887=(cj1*sj2);
IkReal x4888=((1.0)*x4879);
IkReal x4889=((1.0)*x4878);
evalcond[0]=((((-1.0)*x4881*x4889))+((x4878*x4884))+(((-1.0)*r22*x4888)));
evalcond[1]=(sj0+(((-1.0)*x4883*x4889))+(((-1.0)*r02*x4888))+((x4878*x4880)));
evalcond[2]=((((-1.0)*r12*x4888))+(((-1.0)*x4882*x4889))+((x4878*x4886))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*x4881*x4888))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x4879*x4884))+((r22*x4878)));
evalcond[4]=(((r02*x4878))+((cj0*x4887))+((cj0*x4885))+(((-1.0)*x4883*x4888))+((x4879*x4880)));
evalcond[5]=((((-1.0)*x4882*x4888))+((x4879*x4886))+((sj0*x4887))+((sj0*x4885))+((r12*x4878)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4890=IKPowWithIntegerCheck(IKsign((((gconst118*r00))+((gconst119*r01)))),-1);
if(!x4890.valid){
continue;
}
CheckValue<IkReal> x4891 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst118*r21))+(((-1.0)*cj0*gconst119*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4891.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4890.value)))+(x4891.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4892=IKsin(j4);
IkReal x4893=IKcos(j4);
IkReal x4894=(gconst118*r01);
IkReal x4895=(gconst119*r20);
IkReal x4896=(gconst119*r10);
IkReal x4897=(gconst119*r00);
IkReal x4898=(gconst118*r21);
IkReal x4899=(cj2*sj1);
IkReal x4900=(gconst118*r11);
IkReal x4901=(cj1*sj2);
IkReal x4902=((1.0)*x4893);
IkReal x4903=((1.0)*x4892);
evalcond[0]=(((x4892*x4898))+(((-1.0)*x4895*x4903))+(((-1.0)*r22*x4902)));
evalcond[1]=(sj0+((x4892*x4894))+(((-1.0)*x4897*x4903))+(((-1.0)*r02*x4902)));
evalcond[2]=((((-1.0)*r12*x4902))+(((-1.0)*x4896*x4903))+((x4892*x4900))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x4895*x4902))+((r22*x4892))+((x4893*x4898)));
evalcond[4]=(((r02*x4892))+(((-1.0)*x4897*x4902))+((cj0*x4899))+((x4893*x4894))+((cj0*x4901)));
evalcond[5]=(((r12*x4892))+(((-1.0)*x4896*x4902))+((x4893*x4900))+((sj0*x4901))+((sj0*x4899)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4904=IKPowWithIntegerCheck(IKsign((((gconst118*r10))+((gconst119*r11)))),-1);
if(!x4904.valid){
continue;
}
CheckValue<IkReal> x4905 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*gconst119*r20*sj0))+((gconst118*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4905.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4904.value)))+(x4905.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4906=IKsin(j4);
IkReal x4907=IKcos(j4);
IkReal x4908=(gconst118*r01);
IkReal x4909=(gconst119*r20);
IkReal x4910=(gconst119*r10);
IkReal x4911=(gconst119*r00);
IkReal x4912=(gconst118*r21);
IkReal x4913=(cj2*sj1);
IkReal x4914=(gconst118*r11);
IkReal x4915=(cj1*sj2);
IkReal x4916=((1.0)*x4907);
IkReal x4917=((1.0)*x4906);
evalcond[0]=((((-1.0)*x4909*x4917))+((x4906*x4912))+(((-1.0)*r22*x4916)));
evalcond[1]=(sj0+(((-1.0)*r02*x4916))+(((-1.0)*x4911*x4917))+((x4906*x4908)));
evalcond[2]=((((-1.0)*r12*x4916))+(((-1.0)*x4910*x4917))+((x4906*x4914))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*x4909*x4916))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x4907*x4912))+((r22*x4906)));
evalcond[4]=(((r02*x4906))+(((-1.0)*x4911*x4916))+((x4907*x4908))+((cj0*x4915))+((cj0*x4913)));
evalcond[5]=((((-1.0)*x4910*x4916))+((x4907*x4914))+((sj0*x4915))+((sj0*x4913))+((r12*x4906)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4919 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x4919)==0){
continue;
}
IkReal x4918=pow(x4919,-0.5);
CheckValue<IkReal> x4920 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x4920.valid){
continue;
}
IkReal gconst120=((-1.0)*(x4920.value));
IkReal gconst121=((-1.0)*r01*x4918);
IkReal gconst122=(r00*x4918);
CheckValue<IkReal> x4921 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x4921.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x4921.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x4924 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x4924.valid){
continue;
}
IkReal x4922=((-1.0)*(x4924.value));
IkReal x4923=x4918;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst121;
cj5=gconst122;
j5=x4922;
IkReal gconst120=x4922;
IkReal gconst121=((-1.0)*r01*x4923);
IkReal gconst122=(r00*x4923);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4925=((1.0)*gconst122);
CheckValue<IkReal> x4926=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst121*r20))+(((-1.0)*r21*x4925)))),-1);
if(!x4926.valid){
continue;
}
CheckValue<IkReal> x4927 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*r10*sj0*x4925))+((cj0*gconst121*r01))+((gconst121*r11*sj0))+(((-1.0)*cj0*r00*x4925)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4927.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4926.value)))+(x4927.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4928=IKsin(j4);
IkReal x4929=IKcos(j4);
IkReal x4930=(gconst121*r11);
IkReal x4931=(cj2*sj1);
IkReal x4932=(gconst122*r00);
IkReal x4933=(gconst122*r10);
IkReal x4934=(gconst122*r20);
IkReal x4935=(cj1*sj2);
IkReal x4936=((1.0)*x4929);
IkReal x4937=(gconst121*x4928);
IkReal x4938=((1.0)*x4928);
IkReal x4939=(gconst121*x4929);
evalcond[0]=((((-1.0)*x4934*x4938))+((r21*x4937))+(((-1.0)*r22*x4936)));
evalcond[1]=(sj0+(((-1.0)*r02*x4936))+(((-1.0)*x4932*x4938))+((r01*x4937)));
evalcond[2]=((((-1.0)*x4933*x4938))+(((-1.0)*r12*x4936))+((x4928*x4930))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*x4934*x4936))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x4928))+((r21*x4939)));
evalcond[4]=((((-1.0)*x4932*x4936))+((r01*x4939))+((cj0*x4931))+((cj0*x4935))+((r02*x4928)));
evalcond[5]=((((-1.0)*x4933*x4936))+((x4929*x4930))+((sj0*x4931))+((sj0*x4935))+((r12*x4928)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4940 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*gconst122*r20*sj0))+((gconst121*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4940.valid){
continue;
}
CheckValue<IkReal> x4941=IKPowWithIntegerCheck(IKsign((((gconst121*r10))+((gconst122*r11)))),-1);
if(!x4941.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4940.value)+(((1.5707963267949)*(x4941.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4942=IKsin(j4);
IkReal x4943=IKcos(j4);
IkReal x4944=(gconst121*r11);
IkReal x4945=(cj2*sj1);
IkReal x4946=(gconst122*r00);
IkReal x4947=(gconst122*r10);
IkReal x4948=(gconst122*r20);
IkReal x4949=(cj1*sj2);
IkReal x4950=((1.0)*x4943);
IkReal x4951=(gconst121*x4942);
IkReal x4952=((1.0)*x4942);
IkReal x4953=(gconst121*x4943);
evalcond[0]=((((-1.0)*r22*x4950))+(((-1.0)*x4948*x4952))+((r21*x4951)));
evalcond[1]=(sj0+(((-1.0)*x4946*x4952))+(((-1.0)*r02*x4950))+((r01*x4951)));
evalcond[2]=((((-1.0)*x4947*x4952))+((x4942*x4944))+(((-1.0)*r12*x4950))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x4948*x4950))+((r21*x4953))+((r22*x4942)));
evalcond[4]=(((cj0*x4949))+((cj0*x4945))+(((-1.0)*x4946*x4950))+((r02*x4942))+((r01*x4953)));
evalcond[5]=((((-1.0)*x4947*x4950))+((x4943*x4944))+((r12*x4942))+((sj0*x4945))+((sj0*x4949)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4955 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x4955)==0){
continue;
}
IkReal x4954=pow(x4955,-0.5);
CheckValue<IkReal> x4956 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x4956.valid){
continue;
}
IkReal gconst123=((3.14159265358979)+(((-1.0)*(x4956.value))));
IkReal gconst124=((1.0)*r01*x4954);
IkReal gconst125=((-1.0)*r00*x4954);
CheckValue<IkReal> x4957 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x4957.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x4957.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x4960 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x4960.valid){
continue;
}
IkReal x4958=((1.0)*(x4960.value));
IkReal x4959=x4954;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x4958)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x4958)));
IkReal gconst124=((1.0)*r01*x4959);
IkReal gconst125=((-1.0)*r00*x4959);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[5];
CheckValue<IkReal> x4963 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x4963.valid){
continue;
}
IkReal x4961=((1.0)*(x4963.value));
IkReal x4962=x4954;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x4961)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x4961)));
IkReal gconst124=((1.0)*r01*x4962);
IkReal gconst125=((-1.0)*r00*x4962);
j4eval[0]=0;
j4eval[1]=cj0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
j4eval[4]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x4966 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x4966.valid){
continue;
}
IkReal x4964=((1.0)*(x4966.value));
IkReal x4965=x4954;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x4964)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x4964)));
IkReal gconst124=((1.0)*r01*x4965);
IkReal gconst125=((-1.0)*r00*x4965);
IkReal x4967=r02*r02;
IkReal x4968=(r12*sj0);
IkReal x4969=x4954;
IkReal x4970=(cj0*x4969);
j4eval[0]=((IKabs((((x4967*x4970))+(((-1.0)*x4970))+((r02*x4968*x4969)))))+(IKabs((x4968+((cj0*r02))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4971=((1.0)*gconst125);
CheckValue<IkReal> x4972=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x4971))+(((-1.0)*gconst124*r20)))),-1);
if(!x4972.valid){
continue;
}
CheckValue<IkReal> x4973 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((cj0*gconst124*r01))+(((-1.0)*cj0*r00*x4971))+(((-1.0)*r10*sj0*x4971))+((gconst124*r11*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4973.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4972.value)))+(x4973.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4974=IKsin(j4);
IkReal x4975=IKcos(j4);
IkReal x4976=(cj2*sj1);
IkReal x4977=(gconst125*r20);
IkReal x4978=(gconst124*r01);
IkReal x4979=(gconst125*r00);
IkReal x4980=(gconst125*r10);
IkReal x4981=(cj1*sj2);
IkReal x4982=((1.0)*x4975);
IkReal x4983=((1.0)*x4974);
IkReal x4984=(gconst124*x4974);
IkReal x4985=(gconst124*x4975);
evalcond[0]=((((-1.0)*x4977*x4983))+(((-1.0)*r22*x4982))+((r21*x4984)));
evalcond[1]=(sj0+((x4974*x4978))+(((-1.0)*x4979*x4983))+(((-1.0)*r02*x4982)));
evalcond[2]=(((r11*x4984))+(((-1.0)*r12*x4982))+(((-1.0)*x4980*x4983))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*x4977*x4982))+((r22*x4974))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r21*x4985)));
evalcond[4]=(((cj0*x4981))+((r02*x4974))+(((-1.0)*x4979*x4982))+((x4975*x4978))+((cj0*x4976)));
evalcond[5]=(((r11*x4985))+((sj0*x4976))+((r12*x4974))+(((-1.0)*x4980*x4982))+((sj0*x4981)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4986=IKPowWithIntegerCheck(IKsign((((gconst124*r00))+((gconst125*r01)))),-1);
if(!x4986.valid){
continue;
}
CheckValue<IkReal> x4987 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*gconst125*r20))+((cj0*gconst124*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4987.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4986.value)))+(x4987.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4988=IKsin(j4);
IkReal x4989=IKcos(j4);
IkReal x4990=(cj2*sj1);
IkReal x4991=(gconst125*r20);
IkReal x4992=(gconst124*r01);
IkReal x4993=(gconst125*r00);
IkReal x4994=(gconst125*r10);
IkReal x4995=(cj1*sj2);
IkReal x4996=((1.0)*x4989);
IkReal x4997=((1.0)*x4988);
IkReal x4998=(gconst124*x4988);
IkReal x4999=(gconst124*x4989);
evalcond[0]=((((-1.0)*r22*x4996))+(((-1.0)*x4991*x4997))+((r21*x4998)));
evalcond[1]=(sj0+((x4988*x4992))+(((-1.0)*r02*x4996))+(((-1.0)*x4993*x4997)));
evalcond[2]=((((-1.0)*r12*x4996))+((r11*x4998))+(((-1.0)*x4994*x4997))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*x4991*x4996))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x4988))+((r21*x4999)));
evalcond[4]=(((x4989*x4992))+(((-1.0)*x4993*x4996))+((r02*x4988))+((cj0*x4995))+((cj0*x4990)));
evalcond[5]=(((r12*x4988))+((sj0*x4995))+((sj0*x4990))+((r11*x4999))+(((-1.0)*x4994*x4996)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5000 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst124*r21*sj0))+(((-1.0)*gconst125*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5000.valid){
continue;
}
CheckValue<IkReal> x5001=IKPowWithIntegerCheck(IKsign((((gconst125*r11))+((gconst124*r10)))),-1);
if(!x5001.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5000.value)+(((1.5707963267949)*(x5001.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5002=IKsin(j4);
IkReal x5003=IKcos(j4);
IkReal x5004=(cj2*sj1);
IkReal x5005=(gconst125*r20);
IkReal x5006=(gconst124*r01);
IkReal x5007=(gconst125*r00);
IkReal x5008=(gconst125*r10);
IkReal x5009=(cj1*sj2);
IkReal x5010=((1.0)*x5003);
IkReal x5011=((1.0)*x5002);
IkReal x5012=(gconst124*x5002);
IkReal x5013=(gconst124*x5003);
evalcond[0]=((((-1.0)*r22*x5010))+((r21*x5012))+(((-1.0)*x5005*x5011)));
evalcond[1]=(sj0+((x5002*x5006))+(((-1.0)*r02*x5010))+(((-1.0)*x5007*x5011)));
evalcond[2]=((((-1.0)*x5008*x5011))+(((-1.0)*r12*x5010))+((r11*x5012))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r21*x5013))+((r22*x5002))+(((-1.0)*x5005*x5010)));
evalcond[4]=(((x5003*x5006))+((r02*x5002))+(((-1.0)*x5007*x5010))+((cj0*x5004))+((cj0*x5009)));
evalcond[5]=(((r12*x5002))+(((-1.0)*x5008*x5010))+((sj0*x5009))+((sj0*x5004))+((r11*x5013)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x5014=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x5014;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x5014);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x5015=((1.0)*cj5);
IkReal x5016=((((-1.0)*r21*x5015))+(((-1.0)*r20*sj5)));
j4eval[0]=x5016;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x5015))+((r11*sj5))))));
j4eval[2]=IKsign(x5016);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x5017=cj5*cj5;
IkReal x5018=r01*r01;
IkReal x5019=(r01*sj5);
IkReal x5020=(cj5*r00);
IkReal x5021=((((-1.0)*(r02*r02)))+(((2.0)*x5019*x5020))+((x5017*x5018))+(((-1.0)*x5018))+(((-1.0)*x5017*(r00*r00))));
j4eval[0]=x5021;
j4eval[1]=IKsign(x5021);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x5020))+x5019))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5022=cj5*cj5;
IkReal x5023=r01*r01;
IkReal x5024=(r01*sj5);
IkReal x5025=(cj5*r00);
CheckValue<IkReal> x5026=IKPowWithIntegerCheck(IKsign((((x5022*x5023))+(((-1.0)*(r02*r02)))+(((-1.0)*x5022*(r00*r00)))+(((-1.0)*x5023))+(((2.0)*x5024*x5025)))),-1);
if(!x5026.valid){
continue;
}
CheckValue<IkReal> x5027 = IKatan2WithCheck(IkReal(((((-1.0)*x5025))+x5024)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x5027.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5026.value)))+(x5027.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5028=IKcos(j4);
IkReal x5029=IKsin(j4);
IkReal x5030=(cj5*r00);
IkReal x5031=(cj5*r10);
IkReal x5032=(r21*sj5);
IkReal x5033=(cj5*r20);
IkReal x5034=((1.0)*x5028);
IkReal x5035=((1.0)*x5029);
IkReal x5036=(sj5*x5029);
IkReal x5037=(sj5*x5028);
evalcond[0]=(((r02*x5029))+(((-1.0)*x5030*x5034))+((r01*x5037)));
evalcond[1]=((((-1.0)*x5033*x5035))+(((-1.0)*r22*x5034))+((x5029*x5032)));
evalcond[2]=(((r11*x5036))+(((-1.0)*x5031*x5035))+(((-1.0)*r12*x5034)));
evalcond[3]=((1.0)+(((-1.0)*x5030*x5035))+((r01*x5036))+(((-1.0)*r02*x5034)));
evalcond[4]=(((cj2*sj1))+((r12*x5029))+((r11*x5037))+((cj1*sj2))+(((-1.0)*x5031*x5034)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x5033*x5034))+((x5028*x5032))+((r22*x5029)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5038=((1.0)*cj5);
CheckValue<IkReal> x5039 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj5))+(((-1.0)*r10*x5038)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5039.valid){
continue;
}
CheckValue<IkReal> x5040=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x5038))+(((-1.0)*r20*sj5)))),-1);
if(!x5040.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5039.value)+(((1.5707963267949)*(x5040.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5041=IKcos(j4);
IkReal x5042=IKsin(j4);
IkReal x5043=(cj5*r00);
IkReal x5044=(cj5*r10);
IkReal x5045=(r21*sj5);
IkReal x5046=(cj5*r20);
IkReal x5047=((1.0)*x5041);
IkReal x5048=((1.0)*x5042);
IkReal x5049=(sj5*x5042);
IkReal x5050=(sj5*x5041);
evalcond[0]=((((-1.0)*x5043*x5047))+((r01*x5050))+((r02*x5042)));
evalcond[1]=(((x5042*x5045))+(((-1.0)*r22*x5047))+(((-1.0)*x5046*x5048)));
evalcond[2]=((((-1.0)*r12*x5047))+(((-1.0)*x5044*x5048))+((r11*x5049)));
evalcond[3]=((1.0)+(((-1.0)*x5043*x5048))+(((-1.0)*r02*x5047))+((r01*x5049)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r11*x5050))+(((-1.0)*x5044*x5047))+((r12*x5042)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x5041*x5045))+(((-1.0)*x5046*x5047))+((r22*x5042)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5051 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5051.valid){
continue;
}
CheckValue<IkReal> x5052=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x5052.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5051.value)+(((1.5707963267949)*(x5052.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5053=IKcos(j4);
IkReal x5054=IKsin(j4);
IkReal x5055=(cj5*r00);
IkReal x5056=(cj5*r10);
IkReal x5057=(r21*sj5);
IkReal x5058=(cj5*r20);
IkReal x5059=((1.0)*x5053);
IkReal x5060=((1.0)*x5054);
IkReal x5061=(sj5*x5054);
IkReal x5062=(sj5*x5053);
evalcond[0]=((((-1.0)*x5055*x5059))+((r01*x5062))+((r02*x5054)));
evalcond[1]=((((-1.0)*x5058*x5060))+(((-1.0)*r22*x5059))+((x5054*x5057)));
evalcond[2]=((((-1.0)*x5056*x5060))+(((-1.0)*r12*x5059))+((r11*x5061)));
evalcond[3]=((1.0)+(((-1.0)*x5055*x5060))+(((-1.0)*r02*x5059))+((r01*x5061)));
evalcond[4]=(((cj2*sj1))+((r12*x5054))+((cj1*sj2))+((r11*x5062))+(((-1.0)*x5056*x5059)));
evalcond[5]=(((r22*x5054))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x5053*x5057))+(((-1.0)*x5058*x5059)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x5063=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x5063;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x5063);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x5064=((1.0)*cj5);
IkReal x5065=((((-1.0)*r10*sj5))+(((-1.0)*r11*x5064)));
j4eval[0]=x5065;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x5064)))))+(IKabs(r22)));
j4eval[2]=IKsign(x5065);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x5066=cj5*cj5;
IkReal x5067=r01*r01;
IkReal x5068=(cj5*r00);
IkReal x5069=(r01*sj5);
IkReal x5070=((((-2.0)*x5068*x5069))+x5067+(((-1.0)*x5066*x5067))+(r02*r02)+((x5066*(r00*r00))));
j4eval[0]=x5070;
j4eval[1]=IKsign(x5070);
j4eval[2]=((IKabs(r02))+(IKabs((x5069+(((-1.0)*x5068))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5071=cj5*cj5;
IkReal x5072=r01*r01;
IkReal x5073=(r01*sj5);
IkReal x5074=(cj5*r00);
CheckValue<IkReal> x5075=IKPowWithIntegerCheck(IKsign(((((-1.0)*x5071*x5072))+((x5071*(r00*r00)))+(((-2.0)*x5073*x5074))+x5072+(r02*r02))),-1);
if(!x5075.valid){
continue;
}
CheckValue<IkReal> x5076 = IKatan2WithCheck(IkReal((x5073+(((-1.0)*x5074)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x5076.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5075.value)))+(x5076.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5077=IKcos(j4);
IkReal x5078=IKsin(j4);
IkReal x5079=(cj5*r00);
IkReal x5080=(cj5*r10);
IkReal x5081=(r21*sj5);
IkReal x5082=((1.0)*cj2);
IkReal x5083=(cj5*r20);
IkReal x5084=((1.0)*x5077);
IkReal x5085=((1.0)*x5078);
IkReal x5086=(sj5*x5078);
IkReal x5087=(sj5*x5077);
evalcond[0]=(((r01*x5087))+(((-1.0)*x5079*x5084))+((r02*x5078)));
evalcond[1]=((((-1.0)*x5083*x5085))+((x5078*x5081))+(((-1.0)*r22*x5084)));
evalcond[2]=((((-1.0)*r12*x5084))+(((-1.0)*x5080*x5085))+((r11*x5086)));
evalcond[3]=((-1.0)+((r01*x5086))+(((-1.0)*x5079*x5085))+(((-1.0)*r02*x5084)));
evalcond[4]=(((x5077*x5081))+(((-1.0)*cj1*x5082))+((sj1*sj2))+(((-1.0)*x5083*x5084))+((r22*x5078)));
evalcond[5]=((((-1.0)*x5080*x5084))+(((-1.0)*sj1*x5082))+((r11*x5087))+(((-1.0)*cj1*sj2))+((r12*x5078)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5088=((1.0)*cj5);
CheckValue<IkReal> x5089=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x5088))+(((-1.0)*r10*sj5)))),-1);
if(!x5089.valid){
continue;
}
CheckValue<IkReal> x5090 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x5088)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5090.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5089.value)))+(x5090.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5091=IKcos(j4);
IkReal x5092=IKsin(j4);
IkReal x5093=(cj5*r00);
IkReal x5094=(cj5*r10);
IkReal x5095=(r21*sj5);
IkReal x5096=((1.0)*cj2);
IkReal x5097=(cj5*r20);
IkReal x5098=((1.0)*x5091);
IkReal x5099=((1.0)*x5092);
IkReal x5100=(sj5*x5092);
IkReal x5101=(sj5*x5091);
evalcond[0]=((((-1.0)*x5093*x5098))+((r01*x5101))+((r02*x5092)));
evalcond[1]=((((-1.0)*r22*x5098))+(((-1.0)*x5097*x5099))+((x5092*x5095)));
evalcond[2]=(((r11*x5100))+(((-1.0)*x5094*x5099))+(((-1.0)*r12*x5098)));
evalcond[3]=((-1.0)+(((-1.0)*x5093*x5099))+((r01*x5100))+(((-1.0)*r02*x5098)));
evalcond[4]=(((r22*x5092))+(((-1.0)*cj1*x5096))+((sj1*sj2))+((x5091*x5095))+(((-1.0)*x5097*x5098)));
evalcond[5]=((((-1.0)*sj1*x5096))+(((-1.0)*cj1*sj2))+((r12*x5092))+((r11*x5101))+(((-1.0)*x5094*x5098)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5102=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x5102.valid){
continue;
}
CheckValue<IkReal> x5103 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5103.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5102.value)))+(x5103.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5104=IKcos(j4);
IkReal x5105=IKsin(j4);
IkReal x5106=(cj5*r00);
IkReal x5107=(cj5*r10);
IkReal x5108=(r21*sj5);
IkReal x5109=((1.0)*cj2);
IkReal x5110=(cj5*r20);
IkReal x5111=((1.0)*x5104);
IkReal x5112=((1.0)*x5105);
IkReal x5113=(sj5*x5105);
IkReal x5114=(sj5*x5104);
evalcond[0]=(((r01*x5114))+(((-1.0)*x5106*x5111))+((r02*x5105)));
evalcond[1]=(((x5105*x5108))+(((-1.0)*r22*x5111))+(((-1.0)*x5110*x5112)));
evalcond[2]=((((-1.0)*x5107*x5112))+((r11*x5113))+(((-1.0)*r12*x5111)));
evalcond[3]=((-1.0)+((r01*x5113))+(((-1.0)*r02*x5111))+(((-1.0)*x5106*x5112)));
evalcond[4]=(((x5104*x5108))+(((-1.0)*x5110*x5111))+((r22*x5105))+((sj1*sj2))+(((-1.0)*cj1*x5109)));
evalcond[5]=(((r12*x5105))+(((-1.0)*sj1*x5109))+(((-1.0)*cj1*sj2))+(((-1.0)*x5107*x5111))+((r11*x5114)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5116 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x5116)==0){
continue;
}
IkReal x5115=pow(x5116,-0.5);
CheckValue<IkReal> x5117 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x5117.valid){
continue;
}
IkReal gconst126=((-1.0)*(x5117.value));
IkReal gconst127=((-1.0)*r11*x5115);
IkReal gconst128=(r10*x5115);
CheckValue<IkReal> x5118 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x5118.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x5118.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x5121 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x5121.valid){
continue;
}
IkReal x5119=((-1.0)*(x5121.value));
IkReal x5120=x5115;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst127;
cj5=gconst128;
j5=x5119;
IkReal gconst126=x5119;
IkReal gconst127=((-1.0)*r11*x5120);
IkReal gconst128=(r10*x5120);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5122=((1.0)*gconst128);
CheckValue<IkReal> x5123 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*cj0*r00*x5122))+(((-1.0)*r10*sj0*x5122))+((cj0*gconst127*r01))+((gconst127*r11*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5123.valid){
continue;
}
CheckValue<IkReal> x5124=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst127*r20))+(((-1.0)*r21*x5122)))),-1);
if(!x5124.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5123.value)+(((1.5707963267949)*(x5124.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5125=IKsin(j4);
IkReal x5126=IKcos(j4);
IkReal x5127=(gconst127*r01);
IkReal x5128=(cj2*sj1);
IkReal x5129=(gconst128*r10);
IkReal x5130=(gconst128*r00);
IkReal x5131=(gconst128*r20);
IkReal x5132=(cj1*sj2);
IkReal x5133=((1.0)*x5126);
IkReal x5134=((1.0)*x5125);
IkReal x5135=(gconst127*x5126);
IkReal x5136=(gconst127*x5125);
evalcond[0]=((((-1.0)*x5131*x5134))+((r21*x5136))+(((-1.0)*r22*x5133)));
evalcond[1]=(sj0+((x5125*x5127))+(((-1.0)*r02*x5133))+(((-1.0)*x5130*x5134)));
evalcond[2]=(((r11*x5136))+(((-1.0)*x5129*x5134))+(((-1.0)*r12*x5133))+(((-1.0)*cj0)));
evalcond[3]=(((r22*x5125))+(((-1.0)*x5131*x5133))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r21*x5135)));
evalcond[4]=(((x5126*x5127))+((cj0*x5132))+((cj0*x5128))+(((-1.0)*x5130*x5133))+((r02*x5125)));
evalcond[5]=(((r12*x5125))+((r11*x5135))+(((-1.0)*x5129*x5133))+((sj0*x5132))+((sj0*x5128)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5137 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*gconst128*r20))+((cj0*gconst127*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5137.valid){
continue;
}
CheckValue<IkReal> x5138=IKPowWithIntegerCheck(IKsign((((gconst128*r01))+((gconst127*r00)))),-1);
if(!x5138.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5137.value)+(((1.5707963267949)*(x5138.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5139=IKsin(j4);
IkReal x5140=IKcos(j4);
IkReal x5141=(gconst127*r01);
IkReal x5142=(cj2*sj1);
IkReal x5143=(gconst128*r10);
IkReal x5144=(gconst128*r00);
IkReal x5145=(gconst128*r20);
IkReal x5146=(cj1*sj2);
IkReal x5147=((1.0)*x5140);
IkReal x5148=((1.0)*x5139);
IkReal x5149=(gconst127*x5140);
IkReal x5150=(gconst127*x5139);
evalcond[0]=(((r21*x5150))+(((-1.0)*r22*x5147))+(((-1.0)*x5145*x5148)));
evalcond[1]=(sj0+(((-1.0)*r02*x5147))+((x5139*x5141))+(((-1.0)*x5144*x5148)));
evalcond[2]=(((r11*x5150))+(((-1.0)*x5143*x5148))+(((-1.0)*r12*x5147))+(((-1.0)*cj0)));
evalcond[3]=(((r21*x5149))+((r22*x5139))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x5145*x5147)));
evalcond[4]=(((cj0*x5146))+((cj0*x5142))+((r02*x5139))+((x5140*x5141))+(((-1.0)*x5144*x5147)));
evalcond[5]=(((r12*x5139))+(((-1.0)*x5143*x5147))+((r11*x5149))+((sj0*x5146))+((sj0*x5142)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5152 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x5152)==0){
continue;
}
IkReal x5151=pow(x5152,-0.5);
CheckValue<IkReal> x5153 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x5153.valid){
continue;
}
IkReal gconst129=((3.14159265358979)+(((-1.0)*(x5153.value))));
IkReal gconst130=((1.0)*r11*x5151);
IkReal gconst131=((-1.0)*r10*x5151);
CheckValue<IkReal> x5154 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x5154.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x5154.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x5157 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x5157.valid){
continue;
}
IkReal x5155=((1.0)*(x5157.value));
IkReal x5156=x5151;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x5155)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x5155)));
IkReal gconst130=((1.0)*r11*x5156);
IkReal gconst131=((-1.0)*r10*x5156);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x5160 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x5160.valid){
continue;
}
IkReal x5158=((1.0)*(x5160.value));
IkReal x5159=x5151;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x5158)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x5158)));
IkReal gconst130=((1.0)*r11*x5159);
IkReal gconst131=((-1.0)*r10*x5159);
IkReal x5161=r12*r12;
IkReal x5162=(cj0*r02);
IkReal x5163=x5151;
IkReal x5164=(sj0*x5163);
j4eval[0]=((IKabs((x5162+((r12*sj0)))))+(IKabs(((((-1.0)*x5164))+((r12*x5162*x5163))+((x5161*x5164))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x5167 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x5167.valid){
continue;
}
IkReal x5165=((1.0)*(x5167.value));
IkReal x5166=x5151;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x5165)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x5165)));
IkReal gconst130=((1.0)*r11*x5166);
IkReal gconst131=((-1.0)*r10*x5166);
IkReal x5168=r12*r12;
IkReal x5169=(sj1*sj2);
IkReal x5170=((1.0)+(((-1.0)*x5168)));
IkReal x5171=((1.0)*cj1*cj2);
CheckValue<IkReal> x5178=IKPowWithIntegerCheck(x5170,-1);
if(!x5178.valid){
continue;
}
IkReal x5172=x5178.value;
CheckValue<IkReal> x5179=IKPowWithIntegerCheck(((-1.0)+x5168),-1);
if(!x5179.valid){
continue;
}
IkReal x5173=x5179.value;
IkReal x5174=((1.0)*x5172);
if((x5170) < -0.00001)
continue;
IkReal x5175=IKsqrt(x5170);
IkReal x5176=(r12*r22*x5173*x5175);
IkReal x5177=((((-1.0)*x5174*(r10*r10)*(r20*r20)))+(((-2.0)*r10*r11*r20*r21*x5172))+(((-1.0)*(r22*r22)))+(((-1.0)*x5174*(r11*r11)*(r21*r21))));
j4eval[0]=x5177;
j4eval[1]=IKsign(x5177);
j4eval[2]=((IKabs((((x5169*x5176))+(((-1.0)*x5171*x5176)))))+(IKabs((((r22*x5169))+(((-1.0)*r22*x5171))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5180=(gconst131*r20);
IkReal x5181=(cj1*cj2);
IkReal x5182=(sj1*sj2);
IkReal x5183=(gconst130*r21);
CheckValue<IkReal> x5184=IKPowWithIntegerCheck(IKsign(((((2.0)*x5180*x5183))+(((-1.0)*(r22*r22)))+(((-1.0)*(x5180*x5180)))+(((-1.0)*(x5183*x5183))))),-1);
if(!x5184.valid){
continue;
}
CheckValue<IkReal> x5185 = IKatan2WithCheck(IkReal((((r22*x5182))+(((-1.0)*r22*x5181)))),IkReal(((((-1.0)*x5180*x5182))+((x5182*x5183))+((x5180*x5181))+(((-1.0)*x5181*x5183)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5185.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5184.value)))+(x5185.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5186=IKsin(j4);
IkReal x5187=IKcos(j4);
IkReal x5188=(cj2*sj1);
IkReal x5189=(gconst130*r11);
IkReal x5190=(cj1*sj2);
IkReal x5191=((1.0)*x5187);
IkReal x5192=(gconst130*x5187);
IkReal x5193=(gconst130*x5186);
IkReal x5194=((1.0)*gconst131*x5186);
evalcond[0]=((((-1.0)*r20*x5194))+((r21*x5193))+(((-1.0)*r22*x5191)));
evalcond[1]=(sj0+(((-1.0)*r00*x5194))+(((-1.0)*r02*x5191))+((r01*x5193)));
evalcond[2]=((((-1.0)*r12*x5191))+((x5186*x5189))+(((-1.0)*r10*x5194))+(((-1.0)*cj0)));
evalcond[3]=(((r22*x5186))+((r21*x5192))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst131*r20*x5191)));
evalcond[4]=(((cj0*x5190))+(((-1.0)*gconst131*r00*x5191))+((cj0*x5188))+((r02*x5186))+((r01*x5192)));
evalcond[5]=(((sj0*x5190))+((x5187*x5189))+((sj0*x5188))+(((-1.0)*gconst131*r10*x5191))+((r12*x5186)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5195=((1.0)*gconst131);
CheckValue<IkReal> x5196 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((cj0*gconst130*r01))+(((-1.0)*cj0*r00*x5195))+((gconst130*r11*sj0))+(((-1.0)*r10*sj0*x5195)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5196.valid){
continue;
}
CheckValue<IkReal> x5197=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x5195))+(((-1.0)*gconst130*r20)))),-1);
if(!x5197.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5196.value)+(((1.5707963267949)*(x5197.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5198=IKsin(j4);
IkReal x5199=IKcos(j4);
IkReal x5200=(cj2*sj1);
IkReal x5201=(gconst130*r11);
IkReal x5202=(cj1*sj2);
IkReal x5203=((1.0)*x5199);
IkReal x5204=(gconst130*x5199);
IkReal x5205=(gconst130*x5198);
IkReal x5206=((1.0)*gconst131*x5198);
evalcond[0]=((((-1.0)*r22*x5203))+(((-1.0)*r20*x5206))+((r21*x5205)));
evalcond[1]=((((-1.0)*r02*x5203))+sj0+((r01*x5205))+(((-1.0)*r00*x5206)));
evalcond[2]=((((-1.0)*r10*x5206))+((x5198*x5201))+(((-1.0)*r12*x5203))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x5198))+((r21*x5204))+(((-1.0)*gconst131*r20*x5203)));
evalcond[4]=(((r01*x5204))+((r02*x5198))+(((-1.0)*gconst131*r00*x5203))+((cj0*x5202))+((cj0*x5200)));
evalcond[5]=((((-1.0)*gconst131*r10*x5203))+((r12*x5198))+((sj0*x5200))+((sj0*x5202))+((x5199*x5201)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5207=IKPowWithIntegerCheck(IKsign((((gconst131*r01))+((gconst130*r00)))),-1);
if(!x5207.valid){
continue;
}
CheckValue<IkReal> x5208 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst130*r21))+(((-1.0)*cj0*gconst131*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5208.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5207.value)))+(x5208.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5209=IKsin(j4);
IkReal x5210=IKcos(j4);
IkReal x5211=(cj2*sj1);
IkReal x5212=(gconst130*r11);
IkReal x5213=(cj1*sj2);
IkReal x5214=((1.0)*x5210);
IkReal x5215=(gconst130*x5210);
IkReal x5216=(gconst130*x5209);
IkReal x5217=((1.0)*gconst131*x5209);
evalcond[0]=((((-1.0)*r22*x5214))+(((-1.0)*r20*x5217))+((r21*x5216)));
evalcond[1]=(((r01*x5216))+sj0+(((-1.0)*r00*x5217))+(((-1.0)*r02*x5214)));
evalcond[2]=(((x5209*x5212))+(((-1.0)*r10*x5217))+(((-1.0)*cj0))+(((-1.0)*r12*x5214)));
evalcond[3]=((((-1.0)*gconst131*r20*x5214))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x5209))+((r21*x5215)));
evalcond[4]=((((-1.0)*gconst131*r00*x5214))+((r01*x5215))+((r02*x5209))+((cj0*x5213))+((cj0*x5211)));
evalcond[5]=(((sj0*x5213))+((sj0*x5211))+((x5210*x5212))+((r12*x5209))+(((-1.0)*gconst131*r10*x5214)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x5218=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x5218;
j4eval[1]=IKsign(x5218);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x5219=((1.0)*cj5);
IkReal x5220=((((-1.0)*r21*x5219))+(((-1.0)*r20*sj5)));
j4eval[0]=x5220;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x5219))))));
j4eval[2]=IKsign(x5220);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x5221=cj5*cj5;
IkReal x5222=r11*r11;
IkReal x5223=(r11*sj5);
IkReal x5224=(cj5*r10);
IkReal x5225=((((-1.0)*x5221*x5222))+(r12*r12)+(((-2.0)*x5223*x5224))+x5222+((x5221*(r10*r10))));
j4eval[0]=x5225;
j4eval[1]=IKsign(x5225);
j4eval[2]=((IKabs(r12))+(IKabs((x5223+(((-1.0)*x5224))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5226=cj5*cj5;
IkReal x5227=r11*r11;
IkReal x5228=(cj5*r10);
IkReal x5229=(r11*sj5);
CheckValue<IkReal> x5230=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-1.0)*x5226*x5227))+((x5226*(r10*r10)))+x5227+(((-2.0)*x5228*x5229)))),-1);
if(!x5230.valid){
continue;
}
CheckValue<IkReal> x5231 = IKatan2WithCheck(IkReal((x5229+(((-1.0)*x5228)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x5231.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5230.value)))+(x5231.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5232=IKcos(j4);
IkReal x5233=IKsin(j4);
IkReal x5234=(cj5*r00);
IkReal x5235=(cj5*r10);
IkReal x5236=(r21*sj5);
IkReal x5237=(cj5*r20);
IkReal x5238=((1.0)*x5232);
IkReal x5239=((1.0)*x5233);
IkReal x5240=(sj5*x5233);
IkReal x5241=(sj5*x5232);
evalcond[0]=(((r11*x5241))+(((-1.0)*x5235*x5238))+((r12*x5233)));
evalcond[1]=((((-1.0)*r22*x5238))+((x5233*x5236))+(((-1.0)*x5237*x5239)));
evalcond[2]=((((-1.0)*x5234*x5239))+(((-1.0)*r02*x5238))+((r01*x5240)));
evalcond[3]=((-1.0)+((r11*x5240))+(((-1.0)*x5235*x5239))+(((-1.0)*r12*x5238)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x5234*x5238))+((cj1*sj2))+((r01*x5241))+((r02*x5233)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x5232*x5236))+(((-1.0)*x5237*x5238))+((r22*x5233)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5242=((1.0)*cj5);
CheckValue<IkReal> x5243 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x5242)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5243.valid){
continue;
}
CheckValue<IkReal> x5244=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x5242))+(((-1.0)*r20*sj5)))),-1);
if(!x5244.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5243.value)+(((1.5707963267949)*(x5244.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5245=IKcos(j4);
IkReal x5246=IKsin(j4);
IkReal x5247=(cj5*r00);
IkReal x5248=(cj5*r10);
IkReal x5249=(r21*sj5);
IkReal x5250=(cj5*r20);
IkReal x5251=((1.0)*x5245);
IkReal x5252=((1.0)*x5246);
IkReal x5253=(sj5*x5246);
IkReal x5254=(sj5*x5245);
evalcond[0]=((((-1.0)*x5248*x5251))+((r12*x5246))+((r11*x5254)));
evalcond[1]=(((x5246*x5249))+(((-1.0)*r22*x5251))+(((-1.0)*x5250*x5252)));
evalcond[2]=((((-1.0)*r02*x5251))+((r01*x5253))+(((-1.0)*x5247*x5252)));
evalcond[3]=((-1.0)+(((-1.0)*x5248*x5252))+(((-1.0)*r12*x5251))+((r11*x5253)));
evalcond[4]=(((cj2*sj1))+((r01*x5254))+((cj1*sj2))+(((-1.0)*x5247*x5251))+((r02*x5246)));
evalcond[5]=(((x5245*x5249))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x5250*x5251))+((r22*x5246)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5255 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5255.valid){
continue;
}
CheckValue<IkReal> x5256=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x5256.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5255.value)+(((1.5707963267949)*(x5256.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5257=IKcos(j4);
IkReal x5258=IKsin(j4);
IkReal x5259=(cj5*r00);
IkReal x5260=(cj5*r10);
IkReal x5261=(r21*sj5);
IkReal x5262=(cj5*r20);
IkReal x5263=((1.0)*x5257);
IkReal x5264=((1.0)*x5258);
IkReal x5265=(sj5*x5258);
IkReal x5266=(sj5*x5257);
evalcond[0]=(((r12*x5258))+((r11*x5266))+(((-1.0)*x5260*x5263)));
evalcond[1]=((((-1.0)*r22*x5263))+(((-1.0)*x5262*x5264))+((x5258*x5261)));
evalcond[2]=((((-1.0)*x5259*x5264))+((r01*x5265))+(((-1.0)*r02*x5263)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x5263))+((r11*x5265))+(((-1.0)*x5260*x5264)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x5259*x5263))+((r01*x5266))+((cj1*sj2))+((r02*x5258)));
evalcond[5]=(((r22*x5258))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x5257*x5261))+(((-1.0)*x5262*x5263)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x5267=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x5267;
j4eval[1]=IKsign(x5267);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x5268=((1.0)*cj5);
IkReal x5269=((((-1.0)*r00*sj5))+(((-1.0)*r01*x5268)));
j4eval[0]=x5269;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x5268)))))+(IKabs(r22)));
j4eval[2]=IKsign(x5269);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x5270=(sj1*sj2);
IkReal x5271=(cj5*r10);
IkReal x5272=(r11*sj5);
IkReal x5273=(cj1*cj2);
IkReal x5274=((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)));
j4eval[0]=x5274;
j4eval[1]=((IKabs(((((-1.0)*r12*x5270))+((r12*x5273)))))+(IKabs(((((-1.0)*x5270*x5271))+((x5271*x5273))+((x5270*x5272))+(((-1.0)*x5272*x5273))))));
j4eval[2]=IKsign(x5274);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5275=(sj1*sj2);
IkReal x5276=(cj5*r10);
IkReal x5277=(r11*sj5);
IkReal x5278=(cj1*cj2);
CheckValue<IkReal> x5279=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)))),-1);
if(!x5279.valid){
continue;
}
CheckValue<IkReal> x5280 = IKatan2WithCheck(IkReal(((((-1.0)*x5277*x5278))+((x5276*x5278))+((x5275*x5277))+(((-1.0)*x5275*x5276)))),IkReal(((((-1.0)*r12*x5275))+((r12*x5278)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5280.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5279.value)))+(x5280.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5281=IKcos(j4);
IkReal x5282=IKsin(j4);
IkReal x5283=(cj5*r00);
IkReal x5284=(cj5*r10);
IkReal x5285=(r21*sj5);
IkReal x5286=((1.0)*cj2);
IkReal x5287=(cj5*r20);
IkReal x5288=((1.0)*x5281);
IkReal x5289=((1.0)*x5282);
IkReal x5290=(sj5*x5282);
IkReal x5291=(sj5*x5281);
evalcond[0]=(((r12*x5282))+(((-1.0)*x5284*x5288))+((r11*x5291)));
evalcond[1]=((((-1.0)*r22*x5288))+(((-1.0)*x5287*x5289))+((x5282*x5285)));
evalcond[2]=((((-1.0)*r02*x5288))+((r01*x5290))+(((-1.0)*x5283*x5289)));
evalcond[3]=((1.0)+(((-1.0)*x5284*x5289))+(((-1.0)*r12*x5288))+((r11*x5290)));
evalcond[4]=((((-1.0)*x5287*x5288))+((r22*x5282))+(((-1.0)*cj1*x5286))+((sj1*sj2))+((x5281*x5285)));
evalcond[5]=(((r02*x5282))+(((-1.0)*sj1*x5286))+(((-1.0)*cj1*sj2))+((r01*x5291))+(((-1.0)*x5283*x5288)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5292=((1.0)*cj5);
CheckValue<IkReal> x5293=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x5292))+(((-1.0)*r00*sj5)))),-1);
if(!x5293.valid){
continue;
}
CheckValue<IkReal> x5294 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x5292)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5294.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5293.value)))+(x5294.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5295=IKcos(j4);
IkReal x5296=IKsin(j4);
IkReal x5297=(cj5*r00);
IkReal x5298=(cj5*r10);
IkReal x5299=(r21*sj5);
IkReal x5300=((1.0)*cj2);
IkReal x5301=(cj5*r20);
IkReal x5302=((1.0)*x5295);
IkReal x5303=((1.0)*x5296);
IkReal x5304=(sj5*x5296);
IkReal x5305=(sj5*x5295);
evalcond[0]=(((r12*x5296))+(((-1.0)*x5298*x5302))+((r11*x5305)));
evalcond[1]=((((-1.0)*r22*x5302))+(((-1.0)*x5301*x5303))+((x5296*x5299)));
evalcond[2]=((((-1.0)*x5297*x5303))+(((-1.0)*r02*x5302))+((r01*x5304)));
evalcond[3]=((1.0)+(((-1.0)*r12*x5302))+(((-1.0)*x5298*x5303))+((r11*x5304)));
evalcond[4]=(((r22*x5296))+((x5295*x5299))+(((-1.0)*x5301*x5302))+((sj1*sj2))+(((-1.0)*cj1*x5300)));
evalcond[5]=((((-1.0)*x5297*x5302))+((r02*x5296))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x5300))+((r01*x5305)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5306=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x5306.valid){
continue;
}
CheckValue<IkReal> x5307 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5307.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5306.value)))+(x5307.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5308=IKcos(j4);
IkReal x5309=IKsin(j4);
IkReal x5310=(cj5*r00);
IkReal x5311=(cj5*r10);
IkReal x5312=(r21*sj5);
IkReal x5313=((1.0)*cj2);
IkReal x5314=(cj5*r20);
IkReal x5315=((1.0)*x5308);
IkReal x5316=((1.0)*x5309);
IkReal x5317=(sj5*x5309);
IkReal x5318=(sj5*x5308);
evalcond[0]=(((r12*x5309))+((r11*x5318))+(((-1.0)*x5311*x5315)));
evalcond[1]=((((-1.0)*x5314*x5316))+((x5309*x5312))+(((-1.0)*r22*x5315)));
evalcond[2]=((((-1.0)*x5310*x5316))+((r01*x5317))+(((-1.0)*r02*x5315)));
evalcond[3]=((1.0)+(((-1.0)*r12*x5315))+((r11*x5317))+(((-1.0)*x5311*x5316)));
evalcond[4]=((((-1.0)*x5314*x5315))+((sj1*sj2))+((r22*x5309))+((x5308*x5312))+(((-1.0)*cj1*x5313)));
evalcond[5]=((((-1.0)*x5310*x5315))+((r01*x5318))+(((-1.0)*cj1*sj2))+((r02*x5309))+(((-1.0)*sj1*x5313)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x5319=((-1.0)*py);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x5319);
rxp0_2=(py*r00);
rxp1_0=(r21*x5319);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x5320=((-1.0)*py);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x5320);
rxp0_2=(py*r00);
rxp1_0=(r21*x5320);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x5321=((-1.0)*py);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x5321);
rxp0_2=(py*r00);
rxp1_0=(r21*x5321);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=(((r01*sj5))+(((-1.0)*cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x5324=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*cj5*r00))),-1);
if(!x5324.valid){
continue;
}
IkReal x5322=x5324.value;
IkReal x5323=((1.0)*cj0*x5322);
cj4array[0]=((((-1.0)*cj2*sj1*x5323))+(((-1.0)*cj1*sj2*x5323)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x5325=IKsin(j4);
IkReal x5326=IKcos(j4);
IkReal x5327=(r21*sj5);
IkReal x5328=((1.0)*x5326);
IkReal x5329=((1.0)*cj5*x5325);
evalcond[0]=(r12*x5325);
evalcond[1]=((((-1.0)*r12*x5328))+(((-1.0)*cj0)));
evalcond[2]=(((x5325*x5327))+(((-1.0)*r20*x5329)));
evalcond[3]=(((r01*sj5*x5325))+(((-1.0)*r00*x5329)));
evalcond[4]=((((-1.0)*cj5*r20*x5328))+(((-1.0)*cj1*cj2))+((x5326*x5327))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x5331=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x5331.valid){
continue;
}
IkReal x5330=x5331.value;
cj4array[0]=(((cj1*cj2*x5330))+(((-1.0)*sj1*sj2*x5330)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x5332=IKsin(j4);
IkReal x5333=IKcos(j4);
IkReal x5334=(r01*sj5);
IkReal x5335=((1.0)*cj5*r00);
evalcond[0]=(r12*x5332);
evalcond[1]=((((-1.0)*r12*x5333))+(((-1.0)*cj0)));
evalcond[2]=(((r21*sj5*x5332))+(((-1.0)*cj5*r20*x5332)));
evalcond[3]=((((-1.0)*x5332*x5335))+((x5332*x5334)));
evalcond[4]=((((-1.0)*x5333*x5335))+((cj0*cj2*sj1))+((cj0*cj1*sj2))+((x5333*x5334)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x5336=IKPowWithIntegerCheck(r12,-1);
if(!x5336.valid){
continue;
}
cj4array[0]=((-1.0)*cj0*(x5336.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x5337=IKsin(j4);
IkReal x5338=IKcos(j4);
IkReal x5339=(sj5*x5338);
IkReal x5340=(sj5*x5337);
IkReal x5341=((1.0)*cj5*x5337);
IkReal x5342=((1.0)*cj5*x5338);
evalcond[0]=(r12*x5337);
evalcond[1]=((((-1.0)*r20*x5341))+((r21*x5340)));
evalcond[2]=(((r01*x5340))+(((-1.0)*r00*x5341)));
evalcond[3]=((((-1.0)*r20*x5342))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r21*x5339)));
evalcond[4]=((((-1.0)*r00*x5342))+((r01*x5339))+((cj0*cj2*sj1))+((cj0*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5343=((1.0)*cj5);
CheckValue<IkReal> x5344=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x5343))+(((-1.0)*r20*sj5)))),-1);
if(!x5344.valid){
continue;
}
CheckValue<IkReal> x5345 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*cj0*r00*x5343))+((r11*sj0*sj5))+(((-1.0)*r10*sj0*x5343))+((cj0*r01*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5345.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5344.value)))+(x5345.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5346=IKsin(j4);
IkReal x5347=IKcos(j4);
IkReal x5348=(cj5*r00);
IkReal x5349=(cj5*r10);
IkReal x5350=(cj2*sj1);
IkReal x5351=(r21*sj5);
IkReal x5352=(cj5*r20);
IkReal x5353=(cj1*sj2);
IkReal x5354=((1.0)*x5347);
IkReal x5355=((1.0)*x5346);
IkReal x5356=(sj5*x5346);
IkReal x5357=(sj5*x5347);
evalcond[0]=(((x5346*x5351))+(((-1.0)*x5352*x5355))+(((-1.0)*r22*x5354)));
evalcond[1]=(sj0+(((-1.0)*r02*x5354))+((r01*x5356))+(((-1.0)*x5348*x5355)));
evalcond[2]=(((r11*x5356))+(((-1.0)*r12*x5354))+(((-1.0)*x5349*x5355))+(((-1.0)*cj0)));
evalcond[3]=(((x5347*x5351))+(((-1.0)*x5352*x5354))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x5346)));
evalcond[4]=(((r01*x5357))+((cj0*x5353))+((cj0*x5350))+((r02*x5346))+(((-1.0)*x5348*x5354)));
evalcond[5]=(((sj0*x5353))+((sj0*x5350))+((r12*x5346))+((r11*x5357))+(((-1.0)*x5349*x5354)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5358=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x5358.valid){
continue;
}
CheckValue<IkReal> x5359 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5359.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5358.value)))+(x5359.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5360=IKsin(j4);
IkReal x5361=IKcos(j4);
IkReal x5362=(cj5*r00);
IkReal x5363=(cj5*r10);
IkReal x5364=(cj2*sj1);
IkReal x5365=(r21*sj5);
IkReal x5366=(cj5*r20);
IkReal x5367=(cj1*sj2);
IkReal x5368=((1.0)*x5361);
IkReal x5369=((1.0)*x5360);
IkReal x5370=(sj5*x5360);
IkReal x5371=(sj5*x5361);
evalcond[0]=((((-1.0)*r22*x5368))+((x5360*x5365))+(((-1.0)*x5366*x5369)));
evalcond[1]=(sj0+(((-1.0)*r02*x5368))+(((-1.0)*x5362*x5369))+((r01*x5370)));
evalcond[2]=((((-1.0)*x5363*x5369))+((r11*x5370))+(((-1.0)*r12*x5368))+(((-1.0)*cj0)));
evalcond[3]=(((r22*x5360))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x5366*x5368))+((x5361*x5365)));
evalcond[4]=(((r02*x5360))+(((-1.0)*x5362*x5368))+((r01*x5371))+((cj0*x5364))+((cj0*x5367)));
evalcond[5]=(((r12*x5360))+(((-1.0)*x5363*x5368))+((sj0*x5367))+((sj0*x5364))+((r11*x5371)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5372=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x5372.valid){
continue;
}
CheckValue<IkReal> x5373 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5373.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5372.value)))+(x5373.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5374=IKsin(j4);
IkReal x5375=IKcos(j4);
IkReal x5376=(cj5*r00);
IkReal x5377=(cj5*r10);
IkReal x5378=(cj2*sj1);
IkReal x5379=(r21*sj5);
IkReal x5380=(cj5*r20);
IkReal x5381=(cj1*sj2);
IkReal x5382=((1.0)*x5375);
IkReal x5383=((1.0)*x5374);
IkReal x5384=(sj5*x5374);
IkReal x5385=(sj5*x5375);
evalcond[0]=((((-1.0)*x5380*x5383))+(((-1.0)*r22*x5382))+((x5374*x5379)));
evalcond[1]=(sj0+(((-1.0)*r02*x5382))+(((-1.0)*x5376*x5383))+((r01*x5384)));
evalcond[2]=(((r11*x5384))+(((-1.0)*r12*x5382))+(((-1.0)*x5377*x5383))+(((-1.0)*cj0)));
evalcond[3]=(((r22*x5374))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x5380*x5382))+((x5375*x5379)));
evalcond[4]=(((cj0*x5378))+((cj0*x5381))+((r02*x5374))+(((-1.0)*x5376*x5382))+((r01*x5385)));
evalcond[5]=(((sj0*x5381))+((sj0*x5378))+((r11*x5385))+((r12*x5374))+(((-1.0)*x5377*x5382)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5386=r21*r21;
IkReal x5387=cj5*cj5;
IkReal x5388=(sj1*sj2);
IkReal x5389=(r21*sj5);
IkReal x5390=(cj1*cj2);
IkReal x5391=(cj5*r20);
CheckValue<IkReal> x5392 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x5390))+((r22*x5388)))),IkReal((((x5388*x5389))+(((-1.0)*x5389*x5390))+(((-1.0)*x5388*x5391))+((x5390*x5391)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5392.valid){
continue;
}
CheckValue<IkReal> x5393=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r22*r22)))+(((2.0)*x5389*x5391))+(((-1.0)*x5386))+((x5386*x5387))+(((-1.0)*x5387*(r20*r20))))),-1);
if(!x5393.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5392.value)+(((1.5707963267949)*(x5393.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x5394=IKsin(j4);
IkReal x5395=IKcos(j4);
IkReal x5396=(r21*sj5);
IkReal x5397=(cj5*r20);
IkReal x5398=((1.0)*x5395);
evalcond[0]=((((-1.0)*x5394*x5397))+((x5394*x5396))+(((-1.0)*r22*x5398)));
evalcond[1]=(((r22*x5394))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x5397*x5398))+((x5395*x5396)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x5399=(cj5*sj4);
IkReal x5400=(sj4*sj5);
if( IKabs(((((-1.0)*r01*x5400))+((r00*x5399))+((cj4*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r11*x5400))+(((-1.0)*r10*x5399))+(((-1.0)*cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r01*x5400))+((r00*x5399))+((cj4*r02))))+IKsqr((((r11*x5400))+(((-1.0)*r10*x5399))+(((-1.0)*cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r01*x5400))+((r00*x5399))+((cj4*r02))), (((r11*x5400))+(((-1.0)*r10*x5399))+(((-1.0)*cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x5401=IKcos(j0);
IkReal x5402=IKsin(j0);
IkReal x5403=(r10*sj5);
IkReal x5404=((1.0)*sj2);
IkReal x5405=(r11*sj5);
IkReal x5406=(cj1*cj2);
IkReal x5407=(cj1*sj2);
IkReal x5408=((1.0)*cj5);
IkReal x5409=((0.11)*cj5);
IkReal x5410=(r00*sj5);
IkReal x5411=((0.214)*cj2);
IkReal x5412=((1.0)*cj4);
IkReal x5413=(r01*sj5);
IkReal x5414=(sj1*x5402);
IkReal x5415=(sj1*x5401);
evalcond[0]=((((-1.0)*r02*x5412))+(((-1.0)*r00*sj4*x5408))+x5402+((sj4*x5413)));
evalcond[1]=((((-1.0)*x5401))+((sj4*x5405))+(((-1.0)*r10*sj4*x5408))+(((-1.0)*r12*x5412)));
evalcond[2]=((((-1.0)*x5410))+(((-1.0)*r01*x5408))+(((-1.0)*x5404*x5415))+((x5401*x5406)));
evalcond[3]=((((-1.0)*x5403))+(((-1.0)*x5404*x5414))+((x5402*x5406))+(((-1.0)*r11*x5408)));
evalcond[4]=(((cj2*x5415))+((x5401*x5407))+(((-1.0)*cj4*r00*x5408))+((r02*sj4))+((cj4*x5413)));
evalcond[5]=(((cj2*x5414))+(((-1.0)*cj4*r10*x5408))+((x5402*x5407))+((cj4*x5405))+((r12*sj4)));
evalcond[6]=((((-0.11)*x5410))+(((0.123)*x5402))+(((-1.0)*r01*x5409))+(((-1.0)*px))+(((-0.243)*x5415))+(((-1.0)*x5411*x5415))+(((-0.214)*x5401*x5407)));
evalcond[7]=((((-0.214)*x5402*x5407))+(((-0.11)*x5403))+(((-1.0)*py))+(((-1.0)*r11*x5409))+(((-0.243)*x5414))+(((-1.0)*x5411*x5414))+(((-0.123)*x5401)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x5416=IKPowWithIntegerCheck(IKsign(((((-1.0)*sj1*sj2))+((cj1*cj2)))),-1);
if(!x5416.valid){
continue;
}
CheckValue<IkReal> x5417 = IKatan2WithCheck(IkReal((((cj5*r11))+((r10*sj5)))),IkReal((((r00*sj5))+((cj5*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5417.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5416.value)))+(x5417.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x5418=IKcos(j0);
IkReal x5419=IKsin(j0);
IkReal x5420=(r10*sj5);
IkReal x5421=(cj1*cj2);
IkReal x5422=((1.0)*sj2);
IkReal x5423=(cj5*r11);
IkReal x5424=(cj5*r01);
IkReal x5425=(r00*sj5);
IkReal x5426=((0.214)*cj2);
IkReal x5427=(sj1*x5419);
IkReal x5428=(sj1*x5418);
IkReal x5429=((0.214)*cj1*sj2);
evalcond[0]=((((-1.0)*x5422*x5428))+((x5418*x5421))+(((-1.0)*x5424))+(((-1.0)*x5425)));
evalcond[1]=((((-1.0)*x5422*x5427))+((x5419*x5421))+(((-1.0)*x5420))+(((-1.0)*x5423)));
evalcond[2]=((((0.123)*x5419))+(((-1.0)*x5426*x5428))+(((-1.0)*px))+(((-0.11)*x5425))+(((-0.11)*x5424))+(((-0.243)*x5428))+(((-1.0)*x5418*x5429)));
evalcond[3]=((((-1.0)*x5426*x5427))+(((-1.0)*x5419*x5429))+(((-1.0)*py))+(((-0.11)*x5423))+(((-0.11)*x5420))+(((-0.243)*x5427))+(((-0.123)*x5418)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x5430=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x5430;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x5430);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x5431=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x5431;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5431);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x5432=((1.0)*cj5);
IkReal x5433=((((-1.0)*r21*x5432))+(((-1.0)*r20*sj5)));
j4eval[0]=x5433;
j4eval[1]=((IKabs((((r12*sj0))+((cj0*r02)))))+(IKabs((((r11*sj0*sj5))+(((-1.0)*r10*sj0*x5432))+(((-1.0)*cj0*r00*x5432))+((cj0*r01*sj5))))));
j4eval[2]=IKsign(x5433);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x5434=((-1.0)*r20);
IkReal x5436 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x5436)==0){
continue;
}
IkReal x5435=pow(x5436,-0.5);
CheckValue<IkReal> x5437 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x5434),IKFAST_ATAN2_MAGTHRESH);
if(!x5437.valid){
continue;
}
IkReal gconst114=((-1.0)*(x5437.value));
IkReal gconst115=(r21*x5435);
IkReal gconst116=(x5434*x5435);
CheckValue<IkReal> x5438 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5438.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x5438.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x5439=((-1.0)*r20);
IkReal x5440=x5435;
CheckValue<IkReal> x5442 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x5439),IKFAST_ATAN2_MAGTHRESH);
if(!x5442.valid){
continue;
}
IkReal x5441=((-1.0)*(x5442.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst115;
cj5=gconst116;
j5=x5441;
IkReal gconst114=x5441;
IkReal gconst115=(r21*x5440);
IkReal gconst116=(x5439*x5440);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x5443=((-1.0)*r20);
IkReal x5444=x5435;
CheckValue<IkReal> x5446 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x5443),IKFAST_ATAN2_MAGTHRESH);
if(!x5446.valid){
continue;
}
IkReal x5445=((-1.0)*(x5446.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst115;
cj5=gconst116;
j5=x5445;
IkReal gconst114=x5445;
IkReal gconst115=(r21*x5444);
IkReal gconst116=(x5443*x5444);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x5447=((-1.0)*r20);
IkReal x5448=x5435;
CheckValue<IkReal> x5450 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x5447),IKFAST_ATAN2_MAGTHRESH);
if(!x5450.valid){
continue;
}
IkReal x5449=((-1.0)*(x5450.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst115;
cj5=gconst116;
j5=x5449;
IkReal gconst114=x5449;
IkReal gconst115=(r21*x5448);
IkReal gconst116=(x5447*x5448);
IkReal x5451=((1.0)*(r22*r22));
CheckValue<IkReal> x5455=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x5451))),-1);
if(!x5455.valid){
continue;
}
IkReal x5452=x5455.value;
IkReal x5453=((1.0)*x5452);
IkReal x5454=((((-1.0)*x5453*(r20*r20*r20*r20)))+(((-2.0)*x5452*(r20*r20)*(r21*r21)))+(((-1.0)*x5453*(r21*r21*r21*r21)))+(((-1.0)*x5451)));
j4eval[0]=x5454;
j4eval[1]=IKsign(x5454);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5456=(sj1*sj2);
IkReal x5457=(gconst116*r20);
IkReal x5458=(gconst115*r21);
IkReal x5459=(cj1*cj2);
CheckValue<IkReal> x5460=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x5457*x5457)))+(((-1.0)*(x5458*x5458)))+(((2.0)*x5457*x5458))+(((-1.0)*(r22*r22))))),-1);
if(!x5460.valid){
continue;
}
CheckValue<IkReal> x5461 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x5459))+((r22*x5456)))),IkReal((((x5456*x5458))+(((-1.0)*x5456*x5457))+(((-1.0)*x5458*x5459))+((x5457*x5459)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5461.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5460.value)))+(x5461.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5462=IKsin(j4);
IkReal x5463=IKcos(j4);
IkReal x5464=(cj2*sj1);
IkReal x5465=(gconst115*r21);
IkReal x5466=(cj1*sj2);
IkReal x5467=((1.0)*x5463);
IkReal x5468=(gconst115*x5463);
IkReal x5469=(gconst115*x5462);
IkReal x5470=((1.0)*gconst116*x5462);
evalcond[0]=(((x5462*x5465))+(((-1.0)*r20*x5470))+(((-1.0)*r22*x5467)));
evalcond[1]=(((r01*x5469))+sj0+(((-1.0)*r02*x5467))+(((-1.0)*r00*x5470)));
evalcond[2]=(((r11*x5469))+(((-1.0)*r10*x5470))+(((-1.0)*r12*x5467))+(((-1.0)*cj0)));
evalcond[3]=(((r22*x5462))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x5463*x5465))+(((-1.0)*gconst116*r20*x5467)));
evalcond[4]=(((r01*x5468))+(((-1.0)*gconst116*r00*x5467))+((r02*x5462))+((cj0*x5466))+((cj0*x5464)));
evalcond[5]=(((r11*x5468))+((r12*x5462))+(((-1.0)*gconst116*r10*x5467))+((sj0*x5466))+((sj0*x5464)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5471 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst115*r21))+(((-1.0)*cj0*gconst116*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5471.valid){
continue;
}
CheckValue<IkReal> x5472=IKPowWithIntegerCheck(IKsign((((gconst115*r00))+((gconst116*r01)))),-1);
if(!x5472.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5471.value)+(((1.5707963267949)*(x5472.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5473=IKsin(j4);
IkReal x5474=IKcos(j4);
IkReal x5475=(cj2*sj1);
IkReal x5476=(gconst115*r21);
IkReal x5477=(cj1*sj2);
IkReal x5478=((1.0)*x5474);
IkReal x5479=(gconst115*x5474);
IkReal x5480=(gconst115*x5473);
IkReal x5481=((1.0)*gconst116*x5473);
evalcond[0]=((((-1.0)*r20*x5481))+((x5473*x5476))+(((-1.0)*r22*x5478)));
evalcond[1]=(sj0+((r01*x5480))+(((-1.0)*r00*x5481))+(((-1.0)*r02*x5478)));
evalcond[2]=((((-1.0)*r10*x5481))+((r11*x5480))+(((-1.0)*r12*x5478))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*gconst116*r20*x5478))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x5474*x5476))+((r22*x5473)));
evalcond[4]=(((r01*x5479))+(((-1.0)*gconst116*r00*x5478))+((cj0*x5477))+((cj0*x5475))+((r02*x5473)));
evalcond[5]=((((-1.0)*gconst116*r10*x5478))+((sj0*x5477))+((sj0*x5475))+((r12*x5473))+((r11*x5479)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5482=IKPowWithIntegerCheck(IKsign((((gconst115*r10))+((gconst116*r11)))),-1);
if(!x5482.valid){
continue;
}
CheckValue<IkReal> x5483 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst115*r21*sj0))+(((-1.0)*gconst116*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5483.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5482.value)))+(x5483.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5484=IKsin(j4);
IkReal x5485=IKcos(j4);
IkReal x5486=(cj2*sj1);
IkReal x5487=(gconst115*r21);
IkReal x5488=(cj1*sj2);
IkReal x5489=((1.0)*x5485);
IkReal x5490=(gconst115*x5485);
IkReal x5491=(gconst115*x5484);
IkReal x5492=((1.0)*gconst116*x5484);
evalcond[0]=((((-1.0)*r20*x5492))+(((-1.0)*r22*x5489))+((x5484*x5487)));
evalcond[1]=(((r01*x5491))+sj0+(((-1.0)*r00*x5492))+(((-1.0)*r02*x5489)));
evalcond[2]=((((-1.0)*r12*x5489))+((r11*x5491))+(((-1.0)*r10*x5492))+(((-1.0)*cj0)));
evalcond[3]=(((x5485*x5487))+(((-1.0)*gconst116*r20*x5489))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x5484)));
evalcond[4]=(((r01*x5490))+(((-1.0)*gconst116*r00*x5489))+((cj0*x5486))+((cj0*x5488))+((r02*x5484)));
evalcond[5]=(((r12*x5484))+((r11*x5490))+(((-1.0)*gconst116*r10*x5489))+((sj0*x5486))+((sj0*x5488)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5493=((-1.0)*r21);
IkReal x5495 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x5495)==0){
continue;
}
IkReal x5494=pow(x5495,-0.5);
CheckValue<IkReal> x5496 = IKatan2WithCheck(IkReal(x5493),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5496.valid){
continue;
}
IkReal gconst117=((3.14159265358979)+(((-1.0)*(x5496.value))));
IkReal gconst118=(x5493*x5494);
IkReal gconst119=((1.0)*r20*x5494);
CheckValue<IkReal> x5497 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5497.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x5497.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x5498=((-1.0)*r21);
CheckValue<IkReal> x5501 = IKatan2WithCheck(IkReal(x5498),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5501.valid){
continue;
}
IkReal x5499=((1.0)*(x5501.value));
IkReal x5500=x5494;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x5499)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x5499)));
IkReal gconst118=(x5498*x5500);
IkReal gconst119=((1.0)*r20*x5500);
IkReal x5502=r22*r22;
IkReal x5503=((1.0)*x5502);
CheckValue<IkReal> x5507=IKPowWithIntegerCheck(((-1.0)+x5502),-1);
if(!x5507.valid){
continue;
}
IkReal x5504=x5507.value;
if((((1.0)+(((-1.0)*x5503)))) < -0.00001)
continue;
IkReal x5505=IKsqrt(((1.0)+(((-1.0)*x5503))));
IkReal x5506=(sj0*x5504*x5505);
j4eval[0]=((IKabs((x5506+(((-1.0)*x5503*x5506)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x5508=((-1.0)*r21);
CheckValue<IkReal> x5511 = IKatan2WithCheck(IkReal(x5508),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5511.valid){
continue;
}
IkReal x5509=((1.0)*(x5511.value));
IkReal x5510=x5494;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x5509)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x5509)));
IkReal gconst118=(x5508*x5510);
IkReal gconst119=((1.0)*r20*x5510);
IkReal x5512=r22*r22;
IkReal x5513=((1.0)*x5512);
CheckValue<IkReal> x5517=IKPowWithIntegerCheck(((-1.0)+x5512),-1);
if(!x5517.valid){
continue;
}
IkReal x5514=x5517.value;
if((((1.0)+(((-1.0)*x5513)))) < -0.00001)
continue;
IkReal x5515=IKsqrt(((1.0)+(((-1.0)*x5513))));
IkReal x5516=(cj0*x5514*x5515);
j4eval[0]=((IKabs((cj0*r22)))+(IKabs((x5516+(((-1.0)*x5513*x5516))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x5518=((-1.0)*r21);
CheckValue<IkReal> x5521 = IKatan2WithCheck(IkReal(x5518),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5521.valid){
continue;
}
IkReal x5519=((1.0)*(x5521.value));
IkReal x5520=x5494;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x5519)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x5519)));
IkReal gconst118=(x5518*x5520);
IkReal gconst119=((1.0)*r20*x5520);
IkReal x5522=r22*r22;
IkReal x5523=(cj0*r02);
IkReal x5524=(r12*sj0);
CheckValue<IkReal> x5528=IKPowWithIntegerCheck(((-1.0)+x5522),-1);
if(!x5528.valid){
continue;
}
IkReal x5525=x5528.value;
if((((1.0)+(((-1.0)*x5522)))) < -0.00001)
continue;
IkReal x5526=IKsqrt(((1.0)+(((-1.0)*x5522))));
IkReal x5527=((1.0)*r22*x5525*x5526);
j4eval[0]=0;
j4eval[1]=((IKabs(((((-1.0)*x5523*x5527))+(((-1.0)*x5524*x5527)))))+(IKabs((x5523+x5524))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5529=((1.0)*gconst119);
CheckValue<IkReal> x5530=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst118*r20))+(((-1.0)*r21*x5529)))),-1);
if(!x5530.valid){
continue;
}
CheckValue<IkReal> x5531 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*r10*sj0*x5529))+(((-1.0)*cj0*r00*x5529))+((gconst118*r11*sj0))+((cj0*gconst118*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5531.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5530.value)))+(x5531.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5532=IKsin(j4);
IkReal x5533=IKcos(j4);
IkReal x5534=(gconst118*r01);
IkReal x5535=(gconst119*r20);
IkReal x5536=(gconst119*r10);
IkReal x5537=(gconst119*r00);
IkReal x5538=(gconst118*r21);
IkReal x5539=(cj2*sj1);
IkReal x5540=(gconst118*r11);
IkReal x5541=(cj1*sj2);
IkReal x5542=((1.0)*x5533);
IkReal x5543=((1.0)*x5532);
evalcond[0]=((((-1.0)*x5535*x5543))+((x5532*x5538))+(((-1.0)*r22*x5542)));
evalcond[1]=(sj0+(((-1.0)*x5537*x5543))+(((-1.0)*r02*x5542))+((x5532*x5534)));
evalcond[2]=((((-1.0)*x5536*x5543))+(((-1.0)*r12*x5542))+(((-1.0)*cj0))+((x5532*x5540)));
evalcond[3]=(((r22*x5532))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x5535*x5542))+((x5533*x5538)));
evalcond[4]=(((cj0*x5541))+(((-1.0)*x5537*x5542))+((cj0*x5539))+((x5533*x5534))+((r02*x5532)));
evalcond[5]=(((sj0*x5541))+((x5533*x5540))+(((-1.0)*x5536*x5542))+((sj0*x5539))+((r12*x5532)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5544=IKPowWithIntegerCheck(IKsign((((gconst118*r00))+((gconst119*r01)))),-1);
if(!x5544.valid){
continue;
}
CheckValue<IkReal> x5545 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst118*r21))+(((-1.0)*cj0*gconst119*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5545.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5544.value)))+(x5545.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5546=IKsin(j4);
IkReal x5547=IKcos(j4);
IkReal x5548=(gconst118*r01);
IkReal x5549=(gconst119*r20);
IkReal x5550=(gconst119*r10);
IkReal x5551=(gconst119*r00);
IkReal x5552=(gconst118*r21);
IkReal x5553=(cj2*sj1);
IkReal x5554=(gconst118*r11);
IkReal x5555=(cj1*sj2);
IkReal x5556=((1.0)*x5547);
IkReal x5557=((1.0)*x5546);
evalcond[0]=((((-1.0)*x5549*x5557))+((x5546*x5552))+(((-1.0)*r22*x5556)));
evalcond[1]=(sj0+(((-1.0)*x5551*x5557))+((x5546*x5548))+(((-1.0)*r02*x5556)));
evalcond[2]=((((-1.0)*x5550*x5557))+((x5546*x5554))+(((-1.0)*r12*x5556))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*x5549*x5556))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x5547*x5552))+((r22*x5546)));
evalcond[4]=((((-1.0)*x5551*x5556))+((r02*x5546))+((cj0*x5553))+((cj0*x5555))+((x5547*x5548)));
evalcond[5]=(((r12*x5546))+(((-1.0)*x5550*x5556))+((sj0*x5555))+((sj0*x5553))+((x5547*x5554)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5558=IKPowWithIntegerCheck(IKsign((((gconst118*r10))+((gconst119*r11)))),-1);
if(!x5558.valid){
continue;
}
CheckValue<IkReal> x5559 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*gconst119*r20*sj0))+((gconst118*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5559.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5558.value)))+(x5559.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5560=IKsin(j4);
IkReal x5561=IKcos(j4);
IkReal x5562=(gconst118*r01);
IkReal x5563=(gconst119*r20);
IkReal x5564=(gconst119*r10);
IkReal x5565=(gconst119*r00);
IkReal x5566=(gconst118*r21);
IkReal x5567=(cj2*sj1);
IkReal x5568=(gconst118*r11);
IkReal x5569=(cj1*sj2);
IkReal x5570=((1.0)*x5561);
IkReal x5571=((1.0)*x5560);
evalcond[0]=(((x5560*x5566))+(((-1.0)*x5563*x5571))+(((-1.0)*r22*x5570)));
evalcond[1]=(((x5560*x5562))+sj0+(((-1.0)*r02*x5570))+(((-1.0)*x5565*x5571)));
evalcond[2]=((((-1.0)*x5564*x5571))+((x5560*x5568))+(((-1.0)*r12*x5570))+(((-1.0)*cj0)));
evalcond[3]=(((x5561*x5566))+(((-1.0)*x5563*x5570))+((r22*x5560))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
evalcond[4]=(((r02*x5560))+((x5561*x5562))+((cj0*x5569))+((cj0*x5567))+(((-1.0)*x5565*x5570)));
evalcond[5]=((((-1.0)*x5564*x5570))+((x5561*x5568))+((sj0*x5569))+((sj0*x5567))+((r12*x5560)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5573 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x5573)==0){
continue;
}
IkReal x5572=pow(x5573,-0.5);
CheckValue<IkReal> x5574 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x5574.valid){
continue;
}
IkReal gconst120=((-1.0)*(x5574.value));
IkReal gconst121=((-1.0)*r01*x5572);
IkReal gconst122=(r00*x5572);
CheckValue<IkReal> x5575 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x5575.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x5575.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x5578 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x5578.valid){
continue;
}
IkReal x5576=((-1.0)*(x5578.value));
IkReal x5577=x5572;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst121;
cj5=gconst122;
j5=x5576;
IkReal gconst120=x5576;
IkReal gconst121=((-1.0)*r01*x5577);
IkReal gconst122=(r00*x5577);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5579=((1.0)*gconst122);
CheckValue<IkReal> x5580=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst121*r20))+(((-1.0)*r21*x5579)))),-1);
if(!x5580.valid){
continue;
}
CheckValue<IkReal> x5581 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*cj0*r00*x5579))+(((-1.0)*r10*sj0*x5579))+((cj0*gconst121*r01))+((gconst121*r11*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5581.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5580.value)))+(x5581.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5582=IKsin(j4);
IkReal x5583=IKcos(j4);
IkReal x5584=(gconst121*r11);
IkReal x5585=(cj2*sj1);
IkReal x5586=(gconst122*r00);
IkReal x5587=(gconst122*r10);
IkReal x5588=(gconst122*r20);
IkReal x5589=(cj1*sj2);
IkReal x5590=((1.0)*x5583);
IkReal x5591=(gconst121*x5582);
IkReal x5592=((1.0)*x5582);
IkReal x5593=(gconst121*x5583);
evalcond[0]=(((r21*x5591))+(((-1.0)*x5588*x5592))+(((-1.0)*r22*x5590)));
evalcond[1]=((((-1.0)*x5586*x5592))+sj0+(((-1.0)*r02*x5590))+((r01*x5591)));
evalcond[2]=((((-1.0)*r12*x5590))+(((-1.0)*x5587*x5592))+((x5582*x5584))+(((-1.0)*cj0)));
evalcond[3]=(((r21*x5593))+(((-1.0)*x5588*x5590))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x5582)));
evalcond[4]=((((-1.0)*x5586*x5590))+((cj0*x5585))+((cj0*x5589))+((r02*x5582))+((r01*x5593)));
evalcond[5]=(((sj0*x5585))+((sj0*x5589))+((r12*x5582))+((x5583*x5584))+(((-1.0)*x5587*x5590)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5594 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*gconst122*r20*sj0))+((gconst121*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5594.valid){
continue;
}
CheckValue<IkReal> x5595=IKPowWithIntegerCheck(IKsign((((gconst121*r10))+((gconst122*r11)))),-1);
if(!x5595.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5594.value)+(((1.5707963267949)*(x5595.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5596=IKsin(j4);
IkReal x5597=IKcos(j4);
IkReal x5598=(gconst121*r11);
IkReal x5599=(cj2*sj1);
IkReal x5600=(gconst122*r00);
IkReal x5601=(gconst122*r10);
IkReal x5602=(gconst122*r20);
IkReal x5603=(cj1*sj2);
IkReal x5604=((1.0)*x5597);
IkReal x5605=(gconst121*x5596);
IkReal x5606=((1.0)*x5596);
IkReal x5607=(gconst121*x5597);
evalcond[0]=((((-1.0)*r22*x5604))+(((-1.0)*x5602*x5606))+((r21*x5605)));
evalcond[1]=(sj0+((r01*x5605))+(((-1.0)*r02*x5604))+(((-1.0)*x5600*x5606)));
evalcond[2]=((((-1.0)*r12*x5604))+(((-1.0)*x5601*x5606))+((x5596*x5598))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*x5602*x5604))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r21*x5607))+((r22*x5596)));
evalcond[4]=(((cj0*x5599))+((r02*x5596))+((r01*x5607))+(((-1.0)*x5600*x5604))+((cj0*x5603)));
evalcond[5]=(((sj0*x5603))+((sj0*x5599))+((r12*x5596))+(((-1.0)*x5601*x5604))+((x5597*x5598)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5609 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x5609)==0){
continue;
}
IkReal x5608=pow(x5609,-0.5);
CheckValue<IkReal> x5610 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x5610.valid){
continue;
}
IkReal gconst123=((3.14159265358979)+(((-1.0)*(x5610.value))));
IkReal gconst124=((1.0)*r01*x5608);
IkReal gconst125=((-1.0)*r00*x5608);
CheckValue<IkReal> x5611 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x5611.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x5611.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x5614 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x5614.valid){
continue;
}
IkReal x5612=((1.0)*(x5614.value));
IkReal x5613=x5608;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x5612)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x5612)));
IkReal gconst124=((1.0)*r01*x5613);
IkReal gconst125=((-1.0)*r00*x5613);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[5];
CheckValue<IkReal> x5617 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x5617.valid){
continue;
}
IkReal x5615=((1.0)*(x5617.value));
IkReal x5616=x5608;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x5615)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x5615)));
IkReal gconst124=((1.0)*r01*x5616);
IkReal gconst125=((-1.0)*r00*x5616);
j4eval[0]=0;
j4eval[1]=cj0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
j4eval[4]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x5620 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x5620.valid){
continue;
}
IkReal x5618=((1.0)*(x5620.value));
IkReal x5619=x5608;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x5618)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x5618)));
IkReal gconst124=((1.0)*r01*x5619);
IkReal gconst125=((-1.0)*r00*x5619);
IkReal x5621=r02*r02;
IkReal x5622=(r12*sj0);
IkReal x5623=x5608;
IkReal x5624=(cj0*x5623);
j4eval[0]=((IKabs((x5622+((cj0*r02)))))+(IKabs((((r02*x5622*x5623))+((x5621*x5624))+(((-1.0)*x5624))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5625=((1.0)*gconst125);
CheckValue<IkReal> x5626=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst124*r20))+(((-1.0)*r21*x5625)))),-1);
if(!x5626.valid){
continue;
}
CheckValue<IkReal> x5627 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((cj0*gconst124*r01))+(((-1.0)*r10*sj0*x5625))+(((-1.0)*cj0*r00*x5625))+((gconst124*r11*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5627.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5626.value)))+(x5627.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5628=IKsin(j4);
IkReal x5629=IKcos(j4);
IkReal x5630=(cj2*sj1);
IkReal x5631=(gconst125*r20);
IkReal x5632=(gconst124*r01);
IkReal x5633=(gconst125*r00);
IkReal x5634=(gconst125*r10);
IkReal x5635=(cj1*sj2);
IkReal x5636=((1.0)*x5629);
IkReal x5637=((1.0)*x5628);
IkReal x5638=(gconst124*x5628);
IkReal x5639=(gconst124*x5629);
evalcond[0]=((((-1.0)*r22*x5636))+((r21*x5638))+(((-1.0)*x5631*x5637)));
evalcond[1]=(sj0+(((-1.0)*x5633*x5637))+(((-1.0)*r02*x5636))+((x5628*x5632)));
evalcond[2]=((((-1.0)*r12*x5636))+((r11*x5638))+(((-1.0)*x5634*x5637))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x5628))+((r21*x5639))+(((-1.0)*x5631*x5636)));
evalcond[4]=((((-1.0)*x5633*x5636))+((r02*x5628))+((x5629*x5632))+((cj0*x5630))+((cj0*x5635)));
evalcond[5]=(((r11*x5639))+((r12*x5628))+((sj0*x5635))+((sj0*x5630))+(((-1.0)*x5634*x5636)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5640=IKPowWithIntegerCheck(IKsign((((gconst124*r00))+((gconst125*r01)))),-1);
if(!x5640.valid){
continue;
}
CheckValue<IkReal> x5641 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*gconst125*r20))+((cj0*gconst124*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5641.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5640.value)))+(x5641.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5642=IKsin(j4);
IkReal x5643=IKcos(j4);
IkReal x5644=(cj2*sj1);
IkReal x5645=(gconst125*r20);
IkReal x5646=(gconst124*r01);
IkReal x5647=(gconst125*r00);
IkReal x5648=(gconst125*r10);
IkReal x5649=(cj1*sj2);
IkReal x5650=((1.0)*x5643);
IkReal x5651=((1.0)*x5642);
IkReal x5652=(gconst124*x5642);
IkReal x5653=(gconst124*x5643);
evalcond[0]=((((-1.0)*r22*x5650))+(((-1.0)*x5645*x5651))+((r21*x5652)));
evalcond[1]=(sj0+(((-1.0)*x5647*x5651))+(((-1.0)*r02*x5650))+((x5642*x5646)));
evalcond[2]=((((-1.0)*r12*x5650))+(((-1.0)*x5648*x5651))+((r11*x5652))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*x5645*x5650))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x5642))+((r21*x5653)));
evalcond[4]=(((cj0*x5649))+((cj0*x5644))+(((-1.0)*x5647*x5650))+((x5643*x5646))+((r02*x5642)));
evalcond[5]=(((sj0*x5649))+((sj0*x5644))+((r12*x5642))+(((-1.0)*x5648*x5650))+((r11*x5653)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5654 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst124*r21*sj0))+(((-1.0)*gconst125*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5654.valid){
continue;
}
CheckValue<IkReal> x5655=IKPowWithIntegerCheck(IKsign((((gconst125*r11))+((gconst124*r10)))),-1);
if(!x5655.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5654.value)+(((1.5707963267949)*(x5655.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5656=IKsin(j4);
IkReal x5657=IKcos(j4);
IkReal x5658=(cj2*sj1);
IkReal x5659=(gconst125*r20);
IkReal x5660=(gconst124*r01);
IkReal x5661=(gconst125*r00);
IkReal x5662=(gconst125*r10);
IkReal x5663=(cj1*sj2);
IkReal x5664=((1.0)*x5657);
IkReal x5665=((1.0)*x5656);
IkReal x5666=(gconst124*x5656);
IkReal x5667=(gconst124*x5657);
evalcond[0]=((((-1.0)*r22*x5664))+(((-1.0)*x5659*x5665))+((r21*x5666)));
evalcond[1]=(((x5656*x5660))+sj0+(((-1.0)*r02*x5664))+(((-1.0)*x5661*x5665)));
evalcond[2]=((((-1.0)*x5662*x5665))+((r11*x5666))+(((-1.0)*r12*x5664))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*x5659*x5664))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x5656))+((r21*x5667)));
evalcond[4]=(((cj0*x5658))+(((-1.0)*x5661*x5664))+((r02*x5656))+((x5657*x5660))+((cj0*x5663)));
evalcond[5]=(((sj0*x5658))+((r12*x5656))+(((-1.0)*x5662*x5664))+((r11*x5667))+((sj0*x5663)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x5668=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x5668;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x5668);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x5669=((1.0)*cj5);
IkReal x5670=((((-1.0)*r21*x5669))+(((-1.0)*r20*sj5)));
j4eval[0]=x5670;
j4eval[1]=((IKabs(r12))+(IKabs((((r11*sj5))+(((-1.0)*r10*x5669))))));
j4eval[2]=IKsign(x5670);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x5671=cj5*cj5;
IkReal x5672=r01*r01;
IkReal x5673=(r01*sj5);
IkReal x5674=(cj5*r00);
IkReal x5675=((((-1.0)*x5671*(r00*r00)))+(((-1.0)*x5672))+(((-1.0)*(r02*r02)))+(((2.0)*x5673*x5674))+((x5671*x5672)));
j4eval[0]=x5675;
j4eval[1]=IKsign(x5675);
j4eval[2]=((IKabs(r02))+(IKabs((x5673+(((-1.0)*x5674))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5676=cj5*cj5;
IkReal x5677=r01*r01;
IkReal x5678=(r01*sj5);
IkReal x5679=(cj5*r00);
CheckValue<IkReal> x5680=IKPowWithIntegerCheck(IKsign(((((2.0)*x5678*x5679))+(((-1.0)*x5676*(r00*r00)))+(((-1.0)*x5677))+(((-1.0)*(r02*r02)))+((x5676*x5677)))),-1);
if(!x5680.valid){
continue;
}
CheckValue<IkReal> x5681 = IKatan2WithCheck(IkReal((x5678+(((-1.0)*x5679)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x5681.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5680.value)))+(x5681.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5682=IKcos(j4);
IkReal x5683=IKsin(j4);
IkReal x5684=(cj5*r00);
IkReal x5685=(cj5*r10);
IkReal x5686=(r21*sj5);
IkReal x5687=(cj5*r20);
IkReal x5688=((1.0)*x5682);
IkReal x5689=((1.0)*x5683);
IkReal x5690=(sj5*x5683);
IkReal x5691=(sj5*x5682);
evalcond[0]=((((-1.0)*x5684*x5688))+((r02*x5683))+((r01*x5691)));
evalcond[1]=(((x5683*x5686))+(((-1.0)*r22*x5688))+(((-1.0)*x5687*x5689)));
evalcond[2]=((((-1.0)*x5685*x5689))+((r11*x5690))+(((-1.0)*r12*x5688)));
evalcond[3]=((1.0)+(((-1.0)*r02*x5688))+(((-1.0)*x5684*x5689))+((r01*x5690)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x5685*x5688))+((r12*x5683))+((r11*x5691)));
evalcond[5]=(((r22*x5683))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x5687*x5688))+((x5682*x5686)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5692=((1.0)*cj5);
CheckValue<IkReal> x5693=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x5692))+(((-1.0)*r20*sj5)))),-1);
if(!x5693.valid){
continue;
}
CheckValue<IkReal> x5694 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj5))+(((-1.0)*r10*x5692)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5694.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5693.value)))+(x5694.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5695=IKcos(j4);
IkReal x5696=IKsin(j4);
IkReal x5697=(cj5*r00);
IkReal x5698=(cj5*r10);
IkReal x5699=(r21*sj5);
IkReal x5700=(cj5*r20);
IkReal x5701=((1.0)*x5695);
IkReal x5702=((1.0)*x5696);
IkReal x5703=(sj5*x5696);
IkReal x5704=(sj5*x5695);
evalcond[0]=((((-1.0)*x5697*x5701))+((r02*x5696))+((r01*x5704)));
evalcond[1]=((((-1.0)*x5700*x5702))+(((-1.0)*r22*x5701))+((x5696*x5699)));
evalcond[2]=((((-1.0)*r12*x5701))+(((-1.0)*x5698*x5702))+((r11*x5703)));
evalcond[3]=((1.0)+(((-1.0)*x5697*x5702))+((r01*x5703))+(((-1.0)*r02*x5701)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x5698*x5701))+((r11*x5704))+((r12*x5696)));
evalcond[5]=(((r22*x5696))+((x5695*x5699))+(((-1.0)*x5700*x5701))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5705 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5705.valid){
continue;
}
CheckValue<IkReal> x5706=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x5706.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5705.value)+(((1.5707963267949)*(x5706.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5707=IKcos(j4);
IkReal x5708=IKsin(j4);
IkReal x5709=(cj5*r00);
IkReal x5710=(cj5*r10);
IkReal x5711=(r21*sj5);
IkReal x5712=(cj5*r20);
IkReal x5713=((1.0)*x5707);
IkReal x5714=((1.0)*x5708);
IkReal x5715=(sj5*x5708);
IkReal x5716=(sj5*x5707);
evalcond[0]=(((r02*x5708))+(((-1.0)*x5709*x5713))+((r01*x5716)));
evalcond[1]=((((-1.0)*r22*x5713))+(((-1.0)*x5712*x5714))+((x5708*x5711)));
evalcond[2]=(((r11*x5715))+(((-1.0)*x5710*x5714))+(((-1.0)*r12*x5713)));
evalcond[3]=((1.0)+(((-1.0)*x5709*x5714))+((r01*x5715))+(((-1.0)*r02*x5713)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r12*x5708))+((r11*x5716))+(((-1.0)*x5710*x5713)));
evalcond[5]=(((x5707*x5711))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x5708))+(((-1.0)*x5712*x5713)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x5717=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x5717;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x5717);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x5718=((1.0)*cj5);
IkReal x5719=((((-1.0)*r10*sj5))+(((-1.0)*r11*x5718)));
j4eval[0]=x5719;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x5718)))))+(IKabs(r22)));
j4eval[2]=IKsign(x5719);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x5720=cj5*cj5;
IkReal x5721=r01*r01;
IkReal x5722=(cj5*r00);
IkReal x5723=(r01*sj5);
IkReal x5724=((((-1.0)*x5720*x5721))+(((-2.0)*x5722*x5723))+(r02*r02)+((x5720*(r00*r00)))+x5721);
j4eval[0]=x5724;
j4eval[1]=IKsign(x5724);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x5722))+x5723))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5725=cj5*cj5;
IkReal x5726=r01*r01;
IkReal x5727=(r01*sj5);
IkReal x5728=(cj5*r00);
CheckValue<IkReal> x5729 = IKatan2WithCheck(IkReal(((((-1.0)*x5728))+x5727)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x5729.valid){
continue;
}
CheckValue<IkReal> x5730=IKPowWithIntegerCheck(IKsign(((((-1.0)*x5725*x5726))+(((-2.0)*x5727*x5728))+((x5725*(r00*r00)))+(r02*r02)+x5726)),-1);
if(!x5730.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5729.value)+(((1.5707963267949)*(x5730.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5731=IKcos(j4);
IkReal x5732=IKsin(j4);
IkReal x5733=(cj5*r00);
IkReal x5734=(cj5*r10);
IkReal x5735=(r21*sj5);
IkReal x5736=((1.0)*cj2);
IkReal x5737=(cj5*r20);
IkReal x5738=((1.0)*x5731);
IkReal x5739=((1.0)*x5732);
IkReal x5740=(sj5*x5732);
IkReal x5741=(sj5*x5731);
evalcond[0]=((((-1.0)*x5733*x5738))+((r01*x5741))+((r02*x5732)));
evalcond[1]=(((x5732*x5735))+(((-1.0)*x5737*x5739))+(((-1.0)*r22*x5738)));
evalcond[2]=(((r11*x5740))+(((-1.0)*x5734*x5739))+(((-1.0)*r12*x5738)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x5738))+(((-1.0)*x5733*x5739))+((r01*x5740)));
evalcond[4]=((((-1.0)*x5737*x5738))+((sj1*sj2))+((x5731*x5735))+(((-1.0)*cj1*x5736))+((r22*x5732)));
evalcond[5]=(((r11*x5741))+((r12*x5732))+(((-1.0)*x5734*x5738))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x5736)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5742=((1.0)*cj5);
CheckValue<IkReal> x5743 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x5742)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5743.valid){
continue;
}
CheckValue<IkReal> x5744=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x5742)))),-1);
if(!x5744.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5743.value)+(((1.5707963267949)*(x5744.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5745=IKcos(j4);
IkReal x5746=IKsin(j4);
IkReal x5747=(cj5*r00);
IkReal x5748=(cj5*r10);
IkReal x5749=(r21*sj5);
IkReal x5750=((1.0)*cj2);
IkReal x5751=(cj5*r20);
IkReal x5752=((1.0)*x5745);
IkReal x5753=((1.0)*x5746);
IkReal x5754=(sj5*x5746);
IkReal x5755=(sj5*x5745);
evalcond[0]=((((-1.0)*x5747*x5752))+((r01*x5755))+((r02*x5746)));
evalcond[1]=(((x5746*x5749))+(((-1.0)*x5751*x5753))+(((-1.0)*r22*x5752)));
evalcond[2]=((((-1.0)*r12*x5752))+(((-1.0)*x5748*x5753))+((r11*x5754)));
evalcond[3]=((-1.0)+(((-1.0)*x5747*x5753))+((r01*x5754))+(((-1.0)*r02*x5752)));
evalcond[4]=((((-1.0)*x5751*x5752))+((r22*x5746))+(((-1.0)*cj1*x5750))+((sj1*sj2))+((x5745*x5749)));
evalcond[5]=((((-1.0)*cj1*sj2))+(((-1.0)*x5748*x5752))+(((-1.0)*sj1*x5750))+((r11*x5755))+((r12*x5746)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5756=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x5756.valid){
continue;
}
CheckValue<IkReal> x5757 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5757.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5756.value)))+(x5757.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5758=IKcos(j4);
IkReal x5759=IKsin(j4);
IkReal x5760=(cj5*r00);
IkReal x5761=(cj5*r10);
IkReal x5762=(r21*sj5);
IkReal x5763=((1.0)*cj2);
IkReal x5764=(cj5*r20);
IkReal x5765=((1.0)*x5758);
IkReal x5766=((1.0)*x5759);
IkReal x5767=(sj5*x5759);
IkReal x5768=(sj5*x5758);
evalcond[0]=(((r01*x5768))+(((-1.0)*x5760*x5765))+((r02*x5759)));
evalcond[1]=((((-1.0)*r22*x5765))+(((-1.0)*x5764*x5766))+((x5759*x5762)));
evalcond[2]=((((-1.0)*x5761*x5766))+(((-1.0)*r12*x5765))+((r11*x5767)));
evalcond[3]=((-1.0)+((r01*x5767))+(((-1.0)*x5760*x5766))+(((-1.0)*r02*x5765)));
evalcond[4]=((((-1.0)*cj1*x5763))+((sj1*sj2))+(((-1.0)*x5764*x5765))+((x5758*x5762))+((r22*x5759)));
evalcond[5]=((((-1.0)*x5761*x5765))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x5763))+((r11*x5768))+((r12*x5759)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5770 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x5770)==0){
continue;
}
IkReal x5769=pow(x5770,-0.5);
CheckValue<IkReal> x5771 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x5771.valid){
continue;
}
IkReal gconst126=((-1.0)*(x5771.value));
IkReal gconst127=((-1.0)*r11*x5769);
IkReal gconst128=(r10*x5769);
CheckValue<IkReal> x5772 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x5772.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x5772.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x5775 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x5775.valid){
continue;
}
IkReal x5773=((-1.0)*(x5775.value));
IkReal x5774=x5769;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst127;
cj5=gconst128;
j5=x5773;
IkReal gconst126=x5773;
IkReal gconst127=((-1.0)*r11*x5774);
IkReal gconst128=(r10*x5774);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5776=((1.0)*gconst128);
CheckValue<IkReal> x5777 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*cj0*r00*x5776))+((cj0*gconst127*r01))+(((-1.0)*r10*sj0*x5776))+((gconst127*r11*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5777.valid){
continue;
}
CheckValue<IkReal> x5778=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x5776))+(((-1.0)*gconst127*r20)))),-1);
if(!x5778.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5777.value)+(((1.5707963267949)*(x5778.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5779=IKsin(j4);
IkReal x5780=IKcos(j4);
IkReal x5781=(gconst127*r01);
IkReal x5782=(cj2*sj1);
IkReal x5783=(gconst128*r10);
IkReal x5784=(gconst128*r00);
IkReal x5785=(gconst128*r20);
IkReal x5786=(cj1*sj2);
IkReal x5787=((1.0)*x5780);
IkReal x5788=((1.0)*x5779);
IkReal x5789=(gconst127*x5780);
IkReal x5790=(gconst127*x5779);
evalcond[0]=((((-1.0)*x5785*x5788))+((r21*x5790))+(((-1.0)*r22*x5787)));
evalcond[1]=(sj0+(((-1.0)*x5784*x5788))+((x5779*x5781))+(((-1.0)*r02*x5787)));
evalcond[2]=((((-1.0)*x5783*x5788))+((r11*x5790))+(((-1.0)*r12*x5787))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*x5785*x5787))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r21*x5789))+((r22*x5779)));
evalcond[4]=((((-1.0)*x5784*x5787))+((r02*x5779))+((x5780*x5781))+((cj0*x5786))+((cj0*x5782)));
evalcond[5]=((((-1.0)*x5783*x5787))+((r11*x5789))+((sj0*x5786))+((sj0*x5782))+((r12*x5779)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5791 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*gconst128*r20))+((cj0*gconst127*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5791.valid){
continue;
}
CheckValue<IkReal> x5792=IKPowWithIntegerCheck(IKsign((((gconst128*r01))+((gconst127*r00)))),-1);
if(!x5792.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5791.value)+(((1.5707963267949)*(x5792.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5793=IKsin(j4);
IkReal x5794=IKcos(j4);
IkReal x5795=(gconst127*r01);
IkReal x5796=(cj2*sj1);
IkReal x5797=(gconst128*r10);
IkReal x5798=(gconst128*r00);
IkReal x5799=(gconst128*r20);
IkReal x5800=(cj1*sj2);
IkReal x5801=((1.0)*x5794);
IkReal x5802=((1.0)*x5793);
IkReal x5803=(gconst127*x5794);
IkReal x5804=(gconst127*x5793);
evalcond[0]=((((-1.0)*r22*x5801))+((r21*x5804))+(((-1.0)*x5799*x5802)));
evalcond[1]=(sj0+((x5793*x5795))+(((-1.0)*x5798*x5802))+(((-1.0)*r02*x5801)));
evalcond[2]=((((-1.0)*x5797*x5802))+(((-1.0)*r12*x5801))+((r11*x5804))+(((-1.0)*cj0)));
evalcond[3]=(((r21*x5803))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x5793))+(((-1.0)*x5799*x5801)));
evalcond[4]=((((-1.0)*x5798*x5801))+((x5794*x5795))+((cj0*x5800))+((cj0*x5796))+((r02*x5793)));
evalcond[5]=((((-1.0)*x5797*x5801))+((r12*x5793))+((r11*x5803))+((sj0*x5796))+((sj0*x5800)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5806 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x5806)==0){
continue;
}
IkReal x5805=pow(x5806,-0.5);
CheckValue<IkReal> x5807 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x5807.valid){
continue;
}
IkReal gconst129=((3.14159265358979)+(((-1.0)*(x5807.value))));
IkReal gconst130=((1.0)*r11*x5805);
IkReal gconst131=((-1.0)*r10*x5805);
CheckValue<IkReal> x5808 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x5808.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x5808.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x5811 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x5811.valid){
continue;
}
IkReal x5809=((1.0)*(x5811.value));
IkReal x5810=x5805;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x5809)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x5809)));
IkReal gconst130=((1.0)*r11*x5810);
IkReal gconst131=((-1.0)*r10*x5810);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x5814 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x5814.valid){
continue;
}
IkReal x5812=((1.0)*(x5814.value));
IkReal x5813=x5805;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x5812)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x5812)));
IkReal gconst130=((1.0)*r11*x5813);
IkReal gconst131=((-1.0)*r10*x5813);
IkReal x5815=r12*r12;
IkReal x5816=(cj0*r02);
IkReal x5817=x5805;
IkReal x5818=(sj0*x5817);
j4eval[0]=((IKabs((((r12*sj0))+x5816)))+(IKabs((((x5815*x5818))+(((-1.0)*x5818))+((r12*x5816*x5817))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x5821 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x5821.valid){
continue;
}
IkReal x5819=((1.0)*(x5821.value));
IkReal x5820=x5805;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x5819)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x5819)));
IkReal gconst130=((1.0)*r11*x5820);
IkReal gconst131=((-1.0)*r10*x5820);
IkReal x5822=r12*r12;
IkReal x5823=(sj1*sj2);
IkReal x5824=((1.0)+(((-1.0)*x5822)));
IkReal x5825=((1.0)*cj1*cj2);
CheckValue<IkReal> x5832=IKPowWithIntegerCheck(x5824,-1);
if(!x5832.valid){
continue;
}
IkReal x5826=x5832.value;
CheckValue<IkReal> x5833=IKPowWithIntegerCheck(((-1.0)+x5822),-1);
if(!x5833.valid){
continue;
}
IkReal x5827=x5833.value;
IkReal x5828=((1.0)*x5826);
if((x5824) < -0.00001)
continue;
IkReal x5829=IKsqrt(x5824);
IkReal x5830=(r12*r22*x5827*x5829);
IkReal x5831=((((-1.0)*x5828*(r10*r10)*(r20*r20)))+(((-1.0)*(r22*r22)))+(((-2.0)*r10*r11*r20*r21*x5826))+(((-1.0)*x5828*(r11*r11)*(r21*r21))));
j4eval[0]=x5831;
j4eval[1]=IKsign(x5831);
j4eval[2]=((IKabs((((x5823*x5830))+(((-1.0)*x5825*x5830)))))+(IKabs(((((-1.0)*r22*x5825))+((r22*x5823))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5834=(gconst131*r20);
IkReal x5835=(cj1*cj2);
IkReal x5836=(sj1*sj2);
IkReal x5837=(gconst130*r21);
CheckValue<IkReal> x5838=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x5834*x5834)))+(((2.0)*x5834*x5837))+(((-1.0)*(r22*r22)))+(((-1.0)*(x5837*x5837))))),-1);
if(!x5838.valid){
continue;
}
CheckValue<IkReal> x5839 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x5835))+((r22*x5836)))),IkReal(((((-1.0)*x5834*x5836))+((x5834*x5835))+(((-1.0)*x5835*x5837))+((x5836*x5837)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5839.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5838.value)))+(x5839.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5840=IKsin(j4);
IkReal x5841=IKcos(j4);
IkReal x5842=(cj2*sj1);
IkReal x5843=(gconst130*r11);
IkReal x5844=(cj1*sj2);
IkReal x5845=((1.0)*x5841);
IkReal x5846=(gconst130*x5841);
IkReal x5847=(gconst130*x5840);
IkReal x5848=((1.0)*gconst131*x5840);
evalcond[0]=(((r21*x5847))+(((-1.0)*r20*x5848))+(((-1.0)*r22*x5845)));
evalcond[1]=(sj0+(((-1.0)*r02*x5845))+(((-1.0)*r00*x5848))+((r01*x5847)));
evalcond[2]=(((x5840*x5843))+(((-1.0)*r12*x5845))+(((-1.0)*r10*x5848))+(((-1.0)*cj0)));
evalcond[3]=(((r21*x5846))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x5840))+(((-1.0)*gconst131*r20*x5845)));
evalcond[4]=((((-1.0)*gconst131*r00*x5845))+((r01*x5846))+((cj0*x5844))+((cj0*x5842))+((r02*x5840)));
evalcond[5]=(((x5841*x5843))+((r12*x5840))+((sj0*x5842))+((sj0*x5844))+(((-1.0)*gconst131*r10*x5845)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5849=((1.0)*gconst131);
CheckValue<IkReal> x5850=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x5849))+(((-1.0)*gconst130*r20)))),-1);
if(!x5850.valid){
continue;
}
CheckValue<IkReal> x5851 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((cj0*gconst130*r01))+((gconst130*r11*sj0))+(((-1.0)*cj0*r00*x5849))+(((-1.0)*r10*sj0*x5849)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5851.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5850.value)))+(x5851.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5852=IKsin(j4);
IkReal x5853=IKcos(j4);
IkReal x5854=(cj2*sj1);
IkReal x5855=(gconst130*r11);
IkReal x5856=(cj1*sj2);
IkReal x5857=((1.0)*x5853);
IkReal x5858=(gconst130*x5853);
IkReal x5859=(gconst130*x5852);
IkReal x5860=((1.0)*gconst131*x5852);
evalcond[0]=((((-1.0)*r22*x5857))+((r21*x5859))+(((-1.0)*r20*x5860)));
evalcond[1]=(sj0+((r01*x5859))+(((-1.0)*r02*x5857))+(((-1.0)*r00*x5860)));
evalcond[2]=((((-1.0)*r10*x5860))+(((-1.0)*r12*x5857))+((x5852*x5855))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*gconst131*r20*x5857))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x5852))+((r21*x5858)));
evalcond[4]=(((r01*x5858))+(((-1.0)*gconst131*r00*x5857))+((r02*x5852))+((cj0*x5856))+((cj0*x5854)));
evalcond[5]=(((r12*x5852))+(((-1.0)*gconst131*r10*x5857))+((x5853*x5855))+((sj0*x5856))+((sj0*x5854)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5861=IKPowWithIntegerCheck(IKsign((((gconst131*r01))+((gconst130*r00)))),-1);
if(!x5861.valid){
continue;
}
CheckValue<IkReal> x5862 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst130*r21))+(((-1.0)*cj0*gconst131*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5862.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5861.value)))+(x5862.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5863=IKsin(j4);
IkReal x5864=IKcos(j4);
IkReal x5865=(cj2*sj1);
IkReal x5866=(gconst130*r11);
IkReal x5867=(cj1*sj2);
IkReal x5868=((1.0)*x5864);
IkReal x5869=(gconst130*x5864);
IkReal x5870=(gconst130*x5863);
IkReal x5871=((1.0)*gconst131*x5863);
evalcond[0]=((((-1.0)*r22*x5868))+(((-1.0)*r20*x5871))+((r21*x5870)));
evalcond[1]=(sj0+(((-1.0)*r02*x5868))+(((-1.0)*r00*x5871))+((r01*x5870)));
evalcond[2]=((((-1.0)*r10*x5871))+((x5863*x5866))+(((-1.0)*cj0))+(((-1.0)*r12*x5868)));
evalcond[3]=(((r21*x5869))+((r22*x5863))+(((-1.0)*gconst131*r20*x5868))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
evalcond[4]=(((r02*x5863))+(((-1.0)*gconst131*r00*x5868))+((cj0*x5867))+((cj0*x5865))+((r01*x5869)));
evalcond[5]=((((-1.0)*gconst131*r10*x5868))+((sj0*x5867))+((sj0*x5865))+((r12*x5863))+((x5864*x5866)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x5872=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x5872;
j4eval[1]=IKsign(x5872);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x5873=((1.0)*cj5);
IkReal x5874=((((-1.0)*r21*x5873))+(((-1.0)*r20*sj5)));
j4eval[0]=x5874;
j4eval[1]=((IKabs((((r01*sj5))+(((-1.0)*r00*x5873)))))+(IKabs(r02)));
j4eval[2]=IKsign(x5874);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x5875=cj5*cj5;
IkReal x5876=r11*r11;
IkReal x5877=(r11*sj5);
IkReal x5878=(cj5*r10);
IkReal x5879=((r12*r12)+((x5875*(r10*r10)))+(((-2.0)*x5877*x5878))+(((-1.0)*x5875*x5876))+x5876);
j4eval[0]=x5879;
j4eval[1]=IKsign(x5879);
j4eval[2]=((IKabs((x5877+(((-1.0)*x5878)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5880=cj5*cj5;
IkReal x5881=r11*r11;
IkReal x5882=(cj5*r10);
IkReal x5883=(r11*sj5);
CheckValue<IkReal> x5884 = IKatan2WithCheck(IkReal(((((-1.0)*x5882))+x5883)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x5884.valid){
continue;
}
CheckValue<IkReal> x5885=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-2.0)*x5882*x5883))+(((-1.0)*x5880*x5881))+((x5880*(r10*r10)))+x5881)),-1);
if(!x5885.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5884.value)+(((1.5707963267949)*(x5885.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5886=IKcos(j4);
IkReal x5887=IKsin(j4);
IkReal x5888=(cj5*r00);
IkReal x5889=(cj5*r10);
IkReal x5890=(r21*sj5);
IkReal x5891=(cj5*r20);
IkReal x5892=((1.0)*x5886);
IkReal x5893=((1.0)*x5887);
IkReal x5894=(sj5*x5887);
IkReal x5895=(sj5*x5886);
evalcond[0]=((((-1.0)*x5889*x5892))+((r12*x5887))+((r11*x5895)));
evalcond[1]=((((-1.0)*r22*x5892))+((x5887*x5890))+(((-1.0)*x5891*x5893)));
evalcond[2]=((((-1.0)*r02*x5892))+((r01*x5894))+(((-1.0)*x5888*x5893)));
evalcond[3]=((-1.0)+(((-1.0)*x5889*x5893))+(((-1.0)*r12*x5892))+((r11*x5894)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r01*x5895))+(((-1.0)*x5888*x5892))+((r02*x5887)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x5891*x5892))+((r22*x5887))+((x5886*x5890)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5896=((1.0)*cj5);
CheckValue<IkReal> x5897 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x5896)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5897.valid){
continue;
}
CheckValue<IkReal> x5898=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x5896))+(((-1.0)*r20*sj5)))),-1);
if(!x5898.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5897.value)+(((1.5707963267949)*(x5898.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5899=IKcos(j4);
IkReal x5900=IKsin(j4);
IkReal x5901=(cj5*r00);
IkReal x5902=(cj5*r10);
IkReal x5903=(r21*sj5);
IkReal x5904=(cj5*r20);
IkReal x5905=((1.0)*x5899);
IkReal x5906=((1.0)*x5900);
IkReal x5907=(sj5*x5900);
IkReal x5908=(sj5*x5899);
evalcond[0]=(((r12*x5900))+(((-1.0)*x5902*x5905))+((r11*x5908)));
evalcond[1]=((((-1.0)*x5904*x5906))+(((-1.0)*r22*x5905))+((x5900*x5903)));
evalcond[2]=((((-1.0)*x5901*x5906))+(((-1.0)*r02*x5905))+((r01*x5907)));
evalcond[3]=((-1.0)+(((-1.0)*x5902*x5906))+(((-1.0)*r12*x5905))+((r11*x5907)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r02*x5900))+(((-1.0)*x5901*x5905))+((r01*x5908)));
evalcond[5]=(((r22*x5900))+(((-1.0)*x5904*x5905))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x5899*x5903)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5909 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5909.valid){
continue;
}
CheckValue<IkReal> x5910=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x5910.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5909.value)+(((1.5707963267949)*(x5910.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5911=IKcos(j4);
IkReal x5912=IKsin(j4);
IkReal x5913=(cj5*r00);
IkReal x5914=(cj5*r10);
IkReal x5915=(r21*sj5);
IkReal x5916=(cj5*r20);
IkReal x5917=((1.0)*x5911);
IkReal x5918=((1.0)*x5912);
IkReal x5919=(sj5*x5912);
IkReal x5920=(sj5*x5911);
evalcond[0]=(((r12*x5912))+((r11*x5920))+(((-1.0)*x5914*x5917)));
evalcond[1]=((((-1.0)*r22*x5917))+((x5912*x5915))+(((-1.0)*x5916*x5918)));
evalcond[2]=(((r01*x5919))+(((-1.0)*x5913*x5918))+(((-1.0)*r02*x5917)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x5917))+(((-1.0)*x5914*x5918))+((r11*x5919)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x5913*x5917))+((r02*x5912))+((r01*x5920)));
evalcond[5]=(((x5911*x5915))+((r22*x5912))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x5916*x5917)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x5921=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x5921;
j4eval[1]=IKsign(x5921);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x5922=((1.0)*cj5);
IkReal x5923=((((-1.0)*r01*x5922))+(((-1.0)*r00*sj5)));
j4eval[0]=x5923;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x5922)))))+(IKabs(r22)));
j4eval[2]=IKsign(x5923);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x5924=(sj1*sj2);
IkReal x5925=(cj5*r10);
IkReal x5926=(r11*sj5);
IkReal x5927=(cj1*cj2);
IkReal x5928=((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)));
j4eval[0]=x5928;
j4eval[1]=((IKabs((((x5924*x5926))+((x5925*x5927))+(((-1.0)*x5926*x5927))+(((-1.0)*x5924*x5925)))))+(IKabs(((((-1.0)*r12*x5924))+((r12*x5927))))));
j4eval[2]=IKsign(x5928);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5929=(sj1*sj2);
IkReal x5930=(cj5*r10);
IkReal x5931=(r11*sj5);
IkReal x5932=(cj1*cj2);
CheckValue<IkReal> x5933=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)))),-1);
if(!x5933.valid){
continue;
}
CheckValue<IkReal> x5934 = IKatan2WithCheck(IkReal((((x5929*x5931))+((x5930*x5932))+(((-1.0)*x5929*x5930))+(((-1.0)*x5931*x5932)))),IkReal(((((-1.0)*r12*x5929))+((r12*x5932)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5934.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5933.value)))+(x5934.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5935=IKcos(j4);
IkReal x5936=IKsin(j4);
IkReal x5937=(cj5*r00);
IkReal x5938=(cj5*r10);
IkReal x5939=(r21*sj5);
IkReal x5940=((1.0)*cj2);
IkReal x5941=(cj5*r20);
IkReal x5942=((1.0)*x5935);
IkReal x5943=((1.0)*x5936);
IkReal x5944=(sj5*x5936);
IkReal x5945=(sj5*x5935);
evalcond[0]=((((-1.0)*x5938*x5942))+((r12*x5936))+((r11*x5945)));
evalcond[1]=((((-1.0)*r22*x5942))+(((-1.0)*x5941*x5943))+((x5936*x5939)));
evalcond[2]=(((r01*x5944))+(((-1.0)*x5937*x5943))+(((-1.0)*r02*x5942)));
evalcond[3]=((1.0)+(((-1.0)*r12*x5942))+(((-1.0)*x5938*x5943))+((r11*x5944)));
evalcond[4]=(((sj1*sj2))+((r22*x5936))+(((-1.0)*x5941*x5942))+((x5935*x5939))+(((-1.0)*cj1*x5940)));
evalcond[5]=(((r01*x5945))+(((-1.0)*x5937*x5942))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x5940))+((r02*x5936)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5946=((1.0)*cj5);
CheckValue<IkReal> x5947=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x5946)))),-1);
if(!x5947.valid){
continue;
}
CheckValue<IkReal> x5948 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x5946)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5948.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5947.value)))+(x5948.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5949=IKcos(j4);
IkReal x5950=IKsin(j4);
IkReal x5951=(cj5*r00);
IkReal x5952=(cj5*r10);
IkReal x5953=(r21*sj5);
IkReal x5954=((1.0)*cj2);
IkReal x5955=(cj5*r20);
IkReal x5956=((1.0)*x5949);
IkReal x5957=((1.0)*x5950);
IkReal x5958=(sj5*x5950);
IkReal x5959=(sj5*x5949);
evalcond[0]=(((r11*x5959))+((r12*x5950))+(((-1.0)*x5952*x5956)));
evalcond[1]=(((x5950*x5953))+(((-1.0)*r22*x5956))+(((-1.0)*x5955*x5957)));
evalcond[2]=((((-1.0)*r02*x5956))+(((-1.0)*x5951*x5957))+((r01*x5958)));
evalcond[3]=((1.0)+((r11*x5958))+(((-1.0)*x5952*x5957))+(((-1.0)*r12*x5956)));
evalcond[4]=(((sj1*sj2))+(((-1.0)*cj1*x5954))+((x5949*x5953))+((r22*x5950))+(((-1.0)*x5955*x5956)));
evalcond[5]=((((-1.0)*sj1*x5954))+((r02*x5950))+(((-1.0)*cj1*sj2))+(((-1.0)*x5951*x5956))+((r01*x5959)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5960=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x5960.valid){
continue;
}
CheckValue<IkReal> x5961 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5961.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5960.value)))+(x5961.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5962=IKcos(j4);
IkReal x5963=IKsin(j4);
IkReal x5964=(cj5*r00);
IkReal x5965=(cj5*r10);
IkReal x5966=(r21*sj5);
IkReal x5967=((1.0)*cj2);
IkReal x5968=(cj5*r20);
IkReal x5969=((1.0)*x5962);
IkReal x5970=((1.0)*x5963);
IkReal x5971=(sj5*x5963);
IkReal x5972=(sj5*x5962);
evalcond[0]=(((r11*x5972))+((r12*x5963))+(((-1.0)*x5965*x5969)));
evalcond[1]=((((-1.0)*r22*x5969))+((x5963*x5966))+(((-1.0)*x5968*x5970)));
evalcond[2]=(((r01*x5971))+(((-1.0)*x5964*x5970))+(((-1.0)*r02*x5969)));
evalcond[3]=((1.0)+(((-1.0)*r12*x5969))+((r11*x5971))+(((-1.0)*x5965*x5970)));
evalcond[4]=(((x5962*x5966))+((sj1*sj2))+((r22*x5963))+(((-1.0)*cj1*x5967))+(((-1.0)*x5968*x5969)));
evalcond[5]=(((r02*x5963))+((r01*x5972))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x5967))+(((-1.0)*x5964*x5969)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x5973=((-1.0)*py);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x5973);
rxp0_2=(py*r00);
rxp1_0=(r21*x5973);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x5974=((-1.0)*py);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x5974);
rxp0_2=(py*r00);
rxp1_0=(r21*x5974);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x5975=((-1.0)*py);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x5975);
rxp0_2=(py*r00);
rxp1_0=(r21*x5975);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=(((r01*sj5))+(((-1.0)*cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x5978=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*cj5*r00))),-1);
if(!x5978.valid){
continue;
}
IkReal x5976=x5978.value;
IkReal x5977=((1.0)*cj0*x5976);
cj4array[0]=((((-1.0)*cj2*sj1*x5977))+(((-1.0)*cj1*sj2*x5977)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x5979=IKsin(j4);
IkReal x5980=IKcos(j4);
IkReal x5981=(r21*sj5);
IkReal x5982=((1.0)*x5980);
IkReal x5983=((1.0)*cj5*x5979);
evalcond[0]=(r12*x5979);
evalcond[1]=((((-1.0)*r12*x5982))+(((-1.0)*cj0)));
evalcond[2]=(((x5979*x5981))+(((-1.0)*r20*x5983)));
evalcond[3]=(((r01*sj5*x5979))+(((-1.0)*r00*x5983)));
evalcond[4]=((((-1.0)*cj5*r20*x5982))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x5980*x5981)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x5985=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x5985.valid){
continue;
}
IkReal x5984=x5985.value;
cj4array[0]=((((-1.0)*sj1*sj2*x5984))+((cj1*cj2*x5984)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x5986=IKsin(j4);
IkReal x5987=IKcos(j4);
IkReal x5988=(r01*sj5);
IkReal x5989=((1.0)*cj5*r00);
evalcond[0]=(r12*x5986);
evalcond[1]=((((-1.0)*r12*x5987))+(((-1.0)*cj0)));
evalcond[2]=(((r21*sj5*x5986))+(((-1.0)*cj5*r20*x5986)));
evalcond[3]=((((-1.0)*x5986*x5989))+((x5986*x5988)));
evalcond[4]=((((-1.0)*x5987*x5989))+((x5987*x5988))+((cj0*cj2*sj1))+((cj0*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x5990=IKPowWithIntegerCheck(r12,-1);
if(!x5990.valid){
continue;
}
cj4array[0]=((-1.0)*cj0*(x5990.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x5991=IKsin(j4);
IkReal x5992=IKcos(j4);
IkReal x5993=(sj5*x5992);
IkReal x5994=(sj5*x5991);
IkReal x5995=((1.0)*cj5*x5991);
IkReal x5996=((1.0)*cj5*x5992);
evalcond[0]=(r12*x5991);
evalcond[1]=((((-1.0)*r20*x5995))+((r21*x5994)));
evalcond[2]=(((r01*x5994))+(((-1.0)*r00*x5995)));
evalcond[3]=((((-1.0)*r20*x5996))+((r21*x5993))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
evalcond[4]=(((cj0*cj2*sj1))+((cj0*cj1*sj2))+((r01*x5993))+(((-1.0)*r00*x5996)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5997=((1.0)*cj5);
CheckValue<IkReal> x5998 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((r11*sj0*sj5))+((cj0*r01*sj5))+(((-1.0)*r10*sj0*x5997))+(((-1.0)*cj0*r00*x5997)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5998.valid){
continue;
}
CheckValue<IkReal> x5999=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x5997))+(((-1.0)*r20*sj5)))),-1);
if(!x5999.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5998.value)+(((1.5707963267949)*(x5999.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6000=IKsin(j4);
IkReal x6001=IKcos(j4);
IkReal x6002=(cj5*r00);
IkReal x6003=(cj5*r10);
IkReal x6004=(cj2*sj1);
IkReal x6005=(r21*sj5);
IkReal x6006=(cj5*r20);
IkReal x6007=(cj1*sj2);
IkReal x6008=((1.0)*x6001);
IkReal x6009=((1.0)*x6000);
IkReal x6010=(sj5*x6000);
IkReal x6011=(sj5*x6001);
evalcond[0]=((((-1.0)*x6006*x6009))+(((-1.0)*r22*x6008))+((x6000*x6005)));
evalcond[1]=(((r01*x6010))+sj0+(((-1.0)*r02*x6008))+(((-1.0)*x6002*x6009)));
evalcond[2]=(((r11*x6010))+(((-1.0)*r12*x6008))+(((-1.0)*x6003*x6009))+(((-1.0)*cj0)));
evalcond[3]=(((r22*x6000))+(((-1.0)*x6006*x6008))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x6001*x6005)));
evalcond[4]=(((r01*x6011))+((cj0*x6004))+((cj0*x6007))+((r02*x6000))+(((-1.0)*x6002*x6008)));
evalcond[5]=(((r12*x6000))+((r11*x6011))+((sj0*x6004))+((sj0*x6007))+(((-1.0)*x6003*x6008)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6012=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x6012.valid){
continue;
}
CheckValue<IkReal> x6013 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6013.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6012.value)))+(x6013.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6014=IKsin(j4);
IkReal x6015=IKcos(j4);
IkReal x6016=(cj5*r00);
IkReal x6017=(cj5*r10);
IkReal x6018=(cj2*sj1);
IkReal x6019=(r21*sj5);
IkReal x6020=(cj5*r20);
IkReal x6021=(cj1*sj2);
IkReal x6022=((1.0)*x6015);
IkReal x6023=((1.0)*x6014);
IkReal x6024=(sj5*x6014);
IkReal x6025=(sj5*x6015);
evalcond[0]=((((-1.0)*x6020*x6023))+(((-1.0)*r22*x6022))+((x6014*x6019)));
evalcond[1]=(sj0+((r01*x6024))+(((-1.0)*r02*x6022))+(((-1.0)*x6016*x6023)));
evalcond[2]=((((-1.0)*x6017*x6023))+((r11*x6024))+(((-1.0)*cj0))+(((-1.0)*r12*x6022)));
evalcond[3]=((((-1.0)*x6020*x6022))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x6015*x6019))+((r22*x6014)));
evalcond[4]=(((cj0*x6018))+((r01*x6025))+((r02*x6014))+((cj0*x6021))+(((-1.0)*x6016*x6022)));
evalcond[5]=(((sj0*x6021))+((r12*x6014))+(((-1.0)*x6017*x6022))+((sj0*x6018))+((r11*x6025)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6026=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x6026.valid){
continue;
}
CheckValue<IkReal> x6027 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6027.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6026.value)))+(x6027.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6028=IKsin(j4);
IkReal x6029=IKcos(j4);
IkReal x6030=(cj5*r00);
IkReal x6031=(cj5*r10);
IkReal x6032=(cj2*sj1);
IkReal x6033=(r21*sj5);
IkReal x6034=(cj5*r20);
IkReal x6035=(cj1*sj2);
IkReal x6036=((1.0)*x6029);
IkReal x6037=((1.0)*x6028);
IkReal x6038=(sj5*x6028);
IkReal x6039=(sj5*x6029);
evalcond[0]=(((x6028*x6033))+(((-1.0)*x6034*x6037))+(((-1.0)*r22*x6036)));
evalcond[1]=(sj0+(((-1.0)*x6030*x6037))+((r01*x6038))+(((-1.0)*r02*x6036)));
evalcond[2]=((((-1.0)*x6031*x6037))+((r11*x6038))+(((-1.0)*r12*x6036))+(((-1.0)*cj0)));
evalcond[3]=(((x6029*x6033))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x6028))+(((-1.0)*x6034*x6036)));
evalcond[4]=(((cj0*x6032))+((cj0*x6035))+((r02*x6028))+(((-1.0)*x6030*x6036))+((r01*x6039)));
evalcond[5]=((((-1.0)*x6031*x6036))+((r11*x6039))+((sj0*x6032))+((sj0*x6035))+((r12*x6028)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x6040=((1.0)*cj5);
IkReal x6041=((1.0)*sj5);
IkReal x6042=((((-1.0)*sj1*sj2))+((cj1*cj2)));
j0eval[0]=x6042;
j0eval[1]=IKsign(x6042);
j0eval[2]=((IKabs(((((-1.0)*r01*x6040))+(((-1.0)*r00*x6041)))))+(IKabs(((((-1.0)*r10*x6041))+(((-1.0)*r11*x6040))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x6043=cj5*cj5;
IkReal x6044=r21*r21;
IkReal x6045=(sj1*sj2);
IkReal x6046=(r21*sj5);
IkReal x6047=(cj5*r20);
IkReal x6048=(cj1*cj2);
IkReal x6049=((((-2.0)*x6046*x6047))+(r22*r22)+x6044+(((-1.0)*x6043*x6044))+((x6043*(r20*r20))));
j4eval[0]=x6049;
j4eval[1]=IKsign(x6049);
j4eval[2]=((IKabs(((((-1.0)*x6045*x6047))+((x6047*x6048))+(((-1.0)*x6046*x6048))+((x6045*x6046)))))+(IKabs((((r22*x6045))+(((-1.0)*r22*x6048))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j0eval[0]=((((-1.0)*sj1*sj2))+((cj1*cj2)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((2.01887566680345)*px))+(((-3.51251538777185)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-2.01887566680345)*py))+(((-3.51251538777185)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.01887566680345)*px))+(((-3.51251538777185)*py))))+IKsqr(((((-2.01887566680345)*py))+(((-3.51251538777185)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((2.01887566680345)*px))+(((-3.51251538777185)*py))), ((((-2.01887566680345)*py))+(((-3.51251538777185)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x6050=IKcos(j0);
IkReal x6051=IKsin(j0);
evalcond[0]=((((-0.214)*x6050))+(((-1.0)*px))+(((0.123)*x6051)));
evalcond[1]=((((-0.214)*x6051))+(((-0.123)*x6050))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x6052=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x6052;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x6052);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x6053=cj5*cj5;
IkReal x6054=((1.0)*r21);
IkReal x6055=(cj5*sj5);
IkReal x6056=((1.0)*r20);
IkReal x6057=((((-1.0)*r01*x6053*x6054))+((r01*r21))+(((-1.0)*r01*x6055*x6056))+((r00*r20*x6053))+((r02*r22))+(((-1.0)*r00*x6054*x6055)));
j4eval[0]=x6057;
j4eval[1]=((IKabs(((((-1.0)*cj0*cj5*x6056))+((cj0*r21*sj5)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x6057);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x6058=cj5*cj5;
IkReal x6059=(r21*sj5);
IkReal x6060=(r11*r21);
IkReal x6061=((1.0)*cj5*r20);
IkReal x6062=(x6060+((r12*r22))+((r10*r20*x6058))+(((-1.0)*r11*sj5*x6061))+(((-1.0)*cj5*r10*x6059))+(((-1.0)*x6058*x6060)));
j4eval[0]=x6062;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((sj0*x6059))+(((-1.0)*sj0*x6061))))));
j4eval[2]=IKsign(x6062);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6063=cj5*cj5;
IkReal x6064=(r21*sj5);
IkReal x6065=(r11*r21);
IkReal x6066=((1.0)*cj5*r20);
CheckValue<IkReal> x6067 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((sj0*x6064))+(((-1.0)*sj0*x6066)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6067.valid){
continue;
}
CheckValue<IkReal> x6068=IKPowWithIntegerCheck(IKsign(((((-1.0)*x6063*x6065))+x6065+((r10*r20*x6063))+(((-1.0)*cj5*r10*x6064))+((r12*r22))+(((-1.0)*r11*sj5*x6066)))),-1);
if(!x6068.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6067.value)+(((1.5707963267949)*(x6068.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6069=IKsin(j4);
IkReal x6070=IKcos(j4);
IkReal x6071=(r11*sj5);
IkReal x6072=(cj5*r00);
IkReal x6073=(cj5*r10);
IkReal x6074=(r21*sj5);
IkReal x6075=(cj5*r20);
IkReal x6076=(r01*sj5);
IkReal x6077=((1.0)*x6070);
IkReal x6078=((1.0)*x6069);
evalcond[0]=((((-1.0)*r22*x6077))+(((-1.0)*x6075*x6078))+((x6069*x6074)));
evalcond[1]=(((x6070*x6075))+(((-1.0)*x6074*x6077))+(((-1.0)*r22*x6078)));
evalcond[2]=(sj0+(((-1.0)*r02*x6077))+(((-1.0)*x6072*x6078))+((x6069*x6076)));
evalcond[3]=(cj0+(((-1.0)*r02*x6078))+((x6070*x6072))+(((-1.0)*x6076*x6077)));
evalcond[4]=(sj0+((x6070*x6073))+(((-1.0)*r12*x6078))+(((-1.0)*x6071*x6077)));
evalcond[5]=((((-1.0)*x6073*x6078))+(((-1.0)*r12*x6077))+((x6069*x6071))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6079=cj5*cj5;
IkReal x6080=((1.0)*r21);
IkReal x6081=(cj5*sj5);
IkReal x6082=((1.0)*r20);
CheckValue<IkReal> x6083=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x6079*x6080))+(((-1.0)*r01*x6081*x6082))+((r01*r21))+(((-1.0)*r00*x6080*x6081))+((r02*r22))+((r00*r20*x6079)))),-1);
if(!x6083.valid){
continue;
}
CheckValue<IkReal> x6084 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x6082)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6084.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6083.value)))+(x6084.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6085=IKsin(j4);
IkReal x6086=IKcos(j4);
IkReal x6087=(r11*sj5);
IkReal x6088=(cj5*r00);
IkReal x6089=(cj5*r10);
IkReal x6090=(r21*sj5);
IkReal x6091=(cj5*r20);
IkReal x6092=(r01*sj5);
IkReal x6093=((1.0)*x6086);
IkReal x6094=((1.0)*x6085);
evalcond[0]=((((-1.0)*r22*x6093))+(((-1.0)*x6091*x6094))+((x6085*x6090)));
evalcond[1]=((((-1.0)*r22*x6094))+((x6086*x6091))+(((-1.0)*x6090*x6093)));
evalcond[2]=(sj0+(((-1.0)*r02*x6093))+((x6085*x6092))+(((-1.0)*x6088*x6094)));
evalcond[3]=(cj0+(((-1.0)*x6092*x6093))+((x6086*x6088))+(((-1.0)*r02*x6094)));
evalcond[4]=((((-1.0)*x6087*x6093))+sj0+((x6086*x6089))+(((-1.0)*r12*x6094)));
evalcond[5]=((((-1.0)*x6089*x6094))+((x6085*x6087))+(((-1.0)*r12*x6093))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6095=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x6095.valid){
continue;
}
CheckValue<IkReal> x6096 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6096.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6095.value)))+(x6096.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6097=IKsin(j4);
IkReal x6098=IKcos(j4);
IkReal x6099=(r11*sj5);
IkReal x6100=(cj5*r00);
IkReal x6101=(cj5*r10);
IkReal x6102=(r21*sj5);
IkReal x6103=(cj5*r20);
IkReal x6104=(r01*sj5);
IkReal x6105=((1.0)*x6098);
IkReal x6106=((1.0)*x6097);
evalcond[0]=((((-1.0)*x6103*x6106))+(((-1.0)*r22*x6105))+((x6097*x6102)));
evalcond[1]=((((-1.0)*x6102*x6105))+(((-1.0)*r22*x6106))+((x6098*x6103)));
evalcond[2]=((((-1.0)*r02*x6105))+sj0+(((-1.0)*x6100*x6106))+((x6097*x6104)));
evalcond[3]=((((-1.0)*r02*x6106))+(((-1.0)*x6104*x6105))+cj0+((x6098*x6100)));
evalcond[4]=(sj0+(((-1.0)*x6099*x6105))+((x6098*x6101))+(((-1.0)*r12*x6106)));
evalcond[5]=(((x6097*x6099))+(((-1.0)*x6101*x6106))+(((-1.0)*r12*x6105))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((3.51251538777185)*py))+(((2.01887566680345)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-2.01887566680345)*py))+(((3.51251538777185)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((3.51251538777185)*py))+(((2.01887566680345)*px))))+IKsqr(((((-2.01887566680345)*py))+(((3.51251538777185)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((3.51251538777185)*py))+(((2.01887566680345)*px))), ((((-2.01887566680345)*py))+(((3.51251538777185)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x6107=IKsin(j0);
IkReal x6108=IKcos(j0);
evalcond[0]=((((-1.0)*px))+(((0.123)*x6107))+(((0.214)*x6108)));
evalcond[1]=((((-1.0)*py))+(((0.214)*x6107))+(((-0.123)*x6108)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x6109=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x6109;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x6109);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x6110=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x6110;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x6110);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x6111=cj5*cj5;
IkReal x6112=((1.0)*r21);
IkReal x6113=(cj5*r20);
IkReal x6114=(((r01*r21))+(((-1.0)*cj5*r00*sj5*x6112))+(((-1.0)*r01*sj5*x6113))+((r02*r22))+((r00*r20*x6111))+(((-1.0)*r01*x6111*x6112)));
j4eval[0]=x6114;
j4eval[1]=IKsign(x6114);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((sj0*x6113))+(((-1.0)*sj0*sj5*x6112))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6115=cj5*cj5;
IkReal x6116=((1.0)*r21);
IkReal x6117=(cj5*r20);
CheckValue<IkReal> x6118 = IKatan2WithCheck(IkReal((((sj0*x6117))+(((-1.0)*sj0*sj5*x6116)))),IkReal((r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x6118.valid){
continue;
}
CheckValue<IkReal> x6119=IKPowWithIntegerCheck(IKsign((((r01*r21))+(((-1.0)*cj5*r00*sj5*x6116))+(((-1.0)*r01*sj5*x6117))+((r02*r22))+(((-1.0)*r01*x6115*x6116))+((r00*r20*x6115)))),-1);
if(!x6119.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6118.value)+(((1.5707963267949)*(x6119.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6120=IKsin(j4);
IkReal x6121=IKcos(j4);
IkReal x6122=((1.0)*cj0);
IkReal x6123=(cj5*r00);
IkReal x6124=(r11*sj5);
IkReal x6125=(cj5*r10);
IkReal x6126=(r21*sj5);
IkReal x6127=(cj5*r20);
IkReal x6128=(r01*sj5);
IkReal x6129=((1.0)*x6121);
IkReal x6130=((1.0)*x6120);
evalcond[0]=((((-1.0)*r22*x6129))+((x6120*x6126))+(((-1.0)*x6127*x6130)));
evalcond[1]=(((x6121*x6127))+(((-1.0)*x6126*x6129))+(((-1.0)*r22*x6130)));
evalcond[2]=(sj0+(((-1.0)*r02*x6129))+((x6120*x6128))+(((-1.0)*x6123*x6130)));
evalcond[3]=((((-1.0)*x6125*x6130))+((x6120*x6124))+(((-1.0)*r12*x6129))+(((-1.0)*x6122)));
evalcond[4]=(((x6121*x6123))+(((-1.0)*x6128*x6129))+(((-1.0)*x6122))+(((-1.0)*r02*x6130)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x6124*x6129))+((x6121*x6125))+(((-1.0)*r12*x6130)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6131=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x6131.valid){
continue;
}
CheckValue<IkReal> x6132 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6132.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6131.value)))+(x6132.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6133=IKsin(j4);
IkReal x6134=IKcos(j4);
IkReal x6135=((1.0)*cj0);
IkReal x6136=(cj5*r00);
IkReal x6137=(r11*sj5);
IkReal x6138=(cj5*r10);
IkReal x6139=(r21*sj5);
IkReal x6140=(cj5*r20);
IkReal x6141=(r01*sj5);
IkReal x6142=((1.0)*x6134);
IkReal x6143=((1.0)*x6133);
evalcond[0]=(((x6133*x6139))+(((-1.0)*x6140*x6143))+(((-1.0)*r22*x6142)));
evalcond[1]=(((x6134*x6140))+(((-1.0)*x6139*x6142))+(((-1.0)*r22*x6143)));
evalcond[2]=(sj0+((x6133*x6141))+(((-1.0)*x6136*x6143))+(((-1.0)*r02*x6142)));
evalcond[3]=((((-1.0)*x6138*x6143))+((x6133*x6137))+(((-1.0)*x6135))+(((-1.0)*r12*x6142)));
evalcond[4]=((((-1.0)*r02*x6143))+((x6134*x6136))+(((-1.0)*x6135))+(((-1.0)*x6141*x6142)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x6137*x6142))+((x6134*x6138))+(((-1.0)*r12*x6143)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6144=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x6144.valid){
continue;
}
CheckValue<IkReal> x6145 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6145.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6144.value)))+(x6145.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6146=IKsin(j4);
IkReal x6147=IKcos(j4);
IkReal x6148=((1.0)*cj0);
IkReal x6149=(cj5*r00);
IkReal x6150=(r11*sj5);
IkReal x6151=(cj5*r10);
IkReal x6152=(r21*sj5);
IkReal x6153=(cj5*r20);
IkReal x6154=(r01*sj5);
IkReal x6155=((1.0)*x6147);
IkReal x6156=((1.0)*x6146);
evalcond[0]=(((x6146*x6152))+(((-1.0)*r22*x6155))+(((-1.0)*x6153*x6156)));
evalcond[1]=((((-1.0)*r22*x6156))+((x6147*x6153))+(((-1.0)*x6152*x6155)));
evalcond[2]=((((-1.0)*r02*x6155))+sj0+((x6146*x6154))+(((-1.0)*x6149*x6156)));
evalcond[3]=((((-1.0)*x6148))+(((-1.0)*x6151*x6156))+((x6146*x6150))+(((-1.0)*r12*x6155)));
evalcond[4]=((((-1.0)*x6148))+(((-1.0)*r02*x6156))+(((-1.0)*x6154*x6155))+((x6147*x6149)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x6150*x6155))+((x6147*x6151))+(((-1.0)*r12*x6156)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-2.04037896579128)*py))+(((0.549161078320192)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-0.549161078320192)*py))+(((-2.04037896579128)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.04037896579128)*py))+(((0.549161078320192)*px))))+IKsqr(((((-0.549161078320192)*py))+(((-2.04037896579128)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-2.04037896579128)*py))+(((0.549161078320192)*px))), ((((-0.549161078320192)*py))+(((-2.04037896579128)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x6157=IKsin(j0);
IkReal x6158=IKcos(j0);
evalcond[0]=((((-0.457)*x6158))+(((-1.0)*px))+(((0.123)*x6157)));
evalcond[1]=((((-0.123)*x6158))+(((-0.457)*x6157))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x6159=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x6159;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x6159);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x6160=cj5*cj5;
IkReal x6161=((1.0)*r21);
IkReal x6162=(cj5*sj5);
IkReal x6163=((1.0)*r20);
IkReal x6164=(((r01*r21))+(((-1.0)*r00*x6161*x6162))+((r00*r20*x6160))+(((-1.0)*r01*x6160*x6161))+((r02*r22))+(((-1.0)*r01*x6162*x6163)));
j4eval[0]=x6164;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x6163)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x6164);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x6165=cj5*cj5;
IkReal x6166=(r21*sj5);
IkReal x6167=(r11*r21);
IkReal x6168=((1.0)*cj5*r20);
IkReal x6169=((((-1.0)*cj5*r10*x6166))+x6167+((r12*r22))+(((-1.0)*x6165*x6167))+((r10*r20*x6165))+(((-1.0)*r11*sj5*x6168)));
j4eval[0]=x6169;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*sj0*x6168))+((sj0*x6166))))));
j4eval[2]=IKsign(x6169);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6170=cj5*cj5;
IkReal x6171=(r21*sj5);
IkReal x6172=(r11*r21);
IkReal x6173=((1.0)*cj5*r20);
CheckValue<IkReal> x6174 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*sj0*x6173))+((sj0*x6171)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6174.valid){
continue;
}
CheckValue<IkReal> x6175=IKPowWithIntegerCheck(IKsign(((((-1.0)*x6170*x6172))+(((-1.0)*cj5*r10*x6171))+x6172+((r12*r22))+((r10*r20*x6170))+(((-1.0)*r11*sj5*x6173)))),-1);
if(!x6175.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6174.value)+(((1.5707963267949)*(x6175.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6176=IKsin(j4);
IkReal x6177=IKcos(j4);
IkReal x6178=(r11*sj5);
IkReal x6179=(cj5*r00);
IkReal x6180=(cj5*r10);
IkReal x6181=(r21*sj5);
IkReal x6182=(cj5*r20);
IkReal x6183=(r01*sj5);
IkReal x6184=((1.0)*x6177);
IkReal x6185=((1.0)*x6176);
evalcond[0]=((((-1.0)*r22*x6184))+(((-1.0)*x6182*x6185))+((x6176*x6181)));
evalcond[1]=((((-1.0)*r22*x6185))+((x6177*x6182))+(((-1.0)*x6181*x6184)));
evalcond[2]=(sj0+(((-1.0)*r02*x6184))+(((-1.0)*x6179*x6185))+((x6176*x6183)));
evalcond[3]=(cj0+(((-1.0)*r02*x6185))+((x6177*x6179))+(((-1.0)*x6183*x6184)));
evalcond[4]=(sj0+((x6177*x6180))+(((-1.0)*x6178*x6184))+(((-1.0)*r12*x6185)));
evalcond[5]=(((x6176*x6178))+(((-1.0)*r12*x6184))+(((-1.0)*cj0))+(((-1.0)*x6180*x6185)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6186=cj5*cj5;
IkReal x6187=((1.0)*r21);
IkReal x6188=(cj5*sj5);
IkReal x6189=((1.0)*r20);
CheckValue<IkReal> x6190=IKPowWithIntegerCheck(IKsign((((r00*r20*x6186))+(((-1.0)*r00*x6187*x6188))+((r01*r21))+(((-1.0)*r01*x6188*x6189))+(((-1.0)*r01*x6186*x6187))+((r02*r22)))),-1);
if(!x6190.valid){
continue;
}
CheckValue<IkReal> x6191 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x6189)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6191.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6190.value)))+(x6191.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6192=IKsin(j4);
IkReal x6193=IKcos(j4);
IkReal x6194=(r11*sj5);
IkReal x6195=(cj5*r00);
IkReal x6196=(cj5*r10);
IkReal x6197=(r21*sj5);
IkReal x6198=(cj5*r20);
IkReal x6199=(r01*sj5);
IkReal x6200=((1.0)*x6193);
IkReal x6201=((1.0)*x6192);
evalcond[0]=((((-1.0)*x6198*x6201))+(((-1.0)*r22*x6200))+((x6192*x6197)));
evalcond[1]=((((-1.0)*x6197*x6200))+(((-1.0)*r22*x6201))+((x6193*x6198)));
evalcond[2]=(sj0+(((-1.0)*x6195*x6201))+(((-1.0)*r02*x6200))+((x6192*x6199)));
evalcond[3]=((((-1.0)*x6199*x6200))+cj0+(((-1.0)*r02*x6201))+((x6193*x6195)));
evalcond[4]=(sj0+((x6193*x6196))+(((-1.0)*r12*x6201))+(((-1.0)*x6194*x6200)));
evalcond[5]=((((-1.0)*x6196*x6201))+((x6192*x6194))+(((-1.0)*r12*x6200))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6202=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x6202.valid){
continue;
}
CheckValue<IkReal> x6203 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6203.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6202.value)))+(x6203.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6204=IKsin(j4);
IkReal x6205=IKcos(j4);
IkReal x6206=(r11*sj5);
IkReal x6207=(cj5*r00);
IkReal x6208=(cj5*r10);
IkReal x6209=(r21*sj5);
IkReal x6210=(cj5*r20);
IkReal x6211=(r01*sj5);
IkReal x6212=((1.0)*x6205);
IkReal x6213=((1.0)*x6204);
evalcond[0]=((((-1.0)*x6210*x6213))+((x6204*x6209))+(((-1.0)*r22*x6212)));
evalcond[1]=((((-1.0)*x6209*x6212))+((x6205*x6210))+(((-1.0)*r22*x6213)));
evalcond[2]=(sj0+(((-1.0)*x6207*x6213))+((x6204*x6211))+(((-1.0)*r02*x6212)));
evalcond[3]=(cj0+(((-1.0)*r02*x6213))+((x6205*x6207))+(((-1.0)*x6211*x6212)));
evalcond[4]=((((-1.0)*x6206*x6212))+sj0+(((-1.0)*r12*x6213))+((x6205*x6208)));
evalcond[5]=((((-1.0)*r12*x6212))+(((-1.0)*x6208*x6213))+((x6204*x6206))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((7.70194113963682)*px))+(((-1.81590482154039)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-7.70194113963682)*py))+(((-1.81590482154039)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((7.70194113963682)*px))+(((-1.81590482154039)*py))))+IKsqr(((((-7.70194113963682)*py))+(((-1.81590482154039)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((7.70194113963682)*px))+(((-1.81590482154039)*py))), ((((-7.70194113963682)*py))+(((-1.81590482154039)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x6214=IKsin(j0);
IkReal x6215=IKcos(j0);
evalcond[0]=((((0.123)*x6214))+(((-0.029)*x6215))+(((-1.0)*px)));
evalcond[1]=((((-0.029)*x6214))+(((-1.0)*py))+(((-0.123)*x6215)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x6216=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x6216;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x6216);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x6217=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x6217;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x6217);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x6218=cj5*cj5;
IkReal x6219=((1.0)*r21);
IkReal x6220=(cj5*r20);
IkReal x6221=(((r01*r21))+(((-1.0)*cj5*r00*sj5*x6219))+((r02*r22))+(((-1.0)*r01*x6218*x6219))+((r00*r20*x6218))+(((-1.0)*r01*sj5*x6220)));
j4eval[0]=x6221;
j4eval[1]=IKsign(x6221);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*sj0*sj5*x6219))+((sj0*x6220))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6222=cj5*cj5;
IkReal x6223=((1.0)*r21);
IkReal x6224=(cj5*r20);
CheckValue<IkReal> x6225 = IKatan2WithCheck(IkReal(((((-1.0)*sj0*sj5*x6223))+((sj0*x6224)))),IkReal((r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x6225.valid){
continue;
}
CheckValue<IkReal> x6226=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r00*sj5*x6223))+((r01*r21))+(((-1.0)*r01*x6222*x6223))+((r02*r22))+((r00*r20*x6222))+(((-1.0)*r01*sj5*x6224)))),-1);
if(!x6226.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6225.value)+(((1.5707963267949)*(x6226.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6227=IKsin(j4);
IkReal x6228=IKcos(j4);
IkReal x6229=((1.0)*cj0);
IkReal x6230=(cj5*r00);
IkReal x6231=(r11*sj5);
IkReal x6232=(cj5*r10);
IkReal x6233=(r21*sj5);
IkReal x6234=(cj5*r20);
IkReal x6235=(r01*sj5);
IkReal x6236=((1.0)*x6228);
IkReal x6237=((1.0)*x6227);
evalcond[0]=((((-1.0)*r22*x6236))+((x6227*x6233))+(((-1.0)*x6234*x6237)));
evalcond[1]=(((x6228*x6234))+(((-1.0)*r22*x6237))+(((-1.0)*x6233*x6236)));
evalcond[2]=(sj0+(((-1.0)*r02*x6236))+(((-1.0)*x6230*x6237))+((x6227*x6235)));
evalcond[3]=((((-1.0)*r12*x6236))+(((-1.0)*x6232*x6237))+(((-1.0)*x6229))+((x6227*x6231)));
evalcond[4]=((((-1.0)*x6229))+((x6228*x6230))+(((-1.0)*x6235*x6236))+(((-1.0)*r02*x6237)));
evalcond[5]=((((-1.0)*r12*x6237))+(((-1.0)*sj0))+((x6228*x6232))+(((-1.0)*x6231*x6236)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6238=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x6238.valid){
continue;
}
CheckValue<IkReal> x6239 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6239.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6238.value)))+(x6239.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6240=IKsin(j4);
IkReal x6241=IKcos(j4);
IkReal x6242=((1.0)*cj0);
IkReal x6243=(cj5*r00);
IkReal x6244=(r11*sj5);
IkReal x6245=(cj5*r10);
IkReal x6246=(r21*sj5);
IkReal x6247=(cj5*r20);
IkReal x6248=(r01*sj5);
IkReal x6249=((1.0)*x6241);
IkReal x6250=((1.0)*x6240);
evalcond[0]=((((-1.0)*x6247*x6250))+(((-1.0)*r22*x6249))+((x6240*x6246)));
evalcond[1]=(((x6241*x6247))+(((-1.0)*r22*x6250))+(((-1.0)*x6246*x6249)));
evalcond[2]=((((-1.0)*r02*x6249))+sj0+(((-1.0)*x6243*x6250))+((x6240*x6248)));
evalcond[3]=((((-1.0)*x6242))+(((-1.0)*x6245*x6250))+(((-1.0)*r12*x6249))+((x6240*x6244)));
evalcond[4]=(((x6241*x6243))+(((-1.0)*r02*x6250))+(((-1.0)*x6242))+(((-1.0)*x6248*x6249)));
evalcond[5]=(((x6241*x6245))+(((-1.0)*sj0))+(((-1.0)*r12*x6250))+(((-1.0)*x6244*x6249)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6251=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x6251.valid){
continue;
}
CheckValue<IkReal> x6252 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6252.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6251.value)))+(x6252.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6253=IKsin(j4);
IkReal x6254=IKcos(j4);
IkReal x6255=((1.0)*cj0);
IkReal x6256=(cj5*r00);
IkReal x6257=(r11*sj5);
IkReal x6258=(cj5*r10);
IkReal x6259=(r21*sj5);
IkReal x6260=(cj5*r20);
IkReal x6261=(r01*sj5);
IkReal x6262=((1.0)*x6254);
IkReal x6263=((1.0)*x6253);
evalcond[0]=(((x6253*x6259))+(((-1.0)*x6260*x6263))+(((-1.0)*r22*x6262)));
evalcond[1]=(((x6254*x6260))+(((-1.0)*x6259*x6262))+(((-1.0)*r22*x6263)));
evalcond[2]=(sj0+(((-1.0)*r02*x6262))+((x6253*x6261))+(((-1.0)*x6256*x6263)));
evalcond[3]=(((x6253*x6257))+(((-1.0)*x6258*x6263))+(((-1.0)*x6255))+(((-1.0)*r12*x6262)));
evalcond[4]=(((x6254*x6256))+(((-1.0)*r02*x6263))+(((-1.0)*x6261*x6262))+(((-1.0)*x6255)));
evalcond[5]=((((-1.0)*sj0))+((x6254*x6258))+(((-1.0)*x6257*x6262))+(((-1.0)*r12*x6263)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((3.51251538777185)*py))+(((2.01887566680345)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-2.01887566680345)*py))+(((3.51251538777185)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((3.51251538777185)*py))+(((2.01887566680345)*px))))+IKsqr(((((-2.01887566680345)*py))+(((3.51251538777185)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((3.51251538777185)*py))+(((2.01887566680345)*px))), ((((-2.01887566680345)*py))+(((3.51251538777185)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x6264=IKsin(j0);
IkReal x6265=IKcos(j0);
evalcond[0]=((((0.123)*x6264))+(((0.214)*x6265))+(((-1.0)*px)));
evalcond[1]=((((-0.123)*x6265))+(((0.214)*x6264))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x6266=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x6266;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x6266);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x6267=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x6267;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x6267);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x6268=cj5*cj5;
IkReal x6269=((1.0)*r21);
IkReal x6270=(cj5*r20);
IkReal x6271=((((-1.0)*cj5*r00*sj5*x6269))+((r00*r20*x6268))+((r01*r21))+(((-1.0)*r01*x6268*x6269))+((r02*r22))+(((-1.0)*r01*sj5*x6270)));
j4eval[0]=x6271;
j4eval[1]=IKsign(x6271);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((sj0*x6270))+(((-1.0)*sj0*sj5*x6269))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6272=cj5*cj5;
IkReal x6273=((1.0)*r21);
IkReal x6274=(cj5*r20);
CheckValue<IkReal> x6275=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r00*sj5*x6273))+((r00*r20*x6272))+((r01*r21))+((r02*r22))+(((-1.0)*r01*x6272*x6273))+(((-1.0)*r01*sj5*x6274)))),-1);
if(!x6275.valid){
continue;
}
CheckValue<IkReal> x6276 = IKatan2WithCheck(IkReal((((sj0*x6274))+(((-1.0)*sj0*sj5*x6273)))),IkReal((r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x6276.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6275.value)))+(x6276.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6277=IKsin(j4);
IkReal x6278=IKcos(j4);
IkReal x6279=((1.0)*cj0);
IkReal x6280=(cj5*r00);
IkReal x6281=(r11*sj5);
IkReal x6282=(cj5*r10);
IkReal x6283=(r21*sj5);
IkReal x6284=(cj5*r20);
IkReal x6285=(r01*sj5);
IkReal x6286=((1.0)*x6278);
IkReal x6287=((1.0)*x6277);
evalcond[0]=((((-1.0)*x6284*x6287))+((x6277*x6283))+(((-1.0)*r22*x6286)));
evalcond[1]=((((-1.0)*x6283*x6286))+(((-1.0)*r22*x6287))+((x6278*x6284)));
evalcond[2]=(sj0+(((-1.0)*r02*x6286))+((x6277*x6285))+(((-1.0)*x6280*x6287)));
evalcond[3]=((((-1.0)*x6282*x6287))+((x6277*x6281))+(((-1.0)*x6279))+(((-1.0)*r12*x6286)));
evalcond[4]=((((-1.0)*x6285*x6286))+(((-1.0)*r02*x6287))+(((-1.0)*x6279))+((x6278*x6280)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r12*x6287))+((x6278*x6282))+(((-1.0)*x6281*x6286)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6288=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x6288.valid){
continue;
}
CheckValue<IkReal> x6289 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6289.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6288.value)))+(x6289.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6290=IKsin(j4);
IkReal x6291=IKcos(j4);
IkReal x6292=((1.0)*cj0);
IkReal x6293=(cj5*r00);
IkReal x6294=(r11*sj5);
IkReal x6295=(cj5*r10);
IkReal x6296=(r21*sj5);
IkReal x6297=(cj5*r20);
IkReal x6298=(r01*sj5);
IkReal x6299=((1.0)*x6291);
IkReal x6300=((1.0)*x6290);
evalcond[0]=((((-1.0)*r22*x6299))+(((-1.0)*x6297*x6300))+((x6290*x6296)));
evalcond[1]=((((-1.0)*x6296*x6299))+((x6291*x6297))+(((-1.0)*r22*x6300)));
evalcond[2]=(sj0+(((-1.0)*r02*x6299))+(((-1.0)*x6293*x6300))+((x6290*x6298)));
evalcond[3]=((((-1.0)*x6295*x6300))+(((-1.0)*x6292))+(((-1.0)*r12*x6299))+((x6290*x6294)));
evalcond[4]=((((-1.0)*r02*x6300))+(((-1.0)*x6292))+((x6291*x6293))+(((-1.0)*x6298*x6299)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x6294*x6299))+(((-1.0)*r12*x6300))+((x6291*x6295)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6301=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x6301.valid){
continue;
}
CheckValue<IkReal> x6302 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6302.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6301.value)))+(x6302.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6303=IKsin(j4);
IkReal x6304=IKcos(j4);
IkReal x6305=((1.0)*cj0);
IkReal x6306=(cj5*r00);
IkReal x6307=(r11*sj5);
IkReal x6308=(cj5*r10);
IkReal x6309=(r21*sj5);
IkReal x6310=(cj5*r20);
IkReal x6311=(r01*sj5);
IkReal x6312=((1.0)*x6304);
IkReal x6313=((1.0)*x6303);
evalcond[0]=((((-1.0)*r22*x6312))+((x6303*x6309))+(((-1.0)*x6310*x6313)));
evalcond[1]=((((-1.0)*r22*x6313))+(((-1.0)*x6309*x6312))+((x6304*x6310)));
evalcond[2]=((((-1.0)*x6306*x6313))+sj0+((x6303*x6311))+(((-1.0)*r02*x6312)));
evalcond[3]=(((x6303*x6307))+(((-1.0)*r12*x6312))+(((-1.0)*x6305))+(((-1.0)*x6308*x6313)));
evalcond[4]=((((-1.0)*x6311*x6312))+(((-1.0)*r02*x6313))+(((-1.0)*x6305))+((x6304*x6306)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r12*x6313))+(((-1.0)*x6307*x6312))+((x6304*x6308)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((2.01887566680345)*px))+(((-3.51251538777185)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-2.01887566680345)*py))+(((-3.51251538777185)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.01887566680345)*px))+(((-3.51251538777185)*py))))+IKsqr(((((-2.01887566680345)*py))+(((-3.51251538777185)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((2.01887566680345)*px))+(((-3.51251538777185)*py))), ((((-2.01887566680345)*py))+(((-3.51251538777185)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x6314=IKcos(j0);
IkReal x6315=IKsin(j0);
evalcond[0]=((((-1.0)*px))+(((0.123)*x6315))+(((-0.214)*x6314)));
evalcond[1]=((((-1.0)*py))+(((-0.123)*x6314))+(((-0.214)*x6315)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x6316=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x6316;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x6316);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x6317=cj5*cj5;
IkReal x6318=((1.0)*r21);
IkReal x6319=(cj5*sj5);
IkReal x6320=((1.0)*r20);
IkReal x6321=(((r01*r21))+(((-1.0)*r01*x6319*x6320))+((r00*r20*x6317))+(((-1.0)*r01*x6317*x6318))+(((-1.0)*r00*x6318*x6319))+((r02*r22)));
j4eval[0]=x6321;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x6320))))));
j4eval[2]=IKsign(x6321);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x6322=cj5*cj5;
IkReal x6323=(r21*sj5);
IkReal x6324=(r11*r21);
IkReal x6325=((1.0)*cj5*r20);
IkReal x6326=((((-1.0)*r11*sj5*x6325))+x6324+((r10*r20*x6322))+(((-1.0)*cj5*r10*x6323))+((r12*r22))+(((-1.0)*x6322*x6324)));
j4eval[0]=x6326;
j4eval[1]=((IKabs(((((-1.0)*sj0*x6325))+((sj0*x6323)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x6326);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6327=cj5*cj5;
IkReal x6328=(r21*sj5);
IkReal x6329=(r11*r21);
IkReal x6330=((1.0)*cj5*r20);
CheckValue<IkReal> x6331=IKPowWithIntegerCheck(IKsign((x6329+((r10*r20*x6327))+(((-1.0)*r11*sj5*x6330))+(((-1.0)*cj5*r10*x6328))+((r12*r22))+(((-1.0)*x6327*x6329)))),-1);
if(!x6331.valid){
continue;
}
CheckValue<IkReal> x6332 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((sj0*x6328))+(((-1.0)*sj0*x6330)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6332.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6331.value)))+(x6332.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6333=IKsin(j4);
IkReal x6334=IKcos(j4);
IkReal x6335=(r11*sj5);
IkReal x6336=(cj5*r00);
IkReal x6337=(cj5*r10);
IkReal x6338=(r21*sj5);
IkReal x6339=(cj5*r20);
IkReal x6340=(r01*sj5);
IkReal x6341=((1.0)*x6334);
IkReal x6342=((1.0)*x6333);
evalcond[0]=((((-1.0)*r22*x6341))+(((-1.0)*x6339*x6342))+((x6333*x6338)));
evalcond[1]=((((-1.0)*r22*x6342))+((x6334*x6339))+(((-1.0)*x6338*x6341)));
evalcond[2]=(sj0+((x6333*x6340))+(((-1.0)*r02*x6341))+(((-1.0)*x6336*x6342)));
evalcond[3]=((((-1.0)*x6340*x6341))+cj0+((x6334*x6336))+(((-1.0)*r02*x6342)));
evalcond[4]=(sj0+((x6334*x6337))+(((-1.0)*x6335*x6341))+(((-1.0)*r12*x6342)));
evalcond[5]=((((-1.0)*x6337*x6342))+((x6333*x6335))+(((-1.0)*r12*x6341))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6343=cj5*cj5;
IkReal x6344=((1.0)*r21);
IkReal x6345=(cj5*sj5);
IkReal x6346=((1.0)*r20);
CheckValue<IkReal> x6347 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x6346)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6347.valid){
continue;
}
CheckValue<IkReal> x6348=IKPowWithIntegerCheck(IKsign((((r00*r20*x6343))+(((-1.0)*r01*x6343*x6344))+(((-1.0)*r01*x6345*x6346))+((r01*r21))+(((-1.0)*r00*x6344*x6345))+((r02*r22)))),-1);
if(!x6348.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6347.value)+(((1.5707963267949)*(x6348.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6349=IKsin(j4);
IkReal x6350=IKcos(j4);
IkReal x6351=(r11*sj5);
IkReal x6352=(cj5*r00);
IkReal x6353=(cj5*r10);
IkReal x6354=(r21*sj5);
IkReal x6355=(cj5*r20);
IkReal x6356=(r01*sj5);
IkReal x6357=((1.0)*x6350);
IkReal x6358=((1.0)*x6349);
evalcond[0]=((((-1.0)*x6355*x6358))+((x6349*x6354))+(((-1.0)*r22*x6357)));
evalcond[1]=((((-1.0)*x6354*x6357))+(((-1.0)*r22*x6358))+((x6350*x6355)));
evalcond[2]=(sj0+((x6349*x6356))+(((-1.0)*r02*x6357))+(((-1.0)*x6352*x6358)));
evalcond[3]=(cj0+(((-1.0)*r02*x6358))+(((-1.0)*x6356*x6357))+((x6350*x6352)));
evalcond[4]=(sj0+(((-1.0)*x6351*x6357))+(((-1.0)*r12*x6358))+((x6350*x6353)));
evalcond[5]=(((x6349*x6351))+(((-1.0)*x6353*x6358))+(((-1.0)*r12*x6357))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6359=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x6359.valid){
continue;
}
CheckValue<IkReal> x6360 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6360.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6359.value)))+(x6360.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6361=IKsin(j4);
IkReal x6362=IKcos(j4);
IkReal x6363=(r11*sj5);
IkReal x6364=(cj5*r00);
IkReal x6365=(cj5*r10);
IkReal x6366=(r21*sj5);
IkReal x6367=(cj5*r20);
IkReal x6368=(r01*sj5);
IkReal x6369=((1.0)*x6362);
IkReal x6370=((1.0)*x6361);
evalcond[0]=(((x6361*x6366))+(((-1.0)*x6367*x6370))+(((-1.0)*r22*x6369)));
evalcond[1]=((((-1.0)*x6366*x6369))+((x6362*x6367))+(((-1.0)*r22*x6370)));
evalcond[2]=(sj0+(((-1.0)*r02*x6369))+((x6361*x6368))+(((-1.0)*x6364*x6370)));
evalcond[3]=((((-1.0)*x6368*x6369))+cj0+((x6362*x6364))+(((-1.0)*r02*x6370)));
evalcond[4]=(sj0+((x6362*x6365))+(((-1.0)*r12*x6370))+(((-1.0)*x6363*x6369)));
evalcond[5]=((((-1.0)*x6365*x6370))+((x6361*x6363))+(((-1.0)*r12*x6369))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((2.04037896579128)*py))+(((0.549161078320192)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-0.549161078320192)*py))+(((2.04037896579128)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.04037896579128)*py))+(((0.549161078320192)*px))))+IKsqr(((((-0.549161078320192)*py))+(((2.04037896579128)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((2.04037896579128)*py))+(((0.549161078320192)*px))), ((((-0.549161078320192)*py))+(((2.04037896579128)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x6371=IKsin(j0);
IkReal x6372=IKcos(j0);
evalcond[0]=((((-1.0)*px))+(((0.123)*x6371))+(((0.457)*x6372)));
evalcond[1]=((((-0.123)*x6372))+(((-1.0)*py))+(((0.457)*x6371)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x6373=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x6373;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x6373);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x6374=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x6374;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x6374);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x6375=cj5*cj5;
IkReal x6376=((1.0)*r21);
IkReal x6377=(cj5*r20);
IkReal x6378=(((r00*r20*x6375))+((r01*r21))+((r02*r22))+(((-1.0)*r01*x6375*x6376))+(((-1.0)*r01*sj5*x6377))+(((-1.0)*cj5*r00*sj5*x6376)));
j4eval[0]=x6378;
j4eval[1]=IKsign(x6378);
j4eval[2]=((IKabs(((((-1.0)*sj0*sj5*x6376))+((sj0*x6377)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6379=cj5*cj5;
IkReal x6380=((1.0)*r21);
IkReal x6381=(cj5*r20);
CheckValue<IkReal> x6382=IKPowWithIntegerCheck(IKsign((((r00*r20*x6379))+(((-1.0)*r01*sj5*x6381))+((r01*r21))+(((-1.0)*cj5*r00*sj5*x6380))+((r02*r22))+(((-1.0)*r01*x6379*x6380)))),-1);
if(!x6382.valid){
continue;
}
CheckValue<IkReal> x6383 = IKatan2WithCheck(IkReal((((sj0*x6381))+(((-1.0)*sj0*sj5*x6380)))),IkReal((r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x6383.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6382.value)))+(x6383.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6384=IKsin(j4);
IkReal x6385=IKcos(j4);
IkReal x6386=((1.0)*cj0);
IkReal x6387=(cj5*r00);
IkReal x6388=(r11*sj5);
IkReal x6389=(cj5*r10);
IkReal x6390=(r21*sj5);
IkReal x6391=(cj5*r20);
IkReal x6392=(r01*sj5);
IkReal x6393=((1.0)*x6385);
IkReal x6394=((1.0)*x6384);
evalcond[0]=(((x6384*x6390))+(((-1.0)*r22*x6393))+(((-1.0)*x6391*x6394)));
evalcond[1]=(((x6385*x6391))+(((-1.0)*r22*x6394))+(((-1.0)*x6390*x6393)));
evalcond[2]=(((x6384*x6392))+sj0+(((-1.0)*x6387*x6394))+(((-1.0)*r02*x6393)));
evalcond[3]=((((-1.0)*x6386))+((x6384*x6388))+(((-1.0)*r12*x6393))+(((-1.0)*x6389*x6394)));
evalcond[4]=((((-1.0)*x6386))+((x6385*x6387))+(((-1.0)*x6392*x6393))+(((-1.0)*r02*x6394)));
evalcond[5]=((((-1.0)*sj0))+((x6385*x6389))+(((-1.0)*x6388*x6393))+(((-1.0)*r12*x6394)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6395=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x6395.valid){
continue;
}
CheckValue<IkReal> x6396 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6396.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6395.value)))+(x6396.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6397=IKsin(j4);
IkReal x6398=IKcos(j4);
IkReal x6399=((1.0)*cj0);
IkReal x6400=(cj5*r00);
IkReal x6401=(r11*sj5);
IkReal x6402=(cj5*r10);
IkReal x6403=(r21*sj5);
IkReal x6404=(cj5*r20);
IkReal x6405=(r01*sj5);
IkReal x6406=((1.0)*x6398);
IkReal x6407=((1.0)*x6397);
evalcond[0]=((((-1.0)*r22*x6406))+(((-1.0)*x6404*x6407))+((x6397*x6403)));
evalcond[1]=((((-1.0)*x6403*x6406))+((x6398*x6404))+(((-1.0)*r22*x6407)));
evalcond[2]=(sj0+(((-1.0)*x6400*x6407))+(((-1.0)*r02*x6406))+((x6397*x6405)));
evalcond[3]=((((-1.0)*x6402*x6407))+(((-1.0)*x6399))+(((-1.0)*r12*x6406))+((x6397*x6401)));
evalcond[4]=((((-1.0)*r02*x6407))+((x6398*x6400))+(((-1.0)*x6399))+(((-1.0)*x6405*x6406)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x6401*x6406))+((x6398*x6402))+(((-1.0)*r12*x6407)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6408=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x6408.valid){
continue;
}
CheckValue<IkReal> x6409 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6409.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6408.value)))+(x6409.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6410=IKsin(j4);
IkReal x6411=IKcos(j4);
IkReal x6412=((1.0)*cj0);
IkReal x6413=(cj5*r00);
IkReal x6414=(r11*sj5);
IkReal x6415=(cj5*r10);
IkReal x6416=(r21*sj5);
IkReal x6417=(cj5*r20);
IkReal x6418=(r01*sj5);
IkReal x6419=((1.0)*x6411);
IkReal x6420=((1.0)*x6410);
evalcond[0]=((((-1.0)*x6417*x6420))+((x6410*x6416))+(((-1.0)*r22*x6419)));
evalcond[1]=((((-1.0)*r22*x6420))+((x6411*x6417))+(((-1.0)*x6416*x6419)));
evalcond[2]=(sj0+(((-1.0)*x6413*x6420))+((x6410*x6418))+(((-1.0)*r02*x6419)));
evalcond[3]=((((-1.0)*x6415*x6420))+((x6410*x6414))+(((-1.0)*x6412))+(((-1.0)*r12*x6419)));
evalcond[4]=((((-1.0)*x6418*x6419))+((x6411*x6413))+(((-1.0)*x6412))+(((-1.0)*r02*x6420)));
evalcond[5]=((((-1.0)*x6414*x6419))+(((-1.0)*sj0))+((x6411*x6415))+(((-1.0)*r12*x6420)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((7.70194113963682)*px))+(((1.81590482154039)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-7.70194113963682)*py))+(((1.81590482154039)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((7.70194113963682)*px))+(((1.81590482154039)*py))))+IKsqr(((((-7.70194113963682)*py))+(((1.81590482154039)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((7.70194113963682)*px))+(((1.81590482154039)*py))), ((((-7.70194113963682)*py))+(((1.81590482154039)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x6421=IKsin(j0);
IkReal x6422=IKcos(j0);
evalcond[0]=((((0.029)*x6422))+(((-1.0)*px))+(((0.123)*x6421)));
evalcond[1]=((((-0.123)*x6422))+(((0.029)*x6421))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x6423=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x6423;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x6423);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x6424=cj5*cj5;
IkReal x6425=((1.0)*r21);
IkReal x6426=(cj5*sj5);
IkReal x6427=((1.0)*r20);
IkReal x6428=(((r00*r20*x6424))+((r01*r21))+(((-1.0)*r00*x6425*x6426))+(((-1.0)*r01*x6426*x6427))+((r02*r22))+(((-1.0)*r01*x6424*x6425)));
j4eval[0]=x6428;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x6427)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x6428);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x6429=cj5*cj5;
IkReal x6430=(r21*sj5);
IkReal x6431=(r11*r21);
IkReal x6432=((1.0)*cj5*r20);
IkReal x6433=(((r10*r20*x6429))+x6431+((r12*r22))+(((-1.0)*x6429*x6431))+(((-1.0)*r11*sj5*x6432))+(((-1.0)*cj5*r10*x6430)));
j4eval[0]=x6433;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*sj0*x6432))+((sj0*x6430))))));
j4eval[2]=IKsign(x6433);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6434=cj5*cj5;
IkReal x6435=(r21*sj5);
IkReal x6436=(r11*r21);
IkReal x6437=((1.0)*cj5*r20);
CheckValue<IkReal> x6438 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*sj0*x6437))+((sj0*x6435)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6438.valid){
continue;
}
CheckValue<IkReal> x6439=IKPowWithIntegerCheck(IKsign((x6436+((r12*r22))+(((-1.0)*x6434*x6436))+((r10*r20*x6434))+(((-1.0)*r11*sj5*x6437))+(((-1.0)*cj5*r10*x6435)))),-1);
if(!x6439.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6438.value)+(((1.5707963267949)*(x6439.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6440=IKsin(j4);
IkReal x6441=IKcos(j4);
IkReal x6442=(r11*sj5);
IkReal x6443=(cj5*r00);
IkReal x6444=(cj5*r10);
IkReal x6445=(r21*sj5);
IkReal x6446=(cj5*r20);
IkReal x6447=(r01*sj5);
IkReal x6448=((1.0)*x6441);
IkReal x6449=((1.0)*x6440);
evalcond[0]=((((-1.0)*x6446*x6449))+((x6440*x6445))+(((-1.0)*r22*x6448)));
evalcond[1]=((((-1.0)*x6445*x6448))+(((-1.0)*r22*x6449))+((x6441*x6446)));
evalcond[2]=(sj0+(((-1.0)*r02*x6448))+((x6440*x6447))+(((-1.0)*x6443*x6449)));
evalcond[3]=(cj0+(((-1.0)*r02*x6449))+(((-1.0)*x6447*x6448))+((x6441*x6443)));
evalcond[4]=(sj0+(((-1.0)*r12*x6449))+(((-1.0)*x6442*x6448))+((x6441*x6444)));
evalcond[5]=(((x6440*x6442))+(((-1.0)*x6444*x6449))+(((-1.0)*r12*x6448))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6450=cj5*cj5;
IkReal x6451=((1.0)*r21);
IkReal x6452=(cj5*sj5);
IkReal x6453=((1.0)*r20);
CheckValue<IkReal> x6454 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x6453)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6454.valid){
continue;
}
CheckValue<IkReal> x6455=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x6451*x6452))+((r01*r21))+((r00*r20*x6450))+((r02*r22))+(((-1.0)*r01*x6450*x6451))+(((-1.0)*r01*x6452*x6453)))),-1);
if(!x6455.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6454.value)+(((1.5707963267949)*(x6455.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6456=IKsin(j4);
IkReal x6457=IKcos(j4);
IkReal x6458=(r11*sj5);
IkReal x6459=(cj5*r00);
IkReal x6460=(cj5*r10);
IkReal x6461=(r21*sj5);
IkReal x6462=(cj5*r20);
IkReal x6463=(r01*sj5);
IkReal x6464=((1.0)*x6457);
IkReal x6465=((1.0)*x6456);
evalcond[0]=((((-1.0)*r22*x6464))+((x6456*x6461))+(((-1.0)*x6462*x6465)));
evalcond[1]=((((-1.0)*r22*x6465))+((x6457*x6462))+(((-1.0)*x6461*x6464)));
evalcond[2]=(sj0+((x6456*x6463))+(((-1.0)*r02*x6464))+(((-1.0)*x6459*x6465)));
evalcond[3]=(cj0+((x6457*x6459))+(((-1.0)*x6463*x6464))+(((-1.0)*r02*x6465)));
evalcond[4]=(sj0+(((-1.0)*x6458*x6464))+((x6457*x6460))+(((-1.0)*r12*x6465)));
evalcond[5]=(((x6456*x6458))+(((-1.0)*r12*x6464))+(((-1.0)*x6460*x6465))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6466=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x6466.valid){
continue;
}
CheckValue<IkReal> x6467 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6467.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6466.value)))+(x6467.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6468=IKsin(j4);
IkReal x6469=IKcos(j4);
IkReal x6470=(r11*sj5);
IkReal x6471=(cj5*r00);
IkReal x6472=(cj5*r10);
IkReal x6473=(r21*sj5);
IkReal x6474=(cj5*r20);
IkReal x6475=(r01*sj5);
IkReal x6476=((1.0)*x6469);
IkReal x6477=((1.0)*x6468);
evalcond[0]=((((-1.0)*r22*x6476))+((x6468*x6473))+(((-1.0)*x6474*x6477)));
evalcond[1]=((((-1.0)*x6473*x6476))+(((-1.0)*r22*x6477))+((x6469*x6474)));
evalcond[2]=(sj0+((x6468*x6475))+(((-1.0)*x6471*x6477))+(((-1.0)*r02*x6476)));
evalcond[3]=(cj0+(((-1.0)*x6475*x6476))+(((-1.0)*r02*x6477))+((x6469*x6471)));
evalcond[4]=((((-1.0)*r12*x6477))+sj0+(((-1.0)*x6470*x6476))+((x6469*x6472)));
evalcond[5]=((((-1.0)*r12*x6476))+(((-1.0)*x6472*x6477))+((x6468*x6470))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x6478=((243.0)*sj1);
IkReal x6479=(cj5*r01);
IkReal x6480=(r00*sj5);
IkReal x6481=(sj1*sj2);
IkReal x6482=(cj1*cj2);
IkReal x6483=((1000.0)*px);
IkReal x6484=((214.0)*cj1*sj2);
IkReal x6485=((214.0)*cj2*sj1);
CheckValue<IkReal> x6486=IKPowWithIntegerCheck(((((-123.0)*x6481))+(((123.0)*x6482))),-1);
if(!x6486.valid){
continue;
}
CheckValue<IkReal> x6487=IKPowWithIntegerCheck(((((-1.0)*x6481))+x6482),-1);
if(!x6487.valid){
continue;
}
if( IKabs(((x6486.value)*(((((-1.0)*x6478*x6480))+(((110.0)*x6479*x6482))+((x6482*x6483))+(((-110.0)*x6480*x6481))+(((-1.0)*x6481*x6483))+(((-1.0)*x6478*x6479))+(((-1.0)*x6480*x6484))+(((-1.0)*x6480*x6485))+(((-110.0)*x6479*x6481))+(((-1.0)*x6479*x6484))+(((-1.0)*x6479*x6485))+(((110.0)*x6480*x6482)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x6487.value)*(((((-1.0)*x6480))+(((-1.0)*x6479)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x6486.value)*(((((-1.0)*x6478*x6480))+(((110.0)*x6479*x6482))+((x6482*x6483))+(((-110.0)*x6480*x6481))+(((-1.0)*x6481*x6483))+(((-1.0)*x6478*x6479))+(((-1.0)*x6480*x6484))+(((-1.0)*x6480*x6485))+(((-110.0)*x6479*x6481))+(((-1.0)*x6479*x6484))+(((-1.0)*x6479*x6485))+(((110.0)*x6480*x6482))))))+IKsqr(((x6487.value)*(((((-1.0)*x6480))+(((-1.0)*x6479))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x6486.value)*(((((-1.0)*x6478*x6480))+(((110.0)*x6479*x6482))+((x6482*x6483))+(((-110.0)*x6480*x6481))+(((-1.0)*x6481*x6483))+(((-1.0)*x6478*x6479))+(((-1.0)*x6480*x6484))+(((-1.0)*x6480*x6485))+(((-110.0)*x6479*x6481))+(((-1.0)*x6479*x6484))+(((-1.0)*x6479*x6485))+(((110.0)*x6480*x6482))))), ((x6487.value)*(((((-1.0)*x6480))+(((-1.0)*x6479))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x6488=IKcos(j0);
IkReal x6489=IKsin(j0);
IkReal x6490=((0.11)*sj5);
IkReal x6491=(cj1*cj2);
IkReal x6492=(cj5*r01);
IkReal x6493=((1.0)*sj2);
IkReal x6494=(cj5*r11);
IkReal x6495=((0.214)*cj2);
IkReal x6496=(sj1*x6489);
IkReal x6497=(sj1*x6488);
IkReal x6498=((0.214)*cj1*sj2);
evalcond[0]=(((r00*sj5))+x6492+(((-1.0)*x6493*x6497))+((x6488*x6491)));
evalcond[1]=(((r10*sj5))+x6494+((x6489*x6491))+(((-1.0)*x6493*x6496)));
evalcond[2]=((((-1.0)*x6495*x6497))+(((-1.0)*x6488*x6498))+(((-1.0)*r00*x6490))+(((-0.243)*x6497))+(((-0.11)*x6492))+(((0.123)*x6489))+(((-1.0)*px)));
evalcond[3]=((((-0.123)*x6488))+(((-1.0)*x6495*x6496))+(((-1.0)*x6489*x6498))+(((-1.0)*r10*x6490))+(((-0.243)*x6496))+(((-0.11)*x6494))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x6499=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x6499;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x6499);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x6500=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x6500;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x6500);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x6501=((1.0)*cj5);
IkReal x6502=((((-1.0)*r21*x6501))+(((-1.0)*r20*sj5)));
j4eval[0]=x6502;
j4eval[1]=((IKabs((((r11*sj0*sj5))+(((-1.0)*cj0*r00*x6501))+((cj0*r01*sj5))+(((-1.0)*r10*sj0*x6501)))))+(IKabs((((r12*sj0))+((cj0*r02))))));
j4eval[2]=IKsign(x6502);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x6503=((-1.0)*r20);
IkReal x6505 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x6505)==0){
continue;
}
IkReal x6504=pow(x6505,-0.5);
CheckValue<IkReal> x6506 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x6503),IKFAST_ATAN2_MAGTHRESH);
if(!x6506.valid){
continue;
}
IkReal gconst132=((-1.0)*(x6506.value));
IkReal gconst133=(r21*x6504);
IkReal gconst134=(x6503*x6504);
CheckValue<IkReal> x6507 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x6507.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x6507.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x6508=((-1.0)*r20);
IkReal x6509=x6504;
CheckValue<IkReal> x6511 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x6508),IKFAST_ATAN2_MAGTHRESH);
if(!x6511.valid){
continue;
}
IkReal x6510=((-1.0)*(x6511.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst133;
cj5=gconst134;
j5=x6510;
IkReal gconst132=x6510;
IkReal gconst133=(r21*x6509);
IkReal gconst134=(x6508*x6509);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6512=((-1.0)*r20);
IkReal x6513=x6504;
CheckValue<IkReal> x6515 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x6512),IKFAST_ATAN2_MAGTHRESH);
if(!x6515.valid){
continue;
}
IkReal x6514=((-1.0)*(x6515.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst133;
cj5=gconst134;
j5=x6514;
IkReal gconst132=x6514;
IkReal gconst133=(r21*x6513);
IkReal gconst134=(x6512*x6513);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x6516=((-1.0)*r20);
IkReal x6517=x6504;
CheckValue<IkReal> x6519 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x6516),IKFAST_ATAN2_MAGTHRESH);
if(!x6519.valid){
continue;
}
IkReal x6518=((-1.0)*(x6519.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst133;
cj5=gconst134;
j5=x6518;
IkReal gconst132=x6518;
IkReal gconst133=(r21*x6517);
IkReal gconst134=(x6516*x6517);
IkReal x6520=r22*r22;
CheckValue<IkReal> x6523=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x6520))),-1);
if(!x6523.valid){
continue;
}
IkReal x6521=x6523.value;
IkReal x6522=(((x6521*(r20*r20*r20*r20)))+x6520+(((2.0)*x6521*(r20*r20)*(r21*r21)))+((x6521*(r21*r21*r21*r21))));
j4eval[0]=x6522;
j4eval[1]=IKsign(x6522);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6524=(gconst133*r21);
IkReal x6525=(sj1*sj2);
IkReal x6526=(gconst134*r20);
IkReal x6527=(cj1*cj2);
CheckValue<IkReal> x6528=IKPowWithIntegerCheck(IKsign(((r22*r22)+(x6524*x6524)+(((-2.0)*x6524*x6526))+(x6526*x6526))),-1);
if(!x6528.valid){
continue;
}
CheckValue<IkReal> x6529 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x6527))+((r22*x6525)))),IkReal(((((-1.0)*x6524*x6527))+(((-1.0)*x6525*x6526))+((x6524*x6525))+((x6526*x6527)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6529.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6528.value)))+(x6529.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6530=IKsin(j4);
IkReal x6531=IKcos(j4);
IkReal x6532=(cj2*sj1);
IkReal x6533=(gconst133*r11);
IkReal x6534=(gconst133*r21);
IkReal x6535=(gconst133*r01);
IkReal x6536=(cj1*sj2);
IkReal x6537=((1.0)*x6531);
IkReal x6538=(gconst134*x6531);
IkReal x6539=((1.0)*x6530);
evalcond[0]=((((-1.0)*r22*x6537))+(((-1.0)*gconst134*r20*x6539))+((x6530*x6534)));
evalcond[1]=(sj0+(((-1.0)*r02*x6537))+((x6530*x6535))+(((-1.0)*gconst134*r00*x6539)));
evalcond[2]=((((-1.0)*gconst134*r10*x6539))+(((-1.0)*r12*x6537))+((x6530*x6533))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*x6534*x6537))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x6539))+((r20*x6538)));
evalcond[4]=((((-1.0)*x6535*x6537))+(((-1.0)*r02*x6539))+((cj0*x6536))+((cj0*x6532))+((r00*x6538)));
evalcond[5]=(((sj0*x6532))+((sj0*x6536))+(((-1.0)*r12*x6539))+((r10*x6538))+(((-1.0)*x6533*x6537)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6540=IKPowWithIntegerCheck(IKsign((((gconst134*r01))+((gconst133*r00)))),-1);
if(!x6540.valid){
continue;
}
CheckValue<IkReal> x6541 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst133*r21))+(((-1.0)*cj0*gconst134*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6541.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6540.value)))+(x6541.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6542=IKsin(j4);
IkReal x6543=IKcos(j4);
IkReal x6544=(cj2*sj1);
IkReal x6545=(gconst133*r11);
IkReal x6546=(gconst133*r21);
IkReal x6547=(gconst133*r01);
IkReal x6548=(cj1*sj2);
IkReal x6549=((1.0)*x6543);
IkReal x6550=(gconst134*x6543);
IkReal x6551=((1.0)*x6542);
evalcond[0]=((((-1.0)*gconst134*r20*x6551))+(((-1.0)*r22*x6549))+((x6542*x6546)));
evalcond[1]=(sj0+((x6542*x6547))+(((-1.0)*r02*x6549))+(((-1.0)*gconst134*r00*x6551)));
evalcond[2]=((((-1.0)*gconst134*r10*x6551))+(((-1.0)*r12*x6549))+((x6542*x6545))+(((-1.0)*cj0)));
evalcond[3]=(((r20*x6550))+(((-1.0)*r22*x6551))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x6546*x6549)));
evalcond[4]=((((-1.0)*r02*x6551))+(((-1.0)*x6547*x6549))+((cj0*x6544))+((cj0*x6548))+((r00*x6550)));
evalcond[5]=((((-1.0)*x6545*x6549))+(((-1.0)*r12*x6551))+((r10*x6550))+((sj0*x6548))+((sj0*x6544)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6552 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*gconst134*r20*sj0))+((gconst133*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6552.valid){
continue;
}
CheckValue<IkReal> x6553=IKPowWithIntegerCheck(IKsign((((gconst134*r11))+((gconst133*r10)))),-1);
if(!x6553.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6552.value)+(((1.5707963267949)*(x6553.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6554=IKsin(j4);
IkReal x6555=IKcos(j4);
IkReal x6556=(cj2*sj1);
IkReal x6557=(gconst133*r11);
IkReal x6558=(gconst133*r21);
IkReal x6559=(gconst133*r01);
IkReal x6560=(cj1*sj2);
IkReal x6561=((1.0)*x6555);
IkReal x6562=(gconst134*x6555);
IkReal x6563=((1.0)*x6554);
evalcond[0]=((((-1.0)*r22*x6561))+((x6554*x6558))+(((-1.0)*gconst134*r20*x6563)));
evalcond[1]=((((-1.0)*gconst134*r00*x6563))+sj0+((x6554*x6559))+(((-1.0)*r02*x6561)));
evalcond[2]=((((-1.0)*gconst134*r10*x6563))+((x6554*x6557))+(((-1.0)*cj0))+(((-1.0)*r12*x6561)));
evalcond[3]=((((-1.0)*r22*x6563))+((r20*x6562))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x6558*x6561)));
evalcond[4]=(((r00*x6562))+(((-1.0)*x6559*x6561))+(((-1.0)*r02*x6563))+((cj0*x6560))+((cj0*x6556)));
evalcond[5]=(((sj0*x6560))+(((-1.0)*x6557*x6561))+((r10*x6562))+((sj0*x6556))+(((-1.0)*r12*x6563)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6564=((-1.0)*r21);
IkReal x6566 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x6566)==0){
continue;
}
IkReal x6565=pow(x6566,-0.5);
CheckValue<IkReal> x6567 = IKatan2WithCheck(IkReal(x6564),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x6567.valid){
continue;
}
IkReal gconst135=((3.14159265358979)+(((-1.0)*(x6567.value))));
IkReal gconst136=(x6564*x6565);
IkReal gconst137=((1.0)*r20*x6565);
CheckValue<IkReal> x6568 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x6568.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x6568.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x6569=((-1.0)*r21);
CheckValue<IkReal> x6572 = IKatan2WithCheck(IkReal(x6569),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x6572.valid){
continue;
}
IkReal x6570=((1.0)*(x6572.value));
IkReal x6571=x6565;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x6570)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x6570)));
IkReal gconst136=(x6569*x6571);
IkReal gconst137=((1.0)*r20*x6571);
IkReal x6573=r22*r22;
IkReal x6574=((1.0)*x6573);
CheckValue<IkReal> x6578=IKPowWithIntegerCheck(((-1.0)+x6573),-1);
if(!x6578.valid){
continue;
}
IkReal x6575=x6578.value;
if((((1.0)+(((-1.0)*x6574)))) < -0.00001)
continue;
IkReal x6576=IKsqrt(((1.0)+(((-1.0)*x6574))));
IkReal x6577=(sj0*x6575*x6576);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*x6574*x6577))+x6577))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6579=((-1.0)*r21);
CheckValue<IkReal> x6582 = IKatan2WithCheck(IkReal(x6579),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x6582.valid){
continue;
}
IkReal x6580=((1.0)*(x6582.value));
IkReal x6581=x6565;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x6580)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x6580)));
IkReal gconst136=(x6579*x6581);
IkReal gconst137=((1.0)*r20*x6581);
IkReal x6583=r22*r22;
IkReal x6584=((1.0)*x6583);
CheckValue<IkReal> x6588=IKPowWithIntegerCheck(((-1.0)+x6583),-1);
if(!x6588.valid){
continue;
}
IkReal x6585=x6588.value;
if((((1.0)+(((-1.0)*x6584)))) < -0.00001)
continue;
IkReal x6586=IKsqrt(((1.0)+(((-1.0)*x6584))));
IkReal x6587=(cj0*x6585*x6586);
j4eval[0]=((IKabs(((((-1.0)*x6584*x6587))+x6587)))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x6589=((-1.0)*r21);
CheckValue<IkReal> x6592 = IKatan2WithCheck(IkReal(x6589),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x6592.valid){
continue;
}
IkReal x6590=((1.0)*(x6592.value));
IkReal x6591=x6565;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x6590)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x6590)));
IkReal gconst136=(x6589*x6591);
IkReal gconst137=((1.0)*r20*x6591);
IkReal x6593=r22*r22;
IkReal x6594=(cj0*r02);
IkReal x6595=(r12*sj0);
CheckValue<IkReal> x6599=IKPowWithIntegerCheck(((-1.0)+x6593),-1);
if(!x6599.valid){
continue;
}
IkReal x6596=x6599.value;
if((((1.0)+(((-1.0)*x6593)))) < -0.00001)
continue;
IkReal x6597=IKsqrt(((1.0)+(((-1.0)*x6593))));
IkReal x6598=((1.0)*r22*x6596*x6597);
j4eval[0]=0;
j4eval[1]=((IKabs((x6594+x6595)))+(IKabs(((((-1.0)*x6594*x6598))+(((-1.0)*x6595*x6598))))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6600=((1.0)*gconst137);
CheckValue<IkReal> x6601=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst136*r20))+(((-1.0)*r21*x6600)))),-1);
if(!x6601.valid){
continue;
}
CheckValue<IkReal> x6602 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*r10*sj0*x6600))+((gconst136*r11*sj0))+((cj0*gconst136*r01))+(((-1.0)*cj0*r00*x6600)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6602.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6601.value)))+(x6602.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6603=IKsin(j4);
IkReal x6604=IKcos(j4);
IkReal x6605=(gconst136*r01);
IkReal x6606=(gconst137*r10);
IkReal x6607=(gconst137*r20);
IkReal x6608=(gconst136*r11);
IkReal x6609=(gconst136*r21);
IkReal x6610=(gconst137*r00);
IkReal x6611=(cj2*sj1);
IkReal x6612=(cj1*sj2);
IkReal x6613=((1.0)*x6604);
IkReal x6614=((1.0)*x6603);
evalcond[0]=((((-1.0)*x6607*x6614))+(((-1.0)*r22*x6613))+((x6603*x6609)));
evalcond[1]=(sj0+(((-1.0)*x6610*x6614))+(((-1.0)*r02*x6613))+((x6603*x6605)));
evalcond[2]=((((-1.0)*r12*x6613))+(((-1.0)*x6606*x6614))+((x6603*x6608))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*r22*x6614))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x6609*x6613))+((x6604*x6607)));
evalcond[4]=((((-1.0)*x6605*x6613))+((x6604*x6610))+(((-1.0)*r02*x6614))+((cj0*x6611))+((cj0*x6612)));
evalcond[5]=((((-1.0)*r12*x6614))+(((-1.0)*x6608*x6613))+((x6604*x6606))+((sj0*x6611))+((sj0*x6612)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6615 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*gconst137*r20))+((cj0*gconst136*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6615.valid){
continue;
}
CheckValue<IkReal> x6616=IKPowWithIntegerCheck(IKsign((((gconst136*r00))+((gconst137*r01)))),-1);
if(!x6616.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6615.value)+(((1.5707963267949)*(x6616.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6617=IKsin(j4);
IkReal x6618=IKcos(j4);
IkReal x6619=(gconst136*r01);
IkReal x6620=(gconst137*r10);
IkReal x6621=(gconst137*r20);
IkReal x6622=(gconst136*r11);
IkReal x6623=(gconst136*r21);
IkReal x6624=(gconst137*r00);
IkReal x6625=(cj2*sj1);
IkReal x6626=(cj1*sj2);
IkReal x6627=((1.0)*x6618);
IkReal x6628=((1.0)*x6617);
evalcond[0]=((((-1.0)*r22*x6627))+(((-1.0)*x6621*x6628))+((x6617*x6623)));
evalcond[1]=(sj0+(((-1.0)*r02*x6627))+((x6617*x6619))+(((-1.0)*x6624*x6628)));
evalcond[2]=((((-1.0)*r12*x6627))+(((-1.0)*x6620*x6628))+((x6617*x6622))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*r22*x6628))+((x6618*x6621))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x6623*x6627)));
evalcond[4]=((((-1.0)*x6619*x6627))+((x6618*x6624))+(((-1.0)*r02*x6628))+((cj0*x6626))+((cj0*x6625)));
evalcond[5]=((((-1.0)*r12*x6628))+((x6618*x6620))+((sj0*x6625))+((sj0*x6626))+(((-1.0)*x6622*x6627)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6629=IKPowWithIntegerCheck(IKsign((((gconst137*r11))+((gconst136*r10)))),-1);
if(!x6629.valid){
continue;
}
CheckValue<IkReal> x6630 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst136*r21*sj0))+(((-1.0)*gconst137*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6630.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6629.value)))+(x6630.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6631=IKsin(j4);
IkReal x6632=IKcos(j4);
IkReal x6633=(gconst136*r01);
IkReal x6634=(gconst137*r10);
IkReal x6635=(gconst137*r20);
IkReal x6636=(gconst136*r11);
IkReal x6637=(gconst136*r21);
IkReal x6638=(gconst137*r00);
IkReal x6639=(cj2*sj1);
IkReal x6640=(cj1*sj2);
IkReal x6641=((1.0)*x6632);
IkReal x6642=((1.0)*x6631);
evalcond[0]=((((-1.0)*r22*x6641))+((x6631*x6637))+(((-1.0)*x6635*x6642)));
evalcond[1]=(sj0+(((-1.0)*x6638*x6642))+(((-1.0)*r02*x6641))+((x6631*x6633)));
evalcond[2]=((((-1.0)*x6634*x6642))+((x6631*x6636))+(((-1.0)*cj0))+(((-1.0)*r12*x6641)));
evalcond[3]=((((-1.0)*r22*x6642))+(((-1.0)*x6637*x6641))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x6632*x6635)));
evalcond[4]=((((-1.0)*x6633*x6641))+((x6632*x6638))+(((-1.0)*r02*x6642))+((cj0*x6640))+((cj0*x6639)));
evalcond[5]=((((-1.0)*x6636*x6641))+((x6632*x6634))+(((-1.0)*r12*x6642))+((sj0*x6639))+((sj0*x6640)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6644 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x6644)==0){
continue;
}
IkReal x6643=pow(x6644,-0.5);
CheckValue<IkReal> x6645 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x6645.valid){
continue;
}
IkReal gconst138=((-1.0)*(x6645.value));
IkReal gconst139=((-1.0)*r01*x6643);
IkReal gconst140=(r00*x6643);
CheckValue<IkReal> x6646 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x6646.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x6646.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x6649 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x6649.valid){
continue;
}
IkReal x6647=((-1.0)*(x6649.value));
IkReal x6648=x6643;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst139;
cj5=gconst140;
j5=x6647;
IkReal gconst138=x6647;
IkReal gconst139=((-1.0)*r01*x6648);
IkReal gconst140=(r00*x6648);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6650=((1.0)*gconst140);
CheckValue<IkReal> x6651=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x6650))+(((-1.0)*gconst139*r20)))),-1);
if(!x6651.valid){
continue;
}
CheckValue<IkReal> x6652 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*r10*sj0*x6650))+((gconst139*r11*sj0))+(((-1.0)*cj0*r00*x6650))+((cj0*gconst139*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6652.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6651.value)))+(x6652.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6653=IKsin(j4);
IkReal x6654=IKcos(j4);
IkReal x6655=(gconst140*r00);
IkReal x6656=(cj2*sj1);
IkReal x6657=(gconst139*r11);
IkReal x6658=(gconst139*r01);
IkReal x6659=(gconst139*r21);
IkReal x6660=(cj1*sj2);
IkReal x6661=((1.0)*x6654);
IkReal x6662=((1.0)*x6653);
IkReal x6663=(gconst140*x6654);
evalcond[0]=((((-1.0)*gconst140*r20*x6662))+((x6653*x6659))+(((-1.0)*r22*x6661)));
evalcond[1]=(sj0+((x6653*x6658))+(((-1.0)*x6655*x6662))+(((-1.0)*r02*x6661)));
evalcond[2]=((((-1.0)*gconst140*r10*x6662))+((x6653*x6657))+(((-1.0)*r12*x6661))+(((-1.0)*cj0)));
evalcond[3]=(((r20*x6663))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x6659*x6661))+(((-1.0)*r22*x6662)));
evalcond[4]=((((-1.0)*x6658*x6661))+(((-1.0)*r02*x6662))+((cj0*x6660))+((x6654*x6655))+((cj0*x6656)));
evalcond[5]=((((-1.0)*x6657*x6661))+(((-1.0)*r12*x6662))+((sj0*x6660))+((sj0*x6656))+((r10*x6663)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6664 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst139*r21*sj0))+(((-1.0)*gconst140*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6664.valid){
continue;
}
CheckValue<IkReal> x6665=IKPowWithIntegerCheck(IKsign((((gconst140*r11))+((gconst139*r10)))),-1);
if(!x6665.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6664.value)+(((1.5707963267949)*(x6665.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6666=IKsin(j4);
IkReal x6667=IKcos(j4);
IkReal x6668=(gconst140*r00);
IkReal x6669=(cj2*sj1);
IkReal x6670=(gconst139*r11);
IkReal x6671=(gconst139*r01);
IkReal x6672=(gconst139*r21);
IkReal x6673=(cj1*sj2);
IkReal x6674=((1.0)*x6667);
IkReal x6675=((1.0)*x6666);
IkReal x6676=(gconst140*x6667);
evalcond[0]=((((-1.0)*gconst140*r20*x6675))+((x6666*x6672))+(((-1.0)*r22*x6674)));
evalcond[1]=((((-1.0)*r02*x6674))+sj0+(((-1.0)*x6668*x6675))+((x6666*x6671)));
evalcond[2]=((((-1.0)*gconst140*r10*x6675))+(((-1.0)*r12*x6674))+((x6666*x6670))+(((-1.0)*cj0)));
evalcond[3]=(((r20*x6676))+(((-1.0)*x6672*x6674))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x6675)));
evalcond[4]=((((-1.0)*r02*x6675))+((cj0*x6673))+((x6667*x6668))+(((-1.0)*x6671*x6674))+((cj0*x6669)));
evalcond[5]=((((-1.0)*x6670*x6674))+(((-1.0)*r12*x6675))+((sj0*x6669))+((sj0*x6673))+((r10*x6676)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6678 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x6678)==0){
continue;
}
IkReal x6677=pow(x6678,-0.5);
CheckValue<IkReal> x6679 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x6679.valid){
continue;
}
IkReal gconst141=((3.14159265358979)+(((-1.0)*(x6679.value))));
IkReal gconst142=((1.0)*r01*x6677);
IkReal gconst143=((-1.0)*r00*x6677);
CheckValue<IkReal> x6680 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x6680.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x6680.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x6683 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x6683.valid){
continue;
}
IkReal x6681=((1.0)*(x6683.value));
IkReal x6682=x6677;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x6681)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x6681)));
IkReal gconst142=((1.0)*r01*x6682);
IkReal gconst143=((-1.0)*r00*x6682);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[5];
CheckValue<IkReal> x6686 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x6686.valid){
continue;
}
IkReal x6684=((1.0)*(x6686.value));
IkReal x6685=x6677;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x6684)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x6684)));
IkReal gconst142=((1.0)*r01*x6685);
IkReal gconst143=((-1.0)*r00*x6685);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=cj0;
j4eval[3]=r22;
j4eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x6689 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x6689.valid){
continue;
}
IkReal x6687=((1.0)*(x6689.value));
IkReal x6688=x6677;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x6687)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x6687)));
IkReal gconst142=((1.0)*r01*x6688);
IkReal gconst143=((-1.0)*r00*x6688);
IkReal x6690=r02*r02;
IkReal x6691=(r12*sj0);
IkReal x6692=x6677;
IkReal x6693=(cj0*x6692);
j4eval[0]=((IKabs(((((-1.0)*x6693))+((x6690*x6693))+((r02*x6691*x6692)))))+(IKabs((x6691+((cj0*r02))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6694=((1.0)*gconst143);
CheckValue<IkReal> x6695 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((cj0*gconst142*r01))+((gconst142*r11*sj0))+(((-1.0)*cj0*r00*x6694))+(((-1.0)*r10*sj0*x6694)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6695.valid){
continue;
}
CheckValue<IkReal> x6696=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x6694))+(((-1.0)*gconst142*r20)))),-1);
if(!x6696.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6695.value)+(((1.5707963267949)*(x6696.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6697=IKsin(j4);
IkReal x6698=IKcos(j4);
IkReal x6699=(cj2*sj1);
IkReal x6700=(gconst143*r20);
IkReal x6701=(cj1*sj2);
IkReal x6702=((1.0)*x6698);
IkReal x6703=((1.0)*x6697);
IkReal x6704=(gconst142*x6697);
IkReal x6705=(gconst143*x6698);
evalcond[0]=(((r21*x6704))+(((-1.0)*r22*x6702))+(((-1.0)*x6700*x6703)));
evalcond[1]=(sj0+(((-1.0)*r02*x6702))+((r01*x6704))+(((-1.0)*gconst143*r00*x6703)));
evalcond[2]=((((-1.0)*gconst143*r10*x6703))+((r11*x6704))+(((-1.0)*r12*x6702))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*gconst142*r21*x6702))+(((-1.0)*r22*x6703))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x6698*x6700)));
evalcond[4]=((((-1.0)*r02*x6703))+((cj0*x6699))+((r00*x6705))+((cj0*x6701))+(((-1.0)*gconst142*r01*x6702)));
evalcond[5]=(((r10*x6705))+((sj0*x6699))+(((-1.0)*gconst142*r11*x6702))+((sj0*x6701))+(((-1.0)*r12*x6703)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6706=IKPowWithIntegerCheck(IKsign((((gconst143*r01))+((gconst142*r00)))),-1);
if(!x6706.valid){
continue;
}
CheckValue<IkReal> x6707 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*gconst143*r20))+((cj0*gconst142*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6707.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6706.value)))+(x6707.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6708=IKsin(j4);
IkReal x6709=IKcos(j4);
IkReal x6710=(cj2*sj1);
IkReal x6711=(gconst143*r20);
IkReal x6712=(cj1*sj2);
IkReal x6713=((1.0)*x6709);
IkReal x6714=((1.0)*x6708);
IkReal x6715=(gconst142*x6708);
IkReal x6716=(gconst143*x6709);
evalcond[0]=((((-1.0)*x6711*x6714))+((r21*x6715))+(((-1.0)*r22*x6713)));
evalcond[1]=(sj0+(((-1.0)*gconst143*r00*x6714))+(((-1.0)*r02*x6713))+((r01*x6715)));
evalcond[2]=(((r11*x6715))+(((-1.0)*r12*x6713))+(((-1.0)*gconst143*r10*x6714))+(((-1.0)*cj0)));
evalcond[3]=(((x6709*x6711))+(((-1.0)*gconst142*r21*x6713))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x6714)));
evalcond[4]=(((cj0*x6710))+((cj0*x6712))+(((-1.0)*r02*x6714))+(((-1.0)*gconst142*r01*x6713))+((r00*x6716)));
evalcond[5]=((((-1.0)*gconst142*r11*x6713))+(((-1.0)*r12*x6714))+((r10*x6716))+((sj0*x6710))+((sj0*x6712)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6717=IKPowWithIntegerCheck(IKsign((((gconst143*r11))+((gconst142*r10)))),-1);
if(!x6717.valid){
continue;
}
CheckValue<IkReal> x6718 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst142*r21*sj0))+(((-1.0)*gconst143*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6718.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6717.value)))+(x6718.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6719=IKsin(j4);
IkReal x6720=IKcos(j4);
IkReal x6721=(cj2*sj1);
IkReal x6722=(gconst143*r20);
IkReal x6723=(cj1*sj2);
IkReal x6724=((1.0)*x6720);
IkReal x6725=((1.0)*x6719);
IkReal x6726=(gconst142*x6719);
IkReal x6727=(gconst143*x6720);
evalcond[0]=((((-1.0)*r22*x6724))+(((-1.0)*x6722*x6725))+((r21*x6726)));
evalcond[1]=(sj0+(((-1.0)*gconst143*r00*x6725))+(((-1.0)*r02*x6724))+((r01*x6726)));
evalcond[2]=(((r11*x6726))+(((-1.0)*r12*x6724))+(((-1.0)*gconst143*r10*x6725))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*r22*x6725))+(((-1.0)*gconst142*r21*x6724))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x6720*x6722)));
evalcond[4]=(((cj0*x6723))+((cj0*x6721))+(((-1.0)*r02*x6725))+((r00*x6727))+(((-1.0)*gconst142*r01*x6724)));
evalcond[5]=((((-1.0)*gconst142*r11*x6724))+(((-1.0)*r12*x6725))+((r10*x6727))+((sj0*x6723))+((sj0*x6721)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x6728=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x6728;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x6728);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x6729=((1.0)*cj5);
IkReal x6730=((((-1.0)*r21*x6729))+(((-1.0)*r20*sj5)));
j4eval[0]=x6730;
j4eval[1]=((IKabs(r12))+(IKabs((((r11*sj5))+(((-1.0)*r10*x6729))))));
j4eval[2]=IKsign(x6730);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x6731=cj5*cj5;
IkReal x6732=r01*r01;
IkReal x6733=(cj5*r00);
IkReal x6734=(r01*sj5);
IkReal x6735=((((-2.0)*x6733*x6734))+x6732+((x6731*(r00*r00)))+(r02*r02)+(((-1.0)*x6731*x6732)));
j4eval[0]=x6735;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*x6734))+x6733))));
j4eval[2]=IKsign(x6735);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6736=cj5*cj5;
IkReal x6737=r01*r01;
IkReal x6738=(r01*sj5);
IkReal x6739=(cj5*r00);
CheckValue<IkReal> x6740 = IKatan2WithCheck(IkReal(((((-1.0)*x6738))+x6739)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x6740.valid){
continue;
}
CheckValue<IkReal> x6741=IKPowWithIntegerCheck(IKsign(((((-2.0)*x6738*x6739))+x6737+((x6736*(r00*r00)))+(((-1.0)*x6736*x6737))+(r02*r02))),-1);
if(!x6741.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6740.value)+(((1.5707963267949)*(x6741.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6742=IKsin(j4);
IkReal x6743=IKcos(j4);
IkReal x6744=(cj5*r10);
IkReal x6745=(r01*sj5);
IkReal x6746=(cj5*r00);
IkReal x6747=(cj5*r20);
IkReal x6748=((1.0)*x6743);
IkReal x6749=((1.0)*x6742);
IkReal x6750=(sj5*x6742);
evalcond[0]=((((-1.0)*r22*x6748))+(((-1.0)*x6747*x6749))+((r21*x6750)));
evalcond[1]=((((-1.0)*x6744*x6749))+(((-1.0)*r12*x6748))+((r11*x6750)));
evalcond[2]=(((x6743*x6746))+(((-1.0)*r02*x6749))+(((-1.0)*x6745*x6748)));
evalcond[3]=((1.0)+((x6742*x6745))+(((-1.0)*x6746*x6749))+(((-1.0)*r02*x6748)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r12*x6749))+((cj1*sj2))+(((-1.0)*r11*sj5*x6748))+((x6743*x6744)));
evalcond[5]=((((-1.0)*r22*x6749))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x6743*x6747))+(((-1.0)*r21*sj5*x6748)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6751=((1.0)*cj5);
CheckValue<IkReal> x6752 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj5))+(((-1.0)*r10*x6751)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6752.valid){
continue;
}
CheckValue<IkReal> x6753=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x6751))+(((-1.0)*r20*sj5)))),-1);
if(!x6753.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6752.value)+(((1.5707963267949)*(x6753.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6754=IKsin(j4);
IkReal x6755=IKcos(j4);
IkReal x6756=(cj5*r10);
IkReal x6757=(r01*sj5);
IkReal x6758=(cj5*r00);
IkReal x6759=(cj5*r20);
IkReal x6760=((1.0)*x6755);
IkReal x6761=((1.0)*x6754);
IkReal x6762=(sj5*x6754);
evalcond[0]=((((-1.0)*x6759*x6761))+(((-1.0)*r22*x6760))+((r21*x6762)));
evalcond[1]=(((r11*x6762))+(((-1.0)*x6756*x6761))+(((-1.0)*r12*x6760)));
evalcond[2]=((((-1.0)*r02*x6761))+(((-1.0)*x6757*x6760))+((x6755*x6758)));
evalcond[3]=((1.0)+(((-1.0)*x6758*x6761))+((x6754*x6757))+(((-1.0)*r02*x6760)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r12*x6761))+(((-1.0)*r11*sj5*x6760))+((x6755*x6756)));
evalcond[5]=((((-1.0)*r21*sj5*x6760))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x6761))+((x6755*x6759)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6763 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6763.valid){
continue;
}
CheckValue<IkReal> x6764=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x6764.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6763.value)+(((1.5707963267949)*(x6764.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6765=IKsin(j4);
IkReal x6766=IKcos(j4);
IkReal x6767=(cj5*r10);
IkReal x6768=(r01*sj5);
IkReal x6769=(cj5*r00);
IkReal x6770=(cj5*r20);
IkReal x6771=((1.0)*x6766);
IkReal x6772=((1.0)*x6765);
IkReal x6773=(sj5*x6765);
evalcond[0]=((((-1.0)*r22*x6771))+(((-1.0)*x6770*x6772))+((r21*x6773)));
evalcond[1]=(((r11*x6773))+(((-1.0)*r12*x6771))+(((-1.0)*x6767*x6772)));
evalcond[2]=((((-1.0)*x6768*x6771))+((x6766*x6769))+(((-1.0)*r02*x6772)));
evalcond[3]=((1.0)+((x6765*x6768))+(((-1.0)*x6769*x6772))+(((-1.0)*r02*x6771)));
evalcond[4]=(((cj2*sj1))+((x6766*x6767))+((cj1*sj2))+(((-1.0)*r12*x6772))+(((-1.0)*r11*sj5*x6771)));
evalcond[5]=((((-1.0)*r22*x6772))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r21*sj5*x6771))+((x6766*x6770)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x6774=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x6774;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x6774);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x6775=((1.0)*cj5);
IkReal x6776=((((-1.0)*r10*sj5))+(((-1.0)*r11*x6775)));
j4eval[0]=x6776;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x6775))))));
j4eval[2]=IKsign(x6776);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x6777=cj5*cj5;
IkReal x6778=r01*r01;
IkReal x6779=(r01*sj5);
IkReal x6780=(cj5*r00);
IkReal x6781=(((x6777*x6778))+(((2.0)*x6779*x6780))+(((-1.0)*(r02*r02)))+(((-1.0)*x6778))+(((-1.0)*x6777*(r00*r00))));
j4eval[0]=x6781;
j4eval[1]=IKsign(x6781);
j4eval[2]=((IKabs(r02))+(IKabs((x6780+(((-1.0)*x6779))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6782=cj5*cj5;
IkReal x6783=r01*r01;
IkReal x6784=(r01*sj5);
IkReal x6785=(cj5*r00);
CheckValue<IkReal> x6786=IKPowWithIntegerCheck(IKsign(((((2.0)*x6784*x6785))+(((-1.0)*x6783))+(((-1.0)*(r02*r02)))+(((-1.0)*x6782*(r00*r00)))+((x6782*x6783)))),-1);
if(!x6786.valid){
continue;
}
CheckValue<IkReal> x6787 = IKatan2WithCheck(IkReal(((((-1.0)*x6784))+x6785)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x6787.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6786.value)))+(x6787.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6788=IKsin(j4);
IkReal x6789=IKcos(j4);
IkReal x6790=(cj5*r10);
IkReal x6791=(r01*sj5);
IkReal x6792=((1.0)*cj2);
IkReal x6793=(cj5*r00);
IkReal x6794=(cj5*r20);
IkReal x6795=((1.0)*x6789);
IkReal x6796=((1.0)*x6788);
IkReal x6797=(sj5*x6788);
evalcond[0]=(((r21*x6797))+(((-1.0)*r22*x6795))+(((-1.0)*x6794*x6796)));
evalcond[1]=(((r11*x6797))+(((-1.0)*x6790*x6796))+(((-1.0)*r12*x6795)));
evalcond[2]=(((x6789*x6793))+(((-1.0)*x6791*x6795))+(((-1.0)*r02*x6796)));
evalcond[3]=((-1.0)+(((-1.0)*x6793*x6796))+((x6788*x6791))+(((-1.0)*r02*x6795)));
evalcond[4]=((((-1.0)*cj1*x6792))+((sj1*sj2))+(((-1.0)*r22*x6796))+(((-1.0)*r21*sj5*x6795))+((x6789*x6794)));
evalcond[5]=((((-1.0)*sj1*x6792))+(((-1.0)*r11*sj5*x6795))+(((-1.0)*cj1*sj2))+((x6789*x6790))+(((-1.0)*r12*x6796)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6798=((1.0)*cj5);
CheckValue<IkReal> x6799 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x6798)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6799.valid){
continue;
}
CheckValue<IkReal> x6800=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x6798))+(((-1.0)*r10*sj5)))),-1);
if(!x6800.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6799.value)+(((1.5707963267949)*(x6800.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6801=IKsin(j4);
IkReal x6802=IKcos(j4);
IkReal x6803=(cj5*r10);
IkReal x6804=(r01*sj5);
IkReal x6805=((1.0)*cj2);
IkReal x6806=(cj5*r00);
IkReal x6807=(cj5*r20);
IkReal x6808=((1.0)*x6802);
IkReal x6809=((1.0)*x6801);
IkReal x6810=(sj5*x6801);
evalcond[0]=((((-1.0)*r22*x6808))+(((-1.0)*x6807*x6809))+((r21*x6810)));
evalcond[1]=(((r11*x6810))+(((-1.0)*x6803*x6809))+(((-1.0)*r12*x6808)));
evalcond[2]=((((-1.0)*r02*x6809))+(((-1.0)*x6804*x6808))+((x6802*x6806)));
evalcond[3]=((-1.0)+((x6801*x6804))+(((-1.0)*r02*x6808))+(((-1.0)*x6806*x6809)));
evalcond[4]=((((-1.0)*cj1*x6805))+((sj1*sj2))+(((-1.0)*r22*x6809))+(((-1.0)*r21*sj5*x6808))+((x6802*x6807)));
evalcond[5]=((((-1.0)*sj1*x6805))+(((-1.0)*r12*x6809))+(((-1.0)*cj1*sj2))+(((-1.0)*r11*sj5*x6808))+((x6802*x6803)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6811=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x6811.valid){
continue;
}
CheckValue<IkReal> x6812 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6812.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6811.value)))+(x6812.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6813=IKsin(j4);
IkReal x6814=IKcos(j4);
IkReal x6815=(cj5*r10);
IkReal x6816=(r01*sj5);
IkReal x6817=((1.0)*cj2);
IkReal x6818=(cj5*r00);
IkReal x6819=(cj5*r20);
IkReal x6820=((1.0)*x6814);
IkReal x6821=((1.0)*x6813);
IkReal x6822=(sj5*x6813);
evalcond[0]=(((r21*x6822))+(((-1.0)*r22*x6820))+(((-1.0)*x6819*x6821)));
evalcond[1]=((((-1.0)*x6815*x6821))+(((-1.0)*r12*x6820))+((r11*x6822)));
evalcond[2]=((((-1.0)*r02*x6821))+((x6814*x6818))+(((-1.0)*x6816*x6820)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x6820))+(((-1.0)*x6818*x6821))+((x6813*x6816)));
evalcond[4]=(((x6814*x6819))+((sj1*sj2))+(((-1.0)*cj1*x6817))+(((-1.0)*r22*x6821))+(((-1.0)*r21*sj5*x6820)));
evalcond[5]=(((x6814*x6815))+(((-1.0)*cj1*sj2))+(((-1.0)*r12*x6821))+(((-1.0)*r11*sj5*x6820))+(((-1.0)*sj1*x6817)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6824 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x6824)==0){
continue;
}
IkReal x6823=pow(x6824,-0.5);
CheckValue<IkReal> x6825 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x6825.valid){
continue;
}
IkReal gconst144=((-1.0)*(x6825.value));
IkReal gconst145=((-1.0)*r11*x6823);
IkReal gconst146=(r10*x6823);
CheckValue<IkReal> x6826 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x6826.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x6826.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x6829 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x6829.valid){
continue;
}
IkReal x6827=((-1.0)*(x6829.value));
IkReal x6828=x6823;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst145;
cj5=gconst146;
j5=x6827;
IkReal gconst144=x6827;
IkReal gconst145=((-1.0)*r11*x6828);
IkReal gconst146=(r10*x6828);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6830=((1.0)*gconst146);
CheckValue<IkReal> x6831=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst145*r20))+(((-1.0)*r21*x6830)))),-1);
if(!x6831.valid){
continue;
}
CheckValue<IkReal> x6832 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((cj0*gconst145*r01))+(((-1.0)*r10*sj0*x6830))+(((-1.0)*cj0*r00*x6830))+((gconst145*r11*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6832.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6831.value)))+(x6832.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6833=IKsin(j4);
IkReal x6834=IKcos(j4);
IkReal x6835=(gconst146*r10);
IkReal x6836=(cj2*sj1);
IkReal x6837=(gconst146*r20);
IkReal x6838=(gconst146*r00);
IkReal x6839=(cj1*sj2);
IkReal x6840=((1.0)*x6834);
IkReal x6841=((1.0)*x6833);
IkReal x6842=(gconst145*x6833);
evalcond[0]=(((r21*x6842))+(((-1.0)*r22*x6840))+(((-1.0)*x6837*x6841)));
evalcond[1]=(sj0+(((-1.0)*r02*x6840))+((r01*x6842))+(((-1.0)*x6838*x6841)));
evalcond[2]=(((r11*x6842))+(((-1.0)*x6835*x6841))+(((-1.0)*r12*x6840))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*gconst145*r21*x6840))+(((-1.0)*r22*x6841))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x6834*x6837)));
evalcond[4]=(((x6834*x6838))+(((-1.0)*r02*x6841))+(((-1.0)*gconst145*r01*x6840))+((cj0*x6836))+((cj0*x6839)));
evalcond[5]=(((sj0*x6836))+((sj0*x6839))+(((-1.0)*gconst145*r11*x6840))+((x6834*x6835))+(((-1.0)*r12*x6841)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6843 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*gconst146*r20))+((cj0*gconst145*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6843.valid){
continue;
}
CheckValue<IkReal> x6844=IKPowWithIntegerCheck(IKsign((((gconst145*r00))+((gconst146*r01)))),-1);
if(!x6844.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6843.value)+(((1.5707963267949)*(x6844.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6845=IKsin(j4);
IkReal x6846=IKcos(j4);
IkReal x6847=(gconst146*r10);
IkReal x6848=(cj2*sj1);
IkReal x6849=(gconst146*r20);
IkReal x6850=(gconst146*r00);
IkReal x6851=(cj1*sj2);
IkReal x6852=((1.0)*x6846);
IkReal x6853=((1.0)*x6845);
IkReal x6854=(gconst145*x6845);
evalcond[0]=(((r21*x6854))+(((-1.0)*r22*x6852))+(((-1.0)*x6849*x6853)));
evalcond[1]=(sj0+(((-1.0)*r02*x6852))+((r01*x6854))+(((-1.0)*x6850*x6853)));
evalcond[2]=((((-1.0)*x6847*x6853))+(((-1.0)*r12*x6852))+((r11*x6854))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x6846*x6849))+(((-1.0)*gconst145*r21*x6852))+(((-1.0)*r22*x6853)));
evalcond[4]=((((-1.0)*r02*x6853))+((cj0*x6848))+(((-1.0)*gconst145*r01*x6852))+((cj0*x6851))+((x6846*x6850)));
evalcond[5]=(((sj0*x6851))+(((-1.0)*r12*x6853))+((x6846*x6847))+(((-1.0)*gconst145*r11*x6852))+((sj0*x6848)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6856 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x6856)==0){
continue;
}
IkReal x6855=pow(x6856,-0.5);
CheckValue<IkReal> x6857 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x6857.valid){
continue;
}
IkReal gconst147=((3.14159265358979)+(((-1.0)*(x6857.value))));
IkReal gconst148=((1.0)*r11*x6855);
IkReal gconst149=((-1.0)*r10*x6855);
CheckValue<IkReal> x6858 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x6858.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x6858.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x6861 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x6861.valid){
continue;
}
IkReal x6859=((1.0)*(x6861.value));
IkReal x6860=x6855;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x6859)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x6859)));
IkReal gconst148=((1.0)*r11*x6860);
IkReal gconst149=((-1.0)*r10*x6860);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x6864 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x6864.valid){
continue;
}
IkReal x6862=((1.0)*(x6864.value));
IkReal x6863=x6855;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x6862)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x6862)));
IkReal gconst148=((1.0)*r11*x6863);
IkReal gconst149=((-1.0)*r10*x6863);
IkReal x6865=r12*r12;
IkReal x6866=(cj0*r02);
IkReal x6867=x6855;
IkReal x6868=(sj0*x6867);
j4eval[0]=((IKabs((x6866+((r12*sj0)))))+(IKabs((((x6865*x6868))+((r12*x6866*x6867))+(((-1.0)*x6868))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x6871 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x6871.valid){
continue;
}
IkReal x6869=((1.0)*(x6871.value));
IkReal x6870=x6855;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x6869)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x6869)));
IkReal gconst148=((1.0)*r11*x6870);
IkReal gconst149=((-1.0)*r10*x6870);
IkReal x6872=r12*r12;
IkReal x6873=(sj1*sj2);
IkReal x6874=((1.0)*cj1*cj2);
CheckValue<IkReal> x6878=IKPowWithIntegerCheck(((-1.0)+x6872),-1);
if(!x6878.valid){
continue;
}
IkReal x6875=x6878.value;
if((((1.0)+(((-1.0)*x6872)))) < -0.00001)
continue;
IkReal x6876=IKsqrt(((1.0)+(((-1.0)*x6872))));
IkReal x6877=(r12*r22*x6875*x6876);
j4eval[0]=((IKabs((((r22*x6873))+(((-1.0)*r22*x6874)))))+(IKabs(((((-1.0)*x6874*x6877))+((x6873*x6877))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6879=(gconst149*r20);
IkReal x6880=(cj1*cj2);
IkReal x6881=(sj1*sj2);
IkReal x6882=(gconst148*r21);
CheckValue<IkReal> x6883=IKPowWithIntegerCheck(IKsign(((r22*r22)+(x6879*x6879)+(((-2.0)*x6879*x6882))+(x6882*x6882))),-1);
if(!x6883.valid){
continue;
}
CheckValue<IkReal> x6884 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x6880))+((r22*x6881)))),IkReal((((x6879*x6880))+(((-1.0)*x6879*x6881))+(((-1.0)*x6880*x6882))+((x6881*x6882)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6884.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6883.value)))+(x6884.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6885=IKsin(j4);
IkReal x6886=IKcos(j4);
IkReal x6887=(gconst148*r11);
IkReal x6888=(cj2*sj1);
IkReal x6889=(cj1*sj2);
IkReal x6890=((1.0)*x6886);
IkReal x6891=(gconst149*x6886);
IkReal x6892=((1.0)*x6885);
IkReal x6893=(gconst148*x6885);
evalcond[0]=((((-1.0)*gconst149*r20*x6892))+((r21*x6893))+(((-1.0)*r22*x6890)));
evalcond[1]=(sj0+(((-1.0)*gconst149*r00*x6892))+(((-1.0)*r02*x6890))+((r01*x6893)));
evalcond[2]=((((-1.0)*r12*x6890))+(((-1.0)*gconst149*r10*x6892))+((x6885*x6887))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x6892))+((r20*x6891))+(((-1.0)*gconst148*r21*x6890)));
evalcond[4]=(((cj0*x6889))+((cj0*x6888))+(((-1.0)*gconst148*r01*x6890))+(((-1.0)*r02*x6892))+((r00*x6891)));
evalcond[5]=(((r10*x6891))+((sj0*x6889))+((sj0*x6888))+(((-1.0)*r12*x6892))+(((-1.0)*x6887*x6890)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6894=((1.0)*gconst149);
CheckValue<IkReal> x6895 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*cj0*r00*x6894))+(((-1.0)*r10*sj0*x6894))+((cj0*gconst148*r01))+((gconst148*r11*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6895.valid){
continue;
}
CheckValue<IkReal> x6896=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst148*r20))+(((-1.0)*r21*x6894)))),-1);
if(!x6896.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6895.value)+(((1.5707963267949)*(x6896.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6897=IKsin(j4);
IkReal x6898=IKcos(j4);
IkReal x6899=(gconst148*r11);
IkReal x6900=(cj2*sj1);
IkReal x6901=(cj1*sj2);
IkReal x6902=((1.0)*x6898);
IkReal x6903=(gconst149*x6898);
IkReal x6904=((1.0)*x6897);
IkReal x6905=(gconst148*x6897);
evalcond[0]=((((-1.0)*gconst149*r20*x6904))+(((-1.0)*r22*x6902))+((r21*x6905)));
evalcond[1]=((((-1.0)*r02*x6902))+sj0+((r01*x6905))+(((-1.0)*gconst149*r00*x6904)));
evalcond[2]=((((-1.0)*r12*x6902))+(((-1.0)*gconst149*r10*x6904))+((x6897*x6899))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*gconst148*r21*x6902))+(((-1.0)*r22*x6904))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r20*x6903)));
evalcond[4]=((((-1.0)*r02*x6904))+((r00*x6903))+(((-1.0)*gconst148*r01*x6902))+((cj0*x6901))+((cj0*x6900)));
evalcond[5]=((((-1.0)*r12*x6904))+((r10*x6903))+(((-1.0)*x6899*x6902))+((sj0*x6901))+((sj0*x6900)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6906=IKPowWithIntegerCheck(IKsign((((gconst148*r00))+((gconst149*r01)))),-1);
if(!x6906.valid){
continue;
}
CheckValue<IkReal> x6907 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*gconst149*r20))+((cj0*gconst148*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6907.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6906.value)))+(x6907.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6908=IKsin(j4);
IkReal x6909=IKcos(j4);
IkReal x6910=(gconst148*r11);
IkReal x6911=(cj2*sj1);
IkReal x6912=(cj1*sj2);
IkReal x6913=((1.0)*x6909);
IkReal x6914=(gconst149*x6909);
IkReal x6915=((1.0)*x6908);
IkReal x6916=(gconst148*x6908);
evalcond[0]=((((-1.0)*r22*x6913))+((r21*x6916))+(((-1.0)*gconst149*r20*x6915)));
evalcond[1]=(sj0+(((-1.0)*gconst149*r00*x6915))+(((-1.0)*r02*x6913))+((r01*x6916)));
evalcond[2]=((((-1.0)*gconst149*r10*x6915))+(((-1.0)*r12*x6913))+((x6908*x6910))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*gconst148*r21*x6913))+(((-1.0)*r22*x6915))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r20*x6914)));
evalcond[4]=(((r00*x6914))+(((-1.0)*gconst148*r01*x6913))+((cj0*x6911))+((cj0*x6912))+(((-1.0)*r02*x6915)));
evalcond[5]=((((-1.0)*x6910*x6913))+((r10*x6914))+(((-1.0)*r12*x6915))+((sj0*x6911))+((sj0*x6912)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x6917=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x6917;
j4eval[1]=IKsign(x6917);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x6918=((1.0)*cj5);
IkReal x6919=((((-1.0)*r21*x6918))+(((-1.0)*r20*sj5)));
j4eval[0]=x6919;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x6918))))));
j4eval[2]=IKsign(x6919);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x6920=cj5*cj5;
IkReal x6921=r11*r11;
IkReal x6922=(cj5*r10);
IkReal x6923=(r11*sj5);
IkReal x6924=((((-1.0)*x6920*(r10*r10)))+(((-1.0)*x6921))+(((-1.0)*(r12*r12)))+(((2.0)*x6922*x6923))+((x6920*x6921)));
j4eval[0]=x6924;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*x6923))+x6922))));
j4eval[2]=IKsign(x6924);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6925=cj5*cj5;
IkReal x6926=r11*r11;
IkReal x6927=(cj5*r10);
IkReal x6928=(r11*sj5);
CheckValue<IkReal> x6929=IKPowWithIntegerCheck(IKsign(((((-1.0)*x6926))+(((-1.0)*(r12*r12)))+((x6925*x6926))+(((2.0)*x6927*x6928))+(((-1.0)*x6925*(r10*r10))))),-1);
if(!x6929.valid){
continue;
}
CheckValue<IkReal> x6930 = IKatan2WithCheck(IkReal(((((-1.0)*x6928))+x6927)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x6930.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6929.value)))+(x6930.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6931=IKsin(j4);
IkReal x6932=IKcos(j4);
IkReal x6933=(cj5*r10);
IkReal x6934=(r01*sj5);
IkReal x6935=(cj5*r00);
IkReal x6936=(cj5*r20);
IkReal x6937=((1.0)*x6932);
IkReal x6938=((1.0)*x6931);
IkReal x6939=(sj5*x6931);
evalcond[0]=((((-1.0)*r22*x6937))+(((-1.0)*x6936*x6938))+((r21*x6939)));
evalcond[1]=((((-1.0)*r02*x6937))+(((-1.0)*x6935*x6938))+((x6931*x6934)));
evalcond[2]=((((-1.0)*r11*sj5*x6937))+((x6932*x6933))+(((-1.0)*r12*x6938)));
evalcond[3]=((-1.0)+((r11*x6939))+(((-1.0)*r12*x6937))+(((-1.0)*x6933*x6938)));
evalcond[4]=(((cj2*sj1))+((x6932*x6935))+((cj1*sj2))+(((-1.0)*r02*x6938))+(((-1.0)*x6934*x6937)));
evalcond[5]=(((x6932*x6936))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x6938))+(((-1.0)*r21*sj5*x6937)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6940=((1.0)*cj5);
CheckValue<IkReal> x6941 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x6940)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6941.valid){
continue;
}
CheckValue<IkReal> x6942=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x6940))+(((-1.0)*r20*sj5)))),-1);
if(!x6942.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6941.value)+(((1.5707963267949)*(x6942.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6943=IKsin(j4);
IkReal x6944=IKcos(j4);
IkReal x6945=(cj5*r10);
IkReal x6946=(r01*sj5);
IkReal x6947=(cj5*r00);
IkReal x6948=(cj5*r20);
IkReal x6949=((1.0)*x6944);
IkReal x6950=((1.0)*x6943);
IkReal x6951=(sj5*x6943);
evalcond[0]=((((-1.0)*x6948*x6950))+(((-1.0)*r22*x6949))+((r21*x6951)));
evalcond[1]=(((x6943*x6946))+(((-1.0)*r02*x6949))+(((-1.0)*x6947*x6950)));
evalcond[2]=(((x6944*x6945))+(((-1.0)*r12*x6950))+(((-1.0)*r11*sj5*x6949)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x6949))+(((-1.0)*x6945*x6950))+((r11*x6951)));
evalcond[4]=(((cj2*sj1))+((x6944*x6947))+((cj1*sj2))+(((-1.0)*r02*x6950))+(((-1.0)*x6946*x6949)));
evalcond[5]=((((-1.0)*r21*sj5*x6949))+((x6944*x6948))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x6950)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6952 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6952.valid){
continue;
}
CheckValue<IkReal> x6953=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x6953.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6952.value)+(((1.5707963267949)*(x6953.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6954=IKsin(j4);
IkReal x6955=IKcos(j4);
IkReal x6956=(cj5*r10);
IkReal x6957=(r01*sj5);
IkReal x6958=(cj5*r00);
IkReal x6959=(cj5*r20);
IkReal x6960=((1.0)*x6955);
IkReal x6961=((1.0)*x6954);
IkReal x6962=(sj5*x6954);
evalcond[0]=((((-1.0)*x6959*x6961))+((r21*x6962))+(((-1.0)*r22*x6960)));
evalcond[1]=((((-1.0)*r02*x6960))+(((-1.0)*x6958*x6961))+((x6954*x6957)));
evalcond[2]=((((-1.0)*r12*x6961))+(((-1.0)*r11*sj5*x6960))+((x6955*x6956)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x6960))+((r11*x6962))+(((-1.0)*x6956*x6961)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r02*x6961))+((cj1*sj2))+(((-1.0)*x6957*x6960))+((x6955*x6958)));
evalcond[5]=((((-1.0)*r21*sj5*x6960))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x6961))+((x6955*x6959)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x6963=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x6963;
j4eval[1]=IKsign(x6963);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x6964=((1.0)*cj5);
IkReal x6965=((((-1.0)*r00*sj5))+(((-1.0)*r01*x6964)));
j4eval[0]=x6965;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x6964))))));
j4eval[2]=IKsign(x6965);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x6966=cj5*cj5;
IkReal x6967=r11*r11;
IkReal x6968=(r11*sj5);
IkReal x6969=(cj5*r10);
IkReal x6970=((r12*r12)+(((-2.0)*x6968*x6969))+((x6966*(r10*r10)))+x6967+(((-1.0)*x6966*x6967)));
j4eval[0]=x6970;
j4eval[1]=IKsign(x6970);
j4eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*x6968))+x6969))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6971=cj5*cj5;
IkReal x6972=r11*r11;
IkReal x6973=(cj5*r10);
IkReal x6974=(r11*sj5);
CheckValue<IkReal> x6975 = IKatan2WithCheck(IkReal(((((-1.0)*x6974))+x6973)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x6975.valid){
continue;
}
CheckValue<IkReal> x6976=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-1.0)*x6971*x6972))+(((-2.0)*x6973*x6974))+((x6971*(r10*r10)))+x6972)),-1);
if(!x6976.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6975.value)+(((1.5707963267949)*(x6976.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6977=IKsin(j4);
IkReal x6978=IKcos(j4);
IkReal x6979=(cj5*r10);
IkReal x6980=(r01*sj5);
IkReal x6981=((1.0)*cj2);
IkReal x6982=(cj5*r00);
IkReal x6983=(cj5*r20);
IkReal x6984=((1.0)*x6978);
IkReal x6985=((1.0)*x6977);
IkReal x6986=(sj5*x6977);
evalcond[0]=((((-1.0)*r22*x6984))+((r21*x6986))+(((-1.0)*x6983*x6985)));
evalcond[1]=(((x6977*x6980))+(((-1.0)*x6982*x6985))+(((-1.0)*r02*x6984)));
evalcond[2]=(((x6978*x6979))+(((-1.0)*r12*x6985))+(((-1.0)*r11*sj5*x6984)));
evalcond[3]=((1.0)+(((-1.0)*r12*x6984))+(((-1.0)*x6979*x6985))+((r11*x6986)));
evalcond[4]=(((sj1*sj2))+(((-1.0)*r22*x6985))+((x6978*x6983))+(((-1.0)*cj1*x6981))+(((-1.0)*r21*sj5*x6984)));
evalcond[5]=((((-1.0)*cj1*sj2))+((x6978*x6982))+(((-1.0)*sj1*x6981))+(((-1.0)*x6980*x6984))+(((-1.0)*r02*x6985)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6987=((1.0)*cj5);
CheckValue<IkReal> x6988=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x6987)))),-1);
if(!x6988.valid){
continue;
}
CheckValue<IkReal> x6989 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x6987))+((r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6989.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6988.value)))+(x6989.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6990=IKsin(j4);
IkReal x6991=IKcos(j4);
IkReal x6992=(cj5*r10);
IkReal x6993=(r01*sj5);
IkReal x6994=((1.0)*cj2);
IkReal x6995=(cj5*r00);
IkReal x6996=(cj5*r20);
IkReal x6997=((1.0)*x6991);
IkReal x6998=((1.0)*x6990);
IkReal x6999=(sj5*x6990);
evalcond[0]=(((r21*x6999))+(((-1.0)*r22*x6997))+(((-1.0)*x6996*x6998)));
evalcond[1]=((((-1.0)*x6995*x6998))+((x6990*x6993))+(((-1.0)*r02*x6997)));
evalcond[2]=((((-1.0)*r12*x6998))+((x6991*x6992))+(((-1.0)*r11*sj5*x6997)));
evalcond[3]=((1.0)+(((-1.0)*r12*x6997))+((r11*x6999))+(((-1.0)*x6992*x6998)));
evalcond[4]=(((x6991*x6996))+(((-1.0)*r22*x6998))+((sj1*sj2))+(((-1.0)*r21*sj5*x6997))+(((-1.0)*cj1*x6994)));
evalcond[5]=((((-1.0)*x6993*x6997))+((x6991*x6995))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x6994))+(((-1.0)*r02*x6998)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7000=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x7000.valid){
continue;
}
CheckValue<IkReal> x7001 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7001.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7000.value)))+(x7001.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7002=IKsin(j4);
IkReal x7003=IKcos(j4);
IkReal x7004=(cj5*r10);
IkReal x7005=(r01*sj5);
IkReal x7006=((1.0)*cj2);
IkReal x7007=(cj5*r00);
IkReal x7008=(cj5*r20);
IkReal x7009=((1.0)*x7003);
IkReal x7010=((1.0)*x7002);
IkReal x7011=(sj5*x7002);
evalcond[0]=((((-1.0)*r22*x7009))+((r21*x7011))+(((-1.0)*x7008*x7010)));
evalcond[1]=((((-1.0)*r02*x7009))+((x7002*x7005))+(((-1.0)*x7007*x7010)));
evalcond[2]=(((x7003*x7004))+(((-1.0)*r11*sj5*x7009))+(((-1.0)*r12*x7010)));
evalcond[3]=((1.0)+(((-1.0)*r12*x7009))+((r11*x7011))+(((-1.0)*x7004*x7010)));
evalcond[4]=((((-1.0)*r21*sj5*x7009))+(((-1.0)*r22*x7010))+(((-1.0)*cj1*x7006))+((sj1*sj2))+((x7003*x7008)));
evalcond[5]=((((-1.0)*x7005*x7009))+(((-1.0)*cj1*sj2))+((x7003*x7007))+(((-1.0)*sj1*x7006))+(((-1.0)*r02*x7010)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x7012=((-1.0)*py);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x7012);
rxp0_2=(py*r00);
rxp1_0=(r21*x7012);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7013=((-1.0)*py);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x7013);
rxp0_2=(py*r00);
rxp1_0=(r21*x7013);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7014=((-1.0)*py);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x7014);
rxp0_2=(py*r00);
rxp1_0=(r21*x7014);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=((((-1.0)*r01*sj5))+((cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x7017=IKPowWithIntegerCheck(((((-1.0)*r01*sj5))+((cj5*r00))),-1);
if(!x7017.valid){
continue;
}
IkReal x7015=x7017.value;
IkReal x7016=((1.0)*cj0*x7015);
cj4array[0]=((((-1.0)*cj1*sj2*x7016))+(((-1.0)*cj2*sj1*x7016)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x7018=IKsin(j4);
IkReal x7019=IKcos(j4);
IkReal x7020=(r21*sj5);
IkReal x7021=((1.0)*x7019);
IkReal x7022=((1.0)*cj5*x7018);
evalcond[0]=((-1.0)*r12*x7018);
evalcond[1]=((((-1.0)*r12*x7021))+(((-1.0)*cj0)));
evalcond[2]=(((x7018*x7020))+(((-1.0)*r20*x7022)));
evalcond[3]=((((-1.0)*r00*x7022))+((r01*sj5*x7018)));
evalcond[4]=(((cj5*r20*x7019))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x7020*x7021)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x7024=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x7024.valid){
continue;
}
IkReal x7023=x7024.value;
cj4array[0]=((((-1.0)*sj1*sj2*x7023))+((cj1*cj2*x7023)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x7025=IKsin(j4);
IkReal x7026=IKcos(j4);
IkReal x7027=(cj5*r00);
IkReal x7028=((1.0)*x7025);
IkReal x7029=(sj5*x7025);
IkReal x7030=((1.0)*x7026);
evalcond[0]=((-1.0)*r12*x7025);
evalcond[1]=((((-1.0)*r12*x7030))+(((-1.0)*cj0)));
evalcond[2]=((((-1.0)*cj5*r20*x7028))+((r21*x7029)));
evalcond[3]=(((r01*x7029))+(((-1.0)*x7027*x7028)));
evalcond[4]=(((x7026*x7027))+(((-1.0)*r01*sj5*x7030))+((cj0*cj2*sj1))+((cj0*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x7031=IKPowWithIntegerCheck(r12,-1);
if(!x7031.valid){
continue;
}
cj4array[0]=((-1.0)*cj0*(x7031.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x7032=IKsin(j4);
IkReal x7033=IKcos(j4);
IkReal x7034=(cj5*r00);
IkReal x7035=(cj5*r20);
IkReal x7036=(r21*sj5);
IkReal x7037=(r01*sj5);
IkReal x7038=((1.0)*x7032);
IkReal x7039=((1.0)*x7033);
evalcond[0]=((-1.0)*r12*x7032);
evalcond[1]=((((-1.0)*x7035*x7038))+((x7032*x7036)));
evalcond[2]=((((-1.0)*x7034*x7038))+((x7032*x7037)));
evalcond[3]=((((-1.0)*x7036*x7039))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x7033*x7035)));
evalcond[4]=((((-1.0)*x7037*x7039))+((cj0*cj2*sj1))+((x7033*x7034))+((cj0*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7040=((1.0)*cj5);
CheckValue<IkReal> x7041=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x7040))+(((-1.0)*r20*sj5)))),-1);
if(!x7041.valid){
continue;
}
CheckValue<IkReal> x7042 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((r11*sj0*sj5))+((cj0*r01*sj5))+(((-1.0)*cj0*r00*x7040))+(((-1.0)*r10*sj0*x7040)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7042.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7041.value)))+(x7042.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7043=IKsin(j4);
IkReal x7044=IKcos(j4);
IkReal x7045=(cj5*r10);
IkReal x7046=(cj2*sj1);
IkReal x7047=(r01*sj5);
IkReal x7048=(cj5*r00);
IkReal x7049=(cj5*r20);
IkReal x7050=(cj1*sj2);
IkReal x7051=((1.0)*x7044);
IkReal x7052=((1.0)*x7043);
IkReal x7053=(sj5*x7043);
evalcond[0]=((((-1.0)*r22*x7051))+(((-1.0)*x7049*x7052))+((r21*x7053)));
evalcond[1]=(sj0+(((-1.0)*x7048*x7052))+((x7043*x7047))+(((-1.0)*r02*x7051)));
evalcond[2]=(((r11*x7053))+(((-1.0)*x7045*x7052))+(((-1.0)*r12*x7051))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*r22*x7052))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r21*sj5*x7051))+((x7044*x7049)));
evalcond[4]=((((-1.0)*x7047*x7051))+((cj0*x7050))+((cj0*x7046))+(((-1.0)*r02*x7052))+((x7044*x7048)));
evalcond[5]=(((sj0*x7046))+((sj0*x7050))+(((-1.0)*r11*sj5*x7051))+(((-1.0)*r12*x7052))+((x7044*x7045)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7054=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x7054.valid){
continue;
}
CheckValue<IkReal> x7055 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7055.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7054.value)))+(x7055.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7056=IKsin(j4);
IkReal x7057=IKcos(j4);
IkReal x7058=(cj5*r10);
IkReal x7059=(cj2*sj1);
IkReal x7060=(r01*sj5);
IkReal x7061=(cj5*r00);
IkReal x7062=(cj5*r20);
IkReal x7063=(cj1*sj2);
IkReal x7064=((1.0)*x7057);
IkReal x7065=((1.0)*x7056);
IkReal x7066=(sj5*x7056);
evalcond[0]=((((-1.0)*x7062*x7065))+((r21*x7066))+(((-1.0)*r22*x7064)));
evalcond[1]=(sj0+((x7056*x7060))+(((-1.0)*r02*x7064))+(((-1.0)*x7061*x7065)));
evalcond[2]=((((-1.0)*x7058*x7065))+(((-1.0)*r12*x7064))+(((-1.0)*cj0))+((r11*x7066)));
evalcond[3]=((((-1.0)*r21*sj5*x7064))+((x7057*x7062))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x7065)));
evalcond[4]=(((cj0*x7063))+((x7057*x7061))+((cj0*x7059))+(((-1.0)*r02*x7065))+(((-1.0)*x7060*x7064)));
evalcond[5]=((((-1.0)*r12*x7065))+((sj0*x7059))+(((-1.0)*r11*sj5*x7064))+((sj0*x7063))+((x7057*x7058)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7067=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x7067.valid){
continue;
}
CheckValue<IkReal> x7068 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7068.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7067.value)))+(x7068.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7069=IKsin(j4);
IkReal x7070=IKcos(j4);
IkReal x7071=(cj5*r10);
IkReal x7072=(cj2*sj1);
IkReal x7073=(r01*sj5);
IkReal x7074=(cj5*r00);
IkReal x7075=(cj5*r20);
IkReal x7076=(cj1*sj2);
IkReal x7077=((1.0)*x7070);
IkReal x7078=((1.0)*x7069);
IkReal x7079=(sj5*x7069);
evalcond[0]=(((r21*x7079))+(((-1.0)*x7075*x7078))+(((-1.0)*r22*x7077)));
evalcond[1]=(sj0+(((-1.0)*r02*x7077))+((x7069*x7073))+(((-1.0)*x7074*x7078)));
evalcond[2]=(((r11*x7079))+(((-1.0)*x7071*x7078))+(((-1.0)*r12*x7077))+(((-1.0)*cj0)));
evalcond[3]=(((x7070*x7075))+(((-1.0)*r21*sj5*x7077))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x7078)));
evalcond[4]=(((cj0*x7076))+((cj0*x7072))+((x7070*x7074))+(((-1.0)*r02*x7078))+(((-1.0)*x7073*x7077)));
evalcond[5]=(((x7070*x7071))+(((-1.0)*r12*x7078))+((sj0*x7072))+((sj0*x7076))+(((-1.0)*r11*sj5*x7077)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7080=cj5*cj5;
IkReal x7081=r21*r21;
IkReal x7082=(sj1*sj2);
IkReal x7083=(r21*sj5);
IkReal x7084=(cj1*cj2);
IkReal x7085=(cj5*r20);
CheckValue<IkReal> x7086 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x7084))+((r22*x7082)))),IkReal(((((-1.0)*x7082*x7085))+((x7082*x7083))+((x7084*x7085))+(((-1.0)*x7083*x7084)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7086.valid){
continue;
}
CheckValue<IkReal> x7087=IKPowWithIntegerCheck(IKsign((((x7080*(r20*r20)))+(((-1.0)*x7080*x7081))+x7081+(r22*r22)+(((-2.0)*x7083*x7085)))),-1);
if(!x7087.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7086.value)+(((1.5707963267949)*(x7087.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x7088=IKsin(j4);
IkReal x7089=IKcos(j4);
IkReal x7090=(r21*sj5);
IkReal x7091=(cj5*r20);
IkReal x7092=((1.0)*x7089);
IkReal x7093=((1.0)*x7088);
evalcond[0]=(((x7088*x7090))+(((-1.0)*r22*x7092))+(((-1.0)*x7091*x7093)));
evalcond[1]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x7093))+(((-1.0)*x7090*x7092))+((x7089*x7091)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x7094=(cj5*sj4);
IkReal x7095=(sj4*sj5);
if( IKabs((((r00*x7094))+(((-1.0)*r01*x7095))+((cj4*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r11*x7095))+(((-1.0)*r10*x7094))+(((-1.0)*cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r00*x7094))+(((-1.0)*r01*x7095))+((cj4*r02))))+IKsqr((((r11*x7095))+(((-1.0)*r10*x7094))+(((-1.0)*cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r00*x7094))+(((-1.0)*r01*x7095))+((cj4*r02))), (((r11*x7095))+(((-1.0)*r10*x7094))+(((-1.0)*cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x7096=IKcos(j0);
IkReal x7097=IKsin(j0);
IkReal x7098=(cj4*cj5);
IkReal x7099=((0.11)*sj5);
IkReal x7100=(cj5*r01);
IkReal x7101=((1.0)*sj1);
IkReal x7102=(r11*sj5);
IkReal x7103=(cj1*cj2);
IkReal x7104=((1.0)*sj4);
IkReal x7105=(cj2*sj1);
IkReal x7106=(cj5*r11);
IkReal x7107=((0.214)*cj1);
IkReal x7108=((0.243)*sj1);
IkReal x7109=((1.0)*cj4);
IkReal x7110=(r01*sj5);
IkReal x7111=(sj2*x7097);
IkReal x7112=(sj2*x7096);
evalcond[0]=(x7097+((sj4*x7110))+(((-1.0)*r02*x7109))+(((-1.0)*cj5*r00*x7104)));
evalcond[1]=((((-1.0)*x7096))+(((-1.0)*cj5*r10*x7104))+(((-1.0)*r12*x7109))+((sj4*x7102)));
evalcond[2]=(x7100+((r00*sj5))+(((-1.0)*x7101*x7112))+((x7096*x7103)));
evalcond[3]=(x7106+((r10*sj5))+((x7097*x7103))+(((-1.0)*x7101*x7111)));
evalcond[4]=(((r00*x7098))+((x7096*x7105))+(((-1.0)*x7109*x7110))+(((-1.0)*r02*x7104))+((cj1*x7112)));
evalcond[5]=((((-1.0)*x7102*x7109))+((x7097*x7105))+(((-1.0)*r12*x7104))+((cj1*x7111))+((r10*x7098)));
evalcond[6]=((((-1.0)*x7107*x7112))+(((-0.214)*x7096*x7105))+(((-0.11)*x7100))+(((-1.0)*r00*x7099))+(((-1.0)*px))+(((0.123)*x7097))+(((-1.0)*x7096*x7108)));
evalcond[7]=((((-1.0)*x7107*x7111))+(((-0.11)*x7106))+(((-0.123)*x7096))+(((-1.0)*r10*x7099))+(((-1.0)*py))+(((-0.214)*x7097*x7105))+(((-1.0)*x7097*x7108)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x7113=((1.0)*cj5);
IkReal x7114=((1.0)*sj5);
CheckValue<IkReal> x7115 = IKatan2WithCheck(IkReal(((((-1.0)*r11*x7113))+(((-1.0)*r10*x7114)))),IkReal(((((-1.0)*r01*x7113))+(((-1.0)*r00*x7114)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7115.valid){
continue;
}
CheckValue<IkReal> x7116=IKPowWithIntegerCheck(IKsign(((((-1.0)*sj1*sj2))+((cj1*cj2)))),-1);
if(!x7116.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x7115.value)+(((1.5707963267949)*(x7116.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x7117=IKcos(j0);
IkReal x7118=IKsin(j0);
IkReal x7119=((0.11)*sj5);
IkReal x7120=(cj1*cj2);
IkReal x7121=(cj5*r01);
IkReal x7122=((1.0)*sj2);
IkReal x7123=(cj5*r11);
IkReal x7124=((0.214)*cj2);
IkReal x7125=(sj1*x7118);
IkReal x7126=(sj1*x7117);
IkReal x7127=((0.214)*cj1*sj2);
evalcond[0]=(x7121+((r00*sj5))+(((-1.0)*x7122*x7126))+((x7117*x7120)));
evalcond[1]=(x7123+((r10*sj5))+(((-1.0)*x7122*x7125))+((x7118*x7120)));
evalcond[2]=((((0.123)*x7118))+(((-0.11)*x7121))+(((-1.0)*px))+(((-1.0)*x7124*x7126))+(((-1.0)*r00*x7119))+(((-1.0)*x7117*x7127))+(((-0.243)*x7126)));
evalcond[3]=((((-1.0)*r10*x7119))+(((-1.0)*x7118*x7127))+(((-0.11)*x7123))+(((-1.0)*py))+(((-1.0)*x7124*x7125))+(((-0.123)*x7117))+(((-0.243)*x7125)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x7128=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x7128;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x7128);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x7129=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x7129;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7129);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x7130=((1.0)*cj5);
IkReal x7131=((((-1.0)*r21*x7130))+(((-1.0)*r20*sj5)));
j4eval[0]=x7131;
j4eval[1]=((IKabs((((r12*sj0))+((cj0*r02)))))+(IKabs((((r11*sj0*sj5))+(((-1.0)*cj0*r00*x7130))+(((-1.0)*r10*sj0*x7130))+((cj0*r01*sj5))))));
j4eval[2]=IKsign(x7131);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x7132=((-1.0)*r20);
IkReal x7134 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x7134)==0){
continue;
}
IkReal x7133=pow(x7134,-0.5);
CheckValue<IkReal> x7135 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7132),IKFAST_ATAN2_MAGTHRESH);
if(!x7135.valid){
continue;
}
IkReal gconst132=((-1.0)*(x7135.value));
IkReal gconst133=(r21*x7133);
IkReal gconst134=(x7132*x7133);
CheckValue<IkReal> x7136 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7136.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x7136.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x7137=((-1.0)*r20);
IkReal x7138=x7133;
CheckValue<IkReal> x7140 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7137),IKFAST_ATAN2_MAGTHRESH);
if(!x7140.valid){
continue;
}
IkReal x7139=((-1.0)*(x7140.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst133;
cj5=gconst134;
j5=x7139;
IkReal gconst132=x7139;
IkReal gconst133=(r21*x7138);
IkReal gconst134=(x7137*x7138);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7141=((-1.0)*r20);
IkReal x7142=x7133;
CheckValue<IkReal> x7144 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7141),IKFAST_ATAN2_MAGTHRESH);
if(!x7144.valid){
continue;
}
IkReal x7143=((-1.0)*(x7144.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst133;
cj5=gconst134;
j5=x7143;
IkReal gconst132=x7143;
IkReal gconst133=(r21*x7142);
IkReal gconst134=(x7141*x7142);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x7145=((-1.0)*r20);
IkReal x7146=x7133;
CheckValue<IkReal> x7148 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7145),IKFAST_ATAN2_MAGTHRESH);
if(!x7148.valid){
continue;
}
IkReal x7147=((-1.0)*(x7148.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst133;
cj5=gconst134;
j5=x7147;
IkReal gconst132=x7147;
IkReal gconst133=(r21*x7146);
IkReal gconst134=(x7145*x7146);
IkReal x7149=r22*r22;
CheckValue<IkReal> x7152=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x7149))),-1);
if(!x7152.valid){
continue;
}
IkReal x7150=x7152.value;
IkReal x7151=(x7149+((x7150*(r21*r21*r21*r21)))+(((2.0)*x7150*(r20*r20)*(r21*r21)))+((x7150*(r20*r20*r20*r20))));
j4eval[0]=x7151;
j4eval[1]=IKsign(x7151);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7153=(gconst133*r21);
IkReal x7154=(sj1*sj2);
IkReal x7155=(gconst134*r20);
IkReal x7156=(cj1*cj2);
CheckValue<IkReal> x7157 = IKatan2WithCheck(IkReal((((r22*x7154))+(((-1.0)*r22*x7156)))),IkReal(((((-1.0)*x7153*x7156))+((x7153*x7154))+(((-1.0)*x7154*x7155))+((x7155*x7156)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7157.valid){
continue;
}
CheckValue<IkReal> x7158=IKPowWithIntegerCheck(IKsign(((r22*r22)+(x7153*x7153)+(x7155*x7155)+(((-2.0)*x7153*x7155)))),-1);
if(!x7158.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7157.value)+(((1.5707963267949)*(x7158.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7159=IKsin(j4);
IkReal x7160=IKcos(j4);
IkReal x7161=(cj2*sj1);
IkReal x7162=(gconst133*r11);
IkReal x7163=(gconst133*r21);
IkReal x7164=(gconst133*r01);
IkReal x7165=(cj1*sj2);
IkReal x7166=((1.0)*x7160);
IkReal x7167=(gconst134*x7160);
IkReal x7168=((1.0)*x7159);
evalcond[0]=((((-1.0)*r22*x7166))+((x7159*x7163))+(((-1.0)*gconst134*r20*x7168)));
evalcond[1]=((((-1.0)*r02*x7166))+sj0+((x7159*x7164))+(((-1.0)*gconst134*r00*x7168)));
evalcond[2]=(((x7159*x7162))+(((-1.0)*gconst134*r10*x7168))+(((-1.0)*r12*x7166))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*r22*x7168))+(((-1.0)*x7163*x7166))+((r20*x7167))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
evalcond[4]=((((-1.0)*r02*x7168))+(((-1.0)*x7164*x7166))+((r00*x7167))+((cj0*x7161))+((cj0*x7165)));
evalcond[5]=((((-1.0)*r12*x7168))+((sj0*x7165))+((sj0*x7161))+(((-1.0)*x7162*x7166))+((r10*x7167)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7169=IKPowWithIntegerCheck(IKsign((((gconst134*r01))+((gconst133*r00)))),-1);
if(!x7169.valid){
continue;
}
CheckValue<IkReal> x7170 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst133*r21))+(((-1.0)*cj0*gconst134*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7170.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7169.value)))+(x7170.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7171=IKsin(j4);
IkReal x7172=IKcos(j4);
IkReal x7173=(cj2*sj1);
IkReal x7174=(gconst133*r11);
IkReal x7175=(gconst133*r21);
IkReal x7176=(gconst133*r01);
IkReal x7177=(cj1*sj2);
IkReal x7178=((1.0)*x7172);
IkReal x7179=(gconst134*x7172);
IkReal x7180=((1.0)*x7171);
evalcond[0]=((((-1.0)*gconst134*r20*x7180))+(((-1.0)*r22*x7178))+((x7171*x7175)));
evalcond[1]=(sj0+(((-1.0)*gconst134*r00*x7180))+(((-1.0)*r02*x7178))+((x7171*x7176)));
evalcond[2]=((((-1.0)*gconst134*r10*x7180))+(((-1.0)*r12*x7178))+((x7171*x7174))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x7180))+(((-1.0)*x7175*x7178))+((r20*x7179)));
evalcond[4]=((((-1.0)*r02*x7180))+((r00*x7179))+((cj0*x7177))+((cj0*x7173))+(((-1.0)*x7176*x7178)));
evalcond[5]=((((-1.0)*x7174*x7178))+((sj0*x7177))+((sj0*x7173))+((r10*x7179))+(((-1.0)*r12*x7180)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7181 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*gconst134*r20*sj0))+((gconst133*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7181.valid){
continue;
}
CheckValue<IkReal> x7182=IKPowWithIntegerCheck(IKsign((((gconst134*r11))+((gconst133*r10)))),-1);
if(!x7182.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7181.value)+(((1.5707963267949)*(x7182.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7183=IKsin(j4);
IkReal x7184=IKcos(j4);
IkReal x7185=(cj2*sj1);
IkReal x7186=(gconst133*r11);
IkReal x7187=(gconst133*r21);
IkReal x7188=(gconst133*r01);
IkReal x7189=(cj1*sj2);
IkReal x7190=((1.0)*x7184);
IkReal x7191=(gconst134*x7184);
IkReal x7192=((1.0)*x7183);
evalcond[0]=((((-1.0)*gconst134*r20*x7192))+((x7183*x7187))+(((-1.0)*r22*x7190)));
evalcond[1]=(sj0+((x7183*x7188))+(((-1.0)*gconst134*r00*x7192))+(((-1.0)*r02*x7190)));
evalcond[2]=(((x7183*x7186))+(((-1.0)*gconst134*r10*x7192))+(((-1.0)*r12*x7190))+(((-1.0)*cj0)));
evalcond[3]=(((r20*x7191))+(((-1.0)*x7187*x7190))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x7192)));
evalcond[4]=(((r00*x7191))+(((-1.0)*x7188*x7190))+((cj0*x7185))+((cj0*x7189))+(((-1.0)*r02*x7192)));
evalcond[5]=(((r10*x7191))+(((-1.0)*x7186*x7190))+((sj0*x7189))+((sj0*x7185))+(((-1.0)*r12*x7192)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7193=((-1.0)*r21);
IkReal x7195 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x7195)==0){
continue;
}
IkReal x7194=pow(x7195,-0.5);
CheckValue<IkReal> x7196 = IKatan2WithCheck(IkReal(x7193),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7196.valid){
continue;
}
IkReal gconst135=((3.14159265358979)+(((-1.0)*(x7196.value))));
IkReal gconst136=(x7193*x7194);
IkReal gconst137=((1.0)*r20*x7194);
CheckValue<IkReal> x7197 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7197.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x7197.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x7198=((-1.0)*r21);
CheckValue<IkReal> x7201 = IKatan2WithCheck(IkReal(x7198),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7201.valid){
continue;
}
IkReal x7199=((1.0)*(x7201.value));
IkReal x7200=x7194;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x7199)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x7199)));
IkReal gconst136=(x7198*x7200);
IkReal gconst137=((1.0)*r20*x7200);
IkReal x7202=r22*r22;
IkReal x7203=((1.0)*x7202);
CheckValue<IkReal> x7207=IKPowWithIntegerCheck(((-1.0)+x7202),-1);
if(!x7207.valid){
continue;
}
IkReal x7204=x7207.value;
if((((1.0)+(((-1.0)*x7203)))) < -0.00001)
continue;
IkReal x7205=IKsqrt(((1.0)+(((-1.0)*x7203))));
IkReal x7206=(sj0*x7204*x7205);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs((x7206+(((-1.0)*x7203*x7206))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7208=((-1.0)*r21);
CheckValue<IkReal> x7211 = IKatan2WithCheck(IkReal(x7208),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7211.valid){
continue;
}
IkReal x7209=((1.0)*(x7211.value));
IkReal x7210=x7194;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x7209)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x7209)));
IkReal gconst136=(x7208*x7210);
IkReal gconst137=((1.0)*r20*x7210);
IkReal x7212=r22*r22;
IkReal x7213=((1.0)*x7212);
CheckValue<IkReal> x7217=IKPowWithIntegerCheck(((-1.0)+x7212),-1);
if(!x7217.valid){
continue;
}
IkReal x7214=x7217.value;
if((((1.0)+(((-1.0)*x7213)))) < -0.00001)
continue;
IkReal x7215=IKsqrt(((1.0)+(((-1.0)*x7213))));
IkReal x7216=(cj0*x7214*x7215);
j4eval[0]=((IKabs(((((-1.0)*x7213*x7216))+x7216)))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x7218=((-1.0)*r21);
CheckValue<IkReal> x7221 = IKatan2WithCheck(IkReal(x7218),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7221.valid){
continue;
}
IkReal x7219=((1.0)*(x7221.value));
IkReal x7220=x7194;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x7219)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x7219)));
IkReal gconst136=(x7218*x7220);
IkReal gconst137=((1.0)*r20*x7220);
IkReal x7222=r22*r22;
IkReal x7223=(cj0*r02);
IkReal x7224=(r12*sj0);
CheckValue<IkReal> x7228=IKPowWithIntegerCheck(((-1.0)+x7222),-1);
if(!x7228.valid){
continue;
}
IkReal x7225=x7228.value;
if((((1.0)+(((-1.0)*x7222)))) < -0.00001)
continue;
IkReal x7226=IKsqrt(((1.0)+(((-1.0)*x7222))));
IkReal x7227=((1.0)*r22*x7225*x7226);
j4eval[0]=0;
j4eval[1]=((IKabs(((((-1.0)*x7224*x7227))+(((-1.0)*x7223*x7227)))))+(IKabs((x7223+x7224))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7229=((1.0)*gconst137);
CheckValue<IkReal> x7230=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x7229))+(((-1.0)*gconst136*r20)))),-1);
if(!x7230.valid){
continue;
}
CheckValue<IkReal> x7231 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*r10*sj0*x7229))+((gconst136*r11*sj0))+((cj0*gconst136*r01))+(((-1.0)*cj0*r00*x7229)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7231.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7230.value)))+(x7231.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7232=IKsin(j4);
IkReal x7233=IKcos(j4);
IkReal x7234=(gconst136*r01);
IkReal x7235=(gconst137*r10);
IkReal x7236=(gconst137*r20);
IkReal x7237=(gconst136*r11);
IkReal x7238=(gconst136*r21);
IkReal x7239=(gconst137*r00);
IkReal x7240=(cj2*sj1);
IkReal x7241=(cj1*sj2);
IkReal x7242=((1.0)*x7233);
IkReal x7243=((1.0)*x7232);
evalcond[0]=((((-1.0)*x7236*x7243))+((x7232*x7238))+(((-1.0)*r22*x7242)));
evalcond[1]=(sj0+((x7232*x7234))+(((-1.0)*r02*x7242))+(((-1.0)*x7239*x7243)));
evalcond[2]=(((x7232*x7237))+(((-1.0)*r12*x7242))+(((-1.0)*x7235*x7243))+(((-1.0)*cj0)));
evalcond[3]=(((x7233*x7236))+(((-1.0)*r22*x7243))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x7238*x7242)));
evalcond[4]=(((cj0*x7240))+((cj0*x7241))+((x7233*x7239))+(((-1.0)*r02*x7243))+(((-1.0)*x7234*x7242)));
evalcond[5]=(((x7233*x7235))+(((-1.0)*r12*x7243))+(((-1.0)*x7237*x7242))+((sj0*x7240))+((sj0*x7241)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7244 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*gconst137*r20))+((cj0*gconst136*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7244.valid){
continue;
}
CheckValue<IkReal> x7245=IKPowWithIntegerCheck(IKsign((((gconst136*r00))+((gconst137*r01)))),-1);
if(!x7245.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7244.value)+(((1.5707963267949)*(x7245.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7246=IKsin(j4);
IkReal x7247=IKcos(j4);
IkReal x7248=(gconst136*r01);
IkReal x7249=(gconst137*r10);
IkReal x7250=(gconst137*r20);
IkReal x7251=(gconst136*r11);
IkReal x7252=(gconst136*r21);
IkReal x7253=(gconst137*r00);
IkReal x7254=(cj2*sj1);
IkReal x7255=(cj1*sj2);
IkReal x7256=((1.0)*x7247);
IkReal x7257=((1.0)*x7246);
evalcond[0]=((((-1.0)*r22*x7256))+((x7246*x7252))+(((-1.0)*x7250*x7257)));
evalcond[1]=(sj0+(((-1.0)*r02*x7256))+((x7246*x7248))+(((-1.0)*x7253*x7257)));
evalcond[2]=((((-1.0)*r12*x7256))+(((-1.0)*x7249*x7257))+((x7246*x7251))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*x7252*x7256))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x7257))+((x7247*x7250)));
evalcond[4]=((((-1.0)*r02*x7257))+(((-1.0)*x7248*x7256))+((x7247*x7253))+((cj0*x7255))+((cj0*x7254)));
evalcond[5]=((((-1.0)*x7251*x7256))+(((-1.0)*r12*x7257))+((x7247*x7249))+((sj0*x7255))+((sj0*x7254)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7258=IKPowWithIntegerCheck(IKsign((((gconst137*r11))+((gconst136*r10)))),-1);
if(!x7258.valid){
continue;
}
CheckValue<IkReal> x7259 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst136*r21*sj0))+(((-1.0)*gconst137*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7259.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7258.value)))+(x7259.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7260=IKsin(j4);
IkReal x7261=IKcos(j4);
IkReal x7262=(gconst136*r01);
IkReal x7263=(gconst137*r10);
IkReal x7264=(gconst137*r20);
IkReal x7265=(gconst136*r11);
IkReal x7266=(gconst136*r21);
IkReal x7267=(gconst137*r00);
IkReal x7268=(cj2*sj1);
IkReal x7269=(cj1*sj2);
IkReal x7270=((1.0)*x7261);
IkReal x7271=((1.0)*x7260);
evalcond[0]=((((-1.0)*x7264*x7271))+(((-1.0)*r22*x7270))+((x7260*x7266)));
evalcond[1]=((((-1.0)*x7267*x7271))+sj0+(((-1.0)*r02*x7270))+((x7260*x7262)));
evalcond[2]=((((-1.0)*r12*x7270))+((x7260*x7265))+(((-1.0)*x7263*x7271))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*x7266*x7270))+(((-1.0)*r22*x7271))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x7261*x7264)));
evalcond[4]=(((cj0*x7268))+((cj0*x7269))+(((-1.0)*r02*x7271))+((x7261*x7267))+(((-1.0)*x7262*x7270)));
evalcond[5]=((((-1.0)*x7265*x7270))+(((-1.0)*r12*x7271))+((sj0*x7268))+((sj0*x7269))+((x7261*x7263)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7273 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x7273)==0){
continue;
}
IkReal x7272=pow(x7273,-0.5);
CheckValue<IkReal> x7274 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x7274.valid){
continue;
}
IkReal gconst138=((-1.0)*(x7274.value));
IkReal gconst139=((-1.0)*r01*x7272);
IkReal gconst140=(r00*x7272);
CheckValue<IkReal> x7275 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x7275.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x7275.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x7278 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x7278.valid){
continue;
}
IkReal x7276=((-1.0)*(x7278.value));
IkReal x7277=x7272;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst139;
cj5=gconst140;
j5=x7276;
IkReal gconst138=x7276;
IkReal gconst139=((-1.0)*r01*x7277);
IkReal gconst140=(r00*x7277);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7279=((1.0)*gconst140);
CheckValue<IkReal> x7280=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x7279))+(((-1.0)*gconst139*r20)))),-1);
if(!x7280.valid){
continue;
}
CheckValue<IkReal> x7281 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*cj0*r00*x7279))+((gconst139*r11*sj0))+(((-1.0)*r10*sj0*x7279))+((cj0*gconst139*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7281.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7280.value)))+(x7281.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7282=IKsin(j4);
IkReal x7283=IKcos(j4);
IkReal x7284=(gconst140*r00);
IkReal x7285=(cj2*sj1);
IkReal x7286=(gconst139*r11);
IkReal x7287=(gconst139*r01);
IkReal x7288=(gconst139*r21);
IkReal x7289=(cj1*sj2);
IkReal x7290=((1.0)*x7283);
IkReal x7291=((1.0)*x7282);
IkReal x7292=(gconst140*x7283);
evalcond[0]=((((-1.0)*gconst140*r20*x7291))+(((-1.0)*r22*x7290))+((x7282*x7288)));
evalcond[1]=(sj0+((x7282*x7287))+(((-1.0)*x7284*x7291))+(((-1.0)*r02*x7290)));
evalcond[2]=(((x7282*x7286))+(((-1.0)*gconst140*r10*x7291))+(((-1.0)*r12*x7290))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*r22*x7291))+(((-1.0)*x7288*x7290))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r20*x7292)));
evalcond[4]=(((cj0*x7285))+((cj0*x7289))+(((-1.0)*r02*x7291))+((x7283*x7284))+(((-1.0)*x7287*x7290)));
evalcond[5]=((((-1.0)*x7286*x7290))+((sj0*x7285))+((sj0*x7289))+((r10*x7292))+(((-1.0)*r12*x7291)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7293 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst139*r21*sj0))+(((-1.0)*gconst140*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7293.valid){
continue;
}
CheckValue<IkReal> x7294=IKPowWithIntegerCheck(IKsign((((gconst140*r11))+((gconst139*r10)))),-1);
if(!x7294.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7293.value)+(((1.5707963267949)*(x7294.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7295=IKsin(j4);
IkReal x7296=IKcos(j4);
IkReal x7297=(gconst140*r00);
IkReal x7298=(cj2*sj1);
IkReal x7299=(gconst139*r11);
IkReal x7300=(gconst139*r01);
IkReal x7301=(gconst139*r21);
IkReal x7302=(cj1*sj2);
IkReal x7303=((1.0)*x7296);
IkReal x7304=((1.0)*x7295);
IkReal x7305=(gconst140*x7296);
evalcond[0]=(((x7295*x7301))+(((-1.0)*gconst140*r20*x7304))+(((-1.0)*r22*x7303)));
evalcond[1]=((((-1.0)*r02*x7303))+(((-1.0)*x7297*x7304))+sj0+((x7295*x7300)));
evalcond[2]=((((-1.0)*gconst140*r10*x7304))+(((-1.0)*r12*x7303))+((x7295*x7299))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*cj1*cj2))+(((-1.0)*x7301*x7303))+((sj1*sj2))+((r20*x7305))+(((-1.0)*r22*x7304)));
evalcond[4]=((((-1.0)*r02*x7304))+((cj0*x7298))+(((-1.0)*x7300*x7303))+((x7296*x7297))+((cj0*x7302)));
evalcond[5]=(((r10*x7305))+((sj0*x7298))+((sj0*x7302))+(((-1.0)*r12*x7304))+(((-1.0)*x7299*x7303)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7307 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x7307)==0){
continue;
}
IkReal x7306=pow(x7307,-0.5);
CheckValue<IkReal> x7308 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x7308.valid){
continue;
}
IkReal gconst141=((3.14159265358979)+(((-1.0)*(x7308.value))));
IkReal gconst142=((1.0)*r01*x7306);
IkReal gconst143=((-1.0)*r00*x7306);
CheckValue<IkReal> x7309 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x7309.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x7309.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x7312 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x7312.valid){
continue;
}
IkReal x7310=((1.0)*(x7312.value));
IkReal x7311=x7306;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x7310)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x7310)));
IkReal gconst142=((1.0)*r01*x7311);
IkReal gconst143=((-1.0)*r00*x7311);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[5];
CheckValue<IkReal> x7315 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x7315.valid){
continue;
}
IkReal x7313=((1.0)*(x7315.value));
IkReal x7314=x7306;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x7313)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x7313)));
IkReal gconst142=((1.0)*r01*x7314);
IkReal gconst143=((-1.0)*r00*x7314);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=cj0;
j4eval[3]=r22;
j4eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x7318 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x7318.valid){
continue;
}
IkReal x7316=((1.0)*(x7318.value));
IkReal x7317=x7306;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x7316)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x7316)));
IkReal gconst142=((1.0)*r01*x7317);
IkReal gconst143=((-1.0)*r00*x7317);
IkReal x7319=r02*r02;
IkReal x7320=(r12*sj0);
IkReal x7321=x7306;
IkReal x7322=(cj0*x7321);
j4eval[0]=((IKabs((x7320+((cj0*r02)))))+(IKabs((((r02*x7320*x7321))+(((-1.0)*x7322))+((x7319*x7322))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7323=((1.0)*gconst143);
CheckValue<IkReal> x7324=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x7323))+(((-1.0)*gconst142*r20)))),-1);
if(!x7324.valid){
continue;
}
CheckValue<IkReal> x7325 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*cj0*r00*x7323))+((cj0*gconst142*r01))+((gconst142*r11*sj0))+(((-1.0)*r10*sj0*x7323)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7325.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7324.value)))+(x7325.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7326=IKsin(j4);
IkReal x7327=IKcos(j4);
IkReal x7328=(cj2*sj1);
IkReal x7329=(gconst143*r20);
IkReal x7330=(cj1*sj2);
IkReal x7331=((1.0)*x7327);
IkReal x7332=((1.0)*x7326);
IkReal x7333=(gconst142*x7326);
IkReal x7334=(gconst143*x7327);
evalcond[0]=(((r21*x7333))+(((-1.0)*x7329*x7332))+(((-1.0)*r22*x7331)));
evalcond[1]=((((-1.0)*r02*x7331))+sj0+(((-1.0)*gconst143*r00*x7332))+((r01*x7333)));
evalcond[2]=((((-1.0)*gconst143*r10*x7332))+(((-1.0)*r12*x7331))+((r11*x7333))+(((-1.0)*cj0)));
evalcond[3]=(((x7327*x7329))+(((-1.0)*gconst142*r21*x7331))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x7332)));
evalcond[4]=((((-1.0)*r02*x7332))+(((-1.0)*gconst142*r01*x7331))+((cj0*x7328))+((r00*x7334))+((cj0*x7330)));
evalcond[5]=(((r10*x7334))+((sj0*x7330))+(((-1.0)*r12*x7332))+(((-1.0)*gconst142*r11*x7331))+((sj0*x7328)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7335=IKPowWithIntegerCheck(IKsign((((gconst143*r01))+((gconst142*r00)))),-1);
if(!x7335.valid){
continue;
}
CheckValue<IkReal> x7336 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*gconst143*r20))+((cj0*gconst142*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7336.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7335.value)))+(x7336.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7337=IKsin(j4);
IkReal x7338=IKcos(j4);
IkReal x7339=(cj2*sj1);
IkReal x7340=(gconst143*r20);
IkReal x7341=(cj1*sj2);
IkReal x7342=((1.0)*x7338);
IkReal x7343=((1.0)*x7337);
IkReal x7344=(gconst142*x7337);
IkReal x7345=(gconst143*x7338);
evalcond[0]=((((-1.0)*r22*x7342))+(((-1.0)*x7340*x7343))+((r21*x7344)));
evalcond[1]=(sj0+((r01*x7344))+(((-1.0)*r02*x7342))+(((-1.0)*gconst143*r00*x7343)));
evalcond[2]=((((-1.0)*r12*x7342))+((r11*x7344))+(((-1.0)*gconst143*r10*x7343))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*r22*x7343))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst142*r21*x7342))+((x7338*x7340)));
evalcond[4]=((((-1.0)*gconst142*r01*x7342))+((r00*x7345))+((cj0*x7341))+(((-1.0)*r02*x7343))+((cj0*x7339)));
evalcond[5]=((((-1.0)*r12*x7343))+(((-1.0)*gconst142*r11*x7342))+((sj0*x7339))+((sj0*x7341))+((r10*x7345)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7346=IKPowWithIntegerCheck(IKsign((((gconst143*r11))+((gconst142*r10)))),-1);
if(!x7346.valid){
continue;
}
CheckValue<IkReal> x7347 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst142*r21*sj0))+(((-1.0)*gconst143*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7347.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7346.value)))+(x7347.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7348=IKsin(j4);
IkReal x7349=IKcos(j4);
IkReal x7350=(cj2*sj1);
IkReal x7351=(gconst143*r20);
IkReal x7352=(cj1*sj2);
IkReal x7353=((1.0)*x7349);
IkReal x7354=((1.0)*x7348);
IkReal x7355=(gconst142*x7348);
IkReal x7356=(gconst143*x7349);
evalcond[0]=((((-1.0)*r22*x7353))+(((-1.0)*x7351*x7354))+((r21*x7355)));
evalcond[1]=((((-1.0)*gconst143*r00*x7354))+sj0+((r01*x7355))+(((-1.0)*r02*x7353)));
evalcond[2]=((((-1.0)*r12*x7353))+((r11*x7355))+(((-1.0)*gconst143*r10*x7354))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*r22*x7354))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x7349*x7351))+(((-1.0)*gconst142*r21*x7353)));
evalcond[4]=(((r00*x7356))+((cj0*x7352))+((cj0*x7350))+(((-1.0)*r02*x7354))+(((-1.0)*gconst142*r01*x7353)));
evalcond[5]=(((r10*x7356))+(((-1.0)*r12*x7354))+(((-1.0)*gconst142*r11*x7353))+((sj0*x7352))+((sj0*x7350)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x7357=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x7357;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x7357);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x7358=((1.0)*cj5);
IkReal x7359=((((-1.0)*r21*x7358))+(((-1.0)*r20*sj5)));
j4eval[0]=x7359;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x7358))+((r11*sj5))))));
j4eval[2]=IKsign(x7359);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x7360=cj5*cj5;
IkReal x7361=r01*r01;
IkReal x7362=(cj5*r00);
IkReal x7363=(r01*sj5);
IkReal x7364=(((x7360*(r00*r00)))+(((-1.0)*x7360*x7361))+x7361+(((-2.0)*x7362*x7363))+(r02*r02));
j4eval[0]=x7364;
j4eval[1]=((IKabs((x7362+(((-1.0)*x7363)))))+(IKabs(r02)));
j4eval[2]=IKsign(x7364);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7365=cj5*cj5;
IkReal x7366=r01*r01;
IkReal x7367=(r01*sj5);
IkReal x7368=(cj5*r00);
CheckValue<IkReal> x7369=IKPowWithIntegerCheck(IKsign((x7366+(((-1.0)*x7365*x7366))+((x7365*(r00*r00)))+(r02*r02)+(((-2.0)*x7367*x7368)))),-1);
if(!x7369.valid){
continue;
}
CheckValue<IkReal> x7370 = IKatan2WithCheck(IkReal((x7368+(((-1.0)*x7367)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x7370.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7369.value)))+(x7370.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7371=IKsin(j4);
IkReal x7372=IKcos(j4);
IkReal x7373=(cj5*r10);
IkReal x7374=(r01*sj5);
IkReal x7375=(cj5*r00);
IkReal x7376=(cj5*r20);
IkReal x7377=((1.0)*x7372);
IkReal x7378=((1.0)*x7371);
IkReal x7379=(sj5*x7371);
evalcond[0]=((((-1.0)*r22*x7377))+(((-1.0)*x7376*x7378))+((r21*x7379)));
evalcond[1]=(((r11*x7379))+(((-1.0)*r12*x7377))+(((-1.0)*x7373*x7378)));
evalcond[2]=((((-1.0)*x7374*x7377))+(((-1.0)*r02*x7378))+((x7372*x7375)));
evalcond[3]=((1.0)+(((-1.0)*x7375*x7378))+(((-1.0)*r02*x7377))+((x7371*x7374)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r11*sj5*x7377))+((cj1*sj2))+(((-1.0)*r12*x7378))+((x7372*x7373)));
evalcond[5]=((((-1.0)*r22*x7378))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x7372*x7376))+(((-1.0)*r21*sj5*x7377)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7380=((1.0)*cj5);
CheckValue<IkReal> x7381 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj5))+(((-1.0)*r10*x7380)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7381.valid){
continue;
}
CheckValue<IkReal> x7382=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x7380))+(((-1.0)*r20*sj5)))),-1);
if(!x7382.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7381.value)+(((1.5707963267949)*(x7382.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7383=IKsin(j4);
IkReal x7384=IKcos(j4);
IkReal x7385=(cj5*r10);
IkReal x7386=(r01*sj5);
IkReal x7387=(cj5*r00);
IkReal x7388=(cj5*r20);
IkReal x7389=((1.0)*x7384);
IkReal x7390=((1.0)*x7383);
IkReal x7391=(sj5*x7383);
evalcond[0]=((((-1.0)*r22*x7389))+(((-1.0)*x7388*x7390))+((r21*x7391)));
evalcond[1]=(((r11*x7391))+(((-1.0)*r12*x7389))+(((-1.0)*x7385*x7390)));
evalcond[2]=((((-1.0)*x7386*x7389))+(((-1.0)*r02*x7390))+((x7384*x7387)));
evalcond[3]=((1.0)+(((-1.0)*r02*x7389))+(((-1.0)*x7387*x7390))+((x7383*x7386)));
evalcond[4]=((((-1.0)*r12*x7390))+((cj2*sj1))+((cj1*sj2))+((x7384*x7385))+(((-1.0)*r11*sj5*x7389)));
evalcond[5]=((((-1.0)*r22*x7390))+(((-1.0)*cj1*cj2))+(((-1.0)*r21*sj5*x7389))+((sj1*sj2))+((x7384*x7388)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7392 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7392.valid){
continue;
}
CheckValue<IkReal> x7393=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x7393.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7392.value)+(((1.5707963267949)*(x7393.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7394=IKsin(j4);
IkReal x7395=IKcos(j4);
IkReal x7396=(cj5*r10);
IkReal x7397=(r01*sj5);
IkReal x7398=(cj5*r00);
IkReal x7399=(cj5*r20);
IkReal x7400=((1.0)*x7395);
IkReal x7401=((1.0)*x7394);
IkReal x7402=(sj5*x7394);
evalcond[0]=((((-1.0)*x7399*x7401))+((r21*x7402))+(((-1.0)*r22*x7400)));
evalcond[1]=(((r11*x7402))+(((-1.0)*r12*x7400))+(((-1.0)*x7396*x7401)));
evalcond[2]=((((-1.0)*x7397*x7400))+((x7395*x7398))+(((-1.0)*r02*x7401)));
evalcond[3]=((1.0)+(((-1.0)*x7398*x7401))+(((-1.0)*r02*x7400))+((x7394*x7397)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r12*x7401))+((cj1*sj2))+((x7395*x7396))+(((-1.0)*r11*sj5*x7400)));
evalcond[5]=(((x7395*x7399))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x7401))+(((-1.0)*r21*sj5*x7400)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x7403=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x7403;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x7403);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x7404=((1.0)*cj5);
IkReal x7405=((((-1.0)*r11*x7404))+(((-1.0)*r10*sj5)));
j4eval[0]=x7405;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x7404)))))+(IKabs(r22)));
j4eval[2]=IKsign(x7405);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x7406=cj5*cj5;
IkReal x7407=r01*r01;
IkReal x7408=(r01*sj5);
IkReal x7409=(cj5*r00);
IkReal x7410=(((x7406*x7407))+(((-1.0)*(r02*r02)))+(((2.0)*x7408*x7409))+(((-1.0)*x7407))+(((-1.0)*x7406*(r00*r00))));
j4eval[0]=x7410;
j4eval[1]=IKsign(x7410);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x7408))+x7409))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7411=cj5*cj5;
IkReal x7412=r01*r01;
IkReal x7413=(r01*sj5);
IkReal x7414=(cj5*r00);
CheckValue<IkReal> x7415 = IKatan2WithCheck(IkReal(((((-1.0)*x7413))+x7414)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x7415.valid){
continue;
}
CheckValue<IkReal> x7416=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r02*r02)))+(((-1.0)*x7412))+(((2.0)*x7413*x7414))+((x7411*x7412))+(((-1.0)*x7411*(r00*r00))))),-1);
if(!x7416.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7415.value)+(((1.5707963267949)*(x7416.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7417=IKsin(j4);
IkReal x7418=IKcos(j4);
IkReal x7419=(cj5*r10);
IkReal x7420=(r01*sj5);
IkReal x7421=((1.0)*cj2);
IkReal x7422=(cj5*r00);
IkReal x7423=(cj5*r20);
IkReal x7424=((1.0)*x7418);
IkReal x7425=((1.0)*x7417);
IkReal x7426=(sj5*x7417);
evalcond[0]=((((-1.0)*r22*x7424))+((r21*x7426))+(((-1.0)*x7423*x7425)));
evalcond[1]=((((-1.0)*r12*x7424))+(((-1.0)*x7419*x7425))+((r11*x7426)));
evalcond[2]=(((x7418*x7422))+(((-1.0)*r02*x7425))+(((-1.0)*x7420*x7424)));
evalcond[3]=((-1.0)+(((-1.0)*x7422*x7425))+(((-1.0)*r02*x7424))+((x7417*x7420)));
evalcond[4]=((((-1.0)*r22*x7425))+((x7418*x7423))+((sj1*sj2))+(((-1.0)*cj1*x7421))+(((-1.0)*r21*sj5*x7424)));
evalcond[5]=((((-1.0)*r12*x7425))+(((-1.0)*cj1*sj2))+(((-1.0)*r11*sj5*x7424))+(((-1.0)*sj1*x7421))+((x7418*x7419)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7427=((1.0)*cj5);
CheckValue<IkReal> x7428 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x7427)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7428.valid){
continue;
}
CheckValue<IkReal> x7429=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x7427)))),-1);
if(!x7429.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7428.value)+(((1.5707963267949)*(x7429.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7430=IKsin(j4);
IkReal x7431=IKcos(j4);
IkReal x7432=(cj5*r10);
IkReal x7433=(r01*sj5);
IkReal x7434=((1.0)*cj2);
IkReal x7435=(cj5*r00);
IkReal x7436=(cj5*r20);
IkReal x7437=((1.0)*x7431);
IkReal x7438=((1.0)*x7430);
IkReal x7439=(sj5*x7430);
evalcond[0]=(((r21*x7439))+(((-1.0)*r22*x7437))+(((-1.0)*x7436*x7438)));
evalcond[1]=((((-1.0)*r12*x7437))+((r11*x7439))+(((-1.0)*x7432*x7438)));
evalcond[2]=((((-1.0)*r02*x7438))+((x7431*x7435))+(((-1.0)*x7433*x7437)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x7437))+((x7430*x7433))+(((-1.0)*x7435*x7438)));
evalcond[4]=((((-1.0)*r22*x7438))+((sj1*sj2))+((x7431*x7436))+(((-1.0)*cj1*x7434))+(((-1.0)*r21*sj5*x7437)));
evalcond[5]=((((-1.0)*r12*x7438))+(((-1.0)*cj1*sj2))+(((-1.0)*r11*sj5*x7437))+((x7431*x7432))+(((-1.0)*sj1*x7434)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7440=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x7440.valid){
continue;
}
CheckValue<IkReal> x7441 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7441.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7440.value)))+(x7441.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7442=IKsin(j4);
IkReal x7443=IKcos(j4);
IkReal x7444=(cj5*r10);
IkReal x7445=(r01*sj5);
IkReal x7446=((1.0)*cj2);
IkReal x7447=(cj5*r00);
IkReal x7448=(cj5*r20);
IkReal x7449=((1.0)*x7443);
IkReal x7450=((1.0)*x7442);
IkReal x7451=(sj5*x7442);
evalcond[0]=(((r21*x7451))+(((-1.0)*r22*x7449))+(((-1.0)*x7448*x7450)));
evalcond[1]=(((r11*x7451))+(((-1.0)*x7444*x7450))+(((-1.0)*r12*x7449)));
evalcond[2]=(((x7443*x7447))+(((-1.0)*r02*x7450))+(((-1.0)*x7445*x7449)));
evalcond[3]=((-1.0)+((x7442*x7445))+(((-1.0)*x7447*x7450))+(((-1.0)*r02*x7449)));
evalcond[4]=((((-1.0)*cj1*x7446))+((sj1*sj2))+(((-1.0)*r21*sj5*x7449))+((x7443*x7448))+(((-1.0)*r22*x7450)));
evalcond[5]=((((-1.0)*r11*sj5*x7449))+(((-1.0)*sj1*x7446))+(((-1.0)*cj1*sj2))+((x7443*x7444))+(((-1.0)*r12*x7450)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7453 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x7453)==0){
continue;
}
IkReal x7452=pow(x7453,-0.5);
CheckValue<IkReal> x7454 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x7454.valid){
continue;
}
IkReal gconst144=((-1.0)*(x7454.value));
IkReal gconst145=((-1.0)*r11*x7452);
IkReal gconst146=(r10*x7452);
CheckValue<IkReal> x7455 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x7455.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x7455.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x7458 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x7458.valid){
continue;
}
IkReal x7456=((-1.0)*(x7458.value));
IkReal x7457=x7452;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst145;
cj5=gconst146;
j5=x7456;
IkReal gconst144=x7456;
IkReal gconst145=((-1.0)*r11*x7457);
IkReal gconst146=(r10*x7457);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7459=((1.0)*gconst146);
CheckValue<IkReal> x7460 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*cj0*r00*x7459))+((cj0*gconst145*r01))+(((-1.0)*r10*sj0*x7459))+((gconst145*r11*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7460.valid){
continue;
}
CheckValue<IkReal> x7461=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst145*r20))+(((-1.0)*r21*x7459)))),-1);
if(!x7461.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7460.value)+(((1.5707963267949)*(x7461.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7462=IKsin(j4);
IkReal x7463=IKcos(j4);
IkReal x7464=(gconst146*r10);
IkReal x7465=(cj2*sj1);
IkReal x7466=(gconst146*r20);
IkReal x7467=(gconst146*r00);
IkReal x7468=(cj1*sj2);
IkReal x7469=((1.0)*x7463);
IkReal x7470=((1.0)*x7462);
IkReal x7471=(gconst145*x7462);
evalcond[0]=((((-1.0)*x7466*x7470))+(((-1.0)*r22*x7469))+((r21*x7471)));
evalcond[1]=(sj0+(((-1.0)*x7467*x7470))+(((-1.0)*r02*x7469))+((r01*x7471)));
evalcond[2]=((((-1.0)*x7464*x7470))+(((-1.0)*r12*x7469))+((r11*x7471))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*gconst145*r21*x7469))+((x7463*x7466))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x7470)));
evalcond[4]=((((-1.0)*r02*x7470))+((x7463*x7467))+(((-1.0)*gconst145*r01*x7469))+((cj0*x7465))+((cj0*x7468)));
evalcond[5]=(((x7463*x7464))+(((-1.0)*gconst145*r11*x7469))+((sj0*x7468))+((sj0*x7465))+(((-1.0)*r12*x7470)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7472 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*gconst146*r20))+((cj0*gconst145*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7472.valid){
continue;
}
CheckValue<IkReal> x7473=IKPowWithIntegerCheck(IKsign((((gconst145*r00))+((gconst146*r01)))),-1);
if(!x7473.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7472.value)+(((1.5707963267949)*(x7473.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7474=IKsin(j4);
IkReal x7475=IKcos(j4);
IkReal x7476=(gconst146*r10);
IkReal x7477=(cj2*sj1);
IkReal x7478=(gconst146*r20);
IkReal x7479=(gconst146*r00);
IkReal x7480=(cj1*sj2);
IkReal x7481=((1.0)*x7475);
IkReal x7482=((1.0)*x7474);
IkReal x7483=(gconst145*x7474);
evalcond[0]=((((-1.0)*x7478*x7482))+(((-1.0)*r22*x7481))+((r21*x7483)));
evalcond[1]=((((-1.0)*x7479*x7482))+sj0+((r01*x7483))+(((-1.0)*r02*x7481)));
evalcond[2]=((((-1.0)*x7476*x7482))+((r11*x7483))+(((-1.0)*r12*x7481))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*gconst145*r21*x7481))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x7482))+((x7475*x7478)));
evalcond[4]=(((cj0*x7477))+(((-1.0)*gconst145*r01*x7481))+((cj0*x7480))+(((-1.0)*r02*x7482))+((x7475*x7479)));
evalcond[5]=((((-1.0)*gconst145*r11*x7481))+((sj0*x7477))+((sj0*x7480))+(((-1.0)*r12*x7482))+((x7475*x7476)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7485 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x7485)==0){
continue;
}
IkReal x7484=pow(x7485,-0.5);
CheckValue<IkReal> x7486 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x7486.valid){
continue;
}
IkReal gconst147=((3.14159265358979)+(((-1.0)*(x7486.value))));
IkReal gconst148=((1.0)*r11*x7484);
IkReal gconst149=((-1.0)*r10*x7484);
CheckValue<IkReal> x7487 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x7487.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x7487.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x7490 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x7490.valid){
continue;
}
IkReal x7488=((1.0)*(x7490.value));
IkReal x7489=x7484;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x7488)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x7488)));
IkReal gconst148=((1.0)*r11*x7489);
IkReal gconst149=((-1.0)*r10*x7489);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x7493 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x7493.valid){
continue;
}
IkReal x7491=((1.0)*(x7493.value));
IkReal x7492=x7484;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x7491)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x7491)));
IkReal gconst148=((1.0)*r11*x7492);
IkReal gconst149=((-1.0)*r10*x7492);
IkReal x7494=r12*r12;
IkReal x7495=(cj0*r02);
IkReal x7496=x7484;
IkReal x7497=(sj0*x7496);
j4eval[0]=((IKabs((((r12*sj0))+x7495)))+(IKabs(((((-1.0)*x7497))+((x7494*x7497))+((r12*x7495*x7496))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x7500 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x7500.valid){
continue;
}
IkReal x7498=((1.0)*(x7500.value));
IkReal x7499=x7484;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x7498)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x7498)));
IkReal gconst148=((1.0)*r11*x7499);
IkReal gconst149=((-1.0)*r10*x7499);
IkReal x7501=r12*r12;
IkReal x7502=(sj1*sj2);
IkReal x7503=((1.0)*cj1*cj2);
CheckValue<IkReal> x7507=IKPowWithIntegerCheck(((-1.0)+x7501),-1);
if(!x7507.valid){
continue;
}
IkReal x7504=x7507.value;
if((((1.0)+(((-1.0)*x7501)))) < -0.00001)
continue;
IkReal x7505=IKsqrt(((1.0)+(((-1.0)*x7501))));
IkReal x7506=(r12*r22*x7504*x7505);
j4eval[0]=((IKabs(((((-1.0)*x7503*x7506))+((x7502*x7506)))))+(IKabs(((((-1.0)*r22*x7503))+((r22*x7502))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7508=(gconst149*r20);
IkReal x7509=(cj1*cj2);
IkReal x7510=(sj1*sj2);
IkReal x7511=(gconst148*r21);
CheckValue<IkReal> x7512 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x7509))+((r22*x7510)))),IkReal((((x7510*x7511))+(((-1.0)*x7508*x7510))+(((-1.0)*x7509*x7511))+((x7508*x7509)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7512.valid){
continue;
}
CheckValue<IkReal> x7513=IKPowWithIntegerCheck(IKsign(((x7508*x7508)+(r22*r22)+(x7511*x7511)+(((-2.0)*x7508*x7511)))),-1);
if(!x7513.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7512.value)+(((1.5707963267949)*(x7513.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7514=IKsin(j4);
IkReal x7515=IKcos(j4);
IkReal x7516=(gconst148*r11);
IkReal x7517=(cj2*sj1);
IkReal x7518=(cj1*sj2);
IkReal x7519=((1.0)*x7515);
IkReal x7520=(gconst149*x7515);
IkReal x7521=((1.0)*x7514);
IkReal x7522=(gconst148*x7514);
evalcond[0]=(((r21*x7522))+(((-1.0)*gconst149*r20*x7521))+(((-1.0)*r22*x7519)));
evalcond[1]=(((r01*x7522))+sj0+(((-1.0)*r02*x7519))+(((-1.0)*gconst149*r00*x7521)));
evalcond[2]=((((-1.0)*gconst149*r10*x7521))+(((-1.0)*r12*x7519))+((x7514*x7516))+(((-1.0)*cj0)));
evalcond[3]=(((r20*x7520))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst148*r21*x7519))+(((-1.0)*r22*x7521)));
evalcond[4]=(((r00*x7520))+(((-1.0)*r02*x7521))+((cj0*x7518))+((cj0*x7517))+(((-1.0)*gconst148*r01*x7519)));
evalcond[5]=((((-1.0)*x7516*x7519))+((sj0*x7518))+((sj0*x7517))+((r10*x7520))+(((-1.0)*r12*x7521)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7523=((1.0)*gconst149);
CheckValue<IkReal> x7524 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*r10*sj0*x7523))+((cj0*gconst148*r01))+(((-1.0)*cj0*r00*x7523))+((gconst148*r11*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7524.valid){
continue;
}
CheckValue<IkReal> x7525=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst148*r20))+(((-1.0)*r21*x7523)))),-1);
if(!x7525.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7524.value)+(((1.5707963267949)*(x7525.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7526=IKsin(j4);
IkReal x7527=IKcos(j4);
IkReal x7528=(gconst148*r11);
IkReal x7529=(cj2*sj1);
IkReal x7530=(cj1*sj2);
IkReal x7531=((1.0)*x7527);
IkReal x7532=(gconst149*x7527);
IkReal x7533=((1.0)*x7526);
IkReal x7534=(gconst148*x7526);
evalcond[0]=((((-1.0)*r22*x7531))+(((-1.0)*gconst149*r20*x7533))+((r21*x7534)));
evalcond[1]=(sj0+(((-1.0)*gconst149*r00*x7533))+((r01*x7534))+(((-1.0)*r02*x7531)));
evalcond[2]=(((x7526*x7528))+(((-1.0)*r12*x7531))+(((-1.0)*gconst149*r10*x7533))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*gconst148*r21*x7531))+(((-1.0)*r22*x7533))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r20*x7532)));
evalcond[4]=(((cj0*x7530))+((cj0*x7529))+(((-1.0)*gconst148*r01*x7531))+((r00*x7532))+(((-1.0)*r02*x7533)));
evalcond[5]=(((r10*x7532))+((sj0*x7529))+(((-1.0)*r12*x7533))+(((-1.0)*x7528*x7531))+((sj0*x7530)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7535=IKPowWithIntegerCheck(IKsign((((gconst148*r00))+((gconst149*r01)))),-1);
if(!x7535.valid){
continue;
}
CheckValue<IkReal> x7536 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*gconst149*r20))+((cj0*gconst148*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7536.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7535.value)))+(x7536.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7537=IKsin(j4);
IkReal x7538=IKcos(j4);
IkReal x7539=(gconst148*r11);
IkReal x7540=(cj2*sj1);
IkReal x7541=(cj1*sj2);
IkReal x7542=((1.0)*x7538);
IkReal x7543=(gconst149*x7538);
IkReal x7544=((1.0)*x7537);
IkReal x7545=(gconst148*x7537);
evalcond[0]=(((r21*x7545))+(((-1.0)*r22*x7542))+(((-1.0)*gconst149*r20*x7544)));
evalcond[1]=(sj0+(((-1.0)*gconst149*r00*x7544))+((r01*x7545))+(((-1.0)*r02*x7542)));
evalcond[2]=((((-1.0)*gconst149*r10*x7544))+((x7537*x7539))+(((-1.0)*r12*x7542))+(((-1.0)*cj0)));
evalcond[3]=(((r20*x7543))+(((-1.0)*r22*x7544))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst148*r21*x7542)));
evalcond[4]=(((cj0*x7540))+((cj0*x7541))+(((-1.0)*gconst148*r01*x7542))+((r00*x7543))+(((-1.0)*r02*x7544)));
evalcond[5]=(((r10*x7543))+((sj0*x7540))+((sj0*x7541))+(((-1.0)*x7539*x7542))+(((-1.0)*r12*x7544)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x7546=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x7546;
j4eval[1]=IKsign(x7546);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x7547=((1.0)*cj5);
IkReal x7548=((((-1.0)*r21*x7547))+(((-1.0)*r20*sj5)));
j4eval[0]=x7548;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x7547))))));
j4eval[2]=IKsign(x7548);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x7549=cj5*cj5;
IkReal x7550=r11*r11;
IkReal x7551=(cj5*r10);
IkReal x7552=(r11*sj5);
IkReal x7553=((((-1.0)*x7549*(r10*r10)))+(((2.0)*x7551*x7552))+((x7549*x7550))+(((-1.0)*x7550))+(((-1.0)*(r12*r12))));
j4eval[0]=x7553;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*x7552))+x7551))));
j4eval[2]=IKsign(x7553);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7554=cj5*cj5;
IkReal x7555=r11*r11;
IkReal x7556=(cj5*r10);
IkReal x7557=(r11*sj5);
CheckValue<IkReal> x7558=IKPowWithIntegerCheck(IKsign(((((-1.0)*x7555))+(((2.0)*x7556*x7557))+(((-1.0)*(r12*r12)))+(((-1.0)*x7554*(r10*r10)))+((x7554*x7555)))),-1);
if(!x7558.valid){
continue;
}
CheckValue<IkReal> x7559 = IKatan2WithCheck(IkReal(((((-1.0)*x7557))+x7556)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x7559.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7558.value)))+(x7559.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7560=IKsin(j4);
IkReal x7561=IKcos(j4);
IkReal x7562=(cj5*r10);
IkReal x7563=(r01*sj5);
IkReal x7564=(cj5*r00);
IkReal x7565=(cj5*r20);
IkReal x7566=((1.0)*x7561);
IkReal x7567=((1.0)*x7560);
IkReal x7568=(sj5*x7560);
evalcond[0]=((((-1.0)*x7565*x7567))+(((-1.0)*r22*x7566))+((r21*x7568)));
evalcond[1]=((((-1.0)*r02*x7566))+(((-1.0)*x7564*x7567))+((x7560*x7563)));
evalcond[2]=((((-1.0)*r12*x7567))+((x7561*x7562))+(((-1.0)*r11*sj5*x7566)));
evalcond[3]=((-1.0)+(((-1.0)*x7562*x7567))+((r11*x7568))+(((-1.0)*r12*x7566)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x7563*x7566))+(((-1.0)*r02*x7567))+((cj1*sj2))+((x7561*x7564)));
evalcond[5]=((((-1.0)*r22*x7567))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r21*sj5*x7566))+((x7561*x7565)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7569=((1.0)*cj5);
CheckValue<IkReal> x7570=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x7569))+(((-1.0)*r20*sj5)))),-1);
if(!x7570.valid){
continue;
}
CheckValue<IkReal> x7571 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x7569)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7571.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7570.value)))+(x7571.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7572=IKsin(j4);
IkReal x7573=IKcos(j4);
IkReal x7574=(cj5*r10);
IkReal x7575=(r01*sj5);
IkReal x7576=(cj5*r00);
IkReal x7577=(cj5*r20);
IkReal x7578=((1.0)*x7573);
IkReal x7579=((1.0)*x7572);
IkReal x7580=(sj5*x7572);
evalcond[0]=((((-1.0)*x7577*x7579))+(((-1.0)*r22*x7578))+((r21*x7580)));
evalcond[1]=((((-1.0)*x7576*x7579))+(((-1.0)*r02*x7578))+((x7572*x7575)));
evalcond[2]=(((x7573*x7574))+(((-1.0)*r11*sj5*x7578))+(((-1.0)*r12*x7579)));
evalcond[3]=((-1.0)+(((-1.0)*x7574*x7579))+(((-1.0)*r12*x7578))+((r11*x7580)));
evalcond[4]=(((cj2*sj1))+((x7573*x7576))+((cj1*sj2))+(((-1.0)*r02*x7579))+(((-1.0)*x7575*x7578)));
evalcond[5]=(((x7573*x7577))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x7579))+(((-1.0)*r21*sj5*x7578)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7581 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7581.valid){
continue;
}
CheckValue<IkReal> x7582=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x7582.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7581.value)+(((1.5707963267949)*(x7582.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7583=IKsin(j4);
IkReal x7584=IKcos(j4);
IkReal x7585=(cj5*r10);
IkReal x7586=(r01*sj5);
IkReal x7587=(cj5*r00);
IkReal x7588=(cj5*r20);
IkReal x7589=((1.0)*x7584);
IkReal x7590=((1.0)*x7583);
IkReal x7591=(sj5*x7583);
evalcond[0]=((((-1.0)*r22*x7589))+((r21*x7591))+(((-1.0)*x7588*x7590)));
evalcond[1]=(((x7583*x7586))+(((-1.0)*x7587*x7590))+(((-1.0)*r02*x7589)));
evalcond[2]=((((-1.0)*r12*x7590))+(((-1.0)*r11*sj5*x7589))+((x7584*x7585)));
evalcond[3]=((-1.0)+((r11*x7591))+(((-1.0)*r12*x7589))+(((-1.0)*x7585*x7590)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x7586*x7589))+((cj1*sj2))+((x7584*x7587))+(((-1.0)*r02*x7590)));
evalcond[5]=((((-1.0)*r21*sj5*x7589))+(((-1.0)*r22*x7590))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x7584*x7588)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x7592=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x7592;
j4eval[1]=IKsign(x7592);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x7593=((1.0)*cj5);
IkReal x7594=((((-1.0)*r00*sj5))+(((-1.0)*r01*x7593)));
j4eval[0]=x7594;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x7593))))));
j4eval[2]=IKsign(x7594);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x7595=cj5*cj5;
IkReal x7596=r11*r11;
IkReal x7597=(r11*sj5);
IkReal x7598=(cj5*r10);
IkReal x7599=((r12*r12)+((x7595*(r10*r10)))+(((-2.0)*x7597*x7598))+x7596+(((-1.0)*x7595*x7596)));
j4eval[0]=x7599;
j4eval[1]=IKsign(x7599);
j4eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*x7597))+x7598))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7600=cj5*cj5;
IkReal x7601=r11*r11;
IkReal x7602=(cj5*r10);
IkReal x7603=(r11*sj5);
CheckValue<IkReal> x7604 = IKatan2WithCheck(IkReal(((((-1.0)*x7603))+x7602)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x7604.valid){
continue;
}
CheckValue<IkReal> x7605=IKPowWithIntegerCheck(IKsign(((r12*r12)+((x7600*(r10*r10)))+(((-2.0)*x7602*x7603))+(((-1.0)*x7600*x7601))+x7601)),-1);
if(!x7605.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7604.value)+(((1.5707963267949)*(x7605.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7606=IKsin(j4);
IkReal x7607=IKcos(j4);
IkReal x7608=(cj5*r10);
IkReal x7609=(r01*sj5);
IkReal x7610=((1.0)*cj2);
IkReal x7611=(cj5*r00);
IkReal x7612=(cj5*r20);
IkReal x7613=((1.0)*x7607);
IkReal x7614=((1.0)*x7606);
IkReal x7615=(sj5*x7606);
evalcond[0]=(((r21*x7615))+(((-1.0)*r22*x7613))+(((-1.0)*x7612*x7614)));
evalcond[1]=(((x7606*x7609))+(((-1.0)*x7611*x7614))+(((-1.0)*r02*x7613)));
evalcond[2]=((((-1.0)*r12*x7614))+(((-1.0)*r11*sj5*x7613))+((x7607*x7608)));
evalcond[3]=((1.0)+(((-1.0)*r12*x7613))+((r11*x7615))+(((-1.0)*x7608*x7614)));
evalcond[4]=((((-1.0)*r22*x7614))+((sj1*sj2))+((x7607*x7612))+(((-1.0)*cj1*x7610))+(((-1.0)*r21*sj5*x7613)));
evalcond[5]=((((-1.0)*cj1*sj2))+(((-1.0)*r02*x7614))+((x7607*x7611))+(((-1.0)*sj1*x7610))+(((-1.0)*x7609*x7613)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7616=((1.0)*cj5);
CheckValue<IkReal> x7617 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x7616)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7617.valid){
continue;
}
CheckValue<IkReal> x7618=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x7616)))),-1);
if(!x7618.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7617.value)+(((1.5707963267949)*(x7618.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7619=IKsin(j4);
IkReal x7620=IKcos(j4);
IkReal x7621=(cj5*r10);
IkReal x7622=(r01*sj5);
IkReal x7623=((1.0)*cj2);
IkReal x7624=(cj5*r00);
IkReal x7625=(cj5*r20);
IkReal x7626=((1.0)*x7620);
IkReal x7627=((1.0)*x7619);
IkReal x7628=(sj5*x7619);
evalcond[0]=(((r21*x7628))+(((-1.0)*x7625*x7627))+(((-1.0)*r22*x7626)));
evalcond[1]=((((-1.0)*x7624*x7627))+((x7619*x7622))+(((-1.0)*r02*x7626)));
evalcond[2]=((((-1.0)*r11*sj5*x7626))+((x7620*x7621))+(((-1.0)*r12*x7627)));
evalcond[3]=((1.0)+(((-1.0)*x7621*x7627))+(((-1.0)*r12*x7626))+((r11*x7628)));
evalcond[4]=((((-1.0)*r21*sj5*x7626))+((x7620*x7625))+((sj1*sj2))+(((-1.0)*cj1*x7623))+(((-1.0)*r22*x7627)));
evalcond[5]=((((-1.0)*sj1*x7623))+(((-1.0)*x7622*x7626))+((x7620*x7624))+(((-1.0)*cj1*sj2))+(((-1.0)*r02*x7627)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7629=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x7629.valid){
continue;
}
CheckValue<IkReal> x7630 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7630.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7629.value)))+(x7630.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7631=IKsin(j4);
IkReal x7632=IKcos(j4);
IkReal x7633=(cj5*r10);
IkReal x7634=(r01*sj5);
IkReal x7635=((1.0)*cj2);
IkReal x7636=(cj5*r00);
IkReal x7637=(cj5*r20);
IkReal x7638=((1.0)*x7632);
IkReal x7639=((1.0)*x7631);
IkReal x7640=(sj5*x7631);
evalcond[0]=((((-1.0)*r22*x7638))+((r21*x7640))+(((-1.0)*x7637*x7639)));
evalcond[1]=(((x7631*x7634))+(((-1.0)*x7636*x7639))+(((-1.0)*r02*x7638)));
evalcond[2]=(((x7632*x7633))+(((-1.0)*r11*sj5*x7638))+(((-1.0)*r12*x7639)));
evalcond[3]=((1.0)+(((-1.0)*x7633*x7639))+((r11*x7640))+(((-1.0)*r12*x7638)));
evalcond[4]=((((-1.0)*r22*x7639))+((x7632*x7637))+((sj1*sj2))+(((-1.0)*r21*sj5*x7638))+(((-1.0)*cj1*x7635)));
evalcond[5]=(((x7632*x7636))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x7635))+(((-1.0)*x7634*x7638))+(((-1.0)*r02*x7639)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x7641=((-1.0)*py);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x7641);
rxp0_2=(py*r00);
rxp1_0=(r21*x7641);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7642=((-1.0)*py);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x7642);
rxp0_2=(py*r00);
rxp1_0=(r21*x7642);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7643=((-1.0)*py);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x7643);
rxp0_2=(py*r00);
rxp1_0=(r21*x7643);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=((((-1.0)*r01*sj5))+((cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x7646=IKPowWithIntegerCheck(((((-1.0)*r01*sj5))+((cj5*r00))),-1);
if(!x7646.valid){
continue;
}
IkReal x7644=x7646.value;
IkReal x7645=((1.0)*cj0*x7644);
cj4array[0]=((((-1.0)*cj2*sj1*x7645))+(((-1.0)*cj1*sj2*x7645)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x7647=IKsin(j4);
IkReal x7648=IKcos(j4);
IkReal x7649=(r21*sj5);
IkReal x7650=((1.0)*x7648);
IkReal x7651=((1.0)*cj5*x7647);
evalcond[0]=((-1.0)*r12*x7647);
evalcond[1]=((((-1.0)*r12*x7650))+(((-1.0)*cj0)));
evalcond[2]=((((-1.0)*r20*x7651))+((x7647*x7649)));
evalcond[3]=((((-1.0)*r00*x7651))+((r01*sj5*x7647)));
evalcond[4]=((((-1.0)*x7649*x7650))+((cj5*r20*x7648))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x7653=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x7653.valid){
continue;
}
IkReal x7652=x7653.value;
cj4array[0]=((((-1.0)*sj1*sj2*x7652))+((cj1*cj2*x7652)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x7654=IKsin(j4);
IkReal x7655=IKcos(j4);
IkReal x7656=(cj5*r00);
IkReal x7657=((1.0)*x7654);
IkReal x7658=(sj5*x7654);
IkReal x7659=((1.0)*x7655);
evalcond[0]=((-1.0)*r12*x7654);
evalcond[1]=((((-1.0)*r12*x7659))+(((-1.0)*cj0)));
evalcond[2]=((((-1.0)*cj5*r20*x7657))+((r21*x7658)));
evalcond[3]=((((-1.0)*x7656*x7657))+((r01*x7658)));
evalcond[4]=((((-1.0)*r01*sj5*x7659))+((x7655*x7656))+((cj0*cj2*sj1))+((cj0*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x7660=IKPowWithIntegerCheck(r12,-1);
if(!x7660.valid){
continue;
}
cj4array[0]=((-1.0)*cj0*(x7660.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x7661=IKsin(j4);
IkReal x7662=IKcos(j4);
IkReal x7663=(cj5*r00);
IkReal x7664=(cj5*r20);
IkReal x7665=(r21*sj5);
IkReal x7666=(r01*sj5);
IkReal x7667=((1.0)*x7661);
IkReal x7668=((1.0)*x7662);
evalcond[0]=((-1.0)*r12*x7661);
evalcond[1]=(((x7661*x7665))+(((-1.0)*x7664*x7667)));
evalcond[2]=(((x7661*x7666))+(((-1.0)*x7663*x7667)));
evalcond[3]=(((x7662*x7664))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x7665*x7668)));
evalcond[4]=(((x7662*x7663))+(((-1.0)*x7666*x7668))+((cj0*cj2*sj1))+((cj0*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7669=((1.0)*cj5);
CheckValue<IkReal> x7670 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((r11*sj0*sj5))+(((-1.0)*cj0*r00*x7669))+(((-1.0)*r10*sj0*x7669))+((cj0*r01*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7670.valid){
continue;
}
CheckValue<IkReal> x7671=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x7669))+(((-1.0)*r20*sj5)))),-1);
if(!x7671.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7670.value)+(((1.5707963267949)*(x7671.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7672=IKsin(j4);
IkReal x7673=IKcos(j4);
IkReal x7674=(cj5*r10);
IkReal x7675=(cj2*sj1);
IkReal x7676=(r01*sj5);
IkReal x7677=(cj5*r00);
IkReal x7678=(cj5*r20);
IkReal x7679=(cj1*sj2);
IkReal x7680=((1.0)*x7673);
IkReal x7681=((1.0)*x7672);
IkReal x7682=(sj5*x7672);
evalcond[0]=((((-1.0)*r22*x7680))+((r21*x7682))+(((-1.0)*x7678*x7681)));
evalcond[1]=(((x7672*x7676))+sj0+(((-1.0)*x7677*x7681))+(((-1.0)*r02*x7680)));
evalcond[2]=(((r11*x7682))+(((-1.0)*x7674*x7681))+(((-1.0)*r12*x7680))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*r21*sj5*x7680))+(((-1.0)*r22*x7681))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x7673*x7678)));
evalcond[4]=((((-1.0)*x7676*x7680))+((cj0*x7679))+((cj0*x7675))+((x7673*x7677))+(((-1.0)*r02*x7681)));
evalcond[5]=(((sj0*x7679))+((sj0*x7675))+(((-1.0)*r11*sj5*x7680))+(((-1.0)*r12*x7681))+((x7673*x7674)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7683=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x7683.valid){
continue;
}
CheckValue<IkReal> x7684 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7684.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7683.value)))+(x7684.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7685=IKsin(j4);
IkReal x7686=IKcos(j4);
IkReal x7687=(cj5*r10);
IkReal x7688=(cj2*sj1);
IkReal x7689=(r01*sj5);
IkReal x7690=(cj5*r00);
IkReal x7691=(cj5*r20);
IkReal x7692=(cj1*sj2);
IkReal x7693=((1.0)*x7686);
IkReal x7694=((1.0)*x7685);
IkReal x7695=(sj5*x7685);
evalcond[0]=((((-1.0)*x7691*x7694))+(((-1.0)*r22*x7693))+((r21*x7695)));
evalcond[1]=((((-1.0)*r02*x7693))+sj0+((x7685*x7689))+(((-1.0)*x7690*x7694)));
evalcond[2]=((((-1.0)*x7687*x7694))+((r11*x7695))+(((-1.0)*r12*x7693))+(((-1.0)*cj0)));
evalcond[3]=(((x7686*x7691))+(((-1.0)*r21*sj5*x7693))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x7694)));
evalcond[4]=((((-1.0)*r02*x7694))+((x7686*x7690))+((cj0*x7688))+((cj0*x7692))+(((-1.0)*x7689*x7693)));
evalcond[5]=(((x7686*x7687))+((sj0*x7688))+((sj0*x7692))+(((-1.0)*r11*sj5*x7693))+(((-1.0)*r12*x7694)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7696=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x7696.valid){
continue;
}
CheckValue<IkReal> x7697 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7697.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7696.value)))+(x7697.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7698=IKsin(j4);
IkReal x7699=IKcos(j4);
IkReal x7700=(cj5*r10);
IkReal x7701=(cj2*sj1);
IkReal x7702=(r01*sj5);
IkReal x7703=(cj5*r00);
IkReal x7704=(cj5*r20);
IkReal x7705=(cj1*sj2);
IkReal x7706=((1.0)*x7699);
IkReal x7707=((1.0)*x7698);
IkReal x7708=(sj5*x7698);
evalcond[0]=(((r21*x7708))+(((-1.0)*r22*x7706))+(((-1.0)*x7704*x7707)));
evalcond[1]=(((x7698*x7702))+sj0+(((-1.0)*x7703*x7707))+(((-1.0)*r02*x7706)));
evalcond[2]=(((r11*x7708))+(((-1.0)*r12*x7706))+(((-1.0)*x7700*x7707))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*r21*sj5*x7706))+(((-1.0)*r22*x7707))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x7699*x7704)));
evalcond[4]=(((cj0*x7705))+((cj0*x7701))+(((-1.0)*x7702*x7706))+(((-1.0)*r02*x7707))+((x7699*x7703)));
evalcond[5]=((((-1.0)*r11*sj5*x7706))+((sj0*x7701))+((sj0*x7705))+(((-1.0)*r12*x7707))+((x7699*x7700)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x7709=cj1*cj1;
IkReal x7710=cj2*cj2;
IkReal x7711=((214000.0)*py);
IkReal x7712=(cj2*sj1);
IkReal x7713=(cj1*sj2);
IkReal x7714=((13530.0)*sj5);
IkReal x7715=(r00*sj5);
IkReal x7716=((26730.0)*sj1);
IkReal x7717=(cj5*r11);
IkReal x7718=(cj5*r01);
IkReal x7719=((104004.0)*cj2);
IkReal x7720=((243000.0)*sj1);
IkReal x7721=((214000.0)*px);
IkReal x7722=(r10*sj5);
CheckValue<IkReal> x7723=IKPowWithIntegerCheck(IKsign(((-74178.0)+(((-45796.0)*x7710))+(((-1.0)*x7719))+(((91592.0)*x7709*x7710))+(((13253.0)*x7709))+((x7709*x7719))+(((-104004.0)*sj1*x7713))+(((-91592.0)*x7712*x7713)))),-1);
if(!x7723.valid){
continue;
}
CheckValue<IkReal> x7724 = IKatan2WithCheck(IkReal(((((23540.0)*x7712*x7722))+(((23540.0)*x7713*x7717))+(((-13530.0)*x7718))+((x7716*x7722))+(((-123000.0)*px))+((x7711*x7712))+((x7711*x7713))+(((-1.0)*r00*x7714))+(((23540.0)*x7712*x7717))+((py*x7720))+(((23540.0)*x7713*x7722))+((x7716*x7717)))),IkReal(((((13530.0)*x7717))+((x7713*x7721))+((x7712*x7721))+(((23540.0)*x7713*x7715))+(((23540.0)*x7713*x7718))+((x7715*x7716))+(((23540.0)*x7712*x7715))+(((23540.0)*x7712*x7718))+(((123000.0)*py))+((x7716*x7718))+((r10*x7714))+((px*x7720)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7724.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7723.value)))+(x7724.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x7725=IKcos(j0);
IkReal x7726=IKsin(j0);
IkReal x7727=((0.243)*sj1);
IkReal x7728=((0.11)*cj5);
IkReal x7729=((0.11)*sj5);
IkReal x7730=((0.214)*cj1*sj2);
IkReal x7731=((0.214)*cj2*sj1);
evalcond[0]=((((-1.0)*r01*x7728))+(((-1.0)*x7725*x7727))+(((0.123)*x7726))+(((-1.0)*px))+(((-1.0)*x7725*x7731))+(((-1.0)*x7725*x7730))+(((-1.0)*r00*x7729)));
evalcond[1]=((((-1.0)*x7726*x7727))+(((-1.0)*py))+(((-0.123)*x7725))+(((-1.0)*x7726*x7731))+(((-1.0)*x7726*x7730))+(((-1.0)*r10*x7729))+(((-1.0)*r11*x7728)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
IkReal x7732=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x7732;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x7732);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x7733=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x7733;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7733);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x7734=((1.0)*cj5);
IkReal x7735=((((-1.0)*r21*x7734))+(((-1.0)*r20*sj5)));
j4eval[0]=x7735;
j4eval[1]=((IKabs((((r12*sj0))+((cj0*r02)))))+(IKabs((((r11*sj0*sj5))+(((-1.0)*r10*sj0*x7734))+((cj0*r01*sj5))+(((-1.0)*cj0*r00*x7734))))));
j4eval[2]=IKsign(x7735);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x7736=((-1.0)*r20);
IkReal x7738 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x7738)==0){
continue;
}
IkReal x7737=pow(x7738,-0.5);
CheckValue<IkReal> x7739 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7736),IKFAST_ATAN2_MAGTHRESH);
if(!x7739.valid){
continue;
}
IkReal gconst0=((-1.0)*(x7739.value));
IkReal gconst1=(r21*x7737);
IkReal gconst2=(x7736*x7737);
CheckValue<IkReal> x7740 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7740.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x7740.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x7741=((-1.0)*r20);
IkReal x7742=x7737;
CheckValue<IkReal> x7744 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7741),IKFAST_ATAN2_MAGTHRESH);
if(!x7744.valid){
continue;
}
IkReal x7743=((-1.0)*(x7744.value));
sj5=gconst1;
cj5=gconst2;
j5=x7743;
IkReal gconst0=x7743;
IkReal gconst1=(r21*x7742);
IkReal gconst2=(x7741*x7742);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7745=((-1.0)*r20);
IkReal x7746=x7737;
CheckValue<IkReal> x7748 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7745),IKFAST_ATAN2_MAGTHRESH);
if(!x7748.valid){
continue;
}
IkReal x7747=((-1.0)*(x7748.value));
sj5=gconst1;
cj5=gconst2;
j5=x7747;
IkReal gconst0=x7747;
IkReal gconst1=(r21*x7746);
IkReal gconst2=(x7745*x7746);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x7749=((-1.0)*r20);
IkReal x7750=x7737;
CheckValue<IkReal> x7752 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7749),IKFAST_ATAN2_MAGTHRESH);
if(!x7752.valid){
continue;
}
IkReal x7751=((-1.0)*(x7752.value));
sj5=gconst1;
cj5=gconst2;
j5=x7751;
IkReal gconst0=x7751;
IkReal gconst1=(r21*x7750);
IkReal gconst2=(x7749*x7750);
IkReal x7753=r22*r22;
CheckValue<IkReal> x7757=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x7753))),-1);
if(!x7757.valid){
continue;
}
IkReal x7754=x7757.value;
IkReal x7755=(cj3*x7754);
IkReal x7756=(((x7755*(r21*r21*r21*r21)))+(((2.0)*x7755*(r20*r20)*(r21*r21)))+((cj3*x7753))+((x7755*(r20*r20*r20*r20))));
j4eval[0]=x7756;
j4eval[1]=IKsign(x7756);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x7758=((-1.0)*r20);
IkReal x7759=x7737;
CheckValue<IkReal> x7761 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7758),IKFAST_ATAN2_MAGTHRESH);
if(!x7761.valid){
continue;
}
IkReal x7760=((-1.0)*(x7761.value));
sj5=gconst1;
cj5=gconst2;
j5=x7760;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst0=x7760;
IkReal gconst1=(r21*x7759);
IkReal gconst2=(x7758*x7759);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7762=((-1.0)*r20);
IkReal x7763=x7737;
CheckValue<IkReal> x7765 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7762),IKFAST_ATAN2_MAGTHRESH);
if(!x7765.valid){
continue;
}
IkReal x7764=((-1.0)*(x7765.value));
sj5=gconst1;
cj5=gconst2;
j5=x7764;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst0=x7764;
IkReal gconst1=(r21*x7763);
IkReal gconst2=(x7762*x7763);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x7766=((-1.0)*r20);
IkReal x7767=x7737;
CheckValue<IkReal> x7769 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7766),IKFAST_ATAN2_MAGTHRESH);
if(!x7769.valid){
continue;
}
IkReal x7768=((-1.0)*(x7769.value));
sj5=gconst1;
cj5=gconst2;
j5=x7768;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst0=x7768;
IkReal gconst1=(r21*x7767);
IkReal gconst2=(x7766*x7767);
IkReal x7770=((1.0)*(r22*r22));
CheckValue<IkReal> x7774=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x7770))),-1);
if(!x7774.valid){
continue;
}
IkReal x7771=x7774.value;
IkReal x7772=((1.0)*x7771);
IkReal x7773=((((-2.0)*x7771*(r20*r20)*(r21*r21)))+(((-1.0)*x7772*(r20*r20*r20*r20)))+(((-1.0)*x7770))+(((-1.0)*x7772*(r21*r21*r21*r21))));
j4eval[0]=x7773;
j4eval[1]=IKsign(x7773);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x7775=((-1.0)*r20);
IkReal x7776=x7737;
CheckValue<IkReal> x7778 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7775),IKFAST_ATAN2_MAGTHRESH);
if(!x7778.valid){
continue;
}
IkReal x7777=((-1.0)*(x7778.value));
sj5=gconst1;
cj5=gconst2;
j5=x7777;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x7777;
IkReal gconst1=(r21*x7776);
IkReal gconst2=(x7775*x7776);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x7779=((-1.0)*r20);
IkReal x7780=x7737;
CheckValue<IkReal> x7782 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7779),IKFAST_ATAN2_MAGTHRESH);
if(!x7782.valid){
continue;
}
IkReal x7781=((-1.0)*(x7782.value));
sj5=gconst1;
cj5=gconst2;
j5=x7781;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x7781;
IkReal gconst1=(r21*x7780);
IkReal gconst2=(x7779*x7780);
IkReal x7783=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x7787=IKPowWithIntegerCheck(x7783,-1);
if(!x7787.valid){
continue;
}
IkReal x7784=x7787.value;
IkReal x7785=((1.0)*x7784);
IkReal x7786=((((-1.0)*(r02*r02)))+(((-1.0)*x7785*(r00*r00)*(r20*r20)))+(((-2.0)*r00*r01*r20*r21*x7784))+(((-1.0)*x7785*(r01*r01)*(r21*r21))));
j4eval[0]=x7786;
j4eval[1]=IKsign(x7786);
j4eval[2]=r02;
j4eval[3]=x7783;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7788=((-1.0)*r20);
IkReal x7789=x7737;
CheckValue<IkReal> x7791 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7788),IKFAST_ATAN2_MAGTHRESH);
if(!x7791.valid){
continue;
}
IkReal x7790=((-1.0)*(x7791.value));
sj5=gconst1;
cj5=gconst2;
j5=x7790;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x7790;
IkReal gconst1=(r21*x7789);
IkReal gconst2=(x7788*x7789);
IkReal x7792=r22*r22;
IkReal x7793=(r02*sj1*sj2);
IkReal x7794=(cj1*cj2*r02);
CheckValue<IkReal> x7798=IKPowWithIntegerCheck(((-1.0)+x7792),-1);
if(!x7798.valid){
continue;
}
IkReal x7795=x7798.value;
if((((1.0)+(((-1.0)*x7792)))) < -0.00001)
continue;
IkReal x7796=IKsqrt(((1.0)+(((-1.0)*x7792))));
IkReal x7797=(r22*x7795*x7796);
j4eval[0]=((IKabs(((((-1.0)*x7793))+x7794)))+(IKabs((((x7793*x7797))+(((-1.0)*x7794*x7797))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7799=(gconst2*r00);
IkReal x7800=(gconst1*r01);
IkReal x7801=(cj1*cj2);
IkReal x7802=((1.0)*sj1*sj2);
CheckValue<IkReal> x7803 = IKatan2WithCheck(IkReal((((x7799*x7801))+(((-1.0)*x7800*x7801))+((sj1*sj2*x7800))+(((-1.0)*x7799*x7802)))),IkReal(((((-1.0)*r02*x7802))+((r02*x7801)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7803.valid){
continue;
}
CheckValue<IkReal> x7804=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x7804.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7803.value)+(((1.5707963267949)*(x7804.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7805=IKcos(j4);
IkReal x7806=IKsin(j4);
IkReal x7807=((1.0)*x7805);
IkReal x7808=(gconst1*x7805);
IkReal x7809=(gconst1*x7806);
IkReal x7810=((1.0)*gconst2*x7806);
evalcond[0]=(((r01*x7808))+((r02*x7806))+(((-1.0)*gconst2*r00*x7807)));
evalcond[1]=((((-1.0)*r20*x7810))+((r21*x7809))+(((-1.0)*r22*x7807)));
evalcond[2]=(((r11*x7809))+(((-1.0)*r12*x7807))+(((-1.0)*r10*x7810)));
evalcond[3]=((1.0)+(((-1.0)*r02*x7807))+((r01*x7809))+(((-1.0)*r00*x7810)));
evalcond[4]=(((cj2*sj1))+((r11*x7808))+(((-1.0)*gconst2*r10*x7807))+((cj1*sj2))+((r12*x7806)));
evalcond[5]=(((r21*x7808))+((r22*x7806))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst2*r20*x7807)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7811=(gconst1*r01);
IkReal x7812=(gconst2*r00);
CheckValue<IkReal> x7813 = IKatan2WithCheck(IkReal(((((-1.0)*x7812))+x7811)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x7813.valid){
continue;
}
CheckValue<IkReal> x7814=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r02*r02)))+(((2.0)*x7811*x7812))+(((-1.0)*(x7811*x7811)))+(((-1.0)*(x7812*x7812))))),-1);
if(!x7814.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7813.value)+(((1.5707963267949)*(x7814.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7815=IKcos(j4);
IkReal x7816=IKsin(j4);
IkReal x7817=((1.0)*x7815);
IkReal x7818=(gconst1*x7815);
IkReal x7819=(gconst1*x7816);
IkReal x7820=((1.0)*gconst2*x7816);
evalcond[0]=(((r02*x7816))+(((-1.0)*gconst2*r00*x7817))+((r01*x7818)));
evalcond[1]=((((-1.0)*r20*x7820))+(((-1.0)*r22*x7817))+((r21*x7819)));
evalcond[2]=(((r11*x7819))+(((-1.0)*r10*x7820))+(((-1.0)*r12*x7817)));
evalcond[3]=((1.0)+(((-1.0)*r00*x7820))+(((-1.0)*r02*x7817))+((r01*x7819)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst2*r10*x7817))+((r11*x7818))+((cj1*sj2))+((r12*x7816)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r21*x7818))+(((-1.0)*gconst2*r20*x7817))+((r22*x7816)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7821 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst2*r20))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7821.valid){
continue;
}
CheckValue<IkReal> x7822=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x7822.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7821.value)+(((1.5707963267949)*(x7822.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7823=IKcos(j4);
IkReal x7824=IKsin(j4);
IkReal x7825=((1.0)*x7823);
IkReal x7826=(gconst1*x7823);
IkReal x7827=(gconst1*x7824);
IkReal x7828=((1.0)*gconst2*x7824);
evalcond[0]=(((r02*x7824))+((r01*x7826))+(((-1.0)*gconst2*r00*x7825)));
evalcond[1]=((((-1.0)*r20*x7828))+((r21*x7827))+(((-1.0)*r22*x7825)));
evalcond[2]=(((r11*x7827))+(((-1.0)*r10*x7828))+(((-1.0)*r12*x7825)));
evalcond[3]=((1.0)+(((-1.0)*r00*x7828))+(((-1.0)*r02*x7825))+((r01*x7827)));
evalcond[4]=(((cj2*sj1))+((r12*x7824))+((cj1*sj2))+((r11*x7826))+(((-1.0)*gconst2*r10*x7825)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r21*x7826))+(((-1.0)*gconst2*r20*x7825))+((r22*x7824)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x7829=((-1.0)*r20);
IkReal x7830=x7737;
CheckValue<IkReal> x7832 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7829),IKFAST_ATAN2_MAGTHRESH);
if(!x7832.valid){
continue;
}
IkReal x7831=((-1.0)*(x7832.value));
sj5=gconst1;
cj5=gconst2;
j5=x7831;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x7831;
IkReal gconst1=(r21*x7830);
IkReal gconst2=(x7829*x7830);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x7833=((-1.0)*r20);
IkReal x7834=x7737;
CheckValue<IkReal> x7836 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7833),IKFAST_ATAN2_MAGTHRESH);
if(!x7836.valid){
continue;
}
IkReal x7835=((-1.0)*(x7836.value));
sj5=gconst1;
cj5=gconst2;
j5=x7835;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x7835;
IkReal gconst1=(r21*x7834);
IkReal gconst2=(x7833*x7834);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7837=((-1.0)*r20);
IkReal x7838=x7737;
CheckValue<IkReal> x7840 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7837),IKFAST_ATAN2_MAGTHRESH);
if(!x7840.valid){
continue;
}
IkReal x7839=((-1.0)*(x7840.value));
sj5=gconst1;
cj5=gconst2;
j5=x7839;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x7839;
IkReal gconst1=(r21*x7838);
IkReal gconst2=(x7837*x7838);
IkReal x7841=r22*r22;
IkReal x7842=(r02*sj1*sj2);
IkReal x7843=(cj1*cj2*r02);
CheckValue<IkReal> x7847=IKPowWithIntegerCheck(((-1.0)+x7841),-1);
if(!x7847.valid){
continue;
}
IkReal x7844=x7847.value;
if((((1.0)+(((-1.0)*x7841)))) < -0.00001)
continue;
IkReal x7845=IKsqrt(((1.0)+(((-1.0)*x7841))));
IkReal x7846=(r22*x7844*x7845);
j4eval[0]=((IKabs((((x7842*x7846))+(((-1.0)*x7843*x7846)))))+(IKabs(((((-1.0)*x7842))+x7843))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7848=(gconst2*r00);
IkReal x7849=(gconst1*r01);
IkReal x7850=(cj1*cj2);
IkReal x7851=((1.0)*sj1*sj2);
CheckValue<IkReal> x7852 = IKatan2WithCheck(IkReal(((((-1.0)*x7848*x7851))+((x7848*x7850))+((sj1*sj2*x7849))+(((-1.0)*x7849*x7850)))),IkReal((((r02*x7850))+(((-1.0)*r02*x7851)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7852.valid){
continue;
}
CheckValue<IkReal> x7853=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x7853.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7852.value)+(((1.5707963267949)*(x7853.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7854=IKcos(j4);
IkReal x7855=IKsin(j4);
IkReal x7856=((1.0)*cj2);
IkReal x7857=((1.0)*x7854);
IkReal x7858=(gconst1*x7854);
IkReal x7859=(gconst1*x7855);
IkReal x7860=((1.0)*gconst2*x7855);
evalcond[0]=(((r02*x7855))+(((-1.0)*gconst2*r00*x7857))+((r01*x7858)));
evalcond[1]=(((r21*x7859))+(((-1.0)*r20*x7860))+(((-1.0)*r22*x7857)));
evalcond[2]=(((r11*x7859))+(((-1.0)*r10*x7860))+(((-1.0)*r12*x7857)));
evalcond[3]=((-1.0)+(((-1.0)*r00*x7860))+((r01*x7859))+(((-1.0)*r02*x7857)));
evalcond[4]=(((r22*x7855))+((r21*x7858))+((sj1*sj2))+(((-1.0)*cj1*x7856))+(((-1.0)*gconst2*r20*x7857)));
evalcond[5]=(((r12*x7855))+((r11*x7858))+(((-1.0)*gconst2*r10*x7857))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x7856)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7861=(gconst1*r01);
IkReal x7862=(gconst2*r00);
CheckValue<IkReal> x7863=IKPowWithIntegerCheck(IKsign(((x7861*x7861)+(((-2.0)*x7861*x7862))+(x7862*x7862)+(r02*r02))),-1);
if(!x7863.valid){
continue;
}
CheckValue<IkReal> x7864 = IKatan2WithCheck(IkReal((x7861+(((-1.0)*x7862)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x7864.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7863.value)))+(x7864.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7865=IKcos(j4);
IkReal x7866=IKsin(j4);
IkReal x7867=((1.0)*cj2);
IkReal x7868=((1.0)*x7865);
IkReal x7869=(gconst1*x7865);
IkReal x7870=(gconst1*x7866);
IkReal x7871=((1.0)*gconst2*x7866);
evalcond[0]=(((r01*x7869))+(((-1.0)*gconst2*r00*x7868))+((r02*x7866)));
evalcond[1]=((((-1.0)*r20*x7871))+((r21*x7870))+(((-1.0)*r22*x7868)));
evalcond[2]=(((r11*x7870))+(((-1.0)*r12*x7868))+(((-1.0)*r10*x7871)));
evalcond[3]=((-1.0)+(((-1.0)*r00*x7871))+(((-1.0)*r02*x7868))+((r01*x7870)));
evalcond[4]=(((sj1*sj2))+(((-1.0)*cj1*x7867))+((r21*x7869))+((r22*x7866))+(((-1.0)*gconst2*r20*x7868)));
evalcond[5]=((((-1.0)*sj1*x7867))+((r11*x7869))+(((-1.0)*cj1*sj2))+((r12*x7866))+(((-1.0)*gconst2*r10*x7868)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7872=((1.0)*gconst2);
CheckValue<IkReal> x7873=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r10))+(((-1.0)*r11*x7872)))),-1);
if(!x7873.valid){
continue;
}
CheckValue<IkReal> x7874 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst1*r21))+(((-1.0)*r20*x7872)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7874.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7873.value)))+(x7874.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7875=IKcos(j4);
IkReal x7876=IKsin(j4);
IkReal x7877=((1.0)*cj2);
IkReal x7878=((1.0)*x7875);
IkReal x7879=(gconst1*x7875);
IkReal x7880=(gconst1*x7876);
IkReal x7881=((1.0)*gconst2*x7876);
evalcond[0]=((((-1.0)*gconst2*r00*x7878))+((r01*x7879))+((r02*x7876)));
evalcond[1]=((((-1.0)*r22*x7878))+((r21*x7880))+(((-1.0)*r20*x7881)));
evalcond[2]=((((-1.0)*r10*x7881))+(((-1.0)*r12*x7878))+((r11*x7880)));
evalcond[3]=((-1.0)+(((-1.0)*r00*x7881))+((r01*x7880))+(((-1.0)*r02*x7878)));
evalcond[4]=((((-1.0)*gconst2*r20*x7878))+((sj1*sj2))+(((-1.0)*cj1*x7877))+((r22*x7876))+((r21*x7879)));
evalcond[5]=((((-1.0)*sj1*x7877))+((r11*x7879))+(((-1.0)*cj1*sj2))+((r12*x7876))+(((-1.0)*gconst2*r10*x7878)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x7882=((-1.0)*r20);
IkReal x7883=x7737;
CheckValue<IkReal> x7885 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7882),IKFAST_ATAN2_MAGTHRESH);
if(!x7885.valid){
continue;
}
IkReal x7884=((-1.0)*(x7885.value));
sj5=gconst1;
cj5=gconst2;
j5=x7884;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x7884;
IkReal gconst1=(r21*x7883);
IkReal gconst2=(x7882*x7883);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x7886=((-1.0)*r20);
IkReal x7887=x7737;
CheckValue<IkReal> x7889 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7886),IKFAST_ATAN2_MAGTHRESH);
if(!x7889.valid){
continue;
}
IkReal x7888=((-1.0)*(x7889.value));
sj5=gconst1;
cj5=gconst2;
j5=x7888;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x7888;
IkReal gconst1=(r21*x7887);
IkReal gconst2=(x7886*x7887);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7890=((-1.0)*r20);
IkReal x7891=x7737;
CheckValue<IkReal> x7893 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7890),IKFAST_ATAN2_MAGTHRESH);
if(!x7893.valid){
continue;
}
IkReal x7892=((-1.0)*(x7893.value));
sj5=gconst1;
cj5=gconst2;
j5=x7892;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x7892;
IkReal gconst1=(r21*x7891);
IkReal gconst2=(x7890*x7891);
IkReal x7894=r22*r22;
IkReal x7895=(cj1*cj2*r12);
IkReal x7896=(r12*sj1*sj2);
CheckValue<IkReal> x7900=IKPowWithIntegerCheck(((-1.0)+x7894),-1);
if(!x7900.valid){
continue;
}
IkReal x7897=x7900.value;
if((((1.0)+(((-1.0)*x7894)))) < -0.00001)
continue;
IkReal x7898=IKsqrt(((1.0)+(((-1.0)*x7894))));
IkReal x7899=(r22*x7897*x7898);
j4eval[0]=((IKabs(((((-1.0)*x7895*x7899))+((x7896*x7899)))))+(IKabs((x7895+(((-1.0)*x7896))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7901=(sj1*sj2);
IkReal x7902=(gconst1*r11);
IkReal x7903=(cj1*cj2);
IkReal x7904=(gconst2*r10);
CheckValue<IkReal> x7905 = IKatan2WithCheck(IkReal((((x7903*x7904))+(((-1.0)*x7902*x7903))+(((-1.0)*x7901*x7904))+((x7901*x7902)))),IkReal(((((-1.0)*r12*x7901))+((r12*x7903)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7905.valid){
continue;
}
CheckValue<IkReal> x7906=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r00))+(((-1.0)*gconst2*r01)))),-1);
if(!x7906.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7905.value)+(((1.5707963267949)*(x7906.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7907=IKcos(j4);
IkReal x7908=IKsin(j4);
IkReal x7909=((1.0)*x7907);
IkReal x7910=(gconst1*x7907);
IkReal x7911=(gconst1*x7908);
IkReal x7912=((1.0)*gconst2*x7908);
evalcond[0]=(((r11*x7910))+(((-1.0)*gconst2*r10*x7909))+((r12*x7908)));
evalcond[1]=(((r21*x7911))+(((-1.0)*r20*x7912))+(((-1.0)*r22*x7909)));
evalcond[2]=(((r01*x7911))+(((-1.0)*r00*x7912))+(((-1.0)*r02*x7909)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x7909))+((r11*x7911))+(((-1.0)*r10*x7912)));
evalcond[4]=(((r02*x7908))+((cj2*sj1))+((cj1*sj2))+((r01*x7910))+(((-1.0)*gconst2*r00*x7909)));
evalcond[5]=(((r21*x7910))+(((-1.0)*gconst2*r20*x7909))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x7908)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7913=(gconst1*r11);
IkReal x7914=(gconst2*r10);
CheckValue<IkReal> x7915 = IKatan2WithCheck(IkReal(((((-1.0)*x7914))+x7913)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x7915.valid){
continue;
}
CheckValue<IkReal> x7916=IKPowWithIntegerCheck(IKsign(((r12*r12)+(x7914*x7914)+(x7913*x7913)+(((-2.0)*x7913*x7914)))),-1);
if(!x7916.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7915.value)+(((1.5707963267949)*(x7916.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7917=IKcos(j4);
IkReal x7918=IKsin(j4);
IkReal x7919=((1.0)*x7917);
IkReal x7920=(gconst1*x7917);
IkReal x7921=(gconst1*x7918);
IkReal x7922=((1.0)*gconst2*x7918);
evalcond[0]=((((-1.0)*gconst2*r10*x7919))+((r12*x7918))+((r11*x7920)));
evalcond[1]=((((-1.0)*r22*x7919))+(((-1.0)*r20*x7922))+((r21*x7921)));
evalcond[2]=((((-1.0)*r02*x7919))+((r01*x7921))+(((-1.0)*r00*x7922)));
evalcond[3]=((-1.0)+(((-1.0)*r10*x7922))+(((-1.0)*r12*x7919))+((r11*x7921)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r02*x7918))+((r01*x7920))+(((-1.0)*gconst2*r00*x7919)));
evalcond[5]=(((r22*x7918))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r21*x7920))+(((-1.0)*gconst2*r20*x7919)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7923 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst2*r20))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7923.valid){
continue;
}
CheckValue<IkReal> x7924=IKPowWithIntegerCheck(IKsign((((gconst1*r00))+((gconst2*r01)))),-1);
if(!x7924.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7923.value)+(((1.5707963267949)*(x7924.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7925=IKcos(j4);
IkReal x7926=IKsin(j4);
IkReal x7927=((1.0)*x7925);
IkReal x7928=(gconst1*x7925);
IkReal x7929=(gconst1*x7926);
IkReal x7930=((1.0)*gconst2*x7926);
evalcond[0]=((((-1.0)*gconst2*r10*x7927))+((r12*x7926))+((r11*x7928)));
evalcond[1]=((((-1.0)*r22*x7927))+(((-1.0)*r20*x7930))+((r21*x7929)));
evalcond[2]=((((-1.0)*r00*x7930))+(((-1.0)*r02*x7927))+((r01*x7929)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x7927))+((r11*x7929))+(((-1.0)*r10*x7930)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r02*x7926))+((r01*x7928))+(((-1.0)*gconst2*r00*x7927)));
evalcond[5]=(((r22*x7926))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst2*r20*x7927))+((r21*x7928)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x7931=((-1.0)*r20);
IkReal x7932=x7737;
CheckValue<IkReal> x7934 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7931),IKFAST_ATAN2_MAGTHRESH);
if(!x7934.valid){
continue;
}
IkReal x7933=((-1.0)*(x7934.value));
sj5=gconst1;
cj5=gconst2;
j5=x7933;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x7933;
IkReal gconst1=(r21*x7932);
IkReal gconst2=(x7931*x7932);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x7935=((-1.0)*r20);
IkReal x7936=x7737;
CheckValue<IkReal> x7938 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7935),IKFAST_ATAN2_MAGTHRESH);
if(!x7938.valid){
continue;
}
IkReal x7937=((-1.0)*(x7938.value));
sj5=gconst1;
cj5=gconst2;
j5=x7937;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x7937;
IkReal gconst1=(r21*x7936);
IkReal gconst2=(x7935*x7936);
IkReal x7939=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x7943=IKPowWithIntegerCheck(x7939,-1);
if(!x7943.valid){
continue;
}
IkReal x7940=x7943.value;
IkReal x7941=((1.0)*x7940);
IkReal x7942=((((-1.0)*x7941*(r10*r10)*(r20*r20)))+(((-1.0)*x7941*(r11*r11)*(r21*r21)))+(((-1.0)*(r12*r12)))+(((-2.0)*r10*r11*r20*r21*x7940)));
j4eval[0]=x7942;
j4eval[1]=r12;
j4eval[2]=x7939;
j4eval[3]=IKsign(x7942);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7944=((-1.0)*r20);
IkReal x7945=x7737;
CheckValue<IkReal> x7947 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7944),IKFAST_ATAN2_MAGTHRESH);
if(!x7947.valid){
continue;
}
IkReal x7946=((-1.0)*(x7947.value));
sj5=gconst1;
cj5=gconst2;
j5=x7946;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x7946;
IkReal gconst1=(r21*x7945);
IkReal gconst2=(x7944*x7945);
IkReal x7948=r22*r22;
IkReal x7949=(cj1*cj2*r12);
IkReal x7950=(r12*sj1*sj2);
CheckValue<IkReal> x7954=IKPowWithIntegerCheck(((-1.0)+x7948),-1);
if(!x7954.valid){
continue;
}
IkReal x7951=x7954.value;
if((((1.0)+(((-1.0)*x7948)))) < -0.00001)
continue;
IkReal x7952=IKsqrt(((1.0)+(((-1.0)*x7948))));
IkReal x7953=(r22*x7951*x7952);
j4eval[0]=((IKabs(((((-1.0)*x7950))+x7949)))+(IKabs((((x7950*x7953))+(((-1.0)*x7949*x7953))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7955=(sj1*sj2);
IkReal x7956=(gconst1*r11);
IkReal x7957=(cj1*cj2);
IkReal x7958=(gconst2*r10);
CheckValue<IkReal> x7959 = IKatan2WithCheck(IkReal((((x7955*x7956))+(((-1.0)*x7956*x7957))+(((-1.0)*x7955*x7958))+((x7957*x7958)))),IkReal((((r12*x7957))+(((-1.0)*r12*x7955)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7959.valid){
continue;
}
CheckValue<IkReal> x7960=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r00))+(((-1.0)*gconst2*r01)))),-1);
if(!x7960.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7959.value)+(((1.5707963267949)*(x7960.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7961=IKcos(j4);
IkReal x7962=IKsin(j4);
IkReal x7963=((1.0)*cj2);
IkReal x7964=((1.0)*x7961);
IkReal x7965=(gconst1*x7961);
IkReal x7966=(gconst1*x7962);
IkReal x7967=((1.0)*gconst2*x7962);
evalcond[0]=(((r11*x7965))+((r12*x7962))+(((-1.0)*gconst2*r10*x7964)));
evalcond[1]=(((r21*x7966))+(((-1.0)*r22*x7964))+(((-1.0)*r20*x7967)));
evalcond[2]=(((r01*x7966))+(((-1.0)*r00*x7967))+(((-1.0)*r02*x7964)));
evalcond[3]=((1.0)+((r11*x7966))+(((-1.0)*r12*x7964))+(((-1.0)*r10*x7967)));
evalcond[4]=((((-1.0)*gconst2*r20*x7964))+((r21*x7965))+(((-1.0)*cj1*x7963))+((sj1*sj2))+((r22*x7962)));
evalcond[5]=(((r01*x7965))+(((-1.0)*cj1*sj2))+((r02*x7962))+(((-1.0)*sj1*x7963))+(((-1.0)*gconst2*r00*x7964)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7968=(gconst2*r10);
IkReal x7969=(gconst1*r11);
CheckValue<IkReal> x7970 = IKatan2WithCheck(IkReal(((((-1.0)*x7968))+x7969)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x7970.valid){
continue;
}
CheckValue<IkReal> x7971=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x7968*x7968)))+(((-1.0)*(r12*r12)))+(((-1.0)*(x7969*x7969)))+(((2.0)*x7968*x7969)))),-1);
if(!x7971.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7970.value)+(((1.5707963267949)*(x7971.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7972=IKcos(j4);
IkReal x7973=IKsin(j4);
IkReal x7974=((1.0)*cj2);
IkReal x7975=((1.0)*x7972);
IkReal x7976=(gconst1*x7972);
IkReal x7977=(gconst1*x7973);
IkReal x7978=((1.0)*gconst2*x7973);
evalcond[0]=(((r11*x7976))+((r12*x7973))+(((-1.0)*gconst2*r10*x7975)));
evalcond[1]=((((-1.0)*r22*x7975))+(((-1.0)*r20*x7978))+((r21*x7977)));
evalcond[2]=(((r01*x7977))+(((-1.0)*r02*x7975))+(((-1.0)*r00*x7978)));
evalcond[3]=((1.0)+((r11*x7977))+(((-1.0)*r10*x7978))+(((-1.0)*r12*x7975)));
evalcond[4]=((((-1.0)*cj1*x7974))+((sj1*sj2))+(((-1.0)*gconst2*r20*x7975))+((r22*x7973))+((r21*x7976)));
evalcond[5]=(((r01*x7976))+((r02*x7973))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x7974))+(((-1.0)*gconst2*r00*x7975)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7979=((1.0)*gconst2);
CheckValue<IkReal> x7980 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst1*r21))+(((-1.0)*r20*x7979)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7980.valid){
continue;
}
CheckValue<IkReal> x7981=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r00))+(((-1.0)*r01*x7979)))),-1);
if(!x7981.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7980.value)+(((1.5707963267949)*(x7981.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7982=IKcos(j4);
IkReal x7983=IKsin(j4);
IkReal x7984=((1.0)*cj2);
IkReal x7985=((1.0)*x7982);
IkReal x7986=(gconst1*x7982);
IkReal x7987=(gconst1*x7983);
IkReal x7988=((1.0)*gconst2*x7983);
evalcond[0]=(((r12*x7983))+(((-1.0)*gconst2*r10*x7985))+((r11*x7986)));
evalcond[1]=((((-1.0)*r22*x7985))+(((-1.0)*r20*x7988))+((r21*x7987)));
evalcond[2]=((((-1.0)*r00*x7988))+((r01*x7987))+(((-1.0)*r02*x7985)));
evalcond[3]=((1.0)+(((-1.0)*r12*x7985))+(((-1.0)*r10*x7988))+((r11*x7987)));
evalcond[4]=((((-1.0)*cj1*x7984))+((r22*x7983))+((sj1*sj2))+((r21*x7986))+(((-1.0)*gconst2*r20*x7985)));
evalcond[5]=((((-1.0)*sj1*x7984))+((r01*x7986))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst2*r00*x7985))+((r02*x7983)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x7989=((-1.0)*r20);
IkReal x7990=((-1.0)*r21);
CheckValue<IkReal> x7992 = IKatan2WithCheck(IkReal(x7990),IkReal(x7989),IKFAST_ATAN2_MAGTHRESH);
if(!x7992.valid){
continue;
}
IkReal x7991=((-1.0)*(x7992.value));
sj5=gconst1;
cj5=gconst2;
j5=x7991;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x7989);
rxp0_2=(py*r00);
rxp1_0=(py*x7990);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst0=x7991;
IkReal gconst1=r21;
IkReal gconst2=x7989;
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7993=((-1.0)*r20);
IkReal x7994=((-1.0)*r21);
CheckValue<IkReal> x7996 = IKatan2WithCheck(IkReal(x7994),IkReal(x7993),IKFAST_ATAN2_MAGTHRESH);
if(!x7996.valid){
continue;
}
IkReal x7995=((-1.0)*(x7996.value));
sj5=gconst1;
cj5=gconst2;
j5=x7995;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x7993);
rxp0_2=(py*r00);
rxp1_0=(py*x7994);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst0=x7995;
IkReal gconst1=r21;
IkReal gconst2=x7993;
j4eval[0]=((1.0)+(((-1.0)*(r00*r00)))+(r21*r21));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7997=((-1.0)*r20);
IkReal x7998=((-1.0)*r21);
CheckValue<IkReal> x8000 = IKatan2WithCheck(IkReal(x7998),IkReal(x7997),IKFAST_ATAN2_MAGTHRESH);
if(!x8000.valid){
continue;
}
IkReal x7999=((-1.0)*(x8000.value));
sj5=gconst1;
cj5=gconst2;
j5=x7999;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x7997);
rxp0_2=(py*r00);
rxp1_0=(py*x7998);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst0=x7999;
IkReal gconst1=r21;
IkReal gconst2=x7997;
j4eval[0]=(((r00*r20))+((r01*r21)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8003=IKPowWithIntegerCheck((((gconst1*r01))+(((-1.0)*gconst2*r00))),-1);
if(!x8003.valid){
continue;
}
IkReal x8001=x8003.value;
IkReal x8002=((1.0)*cj0*x8001);
cj4array[0]=((((-1.0)*cj2*sj1*x8002))+(((-1.0)*cj1*sj2*x8002)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8004=IKsin(j4);
IkReal x8005=IKcos(j4);
IkReal x8006=(gconst1*r21);
IkReal x8007=(gconst2*r20);
IkReal x8008=((1.0)*x8005);
IkReal x8009=((1.0)*x8004);
evalcond[0]=(r12*x8004);
evalcond[1]=((((-1.0)*r12*x8008))+(((-1.0)*cj0)));
evalcond[2]=(((x8004*x8006))+(((-1.0)*x8007*x8009)));
evalcond[3]=(((gconst1*r01*x8004))+(((-1.0)*gconst2*r00*x8009)));
evalcond[4]=(((x8005*x8006))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x8007*x8008)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8011=IKPowWithIntegerCheck(((((-1.0)*gconst2*r20))+((gconst1*r21))),-1);
if(!x8011.valid){
continue;
}
IkReal x8010=x8011.value;
cj4array[0]=((((-1.0)*sj1*sj2*x8010))+((cj1*cj2*x8010)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8012=IKsin(j4);
IkReal x8013=IKcos(j4);
IkReal x8014=(gconst1*r01);
IkReal x8015=((1.0)*x8013);
IkReal x8016=((1.0)*gconst2*x8012);
evalcond[0]=(r12*x8012);
evalcond[1]=((((-1.0)*r12*x8015))+(((-1.0)*cj0)));
evalcond[2]=((((-1.0)*r20*x8016))+((gconst1*r21*x8012)));
evalcond[3]=((((-1.0)*r00*x8016))+((x8012*x8014)));
evalcond[4]=((((-1.0)*gconst2*r00*x8015))+((x8013*x8014))+((cj0*cj2*sj1))+((cj0*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8017=IKPowWithIntegerCheck(r12,-1);
if(!x8017.valid){
continue;
}
cj4array[0]=((-1.0)*cj0*(x8017.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8018=IKsin(j4);
IkReal x8019=IKcos(j4);
IkReal x8020=(gconst1*x8019);
IkReal x8021=(gconst1*x8018);
IkReal x8022=((1.0)*gconst2*r20);
IkReal x8023=((1.0)*gconst2*r00);
evalcond[0]=(r12*x8018);
evalcond[1]=(((r21*x8021))+(((-1.0)*x8018*x8022)));
evalcond[2]=((((-1.0)*x8018*x8023))+((r01*x8021)));
evalcond[3]=((((-1.0)*x8019*x8022))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r21*x8020)));
evalcond[4]=((((-1.0)*x8019*x8023))+((cj0*cj2*sj1))+((cj0*cj1*sj2))+((r01*x8020)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8024=(gconst2*r20);
IkReal x8025=(cj1*cj2);
IkReal x8026=(sj1*sj2);
IkReal x8027=(gconst1*r21);
CheckValue<IkReal> x8028=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x8027*x8027)))+(((2.0)*x8024*x8027))+(((-1.0)*(r22*r22)))+(((-1.0)*(x8024*x8024))))),-1);
if(!x8028.valid){
continue;
}
CheckValue<IkReal> x8029 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x8025))+((r22*x8026)))),IkReal((((x8026*x8027))+(((-1.0)*x8024*x8026))+(((-1.0)*x8025*x8027))+((x8024*x8025)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8029.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8028.value)))+(x8029.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8030=IKsin(j4);
IkReal x8031=IKcos(j4);
IkReal x8032=(cj2*sj1);
IkReal x8033=(cj1*sj2);
IkReal x8034=((1.0)*x8031);
IkReal x8035=(gconst1*x8031);
IkReal x8036=(gconst1*x8030);
IkReal x8037=((1.0)*gconst2*x8030);
evalcond[0]=((((-1.0)*r20*x8037))+((r21*x8036))+(((-1.0)*r22*x8034)));
evalcond[1]=(sj0+(((-1.0)*r02*x8034))+((r01*x8036))+(((-1.0)*r00*x8037)));
evalcond[2]=((((-1.0)*r12*x8034))+(((-1.0)*r10*x8037))+((r11*x8036))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r21*x8035))+(((-1.0)*gconst2*r20*x8034))+((r22*x8030)));
evalcond[4]=((((-1.0)*gconst2*r00*x8034))+((cj0*x8033))+((cj0*x8032))+((r02*x8030))+((r01*x8035)));
evalcond[5]=(((sj0*x8032))+((sj0*x8033))+(((-1.0)*gconst2*r10*x8034))+((r12*x8030))+((r11*x8035)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8038=IKPowWithIntegerCheck(IKsign((((gconst1*r00))+((gconst2*r01)))),-1);
if(!x8038.valid){
continue;
}
CheckValue<IkReal> x8039 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst1*r21))+(((-1.0)*cj0*gconst2*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8039.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8038.value)))+(x8039.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8040=IKsin(j4);
IkReal x8041=IKcos(j4);
IkReal x8042=(cj2*sj1);
IkReal x8043=(cj1*sj2);
IkReal x8044=((1.0)*x8041);
IkReal x8045=(gconst1*x8041);
IkReal x8046=(gconst1*x8040);
IkReal x8047=((1.0)*gconst2*x8040);
evalcond[0]=((((-1.0)*r20*x8047))+((r21*x8046))+(((-1.0)*r22*x8044)));
evalcond[1]=(((r01*x8046))+sj0+(((-1.0)*r02*x8044))+(((-1.0)*r00*x8047)));
evalcond[2]=((((-1.0)*r10*x8047))+((r11*x8046))+(((-1.0)*r12*x8044))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r21*x8045))+(((-1.0)*gconst2*r20*x8044))+((r22*x8040)));
evalcond[4]=(((r01*x8045))+(((-1.0)*gconst2*r00*x8044))+((r02*x8040))+((cj0*x8043))+((cj0*x8042)));
evalcond[5]=(((sj0*x8043))+((sj0*x8042))+((r11*x8045))+(((-1.0)*gconst2*r10*x8044))+((r12*x8040)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8048=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x8048.valid){
continue;
}
CheckValue<IkReal> x8049 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*gconst2*r20*sj0))+((gconst1*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8049.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8048.value)))+(x8049.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8050=IKsin(j4);
IkReal x8051=IKcos(j4);
IkReal x8052=(cj2*sj1);
IkReal x8053=(cj1*sj2);
IkReal x8054=((1.0)*x8051);
IkReal x8055=(gconst1*x8051);
IkReal x8056=(gconst1*x8050);
IkReal x8057=((1.0)*gconst2*x8050);
evalcond[0]=((((-1.0)*r20*x8057))+(((-1.0)*r22*x8054))+((r21*x8056)));
evalcond[1]=(sj0+(((-1.0)*r02*x8054))+((r01*x8056))+(((-1.0)*r00*x8057)));
evalcond[2]=((((-1.0)*r12*x8054))+((r11*x8056))+(((-1.0)*cj0))+(((-1.0)*r10*x8057)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst2*r20*x8054))+((r21*x8055))+((r22*x8050)));
evalcond[4]=((((-1.0)*gconst2*r00*x8054))+((r02*x8050))+((cj0*x8052))+((cj0*x8053))+((r01*x8055)));
evalcond[5]=(((sj0*x8052))+((sj0*x8053))+((r11*x8055))+(((-1.0)*gconst2*r10*x8054))+((r12*x8050)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8058=((-1.0)*r20);
IkReal x8059=x7737;
CheckValue<IkReal> x8061 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8058),IKFAST_ATAN2_MAGTHRESH);
if(!x8061.valid){
continue;
}
IkReal x8060=((-1.0)*(x8061.value));
sj5=gconst1;
cj5=gconst2;
j5=x8060;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst0=x8060;
IkReal gconst1=(r21*x8059);
IkReal gconst2=(x8058*x8059);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8062=((-1.0)*r20);
IkReal x8063=x7737;
CheckValue<IkReal> x8065 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8062),IKFAST_ATAN2_MAGTHRESH);
if(!x8065.valid){
continue;
}
IkReal x8064=((-1.0)*(x8065.value));
sj5=gconst1;
cj5=gconst2;
j5=x8064;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst0=x8064;
IkReal gconst1=(r21*x8063);
IkReal gconst2=(x8062*x8063);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x8066=((-1.0)*r20);
IkReal x8067=x7737;
CheckValue<IkReal> x8069 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8066),IKFAST_ATAN2_MAGTHRESH);
if(!x8069.valid){
continue;
}
IkReal x8068=((-1.0)*(x8069.value));
sj5=gconst1;
cj5=gconst2;
j5=x8068;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst0=x8068;
IkReal gconst1=(r21*x8067);
IkReal gconst2=(x8066*x8067);
IkReal x8070=r22*r22;
CheckValue<IkReal> x8073=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x8070))),-1);
if(!x8073.valid){
continue;
}
IkReal x8071=x8073.value;
IkReal x8072=(((x8071*(r20*r20*r20*r20)))+((x8071*(r21*r21*r21*r21)))+x8070+(((2.0)*x8071*(r20*r20)*(r21*r21))));
j4eval[0]=x8072;
j4eval[1]=IKsign(x8072);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8074=((-1.0)*r20);
IkReal x8075=x7737;
CheckValue<IkReal> x8077 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8074),IKFAST_ATAN2_MAGTHRESH);
if(!x8077.valid){
continue;
}
IkReal x8076=((-1.0)*(x8077.value));
sj5=gconst1;
cj5=gconst2;
j5=x8076;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x8076;
IkReal gconst1=(r21*x8075);
IkReal gconst2=(x8074*x8075);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x8078=((-1.0)*r20);
IkReal x8079=x7737;
CheckValue<IkReal> x8081 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8078),IKFAST_ATAN2_MAGTHRESH);
if(!x8081.valid){
continue;
}
IkReal x8080=((-1.0)*(x8081.value));
sj5=gconst1;
cj5=gconst2;
j5=x8080;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x8080;
IkReal gconst1=(r21*x8079);
IkReal gconst2=(x8078*x8079);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8082=((-1.0)*r20);
IkReal x8083=x7737;
CheckValue<IkReal> x8085 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8082),IKFAST_ATAN2_MAGTHRESH);
if(!x8085.valid){
continue;
}
IkReal x8084=((-1.0)*(x8085.value));
sj5=gconst1;
cj5=gconst2;
j5=x8084;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x8084;
IkReal gconst1=(r21*x8083);
IkReal gconst2=(x8082*x8083);
IkReal x8086=r22*r22;
IkReal x8087=(cj1*r12*sj2);
IkReal x8088=(cj2*r12*sj1);
CheckValue<IkReal> x8092=IKPowWithIntegerCheck(((-1.0)+x8086),-1);
if(!x8092.valid){
continue;
}
IkReal x8089=x8092.value;
if((((1.0)+(((-1.0)*x8086)))) < -0.00001)
continue;
IkReal x8090=IKsqrt(((1.0)+(((-1.0)*x8086))));
IkReal x8091=(r22*x8089*x8090);
j4eval[0]=((IKabs((x8087+x8088)))+(IKabs((((x8087*x8091))+((x8088*x8091))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8093=(cj1*sj2);
IkReal x8094=(cj2*sj1);
IkReal x8095=(gconst1*r11);
IkReal x8096=((1.0)*gconst2*r10);
CheckValue<IkReal> x8097=IKPowWithIntegerCheck(IKsign(((r12*r12)+(x8095*x8095)+(((-2.0)*gconst2*r10*x8095))+(((gconst2*gconst2)*(r10*r10))))),-1);
if(!x8097.valid){
continue;
}
CheckValue<IkReal> x8098 = IKatan2WithCheck(IkReal((((r12*x8094))+((r12*x8093)))),IkReal(((((-1.0)*x8094*x8096))+(((-1.0)*x8093*x8096))+((x8093*x8095))+((x8094*x8095)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8098.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8097.value)))+(x8098.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8099=IKsin(j4);
IkReal x8100=IKcos(j4);
IkReal x8101=(gconst1*r11);
IkReal x8102=(gconst1*r21);
IkReal x8103=(gconst1*r01);
IkReal x8104=((1.0)*x8100);
IkReal x8105=(gconst2*x8100);
IkReal x8106=((1.0)*x8099);
evalcond[0]=((((-1.0)*r22*x8104))+((x8099*x8102))+(((-1.0)*gconst2*r20*x8106)));
evalcond[1]=((((-1.0)*gconst2*r10*x8106))+((x8099*x8101))+(((-1.0)*r12*x8104)));
evalcond[2]=((((-1.0)*x8103*x8104))+((r00*x8105))+(((-1.0)*r02*x8106)));
evalcond[3]=((1.0)+(((-1.0)*r02*x8104))+(((-1.0)*gconst2*r00*x8106))+((x8099*x8103)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r10*x8105))+(((-1.0)*x8101*x8104))+(((-1.0)*r12*x8106)));
evalcond[5]=(((r20*x8105))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x8102*x8104))+(((-1.0)*r22*x8106)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8107=(gconst1*r01);
IkReal x8108=(gconst2*r00);
CheckValue<IkReal> x8109 = IKatan2WithCheck(IkReal(((((-1.0)*x8107))+x8108)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x8109.valid){
continue;
}
CheckValue<IkReal> x8110=IKPowWithIntegerCheck(IKsign(((x8107*x8107)+(((-2.0)*x8107*x8108))+(r02*r02)+(x8108*x8108))),-1);
if(!x8110.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8109.value)+(((1.5707963267949)*(x8110.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8111=IKsin(j4);
IkReal x8112=IKcos(j4);
IkReal x8113=(gconst1*r11);
IkReal x8114=(gconst1*r21);
IkReal x8115=(gconst1*r01);
IkReal x8116=((1.0)*x8112);
IkReal x8117=(gconst2*x8112);
IkReal x8118=((1.0)*x8111);
evalcond[0]=((((-1.0)*gconst2*r20*x8118))+((x8111*x8114))+(((-1.0)*r22*x8116)));
evalcond[1]=((((-1.0)*r12*x8116))+(((-1.0)*gconst2*r10*x8118))+((x8111*x8113)));
evalcond[2]=((((-1.0)*x8115*x8116))+(((-1.0)*r02*x8118))+((r00*x8117)));
evalcond[3]=((1.0)+(((-1.0)*gconst2*r00*x8118))+((x8111*x8115))+(((-1.0)*r02*x8116)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x8113*x8116))+(((-1.0)*r12*x8118))+((cj1*sj2))+((r10*x8117)));
evalcond[5]=((((-1.0)*x8114*x8116))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r20*x8117))+(((-1.0)*r22*x8118)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8119 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst2*r20))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8119.valid){
continue;
}
CheckValue<IkReal> x8120=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x8120.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8119.value)+(((1.5707963267949)*(x8120.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8121=IKsin(j4);
IkReal x8122=IKcos(j4);
IkReal x8123=(gconst1*r11);
IkReal x8124=(gconst1*r21);
IkReal x8125=(gconst1*r01);
IkReal x8126=((1.0)*x8122);
IkReal x8127=(gconst2*x8122);
IkReal x8128=((1.0)*x8121);
evalcond[0]=((((-1.0)*gconst2*r20*x8128))+((x8121*x8124))+(((-1.0)*r22*x8126)));
evalcond[1]=((((-1.0)*r12*x8126))+((x8121*x8123))+(((-1.0)*gconst2*r10*x8128)));
evalcond[2]=((((-1.0)*x8125*x8126))+((r00*x8127))+(((-1.0)*r02*x8128)));
evalcond[3]=((1.0)+(((-1.0)*gconst2*r00*x8128))+((x8121*x8125))+(((-1.0)*r02*x8126)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r12*x8128))+((cj1*sj2))+((r10*x8127))+(((-1.0)*x8123*x8126)));
evalcond[5]=((((-1.0)*x8124*x8126))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r20*x8127))+(((-1.0)*r22*x8128)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8129=((-1.0)*r20);
IkReal x8130=x7737;
CheckValue<IkReal> x8132 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8129),IKFAST_ATAN2_MAGTHRESH);
if(!x8132.valid){
continue;
}
IkReal x8131=((-1.0)*(x8132.value));
sj5=gconst1;
cj5=gconst2;
j5=x8131;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x8131;
IkReal gconst1=(r21*x8130);
IkReal gconst2=(x8129*x8130);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x8133=((-1.0)*r20);
IkReal x8134=x7737;
CheckValue<IkReal> x8136 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8133),IKFAST_ATAN2_MAGTHRESH);
if(!x8136.valid){
continue;
}
IkReal x8135=((-1.0)*(x8136.value));
sj5=gconst1;
cj5=gconst2;
j5=x8135;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x8135;
IkReal gconst1=(r21*x8134);
IkReal gconst2=(x8133*x8134);
IkReal x8137=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x8141=IKPowWithIntegerCheck(x8137,-1);
if(!x8141.valid){
continue;
}
IkReal x8138=x8141.value;
IkReal x8139=((1.0)*x8138);
IkReal x8140=((((-1.0)*x8139*(r00*r00)*(r20*r20)))+(((-1.0)*x8139*(r01*r01)*(r21*r21)))+(((-1.0)*(r02*r02)))+(((-2.0)*r00*r01*r20*r21*x8138)));
j4eval[0]=x8140;
j4eval[1]=IKsign(x8140);
j4eval[2]=r02;
j4eval[3]=x8137;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8142=((-1.0)*r20);
IkReal x8143=x7737;
CheckValue<IkReal> x8145 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8142),IKFAST_ATAN2_MAGTHRESH);
if(!x8145.valid){
continue;
}
IkReal x8144=((-1.0)*(x8145.value));
sj5=gconst1;
cj5=gconst2;
j5=x8144;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x8144;
IkReal gconst1=(r21*x8143);
IkReal gconst2=(x8142*x8143);
IkReal x8146=r22*r22;
IkReal x8147=(r02*sj1*sj2);
IkReal x8148=(cj1*cj2*r02);
CheckValue<IkReal> x8152=IKPowWithIntegerCheck(((-1.0)+x8146),-1);
if(!x8152.valid){
continue;
}
IkReal x8149=x8152.value;
if((((1.0)+(((-1.0)*x8146)))) < -0.00001)
continue;
IkReal x8150=IKsqrt(((1.0)+(((-1.0)*x8146))));
IkReal x8151=(r22*x8149*x8150);
j4eval[0]=((IKabs(((((-1.0)*x8148))+x8147)))+(IKabs((((x8148*x8151))+(((-1.0)*x8147*x8151))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8153=(sj1*sj2);
IkReal x8154=(gconst1*r01);
IkReal x8155=(gconst2*r00);
IkReal x8156=((1.0)*cj1*cj2);
CheckValue<IkReal> x8157=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x8157.valid){
continue;
}
CheckValue<IkReal> x8158 = IKatan2WithCheck(IkReal((((x8153*x8155))+(((-1.0)*x8153*x8154))+(((-1.0)*x8155*x8156))+((cj1*cj2*x8154)))),IkReal(((((-1.0)*r02*x8156))+((r02*x8153)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8158.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8157.value)))+(x8158.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8159=IKsin(j4);
IkReal x8160=IKcos(j4);
IkReal x8161=((1.0)*cj2);
IkReal x8162=((1.0)*x8160);
IkReal x8163=(gconst2*x8160);
IkReal x8164=(gconst1*x8159);
IkReal x8165=((1.0)*x8159);
evalcond[0]=(((r21*x8164))+(((-1.0)*gconst2*r20*x8165))+(((-1.0)*r22*x8162)));
evalcond[1]=(((r11*x8164))+(((-1.0)*r12*x8162))+(((-1.0)*gconst2*r10*x8165)));
evalcond[2]=((((-1.0)*r02*x8165))+((r00*x8163))+(((-1.0)*gconst1*r01*x8162)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x8162))+((r01*x8164))+(((-1.0)*gconst2*r00*x8165)));
evalcond[4]=(((sj1*sj2))+(((-1.0)*cj1*x8161))+((r20*x8163))+(((-1.0)*r22*x8165))+(((-1.0)*gconst1*r21*x8162)));
evalcond[5]=((((-1.0)*sj1*x8161))+(((-1.0)*gconst1*r11*x8162))+((r10*x8163))+(((-1.0)*cj1*sj2))+(((-1.0)*r12*x8165)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8166=(gconst2*r00);
IkReal x8167=(gconst1*r01);
CheckValue<IkReal> x8168=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x8166*x8166)))+(((-1.0)*(x8167*x8167)))+(((-1.0)*(r02*r02)))+(((2.0)*x8166*x8167)))),-1);
if(!x8168.valid){
continue;
}
CheckValue<IkReal> x8169 = IKatan2WithCheck(IkReal(((((-1.0)*x8167))+x8166)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x8169.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8168.value)))+(x8169.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8170=IKsin(j4);
IkReal x8171=IKcos(j4);
IkReal x8172=((1.0)*cj2);
IkReal x8173=((1.0)*x8171);
IkReal x8174=(gconst2*x8171);
IkReal x8175=(gconst1*x8170);
IkReal x8176=((1.0)*x8170);
evalcond[0]=((((-1.0)*r22*x8173))+((r21*x8175))+(((-1.0)*gconst2*r20*x8176)));
evalcond[1]=((((-1.0)*r12*x8173))+((r11*x8175))+(((-1.0)*gconst2*r10*x8176)));
evalcond[2]=((((-1.0)*gconst1*r01*x8173))+(((-1.0)*r02*x8176))+((r00*x8174)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x8173))+((r01*x8175))+(((-1.0)*gconst2*r00*x8176)));
evalcond[4]=(((r20*x8174))+((sj1*sj2))+(((-1.0)*gconst1*r21*x8173))+(((-1.0)*r22*x8176))+(((-1.0)*cj1*x8172)));
evalcond[5]=((((-1.0)*r12*x8176))+(((-1.0)*cj1*sj2))+((r10*x8174))+(((-1.0)*sj1*x8172))+(((-1.0)*gconst1*r11*x8173)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8177=((1.0)*gconst2);
CheckValue<IkReal> x8178=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x8177))+(((-1.0)*gconst1*r10)))),-1);
if(!x8178.valid){
continue;
}
CheckValue<IkReal> x8179 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x8177))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8179.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8178.value)))+(x8179.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8180=IKsin(j4);
IkReal x8181=IKcos(j4);
IkReal x8182=((1.0)*cj2);
IkReal x8183=((1.0)*x8181);
IkReal x8184=(gconst2*x8181);
IkReal x8185=(gconst1*x8180);
IkReal x8186=((1.0)*x8180);
evalcond[0]=((((-1.0)*r22*x8183))+((r21*x8185))+(((-1.0)*gconst2*r20*x8186)));
evalcond[1]=(((r11*x8185))+(((-1.0)*r12*x8183))+(((-1.0)*gconst2*r10*x8186)));
evalcond[2]=((((-1.0)*r02*x8186))+((r00*x8184))+(((-1.0)*gconst1*r01*x8183)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x8183))+((r01*x8185))+(((-1.0)*gconst2*r00*x8186)));
evalcond[4]=((((-1.0)*r22*x8186))+(((-1.0)*gconst1*r21*x8183))+(((-1.0)*cj1*x8182))+((sj1*sj2))+((r20*x8184)));
evalcond[5]=(((r10*x8184))+(((-1.0)*gconst1*r11*x8183))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x8182))+(((-1.0)*r12*x8186)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8187=((-1.0)*r20);
IkReal x8188=x7737;
CheckValue<IkReal> x8190 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8187),IKFAST_ATAN2_MAGTHRESH);
if(!x8190.valid){
continue;
}
IkReal x8189=((-1.0)*(x8190.value));
sj5=gconst1;
cj5=gconst2;
j5=x8189;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x8189;
IkReal gconst1=(r21*x8188);
IkReal gconst2=(x8187*x8188);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x8191=((-1.0)*r20);
IkReal x8192=x7737;
CheckValue<IkReal> x8194 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8191),IKFAST_ATAN2_MAGTHRESH);
if(!x8194.valid){
continue;
}
IkReal x8193=((-1.0)*(x8194.value));
sj5=gconst1;
cj5=gconst2;
j5=x8193;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x8193;
IkReal gconst1=(r21*x8192);
IkReal gconst2=(x8191*x8192);
IkReal x8195=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x8199=IKPowWithIntegerCheck(x8195,-1);
if(!x8199.valid){
continue;
}
IkReal x8196=x8199.value;
IkReal x8197=((1.0)*x8196);
IkReal x8198=((((-1.0)*x8197*(r10*r10)*(r20*r20)))+(((-2.0)*r10*r11*r20*r21*x8196))+(((-1.0)*x8197*(r11*r11)*(r21*r21)))+(((-1.0)*(r12*r12))));
j4eval[0]=x8198;
j4eval[1]=r12;
j4eval[2]=x8195;
j4eval[3]=IKsign(x8198);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8200=((-1.0)*r20);
IkReal x8201=x7737;
CheckValue<IkReal> x8203 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8200),IKFAST_ATAN2_MAGTHRESH);
if(!x8203.valid){
continue;
}
IkReal x8202=((-1.0)*(x8203.value));
sj5=gconst1;
cj5=gconst2;
j5=x8202;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x8202;
IkReal gconst1=(r21*x8201);
IkReal gconst2=(x8200*x8201);
IkReal x8204=r22*r22;
IkReal x8205=(cj1*r02*sj2);
IkReal x8206=(cj2*r02*sj1);
CheckValue<IkReal> x8210=IKPowWithIntegerCheck(((-1.0)+x8204),-1);
if(!x8210.valid){
continue;
}
IkReal x8207=x8210.value;
if((((1.0)+(((-1.0)*x8204)))) < -0.00001)
continue;
IkReal x8208=IKsqrt(((1.0)+(((-1.0)*x8204))));
IkReal x8209=(r22*x8207*x8208);
j4eval[0]=((IKabs((((x8206*x8209))+((x8205*x8209)))))+(IKabs((x8206+x8205))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8211=(cj1*sj2);
IkReal x8212=(gconst2*r00);
IkReal x8213=(gconst1*r01);
IkReal x8214=(cj2*sj1);
CheckValue<IkReal> x8215 = IKatan2WithCheck(IkReal((((r02*x8214))+((r02*x8211)))),IkReal(((((-1.0)*x8212*x8214))+((x8211*x8213))+(((-1.0)*x8211*x8212))+((x8213*x8214)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8215.valid){
continue;
}
CheckValue<IkReal> x8216=IKPowWithIntegerCheck(IKsign(((((-2.0)*x8212*x8213))+(x8212*x8212)+(x8213*x8213)+(r02*r02))),-1);
if(!x8216.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8215.value)+(((1.5707963267949)*(x8216.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8217=IKsin(j4);
IkReal x8218=IKcos(j4);
IkReal x8219=((1.0)*x8218);
IkReal x8220=(gconst2*x8218);
IkReal x8221=(gconst1*x8217);
IkReal x8222=((1.0)*x8217);
evalcond[0]=((((-1.0)*r22*x8219))+((r21*x8221))+(((-1.0)*gconst2*r20*x8222)));
evalcond[1]=((((-1.0)*r02*x8219))+(((-1.0)*gconst2*r00*x8222))+((r01*x8221)));
evalcond[2]=((((-1.0)*r12*x8222))+((r10*x8220))+(((-1.0)*gconst1*r11*x8219)));
evalcond[3]=((-1.0)+((r11*x8221))+(((-1.0)*gconst2*r10*x8222))+(((-1.0)*r12*x8219)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r02*x8222))+(((-1.0)*gconst1*r01*x8219))+((r00*x8220)));
evalcond[5]=(((r20*x8220))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst1*r21*x8219))+(((-1.0)*r22*x8222)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8223=(gconst1*r11);
IkReal x8224=(gconst2*r10);
CheckValue<IkReal> x8225 = IKatan2WithCheck(IkReal(((((-1.0)*x8223))+x8224)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x8225.valid){
continue;
}
CheckValue<IkReal> x8226=IKPowWithIntegerCheck(IKsign(((((2.0)*x8223*x8224))+(((-1.0)*(r12*r12)))+(((-1.0)*(x8224*x8224)))+(((-1.0)*(x8223*x8223))))),-1);
if(!x8226.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8225.value)+(((1.5707963267949)*(x8226.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8227=IKsin(j4);
IkReal x8228=IKcos(j4);
IkReal x8229=((1.0)*x8228);
IkReal x8230=(gconst2*x8228);
IkReal x8231=(gconst1*x8227);
IkReal x8232=((1.0)*x8227);
evalcond[0]=(((r21*x8231))+(((-1.0)*gconst2*r20*x8232))+(((-1.0)*r22*x8229)));
evalcond[1]=((((-1.0)*r02*x8229))+((r01*x8231))+(((-1.0)*gconst2*r00*x8232)));
evalcond[2]=((((-1.0)*r12*x8232))+((r10*x8230))+(((-1.0)*gconst1*r11*x8229)));
evalcond[3]=((-1.0)+(((-1.0)*gconst2*r10*x8232))+((r11*x8231))+(((-1.0)*r12*x8229)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst1*r01*x8229))+(((-1.0)*r02*x8232))+((cj1*sj2))+((r00*x8230)));
evalcond[5]=(((r20*x8230))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst1*r21*x8229))+(((-1.0)*r22*x8232)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8233 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst2*r20))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8233.valid){
continue;
}
CheckValue<IkReal> x8234=IKPowWithIntegerCheck(IKsign((((gconst1*r00))+((gconst2*r01)))),-1);
if(!x8234.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8233.value)+(((1.5707963267949)*(x8234.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8235=IKsin(j4);
IkReal x8236=IKcos(j4);
IkReal x8237=((1.0)*x8236);
IkReal x8238=(gconst2*x8236);
IkReal x8239=(gconst1*x8235);
IkReal x8240=((1.0)*x8235);
evalcond[0]=((((-1.0)*gconst2*r20*x8240))+((r21*x8239))+(((-1.0)*r22*x8237)));
evalcond[1]=((((-1.0)*gconst2*r00*x8240))+(((-1.0)*r02*x8237))+((r01*x8239)));
evalcond[2]=(((r10*x8238))+(((-1.0)*r12*x8240))+(((-1.0)*gconst1*r11*x8237)));
evalcond[3]=((-1.0)+((r11*x8239))+(((-1.0)*gconst2*r10*x8240))+(((-1.0)*r12*x8237)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst1*r01*x8237))+((cj1*sj2))+((r00*x8238))+(((-1.0)*r02*x8240)));
evalcond[5]=(((r20*x8238))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x8240))+(((-1.0)*gconst1*r21*x8237)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8241=((-1.0)*r20);
IkReal x8242=x7737;
CheckValue<IkReal> x8244 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8241),IKFAST_ATAN2_MAGTHRESH);
if(!x8244.valid){
continue;
}
IkReal x8243=((-1.0)*(x8244.value));
sj5=gconst1;
cj5=gconst2;
j5=x8243;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x8243;
IkReal gconst1=(r21*x8242);
IkReal gconst2=(x8241*x8242);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x8245=((-1.0)*r20);
IkReal x8246=x7737;
CheckValue<IkReal> x8248 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8245),IKFAST_ATAN2_MAGTHRESH);
if(!x8248.valid){
continue;
}
IkReal x8247=((-1.0)*(x8248.value));
sj5=gconst1;
cj5=gconst2;
j5=x8247;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x8247;
IkReal gconst1=(r21*x8246);
IkReal gconst2=(x8245*x8246);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8249=((-1.0)*r20);
IkReal x8250=x7737;
CheckValue<IkReal> x8252 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8249),IKFAST_ATAN2_MAGTHRESH);
if(!x8252.valid){
continue;
}
IkReal x8251=((-1.0)*(x8252.value));
sj5=gconst1;
cj5=gconst2;
j5=x8251;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x8251;
IkReal gconst1=(r21*x8250);
IkReal gconst2=(x8249*x8250);
IkReal x8253=r22*r22;
IkReal x8254=(r12*sj1*sj2);
IkReal x8255=(cj1*cj2*r12);
CheckValue<IkReal> x8259=IKPowWithIntegerCheck(((-1.0)+x8253),-1);
if(!x8259.valid){
continue;
}
IkReal x8256=x8259.value;
if((((1.0)+(((-1.0)*x8253)))) < -0.00001)
continue;
IkReal x8257=IKsqrt(((1.0)+(((-1.0)*x8253))));
IkReal x8258=(r22*x8256*x8257);
j4eval[0]=((IKabs(((((-1.0)*x8255))+x8254)))+(IKabs(((((-1.0)*x8254*x8258))+((x8255*x8258))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8260=((1.0)*gconst1);
IkReal x8261=(gconst2*r10);
IkReal x8262=(sj1*sj2);
IkReal x8263=((1.0)*cj1*cj2);
CheckValue<IkReal> x8264=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst2*r01))+(((-1.0)*r00*x8260)))),-1);
if(!x8264.valid){
continue;
}
CheckValue<IkReal> x8265 = IKatan2WithCheck(IkReal((((cj1*cj2*gconst1*r11))+(((-1.0)*x8261*x8263))+(((-1.0)*r11*x8260*x8262))+((x8261*x8262)))),IkReal(((((-1.0)*r12*x8263))+((r12*x8262)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8265.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8264.value)))+(x8265.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8266=IKsin(j4);
IkReal x8267=IKcos(j4);
IkReal x8268=((1.0)*cj2);
IkReal x8269=((1.0)*x8267);
IkReal x8270=(gconst2*x8267);
IkReal x8271=(gconst1*x8266);
IkReal x8272=((1.0)*x8266);
evalcond[0]=((((-1.0)*gconst2*r20*x8272))+(((-1.0)*r22*x8269))+((r21*x8271)));
evalcond[1]=((((-1.0)*gconst2*r00*x8272))+(((-1.0)*r02*x8269))+((r01*x8271)));
evalcond[2]=((((-1.0)*r12*x8272))+(((-1.0)*gconst1*r11*x8269))+((r10*x8270)));
evalcond[3]=((1.0)+(((-1.0)*r12*x8269))+(((-1.0)*gconst2*r10*x8272))+((r11*x8271)));
evalcond[4]=(((r20*x8270))+((sj1*sj2))+(((-1.0)*r22*x8272))+(((-1.0)*gconst1*r21*x8269))+(((-1.0)*cj1*x8268)));
evalcond[5]=((((-1.0)*sj1*x8268))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst1*r01*x8269))+(((-1.0)*r02*x8272))+((r00*x8270)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8273=(gconst1*r11);
IkReal x8274=(gconst2*r10);
CheckValue<IkReal> x8275=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-2.0)*x8273*x8274))+(x8273*x8273)+(x8274*x8274))),-1);
if(!x8275.valid){
continue;
}
CheckValue<IkReal> x8276 = IKatan2WithCheck(IkReal(((((-1.0)*x8273))+x8274)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x8276.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8275.value)))+(x8276.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8277=IKsin(j4);
IkReal x8278=IKcos(j4);
IkReal x8279=((1.0)*cj2);
IkReal x8280=((1.0)*x8278);
IkReal x8281=(gconst2*x8278);
IkReal x8282=(gconst1*x8277);
IkReal x8283=((1.0)*x8277);
evalcond[0]=(((r21*x8282))+(((-1.0)*gconst2*r20*x8283))+(((-1.0)*r22*x8280)));
evalcond[1]=((((-1.0)*r02*x8280))+(((-1.0)*gconst2*r00*x8283))+((r01*x8282)));
evalcond[2]=((((-1.0)*r12*x8283))+((r10*x8281))+(((-1.0)*gconst1*r11*x8280)));
evalcond[3]=((1.0)+(((-1.0)*r12*x8280))+(((-1.0)*gconst2*r10*x8283))+((r11*x8282)));
evalcond[4]=(((r20*x8281))+((sj1*sj2))+(((-1.0)*r22*x8283))+(((-1.0)*gconst1*r21*x8280))+(((-1.0)*cj1*x8279)));
evalcond[5]=((((-1.0)*r02*x8283))+((r00*x8281))+(((-1.0)*sj1*x8279))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst1*r01*x8280)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8284=((1.0)*gconst2);
CheckValue<IkReal> x8285 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x8284))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8285.valid){
continue;
}
CheckValue<IkReal> x8286=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r00))+(((-1.0)*r01*x8284)))),-1);
if(!x8286.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8285.value)+(((1.5707963267949)*(x8286.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8287=IKsin(j4);
IkReal x8288=IKcos(j4);
IkReal x8289=((1.0)*cj2);
IkReal x8290=((1.0)*x8288);
IkReal x8291=(gconst2*x8288);
IkReal x8292=(gconst1*x8287);
IkReal x8293=((1.0)*x8287);
evalcond[0]=(((r21*x8292))+(((-1.0)*gconst2*r20*x8293))+(((-1.0)*r22*x8290)));
evalcond[1]=(((r01*x8292))+(((-1.0)*gconst2*r00*x8293))+(((-1.0)*r02*x8290)));
evalcond[2]=((((-1.0)*r12*x8293))+((r10*x8291))+(((-1.0)*gconst1*r11*x8290)));
evalcond[3]=((1.0)+(((-1.0)*r12*x8290))+(((-1.0)*gconst2*r10*x8293))+((r11*x8292)));
evalcond[4]=((((-1.0)*cj1*x8289))+((r20*x8291))+((sj1*sj2))+(((-1.0)*r22*x8293))+(((-1.0)*gconst1*r21*x8290)));
evalcond[5]=((((-1.0)*sj1*x8289))+((r00*x8291))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst1*r01*x8290))+(((-1.0)*r02*x8293)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8294=((-1.0)*r20);
IkReal x8295=((-1.0)*r21);
CheckValue<IkReal> x8297 = IKatan2WithCheck(IkReal(x8295),IkReal(x8294),IKFAST_ATAN2_MAGTHRESH);
if(!x8297.valid){
continue;
}
IkReal x8296=((-1.0)*(x8297.value));
sj5=gconst1;
cj5=gconst2;
j5=x8296;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x8294);
rxp0_2=(py*r00);
rxp1_0=(py*x8295);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst0=x8296;
IkReal gconst1=r21;
IkReal gconst2=x8294;
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8298=((-1.0)*r20);
IkReal x8299=((-1.0)*r21);
CheckValue<IkReal> x8301 = IKatan2WithCheck(IkReal(x8299),IkReal(x8298),IKFAST_ATAN2_MAGTHRESH);
if(!x8301.valid){
continue;
}
IkReal x8300=((-1.0)*(x8301.value));
sj5=gconst1;
cj5=gconst2;
j5=x8300;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x8298);
rxp0_2=(py*r00);
rxp1_0=(py*x8299);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst0=x8300;
IkReal gconst1=r21;
IkReal gconst2=x8298;
j4eval[0]=((-1.0)+(((-1.0)*(r21*r21)))+(r00*r00));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8302=((-1.0)*r20);
IkReal x8303=((-1.0)*r21);
CheckValue<IkReal> x8305 = IKatan2WithCheck(IkReal(x8303),IkReal(x8302),IKFAST_ATAN2_MAGTHRESH);
if(!x8305.valid){
continue;
}
IkReal x8304=((-1.0)*(x8305.value));
sj5=gconst1;
cj5=gconst2;
j5=x8304;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x8302);
rxp0_2=(py*r00);
rxp1_0=(py*x8303);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst0=x8304;
IkReal gconst1=r21;
IkReal gconst2=x8302;
j4eval[0]=((((-1.0)*r01*r21))+(((-1.0)*r00*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8308=IKPowWithIntegerCheck(((((-1.0)*gconst1*r01))+((gconst2*r00))),-1);
if(!x8308.valid){
continue;
}
IkReal x8306=x8308.value;
IkReal x8307=((1.0)*cj0*x8306);
cj4array[0]=((((-1.0)*cj2*sj1*x8307))+(((-1.0)*cj1*sj2*x8307)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8309=IKsin(j4);
IkReal x8310=IKcos(j4);
IkReal x8311=(gconst2*r20);
IkReal x8312=(gconst1*x8309);
IkReal x8313=((1.0)*x8310);
IkReal x8314=((1.0)*x8309);
evalcond[0]=((-1.0)*r12*x8309);
evalcond[1]=((((-1.0)*r12*x8313))+(((-1.0)*cj0)));
evalcond[2]=(((r21*x8312))+(((-1.0)*x8311*x8314)));
evalcond[3]=(((r01*x8312))+(((-1.0)*gconst2*r00*x8314)));
evalcond[4]=(((x8310*x8311))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst1*r21*x8313)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8316=IKPowWithIntegerCheck((((gconst2*r20))+(((-1.0)*gconst1*r21))),-1);
if(!x8316.valid){
continue;
}
IkReal x8315=x8316.value;
cj4array[0]=((((-1.0)*sj1*sj2*x8315))+((cj1*cj2*x8315)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8317=IKsin(j4);
IkReal x8318=IKcos(j4);
IkReal x8319=(gconst2*r00);
IkReal x8320=(gconst1*r01);
IkReal x8321=((1.0)*x8318);
IkReal x8322=((1.0)*x8317);
evalcond[0]=((-1.0)*r12*x8317);
evalcond[1]=((((-1.0)*r12*x8321))+(((-1.0)*cj0)));
evalcond[2]=(((gconst1*r21*x8317))+(((-1.0)*gconst2*r20*x8322)));
evalcond[3]=(((x8317*x8320))+(((-1.0)*x8319*x8322)));
evalcond[4]=(((x8318*x8319))+((cj0*cj2*sj1))+((cj0*cj1*sj2))+(((-1.0)*x8320*x8321)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8323=IKPowWithIntegerCheck(r12,-1);
if(!x8323.valid){
continue;
}
cj4array[0]=((-1.0)*cj0*(x8323.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8324=IKsin(j4);
IkReal x8325=IKcos(j4);
IkReal x8326=(gconst2*x8325);
IkReal x8327=(gconst1*x8324);
IkReal x8328=((1.0)*gconst1*x8325);
IkReal x8329=((1.0)*gconst2*x8324);
evalcond[0]=((-1.0)*r12*x8324);
evalcond[1]=(((r21*x8327))+(((-1.0)*r20*x8329)));
evalcond[2]=((((-1.0)*r00*x8329))+((r01*x8327)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r21*x8328))+((r20*x8326)));
evalcond[4]=((((-1.0)*r01*x8328))+((cj0*cj2*sj1))+((r00*x8326))+((cj0*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8330=(gconst2*r20);
IkReal x8331=(cj1*cj2);
IkReal x8332=(sj1*sj2);
IkReal x8333=(gconst1*r21);
CheckValue<IkReal> x8334=IKPowWithIntegerCheck(IKsign(((x8330*x8330)+(x8333*x8333)+(r22*r22)+(((-2.0)*x8330*x8333)))),-1);
if(!x8334.valid){
continue;
}
CheckValue<IkReal> x8335 = IKatan2WithCheck(IkReal((((r22*x8332))+(((-1.0)*r22*x8331)))),IkReal((((x8330*x8331))+((x8332*x8333))+(((-1.0)*x8330*x8332))+(((-1.0)*x8331*x8333)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8335.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8334.value)))+(x8335.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8336=IKsin(j4);
IkReal x8337=IKcos(j4);
IkReal x8338=(gconst2*r00);
IkReal x8339=(cj2*sj1);
IkReal x8340=(gconst2*r10);
IkReal x8341=(cj1*sj2);
IkReal x8342=(gconst2*r20);
IkReal x8343=((1.0)*x8337);
IkReal x8344=(gconst1*x8336);
IkReal x8345=((1.0)*x8336);
evalcond[0]=((((-1.0)*x8342*x8345))+((r21*x8344))+(((-1.0)*r22*x8343)));
evalcond[1]=((((-1.0)*x8338*x8345))+((r01*x8344))+sj0+(((-1.0)*r02*x8343)));
evalcond[2]=((((-1.0)*x8340*x8345))+((r11*x8344))+(((-1.0)*r12*x8343))+(((-1.0)*cj0)));
evalcond[3]=(((x8337*x8342))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x8345))+(((-1.0)*gconst1*r21*x8343)));
evalcond[4]=((((-1.0)*r02*x8345))+((cj0*x8341))+((cj0*x8339))+(((-1.0)*gconst1*r01*x8343))+((x8337*x8338)));
evalcond[5]=((((-1.0)*gconst1*r11*x8343))+((x8337*x8340))+((sj0*x8341))+(((-1.0)*r12*x8345))+((sj0*x8339)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8346=IKPowWithIntegerCheck(IKsign((((gconst1*r00))+((gconst2*r01)))),-1);
if(!x8346.valid){
continue;
}
CheckValue<IkReal> x8347 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst1*r21))+(((-1.0)*cj0*gconst2*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8347.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8346.value)))+(x8347.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8348=IKsin(j4);
IkReal x8349=IKcos(j4);
IkReal x8350=(gconst2*r00);
IkReal x8351=(cj2*sj1);
IkReal x8352=(gconst2*r10);
IkReal x8353=(cj1*sj2);
IkReal x8354=(gconst2*r20);
IkReal x8355=((1.0)*x8349);
IkReal x8356=(gconst1*x8348);
IkReal x8357=((1.0)*x8348);
evalcond[0]=((((-1.0)*x8354*x8357))+(((-1.0)*r22*x8355))+((r21*x8356)));
evalcond[1]=(sj0+(((-1.0)*r02*x8355))+(((-1.0)*x8350*x8357))+((r01*x8356)));
evalcond[2]=(((r11*x8356))+(((-1.0)*r12*x8355))+(((-1.0)*x8352*x8357))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*r22*x8357))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst1*r21*x8355))+((x8349*x8354)));
evalcond[4]=((((-1.0)*r02*x8357))+(((-1.0)*gconst1*r01*x8355))+((cj0*x8353))+((cj0*x8351))+((x8349*x8350)));
evalcond[5]=((((-1.0)*r12*x8357))+((sj0*x8353))+((sj0*x8351))+((x8349*x8352))+(((-1.0)*gconst1*r11*x8355)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8358=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x8358.valid){
continue;
}
CheckValue<IkReal> x8359 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*gconst2*r20*sj0))+((gconst1*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8359.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8358.value)))+(x8359.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8360=IKsin(j4);
IkReal x8361=IKcos(j4);
IkReal x8362=(gconst2*r00);
IkReal x8363=(cj2*sj1);
IkReal x8364=(gconst2*r10);
IkReal x8365=(cj1*sj2);
IkReal x8366=(gconst2*r20);
IkReal x8367=((1.0)*x8361);
IkReal x8368=(gconst1*x8360);
IkReal x8369=((1.0)*x8360);
evalcond[0]=((((-1.0)*x8366*x8369))+(((-1.0)*r22*x8367))+((r21*x8368)));
evalcond[1]=((((-1.0)*x8362*x8369))+sj0+((r01*x8368))+(((-1.0)*r02*x8367)));
evalcond[2]=((((-1.0)*x8364*x8369))+(((-1.0)*r12*x8367))+((r11*x8368))+(((-1.0)*cj0)));
evalcond[3]=(((x8361*x8366))+(((-1.0)*gconst1*r21*x8367))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x8369)));
evalcond[4]=(((x8361*x8362))+(((-1.0)*r02*x8369))+(((-1.0)*gconst1*r01*x8367))+((cj0*x8365))+((cj0*x8363)));
evalcond[5]=(((x8361*x8364))+(((-1.0)*r12*x8369))+(((-1.0)*gconst1*r11*x8367))+((sj0*x8365))+((sj0*x8363)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8370=((-1.0)*r20);
IkReal x8371=x7737;
CheckValue<IkReal> x8373 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8370),IKFAST_ATAN2_MAGTHRESH);
if(!x8373.valid){
continue;
}
IkReal x8372=((-1.0)*(x8373.value));
sj5=gconst1;
cj5=gconst2;
j5=x8372;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x8372;
IkReal gconst1=(r21*x8371);
IkReal gconst2=(x8370*x8371);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8374=((-1.0)*r20);
IkReal x8375=x7737;
CheckValue<IkReal> x8377 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8374),IKFAST_ATAN2_MAGTHRESH);
if(!x8377.valid){
continue;
}
IkReal x8376=((-1.0)*(x8377.value));
sj5=gconst1;
cj5=gconst2;
j5=x8376;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x8376;
IkReal gconst1=(r21*x8375);
IkReal gconst2=(x8374*x8375);
CheckValue<IkReal> x8385=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x8385.valid){
continue;
}
IkReal x8378=x8385.value;
IkReal x8379=(cj3*x8378);
IkReal x8380=(r11*x8379);
IkReal x8381=(r01*x8379);
IkReal x8382=(r00*x8379);
IkReal x8383=(r10*x8379);
IkReal x8384=(r20*r21*x8379);
j4eval[0]=IKsign((((cj3*r02*r12))+((r10*x8382*(r20*r20)))+((r10*r20*r21*x8381))+((r01*x8380*(r21*r21)))+((r00*r20*r21*x8380))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8386=gconst2*gconst2;
IkReal x8387=gconst1*gconst1;
IkReal x8388=((1.0)*sj3);
IkReal x8389=(cj3*r01);
IkReal x8390=(gconst1*gconst2);
IkReal x8391=((1.0)*r11);
IkReal x8392=(cj3*r00);
IkReal x8393=((1.0)*r12);
IkReal x8394=(r10*x8386);
CheckValue<IkReal> x8395=IKPowWithIntegerCheck(IKsign(((((-1.0)*r02*r12*x8388))+(((-1.0)*r00*x8388*x8394))+((r00*r11*sj3*x8390))+(((-1.0)*r01*r11*x8387*x8388))+((r01*r10*sj3*x8390)))),-1);
if(!x8395.valid){
continue;
}
CheckValue<IkReal> x8396 = IKatan2WithCheck(IkReal(((((-1.0)*gconst1*x8392*x8393))+(((-1.0)*gconst2*x8389*x8393)))),IkReal((((r10*x8390*x8392))+(((-1.0)*x8387*x8391*x8392))+(((-1.0)*x8389*x8390*x8391))+((x8389*x8394)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8396.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8395.value)))+(x8396.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x8397=IKsin(j4);
IkReal x8398=IKcos(j4);
IkReal x8399=(cj2*sj1);
IkReal x8400=(cj1*sj2);
IkReal x8401=(gconst2*r00);
IkReal x8402=(sj1*sj2);
IkReal x8403=(cj3*gconst1);
IkReal x8404=(gconst1*sj3);
IkReal x8405=((1.0)*r20);
IkReal x8406=((1.0)*r10);
IkReal x8407=(cj1*cj2);
IkReal x8408=((1.0)*r00);
IkReal x8409=(gconst2*r10);
IkReal x8410=((1.0)*cj3);
IkReal x8411=(gconst2*r20);
IkReal x8412=((1.0)*x8398);
IkReal x8413=(gconst1*x8397);
IkReal x8414=(cj3*x8398);
IkReal x8415=(r12*x8397);
IkReal x8416=((1.0)*gconst2*r21);
IkReal x8417=((1.0)*gconst2*sj3);
IkReal x8418=(sj3*x8397);
IkReal x8419=(gconst2*x8397);
IkReal x8420=(x8399+x8400);
IkReal x8421=(x8397*x8410);
evalcond[0]=((((-1.0)*x8405*x8419))+((r21*x8413))+(((-1.0)*r22*x8412)));
evalcond[1]=((((-1.0)*r12*x8412))+((r11*x8413))+(((-1.0)*x8406*x8419)));
evalcond[2]=((1.0)+(((-1.0)*r02*x8412))+((r01*x8413))+(((-1.0)*x8397*x8401)));
evalcond[3]=(((r01*x8398*x8404))+((r02*x8418))+(((-1.0)*sj3*x8401*x8412))+(((-1.0)*gconst2*r01*x8410))+(((-1.0)*x8403*x8408)));
evalcond[4]=((((-1.0)*r01*x8417))+((x8401*x8414))+(((-1.0)*r02*x8421))+(((-1.0)*x8404*x8408))+(((-1.0)*r01*x8403*x8412)));
evalcond[5]=(x8420+(((-1.0)*gconst2*sj3*x8398*x8406))+(((-1.0)*gconst2*r11*x8410))+((sj3*x8415))+((r11*x8398*x8404))+(((-1.0)*x8403*x8406)));
evalcond[6]=(x8402+(((-1.0)*gconst2*sj3*x8398*x8405))+(((-1.0)*x8407))+(((-1.0)*gconst2*r21*x8410))+((r21*x8398*x8404))+(((-1.0)*x8403*x8405))+((r22*x8418)));
evalcond[7]=(x8420+((x8411*x8414))+(((-1.0)*r22*x8421))+(((-1.0)*r21*x8403*x8412))+(((-1.0)*sj3*x8416))+(((-1.0)*x8404*x8405)));
evalcond[8]=(x8407+(((-1.0)*r11*x8417))+(((-1.0)*x8402))+(((-1.0)*x8410*x8415))+((x8409*x8414))+(((-1.0)*x8404*x8406))+(((-1.0)*r11*x8403*x8412)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8422=gconst2*gconst2;
IkReal x8423=gconst1*gconst1;
IkReal x8424=(r10*sj3);
IkReal x8425=(gconst1*gconst2);
IkReal x8426=((1.0)*r01);
IkReal x8427=(cj3*r10);
IkReal x8428=(r12*sj3);
IkReal x8429=(cj3*r11);
IkReal x8430=((1.0)*r00);
IkReal x8431=((1.0)*r11*sj3);
CheckValue<IkReal> x8432=IKPowWithIntegerCheck(IKsign((((cj3*r02*r12))+(((-1.0)*x8425*x8429*x8430))+((r00*x8422*x8427))+(((-1.0)*x8425*x8426*x8427))+((r01*x8423*x8429)))),-1);
if(!x8432.valid){
continue;
}
CheckValue<IkReal> x8433 = IKatan2WithCheck(IkReal(((((-1.0)*gconst1*x8428*x8430))+(((-1.0)*gconst2*x8426*x8428)))),IkReal((((r00*x8424*x8425))+(((-1.0)*r11*sj3*x8423*x8430))+(((-1.0)*r11*sj3*x8425*x8426))+((r01*x8422*x8424)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8433.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8432.value)))+(x8433.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x8434=IKsin(j4);
IkReal x8435=IKcos(j4);
IkReal x8436=(cj2*sj1);
IkReal x8437=(cj1*sj2);
IkReal x8438=(gconst2*r00);
IkReal x8439=(sj1*sj2);
IkReal x8440=(cj3*gconst1);
IkReal x8441=(gconst1*sj3);
IkReal x8442=((1.0)*r20);
IkReal x8443=((1.0)*r10);
IkReal x8444=(cj1*cj2);
IkReal x8445=((1.0)*r00);
IkReal x8446=(gconst2*r10);
IkReal x8447=((1.0)*cj3);
IkReal x8448=(gconst2*r20);
IkReal x8449=((1.0)*x8435);
IkReal x8450=(gconst1*x8434);
IkReal x8451=(cj3*x8435);
IkReal x8452=(r12*x8434);
IkReal x8453=((1.0)*gconst2*r21);
IkReal x8454=((1.0)*gconst2*sj3);
IkReal x8455=(sj3*x8434);
IkReal x8456=(gconst2*x8434);
IkReal x8457=(x8437+x8436);
IkReal x8458=(x8434*x8447);
evalcond[0]=(((r21*x8450))+(((-1.0)*x8442*x8456))+(((-1.0)*r22*x8449)));
evalcond[1]=(((r11*x8450))+(((-1.0)*r12*x8449))+(((-1.0)*x8443*x8456)));
evalcond[2]=((1.0)+(((-1.0)*x8434*x8438))+((r01*x8450))+(((-1.0)*r02*x8449)));
evalcond[3]=((((-1.0)*gconst2*r01*x8447))+(((-1.0)*x8440*x8445))+((r01*x8435*x8441))+((r02*x8455))+(((-1.0)*sj3*x8438*x8449)));
evalcond[4]=((((-1.0)*r01*x8454))+((x8438*x8451))+(((-1.0)*r01*x8440*x8449))+(((-1.0)*r02*x8458))+(((-1.0)*x8441*x8445)));
evalcond[5]=(x8457+((r11*x8435*x8441))+(((-1.0)*x8440*x8443))+(((-1.0)*gconst2*r11*x8447))+(((-1.0)*gconst2*sj3*x8435*x8443))+((sj3*x8452)));
evalcond[6]=(x8439+((r22*x8455))+(((-1.0)*x8444))+(((-1.0)*x8440*x8442))+(((-1.0)*gconst2*r21*x8447))+((r21*x8435*x8441))+(((-1.0)*gconst2*sj3*x8435*x8442)));
evalcond[7]=(x8457+((x8448*x8451))+(((-1.0)*r21*x8440*x8449))+(((-1.0)*r22*x8458))+(((-1.0)*x8441*x8442))+(((-1.0)*sj3*x8453)));
evalcond[8]=(x8444+(((-1.0)*x8447*x8452))+(((-1.0)*r11*x8454))+(((-1.0)*x8439))+((x8446*x8451))+(((-1.0)*r11*x8440*x8449))+(((-1.0)*x8441*x8443)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8459 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst2*r20))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8459.valid){
continue;
}
CheckValue<IkReal> x8460=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x8460.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8459.value)+(((1.5707963267949)*(x8460.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x8461=IKsin(j4);
IkReal x8462=IKcos(j4);
IkReal x8463=(cj2*sj1);
IkReal x8464=(cj1*sj2);
IkReal x8465=(gconst2*r00);
IkReal x8466=(sj1*sj2);
IkReal x8467=(cj3*gconst1);
IkReal x8468=(gconst1*sj3);
IkReal x8469=((1.0)*r20);
IkReal x8470=((1.0)*r10);
IkReal x8471=(cj1*cj2);
IkReal x8472=((1.0)*r00);
IkReal x8473=(gconst2*r10);
IkReal x8474=((1.0)*cj3);
IkReal x8475=(gconst2*r20);
IkReal x8476=((1.0)*x8462);
IkReal x8477=(gconst1*x8461);
IkReal x8478=(cj3*x8462);
IkReal x8479=(r12*x8461);
IkReal x8480=((1.0)*gconst2*r21);
IkReal x8481=((1.0)*gconst2*sj3);
IkReal x8482=(sj3*x8461);
IkReal x8483=(gconst2*x8461);
IkReal x8484=(x8463+x8464);
IkReal x8485=(x8461*x8474);
evalcond[0]=((((-1.0)*x8469*x8483))+((r21*x8477))+(((-1.0)*r22*x8476)));
evalcond[1]=(((r11*x8477))+(((-1.0)*x8470*x8483))+(((-1.0)*r12*x8476)));
evalcond[2]=((1.0)+((r01*x8477))+(((-1.0)*r02*x8476))+(((-1.0)*x8461*x8465)));
evalcond[3]=((((-1.0)*x8467*x8472))+(((-1.0)*sj3*x8465*x8476))+(((-1.0)*gconst2*r01*x8474))+((r01*x8462*x8468))+((r02*x8482)));
evalcond[4]=((((-1.0)*r01*x8481))+(((-1.0)*r02*x8485))+(((-1.0)*r01*x8467*x8476))+(((-1.0)*x8468*x8472))+((x8465*x8478)));
evalcond[5]=((((-1.0)*x8467*x8470))+x8484+(((-1.0)*gconst2*r11*x8474))+(((-1.0)*gconst2*sj3*x8462*x8470))+((sj3*x8479))+((r11*x8462*x8468)));
evalcond[6]=((((-1.0)*x8467*x8469))+x8466+(((-1.0)*x8471))+(((-1.0)*gconst2*sj3*x8462*x8469))+(((-1.0)*gconst2*r21*x8474))+((r22*x8482))+((r21*x8462*x8468)));
evalcond[7]=(((x8475*x8478))+(((-1.0)*sj3*x8480))+x8484+(((-1.0)*r21*x8467*x8476))+(((-1.0)*r22*x8485))+(((-1.0)*x8468*x8469)));
evalcond[8]=((((-1.0)*x8466))+x8471+((x8473*x8478))+(((-1.0)*r11*x8467*x8476))+(((-1.0)*r11*x8481))+(((-1.0)*x8468*x8470))+(((-1.0)*x8474*x8479)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8486=((-1.0)*r20);
IkReal x8487=x7737;
CheckValue<IkReal> x8489 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8486),IKFAST_ATAN2_MAGTHRESH);
if(!x8489.valid){
continue;
}
IkReal x8488=((-1.0)*(x8489.value));
sj5=gconst1;
cj5=gconst2;
j5=x8488;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x8488;
IkReal gconst1=(r21*x8487);
IkReal gconst2=(x8486*x8487);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8490=((-1.0)*r20);
IkReal x8491=x7737;
CheckValue<IkReal> x8493 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8490),IKFAST_ATAN2_MAGTHRESH);
if(!x8493.valid){
continue;
}
IkReal x8492=((-1.0)*(x8493.value));
sj5=gconst1;
cj5=gconst2;
j5=x8492;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x8492;
IkReal gconst1=(r21*x8491);
IkReal gconst2=(x8490*x8491);
CheckValue<IkReal> x8501=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x8501.valid){
continue;
}
IkReal x8494=x8501.value;
IkReal x8495=(cj3*x8494);
IkReal x8496=(r11*x8495);
IkReal x8497=(r01*x8495);
IkReal x8498=(r00*x8495);
IkReal x8499=(r10*x8495);
IkReal x8500=(r20*r21*x8495);
j4eval[0]=IKsign((((r10*r20*r21*x8497))+((cj3*r02*r12))+((r01*x8496*(r21*r21)))+((r00*r20*r21*x8496))+((r10*x8498*(r20*r20)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8502=gconst2*gconst2;
IkReal x8503=gconst1*gconst1;
IkReal x8504=((1.0)*sj3);
IkReal x8505=(cj3*r01);
IkReal x8506=(gconst1*gconst2);
IkReal x8507=((1.0)*r11);
IkReal x8508=(cj3*r00);
IkReal x8509=((1.0)*r12);
IkReal x8510=(r10*x8502);
CheckValue<IkReal> x8511=IKPowWithIntegerCheck(IKsign(((((-1.0)*r02*r12*x8504))+((r00*r11*sj3*x8506))+(((-1.0)*r01*r11*x8503*x8504))+(((-1.0)*r00*x8504*x8510))+((r01*r10*sj3*x8506)))),-1);
if(!x8511.valid){
continue;
}
CheckValue<IkReal> x8512 = IKatan2WithCheck(IkReal(((((-1.0)*gconst2*x8505*x8509))+(((-1.0)*gconst1*x8508*x8509)))),IkReal(((((-1.0)*x8505*x8506*x8507))+((r10*x8506*x8508))+((x8505*x8510))+(((-1.0)*x8503*x8507*x8508)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8512.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8511.value)))+(x8512.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x8513=IKsin(j4);
IkReal x8514=IKcos(j4);
IkReal x8515=(sj1*sj2);
IkReal x8516=(gconst2*r00);
IkReal x8517=(cj3*r11);
IkReal x8518=((1.0)*gconst2);
IkReal x8519=((1.0)*gconst1);
IkReal x8520=(r20*sj3);
IkReal x8521=((1.0)*cj2);
IkReal x8522=(r21*sj3);
IkReal x8523=(cj3*r21);
IkReal x8524=(cj1*sj2);
IkReal x8525=(gconst2*r10);
IkReal x8526=(r01*sj3);
IkReal x8527=(r11*sj3);
IkReal x8528=(cj3*r01);
IkReal x8529=(cj1*x8521);
IkReal x8530=((1.0)*x8514);
IkReal x8531=(gconst1*x8513);
IkReal x8532=(cj3*x8514);
IkReal x8533=(sj3*x8513);
IkReal x8534=(gconst1*x8514);
IkReal x8535=((1.0)*cj3*x8513);
evalcond[0]=((((-1.0)*r22*x8530))+((r21*x8531))+(((-1.0)*r20*x8513*x8518)));
evalcond[1]=((((-1.0)*r12*x8530))+(((-1.0)*r10*x8513*x8518))+((r11*x8531)));
evalcond[2]=((-1.0)+(((-1.0)*r02*x8530))+((r01*x8531))+(((-1.0)*x8513*x8516)));
evalcond[3]=((((-1.0)*cj3*r00*x8519))+(((-1.0)*sj3*x8516*x8530))+(((-1.0)*x8518*x8528))+((r02*x8533))+((x8526*x8534)));
evalcond[4]=((((-1.0)*r02*x8535))+(((-1.0)*x8514*x8519*x8528))+(((-1.0)*r00*sj3*x8519))+(((-1.0)*x8518*x8526))+((x8516*x8532)));
evalcond[5]=(((r22*x8533))+x8515+(((-1.0)*cj3*r20*x8519))+(((-1.0)*x8518*x8523))+(((-1.0)*x8514*x8518*x8520))+(((-1.0)*x8529))+((x8522*x8534)));
evalcond[6]=(((cj2*sj1))+x8524+(((-1.0)*x8519*x8520))+(((-1.0)*r22*x8535))+(((-1.0)*x8514*x8519*x8523))+(((-1.0)*x8518*x8522))+((gconst2*r20*x8532)));
evalcond[7]=((((-1.0)*r10*sj3*x8514*x8518))+((x8527*x8534))+(((-1.0)*x8517*x8518))+(((-1.0)*x8524))+(((-1.0)*sj1*x8521))+((r12*x8533))+(((-1.0)*cj3*r10*x8519)));
evalcond[8]=((((-1.0)*x8514*x8517*x8519))+x8515+(((-1.0)*r12*x8535))+(((-1.0)*x8518*x8527))+(((-1.0)*x8529))+(((-1.0)*r10*sj3*x8519))+((x8525*x8532)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8536=gconst2*gconst2;
IkReal x8537=gconst1*gconst1;
IkReal x8538=(r10*sj3);
IkReal x8539=(gconst1*gconst2);
IkReal x8540=((1.0)*r01);
IkReal x8541=(cj3*r10);
IkReal x8542=(r12*sj3);
IkReal x8543=(cj3*r11);
IkReal x8544=((1.0)*r00);
IkReal x8545=((1.0)*r11*sj3);
CheckValue<IkReal> x8546=IKPowWithIntegerCheck(IKsign((((cj3*r02*r12))+((r00*x8536*x8541))+(((-1.0)*x8539*x8540*x8541))+(((-1.0)*x8539*x8543*x8544))+((r01*x8537*x8543)))),-1);
if(!x8546.valid){
continue;
}
CheckValue<IkReal> x8547 = IKatan2WithCheck(IkReal(((((-1.0)*gconst1*x8542*x8544))+(((-1.0)*gconst2*x8540*x8542)))),IkReal(((((-1.0)*r11*sj3*x8537*x8544))+(((-1.0)*r11*sj3*x8539*x8540))+((r00*x8538*x8539))+((r01*x8536*x8538)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8547.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8546.value)))+(x8547.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x8548=IKsin(j4);
IkReal x8549=IKcos(j4);
IkReal x8550=(sj1*sj2);
IkReal x8551=(gconst2*r00);
IkReal x8552=(cj3*r11);
IkReal x8553=((1.0)*gconst2);
IkReal x8554=((1.0)*gconst1);
IkReal x8555=(r20*sj3);
IkReal x8556=((1.0)*cj2);
IkReal x8557=(r21*sj3);
IkReal x8558=(cj3*r21);
IkReal x8559=(cj1*sj2);
IkReal x8560=(gconst2*r10);
IkReal x8561=(r01*sj3);
IkReal x8562=(r11*sj3);
IkReal x8563=(cj3*r01);
IkReal x8564=(cj1*x8556);
IkReal x8565=((1.0)*x8549);
IkReal x8566=(gconst1*x8548);
IkReal x8567=(cj3*x8549);
IkReal x8568=(sj3*x8548);
IkReal x8569=(gconst1*x8549);
IkReal x8570=((1.0)*cj3*x8548);
evalcond[0]=((((-1.0)*r20*x8548*x8553))+(((-1.0)*r22*x8565))+((r21*x8566)));
evalcond[1]=(((r11*x8566))+(((-1.0)*r12*x8565))+(((-1.0)*r10*x8548*x8553)));
evalcond[2]=((-1.0)+(((-1.0)*x8548*x8551))+(((-1.0)*r02*x8565))+((r01*x8566)));
evalcond[3]=((((-1.0)*sj3*x8551*x8565))+((r02*x8568))+(((-1.0)*x8553*x8563))+((x8561*x8569))+(((-1.0)*cj3*r00*x8554)));
evalcond[4]=((((-1.0)*r00*sj3*x8554))+(((-1.0)*r02*x8570))+(((-1.0)*x8549*x8554*x8563))+(((-1.0)*x8553*x8561))+((x8551*x8567)));
evalcond[5]=(((x8557*x8569))+x8550+(((-1.0)*cj3*r20*x8554))+(((-1.0)*x8553*x8558))+((r22*x8568))+(((-1.0)*x8549*x8553*x8555))+(((-1.0)*x8564)));
evalcond[6]=(((cj2*sj1))+x8559+(((-1.0)*x8549*x8554*x8558))+(((-1.0)*x8554*x8555))+(((-1.0)*x8553*x8557))+((gconst2*r20*x8567))+(((-1.0)*r22*x8570)));
evalcond[7]=(((x8562*x8569))+(((-1.0)*cj3*r10*x8554))+(((-1.0)*r10*sj3*x8549*x8553))+(((-1.0)*sj1*x8556))+(((-1.0)*x8552*x8553))+(((-1.0)*x8559))+((r12*x8568)));
evalcond[8]=((((-1.0)*x8549*x8552*x8554))+x8550+(((-1.0)*r10*sj3*x8554))+(((-1.0)*x8553*x8562))+(((-1.0)*r12*x8570))+((x8560*x8567))+(((-1.0)*x8564)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8571=((1.0)*gconst2);
CheckValue<IkReal> x8572 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x8571))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8572.valid){
continue;
}
CheckValue<IkReal> x8573=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r10))+(((-1.0)*r11*x8571)))),-1);
if(!x8573.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8572.value)+(((1.5707963267949)*(x8573.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x8574=IKsin(j4);
IkReal x8575=IKcos(j4);
IkReal x8576=(sj1*sj2);
IkReal x8577=(gconst2*r00);
IkReal x8578=(cj3*r11);
IkReal x8579=((1.0)*gconst2);
IkReal x8580=((1.0)*gconst1);
IkReal x8581=(r20*sj3);
IkReal x8582=((1.0)*cj2);
IkReal x8583=(r21*sj3);
IkReal x8584=(cj3*r21);
IkReal x8585=(cj1*sj2);
IkReal x8586=(gconst2*r10);
IkReal x8587=(r01*sj3);
IkReal x8588=(r11*sj3);
IkReal x8589=(cj3*r01);
IkReal x8590=(cj1*x8582);
IkReal x8591=((1.0)*x8575);
IkReal x8592=(gconst1*x8574);
IkReal x8593=(cj3*x8575);
IkReal x8594=(sj3*x8574);
IkReal x8595=(gconst1*x8575);
IkReal x8596=((1.0)*cj3*x8574);
evalcond[0]=((((-1.0)*r22*x8591))+(((-1.0)*r20*x8574*x8579))+((r21*x8592)));
evalcond[1]=((((-1.0)*r10*x8574*x8579))+(((-1.0)*r12*x8591))+((r11*x8592)));
evalcond[2]=((-1.0)+(((-1.0)*r02*x8591))+((r01*x8592))+(((-1.0)*x8574*x8577)));
evalcond[3]=((((-1.0)*cj3*r00*x8580))+((x8587*x8595))+((r02*x8594))+(((-1.0)*x8579*x8589))+(((-1.0)*sj3*x8577*x8591)));
evalcond[4]=(((x8577*x8593))+(((-1.0)*r02*x8596))+(((-1.0)*r00*sj3*x8580))+(((-1.0)*x8579*x8587))+(((-1.0)*x8575*x8580*x8589)));
evalcond[5]=((((-1.0)*x8575*x8579*x8581))+x8576+((x8583*x8595))+(((-1.0)*cj3*r20*x8580))+(((-1.0)*x8579*x8584))+((r22*x8594))+(((-1.0)*x8590)));
evalcond[6]=(((cj2*sj1))+(((-1.0)*x8580*x8581))+(((-1.0)*r22*x8596))+x8585+(((-1.0)*x8579*x8583))+((gconst2*r20*x8593))+(((-1.0)*x8575*x8580*x8584)));
evalcond[7]=((((-1.0)*cj3*r10*x8580))+(((-1.0)*x8585))+(((-1.0)*sj1*x8582))+((x8588*x8595))+(((-1.0)*x8578*x8579))+((r12*x8594))+(((-1.0)*r10*sj3*x8575*x8579)));
evalcond[8]=((((-1.0)*x8575*x8578*x8580))+((x8586*x8593))+x8576+(((-1.0)*r10*sj3*x8580))+(((-1.0)*r12*x8596))+(((-1.0)*x8579*x8588))+(((-1.0)*x8590)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8597=((-1.0)*r20);
IkReal x8598=x7737;
CheckValue<IkReal> x8600 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8597),IKFAST_ATAN2_MAGTHRESH);
if(!x8600.valid){
continue;
}
IkReal x8599=((-1.0)*(x8600.value));
sj5=gconst1;
cj5=gconst2;
j5=x8599;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x8599;
IkReal gconst1=(r21*x8598);
IkReal gconst2=(x8597*x8598);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8601=((-1.0)*r20);
IkReal x8602=x7737;
CheckValue<IkReal> x8604 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8601),IKFAST_ATAN2_MAGTHRESH);
if(!x8604.valid){
continue;
}
IkReal x8603=((-1.0)*(x8604.value));
sj5=gconst1;
cj5=gconst2;
j5=x8603;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x8603;
IkReal gconst1=(r21*x8602);
IkReal gconst2=(x8601*x8602);
CheckValue<IkReal> x8612=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x8612.valid){
continue;
}
IkReal x8605=x8612.value;
IkReal x8606=(cj3*x8605);
IkReal x8607=(r11*x8606);
IkReal x8608=(r01*x8606);
IkReal x8609=(r00*x8606);
IkReal x8610=(r10*x8606);
IkReal x8611=(r20*r21*x8606);
j4eval[0]=IKsign((((r10*x8609*(r20*r20)))+((cj3*r02*r12))+((r10*r20*r21*x8608))+((r01*x8607*(r21*r21)))+((r00*r20*r21*x8607))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8613=gconst2*gconst2;
IkReal x8614=gconst1*gconst1;
IkReal x8615=(cj3*r00);
IkReal x8616=((1.0)*r02);
IkReal x8617=(gconst1*gconst2);
IkReal x8618=(cj3*r11);
IkReal x8619=((1.0)*r01);
IkReal x8620=(cj3*r10);
IkReal x8621=(r10*sj3);
IkReal x8622=(r11*sj3);
CheckValue<IkReal> x8623=IKPowWithIntegerCheck(IKsign((((r00*x8617*x8622))+(((-1.0)*r00*x8613*x8621))+(((-1.0)*x8614*x8619*x8622))+((r01*x8617*x8621))+(((-1.0)*r12*sj3*x8616)))),-1);
if(!x8623.valid){
continue;
}
CheckValue<IkReal> x8624 = IKatan2WithCheck(IkReal(((((-1.0)*gconst1*x8616*x8620))+(((-1.0)*gconst2*x8616*x8618)))),IkReal(((((-1.0)*x8617*x8618*x8619))+(((-1.0)*x8614*x8619*x8620))+((r11*x8613*x8615))+((r10*x8615*x8617)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8624.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8623.value)))+(x8624.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x8625=IKsin(j4);
IkReal x8626=IKcos(j4);
IkReal x8627=(cj2*sj1);
IkReal x8628=(cj1*sj2);
IkReal x8629=(gconst2*r00);
IkReal x8630=(sj1*sj2);
IkReal x8631=((1.0)*gconst1);
IkReal x8632=(r20*sj3);
IkReal x8633=(cj1*cj2);
IkReal x8634=(cj3*gconst1);
IkReal x8635=(gconst2*r10);
IkReal x8636=((1.0)*cj3);
IkReal x8637=(gconst2*r20);
IkReal x8638=((1.0)*x8626);
IkReal x8639=(gconst1*x8625);
IkReal x8640=(cj3*x8626);
IkReal x8641=(r12*x8625);
IkReal x8642=((1.0)*gconst2*r21);
IkReal x8643=((1.0)*x8625);
IkReal x8644=((1.0)*gconst2*sj3);
IkReal x8645=(sj3*x8625);
IkReal x8646=(x8628+x8627);
IkReal x8647=(gconst1*sj3*x8626);
evalcond[0]=(((r21*x8639))+(((-1.0)*x8637*x8643))+(((-1.0)*r22*x8638)));
evalcond[1]=((((-1.0)*x8629*x8643))+((r01*x8639))+(((-1.0)*r02*x8638)));
evalcond[2]=((-1.0)+(((-1.0)*r12*x8638))+(((-1.0)*x8635*x8643))+((r11*x8639)));
evalcond[3]=((((-1.0)*gconst2*r11*x8636))+(((-1.0)*sj3*x8635*x8638))+((r11*x8647))+(((-1.0)*cj3*r10*x8631))+((sj3*x8641)));
evalcond[4]=((((-1.0)*r11*x8631*x8640))+((x8635*x8640))+(((-1.0)*r10*sj3*x8631))+(((-1.0)*x8636*x8641))+(((-1.0)*r11*x8644)));
evalcond[5]=(((r02*x8645))+x8646+(((-1.0)*gconst2*r01*x8636))+((r01*x8647))+(((-1.0)*sj3*x8629*x8638))+(((-1.0)*cj3*r00*x8631)));
evalcond[6]=(x8630+(((-1.0)*x8633))+(((-1.0)*gconst2*x8632*x8638))+(((-1.0)*gconst2*r21*x8636))+(((-1.0)*cj3*r20*x8631))+((r21*x8647))+((r22*x8645)));
evalcond[7]=(x8646+(((-1.0)*sj3*x8642))+(((-1.0)*r22*x8625*x8636))+((x8637*x8640))+(((-1.0)*r21*x8631*x8640))+(((-1.0)*x8631*x8632)));
evalcond[8]=((((-1.0)*r01*x8644))+x8633+(((-1.0)*x8630))+((x8629*x8640))+(((-1.0)*r02*x8625*x8636))+(((-1.0)*r00*sj3*x8631))+(((-1.0)*r01*x8631*x8640)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8648=gconst1*gconst1;
IkReal x8649=gconst2*gconst2;
IkReal x8650=((1.0)*r11);
IkReal x8651=(r00*r10);
IkReal x8652=(r02*sj3);
IkReal x8653=(cj3*r01);
IkReal x8654=(gconst1*gconst2*sj3);
IkReal x8655=((1.0)*gconst1*r10);
CheckValue<IkReal> x8656=IKPowWithIntegerCheck(IKsign((((cj3*r02*r12))+(((-1.0)*gconst2*x8653*x8655))+((r11*x8648*x8653))+(((-1.0)*cj3*gconst1*gconst2*r00*x8650))+((cj3*x8649*x8651)))),-1);
if(!x8656.valid){
continue;
}
CheckValue<IkReal> x8657 = IKatan2WithCheck(IkReal(((((-1.0)*x8652*x8655))+(((-1.0)*gconst2*x8650*x8652)))),IkReal(((((-1.0)*r01*r10*sj3*x8648))+((r00*r11*sj3*x8649))+((x8651*x8654))+(((-1.0)*r01*x8650*x8654)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8657.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8656.value)))+(x8657.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x8658=IKsin(j4);
IkReal x8659=IKcos(j4);
IkReal x8660=(cj2*sj1);
IkReal x8661=(cj1*sj2);
IkReal x8662=(gconst2*r00);
IkReal x8663=(sj1*sj2);
IkReal x8664=((1.0)*gconst1);
IkReal x8665=(r20*sj3);
IkReal x8666=(cj1*cj2);
IkReal x8667=(cj3*gconst1);
IkReal x8668=(gconst2*r10);
IkReal x8669=((1.0)*cj3);
IkReal x8670=(gconst2*r20);
IkReal x8671=((1.0)*x8659);
IkReal x8672=(gconst1*x8658);
IkReal x8673=(cj3*x8659);
IkReal x8674=(r12*x8658);
IkReal x8675=((1.0)*gconst2*r21);
IkReal x8676=((1.0)*x8658);
IkReal x8677=((1.0)*gconst2*sj3);
IkReal x8678=(sj3*x8658);
IkReal x8679=(x8660+x8661);
IkReal x8680=(gconst1*sj3*x8659);
evalcond[0]=((((-1.0)*r22*x8671))+((r21*x8672))+(((-1.0)*x8670*x8676)));
evalcond[1]=((((-1.0)*x8662*x8676))+(((-1.0)*r02*x8671))+((r01*x8672)));
evalcond[2]=((-1.0)+(((-1.0)*r12*x8671))+(((-1.0)*x8668*x8676))+((r11*x8672)));
evalcond[3]=((((-1.0)*cj3*r10*x8664))+((sj3*x8674))+((r11*x8680))+(((-1.0)*gconst2*r11*x8669))+(((-1.0)*sj3*x8668*x8671)));
evalcond[4]=((((-1.0)*r11*x8677))+(((-1.0)*r11*x8664*x8673))+(((-1.0)*r10*sj3*x8664))+(((-1.0)*x8669*x8674))+((x8668*x8673)));
evalcond[5]=(x8679+((r01*x8680))+(((-1.0)*gconst2*r01*x8669))+((r02*x8678))+(((-1.0)*cj3*r00*x8664))+(((-1.0)*sj3*x8662*x8671)));
evalcond[6]=((((-1.0)*cj3*r20*x8664))+(((-1.0)*gconst2*r21*x8669))+x8663+(((-1.0)*gconst2*x8665*x8671))+((r22*x8678))+(((-1.0)*x8666))+((r21*x8680)));
evalcond[7]=(x8679+(((-1.0)*sj3*x8675))+(((-1.0)*r22*x8658*x8669))+(((-1.0)*r21*x8664*x8673))+((x8670*x8673))+(((-1.0)*x8664*x8665)));
evalcond[8]=((((-1.0)*r01*x8664*x8673))+x8666+(((-1.0)*r01*x8677))+(((-1.0)*r02*x8658*x8669))+((x8662*x8673))+(((-1.0)*r00*sj3*x8664))+(((-1.0)*x8663)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8681 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst2*r20))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8681.valid){
continue;
}
CheckValue<IkReal> x8682=IKPowWithIntegerCheck(IKsign((((gconst1*r00))+((gconst2*r01)))),-1);
if(!x8682.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8681.value)+(((1.5707963267949)*(x8682.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x8683=IKsin(j4);
IkReal x8684=IKcos(j4);
IkReal x8685=(cj2*sj1);
IkReal x8686=(cj1*sj2);
IkReal x8687=(gconst2*r00);
IkReal x8688=(sj1*sj2);
IkReal x8689=((1.0)*gconst1);
IkReal x8690=(r20*sj3);
IkReal x8691=(cj1*cj2);
IkReal x8692=(cj3*gconst1);
IkReal x8693=(gconst2*r10);
IkReal x8694=((1.0)*cj3);
IkReal x8695=(gconst2*r20);
IkReal x8696=((1.0)*x8684);
IkReal x8697=(gconst1*x8683);
IkReal x8698=(cj3*x8684);
IkReal x8699=(r12*x8683);
IkReal x8700=((1.0)*gconst2*r21);
IkReal x8701=((1.0)*x8683);
IkReal x8702=((1.0)*gconst2*sj3);
IkReal x8703=(sj3*x8683);
IkReal x8704=(x8686+x8685);
IkReal x8705=(gconst1*sj3*x8684);
evalcond[0]=(((r21*x8697))+(((-1.0)*x8695*x8701))+(((-1.0)*r22*x8696)));
evalcond[1]=((((-1.0)*x8687*x8701))+(((-1.0)*r02*x8696))+((r01*x8697)));
evalcond[2]=((-1.0)+(((-1.0)*r12*x8696))+(((-1.0)*x8693*x8701))+((r11*x8697)));
evalcond[3]=(((r11*x8705))+(((-1.0)*gconst2*r11*x8694))+(((-1.0)*cj3*r10*x8689))+((sj3*x8699))+(((-1.0)*sj3*x8693*x8696)));
evalcond[4]=((((-1.0)*r11*x8689*x8698))+(((-1.0)*r10*sj3*x8689))+((x8693*x8698))+(((-1.0)*x8694*x8699))+(((-1.0)*r11*x8702)));
evalcond[5]=((((-1.0)*sj3*x8687*x8696))+x8704+((r02*x8703))+(((-1.0)*gconst2*r01*x8694))+(((-1.0)*cj3*r00*x8689))+((r01*x8705)));
evalcond[6]=((((-1.0)*gconst2*x8690*x8696))+x8688+(((-1.0)*gconst2*r21*x8694))+((r21*x8705))+(((-1.0)*cj3*r20*x8689))+(((-1.0)*x8691))+((r22*x8703)));
evalcond[7]=((((-1.0)*r21*x8689*x8698))+x8704+(((-1.0)*sj3*x8700))+((x8695*x8698))+(((-1.0)*r22*x8683*x8694))+(((-1.0)*x8689*x8690)));
evalcond[8]=(x8691+(((-1.0)*r02*x8683*x8694))+(((-1.0)*r01*x8689*x8698))+((x8687*x8698))+(((-1.0)*x8688))+(((-1.0)*r01*x8702))+(((-1.0)*r00*sj3*x8689)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8706=((-1.0)*r20);
IkReal x8707=x7737;
CheckValue<IkReal> x8709 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8706),IKFAST_ATAN2_MAGTHRESH);
if(!x8709.valid){
continue;
}
IkReal x8708=((-1.0)*(x8709.value));
sj5=gconst1;
cj5=gconst2;
j5=x8708;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x8708;
IkReal gconst1=(r21*x8707);
IkReal gconst2=(x8706*x8707);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8710=((-1.0)*r20);
IkReal x8711=x7737;
CheckValue<IkReal> x8713 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8710),IKFAST_ATAN2_MAGTHRESH);
if(!x8713.valid){
continue;
}
IkReal x8712=((-1.0)*(x8713.value));
sj5=gconst1;
cj5=gconst2;
j5=x8712;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x8712;
IkReal gconst1=(r21*x8711);
IkReal gconst2=(x8710*x8711);
CheckValue<IkReal> x8721=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x8721.valid){
continue;
}
IkReal x8714=x8721.value;
IkReal x8715=(cj3*x8714);
IkReal x8716=(r11*x8715);
IkReal x8717=(r01*x8715);
IkReal x8718=(r00*x8715);
IkReal x8719=(r10*x8715);
IkReal x8720=(r20*r21*x8715);
j4eval[0]=IKsign((((cj3*r02*r12))+((r00*r20*r21*x8716))+((r10*x8718*(r20*r20)))+((r10*r20*r21*x8717))+((r01*x8716*(r21*r21)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8722=gconst2*gconst2;
IkReal x8723=gconst1*gconst1;
IkReal x8724=(cj3*r00);
IkReal x8725=((1.0)*r02);
IkReal x8726=(gconst1*gconst2);
IkReal x8727=(cj3*r11);
IkReal x8728=((1.0)*r01);
IkReal x8729=(cj3*r10);
IkReal x8730=(r10*sj3);
IkReal x8731=(r11*sj3);
CheckValue<IkReal> x8732=IKPowWithIntegerCheck(IKsign((((r00*x8726*x8731))+(((-1.0)*r00*x8722*x8730))+((r01*x8726*x8730))+(((-1.0)*x8723*x8728*x8731))+(((-1.0)*r12*sj3*x8725)))),-1);
if(!x8732.valid){
continue;
}
CheckValue<IkReal> x8733 = IKatan2WithCheck(IkReal(((((-1.0)*gconst2*x8725*x8727))+(((-1.0)*gconst1*x8725*x8729)))),IkReal(((((-1.0)*x8726*x8727*x8728))+((r10*x8724*x8726))+(((-1.0)*x8723*x8728*x8729))+((r11*x8722*x8724)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8733.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8732.value)))+(x8733.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x8734=IKsin(j4);
IkReal x8735=IKcos(j4);
IkReal x8736=(sj1*sj2);
IkReal x8737=(gconst2*r00);
IkReal x8738=((1.0)*gconst1);
IkReal x8739=(r20*sj3);
IkReal x8740=((1.0)*cj2);
IkReal x8741=(cj1*sj2);
IkReal x8742=(cj3*gconst1);
IkReal x8743=(r11*sj3);
IkReal x8744=(gconst2*r10);
IkReal x8745=((1.0)*gconst2);
IkReal x8746=(r01*sj3);
IkReal x8747=(gconst2*r20);
IkReal x8748=(cj1*x8740);
IkReal x8749=((1.0)*x8735);
IkReal x8750=(gconst1*x8734);
IkReal x8751=(cj3*x8735);
IkReal x8752=(sj3*x8734);
IkReal x8753=(r21*x8745);
IkReal x8754=((1.0)*x8734);
IkReal x8755=(gconst1*x8735);
evalcond[0]=((((-1.0)*r22*x8749))+(((-1.0)*r20*x8734*x8745))+((r21*x8750)));
evalcond[1]=((((-1.0)*x8737*x8754))+((r01*x8750))+(((-1.0)*r02*x8749)));
evalcond[2]=((1.0)+(((-1.0)*r12*x8749))+((r11*x8750))+(((-1.0)*x8744*x8754)));
evalcond[3]=(((x8743*x8755))+(((-1.0)*cj3*r11*x8745))+(((-1.0)*sj3*x8744*x8749))+((r12*x8752))+(((-1.0)*cj3*r10*x8738)));
evalcond[4]=((((-1.0)*r11*x8738*x8751))+(((-1.0)*x8743*x8745))+((x8744*x8751))+(((-1.0)*r10*sj3*x8738))+(((-1.0)*cj3*r12*x8754)));
evalcond[5]=(((r21*sj3*x8755))+((r22*x8752))+(((-1.0)*x8735*x8739*x8745))+x8736+(((-1.0)*cj3*r20*x8738))+(((-1.0)*cj3*x8753))+(((-1.0)*x8748)));
evalcond[6]=((((-1.0)*sj3*x8753))+((cj2*sj1))+(((-1.0)*x8738*x8739))+((x8747*x8751))+x8741+(((-1.0)*cj3*r22*x8754))+(((-1.0)*r21*x8738*x8751)));
evalcond[7]=(((r02*x8752))+(((-1.0)*sj3*x8737*x8749))+(((-1.0)*sj1*x8740))+(((-1.0)*cj3*r01*x8745))+(((-1.0)*x8741))+(((-1.0)*cj3*r00*x8738))+((x8746*x8755)));
evalcond[8]=(x8736+((x8737*x8751))+(((-1.0)*cj3*r02*x8754))+(((-1.0)*r00*sj3*x8738))+(((-1.0)*x8745*x8746))+(((-1.0)*x8748))+(((-1.0)*r01*x8738*x8751)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8756=gconst1*gconst1;
IkReal x8757=gconst2*gconst2;
IkReal x8758=((1.0)*r11);
IkReal x8759=(r00*r10);
IkReal x8760=(r02*sj3);
IkReal x8761=(cj3*r01);
IkReal x8762=(gconst1*gconst2*sj3);
IkReal x8763=((1.0)*gconst1*r10);
CheckValue<IkReal> x8764=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj3*gconst1*gconst2*r00*x8758))+((cj3*r02*r12))+((cj3*x8757*x8759))+(((-1.0)*gconst2*x8761*x8763))+((r11*x8756*x8761)))),-1);
if(!x8764.valid){
continue;
}
CheckValue<IkReal> x8765 = IKatan2WithCheck(IkReal(((((-1.0)*gconst2*x8758*x8760))+(((-1.0)*x8760*x8763)))),IkReal((((r00*r11*sj3*x8757))+(((-1.0)*r01*x8758*x8762))+(((-1.0)*r01*r10*sj3*x8756))+((x8759*x8762)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8765.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8764.value)))+(x8765.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x8766=IKsin(j4);
IkReal x8767=IKcos(j4);
IkReal x8768=(sj1*sj2);
IkReal x8769=(gconst2*r00);
IkReal x8770=((1.0)*gconst1);
IkReal x8771=(r20*sj3);
IkReal x8772=((1.0)*cj2);
IkReal x8773=(cj1*sj2);
IkReal x8774=(cj3*gconst1);
IkReal x8775=(r11*sj3);
IkReal x8776=(gconst2*r10);
IkReal x8777=((1.0)*gconst2);
IkReal x8778=(r01*sj3);
IkReal x8779=(gconst2*r20);
IkReal x8780=(cj1*x8772);
IkReal x8781=((1.0)*x8767);
IkReal x8782=(gconst1*x8766);
IkReal x8783=(cj3*x8767);
IkReal x8784=(sj3*x8766);
IkReal x8785=(r21*x8777);
IkReal x8786=((1.0)*x8766);
IkReal x8787=(gconst1*x8767);
evalcond[0]=(((r21*x8782))+(((-1.0)*r20*x8766*x8777))+(((-1.0)*r22*x8781)));
evalcond[1]=((((-1.0)*x8769*x8786))+(((-1.0)*r02*x8781))+((r01*x8782)));
evalcond[2]=((1.0)+((r11*x8782))+(((-1.0)*x8776*x8786))+(((-1.0)*r12*x8781)));
evalcond[3]=((((-1.0)*cj3*r11*x8777))+(((-1.0)*cj3*r10*x8770))+((r12*x8784))+((x8775*x8787))+(((-1.0)*sj3*x8776*x8781)));
evalcond[4]=((((-1.0)*cj3*r12*x8786))+((x8776*x8783))+(((-1.0)*r11*x8770*x8783))+(((-1.0)*x8775*x8777))+(((-1.0)*r10*sj3*x8770)));
evalcond[5]=(((r21*sj3*x8787))+(((-1.0)*cj3*x8785))+x8768+((r22*x8784))+(((-1.0)*cj3*r20*x8770))+(((-1.0)*x8780))+(((-1.0)*x8767*x8771*x8777)));
evalcond[6]=(((cj2*sj1))+(((-1.0)*cj3*r22*x8786))+x8773+(((-1.0)*sj3*x8785))+((x8779*x8783))+(((-1.0)*x8770*x8771))+(((-1.0)*r21*x8770*x8783)));
evalcond[7]=(((x8778*x8787))+((r02*x8784))+(((-1.0)*cj3*r01*x8777))+(((-1.0)*cj3*r00*x8770))+(((-1.0)*x8773))+(((-1.0)*sj3*x8769*x8781))+(((-1.0)*sj1*x8772)));
evalcond[8]=((((-1.0)*x8777*x8778))+(((-1.0)*r00*sj3*x8770))+(((-1.0)*cj3*r02*x8786))+x8768+(((-1.0)*r01*x8770*x8783))+(((-1.0)*x8780))+((x8769*x8783)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8788=((1.0)*gconst2);
CheckValue<IkReal> x8789=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r00))+(((-1.0)*r01*x8788)))),-1);
if(!x8789.valid){
continue;
}
CheckValue<IkReal> x8790 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x8788))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8790.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8789.value)))+(x8790.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x8791=IKsin(j4);
IkReal x8792=IKcos(j4);
IkReal x8793=(sj1*sj2);
IkReal x8794=(gconst2*r00);
IkReal x8795=((1.0)*gconst1);
IkReal x8796=(r20*sj3);
IkReal x8797=((1.0)*cj2);
IkReal x8798=(cj1*sj2);
IkReal x8799=(cj3*gconst1);
IkReal x8800=(r11*sj3);
IkReal x8801=(gconst2*r10);
IkReal x8802=((1.0)*gconst2);
IkReal x8803=(r01*sj3);
IkReal x8804=(gconst2*r20);
IkReal x8805=(cj1*x8797);
IkReal x8806=((1.0)*x8792);
IkReal x8807=(gconst1*x8791);
IkReal x8808=(cj3*x8792);
IkReal x8809=(sj3*x8791);
IkReal x8810=(r21*x8802);
IkReal x8811=((1.0)*x8791);
IkReal x8812=(gconst1*x8792);
evalcond[0]=(((r21*x8807))+(((-1.0)*r22*x8806))+(((-1.0)*r20*x8791*x8802)));
evalcond[1]=((((-1.0)*r02*x8806))+((r01*x8807))+(((-1.0)*x8794*x8811)));
evalcond[2]=((1.0)+(((-1.0)*r12*x8806))+((r11*x8807))+(((-1.0)*x8801*x8811)));
evalcond[3]=((((-1.0)*cj3*r10*x8795))+((x8800*x8812))+((r12*x8809))+(((-1.0)*cj3*r11*x8802))+(((-1.0)*sj3*x8801*x8806)));
evalcond[4]=(((x8801*x8808))+(((-1.0)*x8800*x8802))+(((-1.0)*r11*x8795*x8808))+(((-1.0)*r10*sj3*x8795))+(((-1.0)*cj3*r12*x8811)));
evalcond[5]=(((r22*x8809))+x8793+(((-1.0)*cj3*r20*x8795))+((r21*sj3*x8812))+(((-1.0)*x8805))+(((-1.0)*cj3*x8810))+(((-1.0)*x8792*x8796*x8802)));
evalcond[6]=(((cj2*sj1))+(((-1.0)*x8795*x8796))+x8798+(((-1.0)*cj3*r22*x8811))+(((-1.0)*r21*x8795*x8808))+(((-1.0)*sj3*x8810))+((x8804*x8808)));
evalcond[7]=((((-1.0)*x8798))+((x8803*x8812))+((r02*x8809))+(((-1.0)*sj1*x8797))+(((-1.0)*cj3*r00*x8795))+(((-1.0)*sj3*x8794*x8806))+(((-1.0)*cj3*r01*x8802)));
evalcond[8]=(x8793+(((-1.0)*x8805))+(((-1.0)*x8802*x8803))+(((-1.0)*cj3*r02*x8811))+(((-1.0)*r00*sj3*x8795))+(((-1.0)*r01*x8795*x8808))+((x8794*x8808)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x8813=((-1.0)*r20);
IkReal x8814=((-1.0)*r21);
CheckValue<IkReal> x8816 = IKatan2WithCheck(IkReal(x8814),IkReal(x8813),IKFAST_ATAN2_MAGTHRESH);
if(!x8816.valid){
continue;
}
IkReal x8815=((-1.0)*(x8816.value));
sj5=gconst1;
cj5=gconst2;
j5=x8815;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x8813);
rxp0_2=(py*r00);
rxp1_0=(py*x8814);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst0=x8815;
IkReal gconst1=r21;
IkReal gconst2=x8813;
j4eval[0]=(((r00*r20))+((r01*r21)));
j4eval[1]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x8817=((-1.0)*r20);
IkReal x8818=((-1.0)*r21);
CheckValue<IkReal> x8820 = IKatan2WithCheck(IkReal(x8818),IkReal(x8817),IKFAST_ATAN2_MAGTHRESH);
if(!x8820.valid){
continue;
}
IkReal x8819=((-1.0)*(x8820.value));
sj5=gconst1;
cj5=gconst2;
j5=x8819;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x8817);
rxp0_2=(py*r00);
rxp1_0=(py*x8818);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst0=x8819;
IkReal gconst1=r21;
IkReal gconst2=x8817;
IkReal x8821=((1.0)*cj3);
j4eval[0]=(((r00*r20))+((r01*r21)));
j4eval[1]=(((cj3*(r00*r00)))+(((-1.0)*x8821*(r21*r21)))+(((-1.0)*x8821)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x8822=((-1.0)*r20);
IkReal x8823=((-1.0)*r21);
CheckValue<IkReal> x8825 = IKatan2WithCheck(IkReal(x8823),IkReal(x8822),IKFAST_ATAN2_MAGTHRESH);
if(!x8825.valid){
continue;
}
IkReal x8824=((-1.0)*(x8825.value));
sj5=gconst1;
cj5=gconst2;
j5=x8824;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x8822);
rxp0_2=(py*r00);
rxp1_0=(py*x8823);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst0=x8824;
IkReal gconst1=r21;
IkReal gconst2=x8822;
j4eval[0]=cj3;
j4eval[1]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j4]

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8827=IKPowWithIntegerCheck(r12,-1);
if(!x8827.valid){
continue;
}
IkReal x8826=x8827.value;
CheckValue<IkReal> x8828=IKPowWithIntegerCheck(cj3,-1);
if(!x8828.valid){
continue;
}
if( IKabs((x8826*(x8828.value)*((((cj1*cj2*sj0))+(((-1.0)*sj0*sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*cj0*x8826)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x8826*(x8828.value)*((((cj1*cj2*sj0))+(((-1.0)*sj0*sj1*sj2))))))+IKsqr(((-1.0)*cj0*x8826))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x8826*(x8828.value)*((((cj1*cj2*sj0))+(((-1.0)*sj0*sj1*sj2))))), ((-1.0)*cj0*x8826));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x8829=IKsin(j4);
IkReal x8830=IKcos(j4);
IkReal x8831=((1.0)*sj3);
IkReal x8832=(cj2*sj0);
IkReal x8833=(sj1*sj2);
IkReal x8834=(gconst1*r20);
IkReal x8835=(cj1*cj2);
IkReal x8836=(gconst2*r21);
IkReal x8837=((1.0)*cj3);
IkReal x8838=(cj2*sj1);
IkReal x8839=((1.0)*cj0);
IkReal x8840=(gconst2*r01);
IkReal x8841=(gconst1*r00);
IkReal x8842=(cj1*sj2);
IkReal x8843=(gconst1*x8829);
IkReal x8844=(r12*x8829);
IkReal x8845=(gconst1*x8830);
IkReal x8846=(gconst2*r00*x8830);
IkReal x8847=((1.0)*gconst2*x8829);
IkReal x8848=(gconst2*r20*x8830);
evalcond[0]=((((-1.0)*r12*x8830))+(((-1.0)*x8839)));
evalcond[1]=(((r21*x8843))+(((-1.0)*r20*x8847)));
evalcond[2]=(sj0+((r01*x8843))+(((-1.0)*r00*x8847)));
evalcond[3]=(((sj0*x8842))+((sj1*x8832))+((sj3*x8844)));
evalcond[4]=(((cj1*x8832))+(((-1.0)*sj0*x8833))+(((-1.0)*x8837*x8844)));
evalcond[5]=(x8838+x8842+(((-1.0)*r21*x8837*x8845))+((cj3*x8848))+(((-1.0)*x8831*x8836))+(((-1.0)*x8831*x8834)));
evalcond[6]=((((-1.0)*x8834*x8837))+x8833+(((-1.0)*x8835))+(((-1.0)*x8831*x8848))+((r21*sj3*x8845))+(((-1.0)*x8836*x8837)));
evalcond[7]=(((cj0*x8842))+((cj0*x8838))+((r01*sj3*x8845))+(((-1.0)*x8831*x8846))+(((-1.0)*x8837*x8841))+(((-1.0)*x8837*x8840)));
evalcond[8]=((((-1.0)*x8833*x8839))+((cj0*x8835))+(((-1.0)*r01*x8837*x8845))+(((-1.0)*x8831*x8841))+(((-1.0)*x8831*x8840))+((cj3*x8846)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8849=IKPowWithIntegerCheck((((gconst1*r01))+(((-1.0)*gconst2*r00))),-1);
if(!x8849.valid){
continue;
}
CheckValue<IkReal> x8850=IKPowWithIntegerCheck(((((-1.0)*cj3*gconst1*r21))+((cj3*gconst2*r20))),-1);
if(!x8850.valid){
continue;
}
if( IKabs(((-1.0)*sj0*(x8849.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x8850.value)*((((gconst2*r21*sj3))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+((gconst1*r20*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*sj0*(x8849.value)))+IKsqr(((x8850.value)*((((gconst2*r21*sj3))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+((gconst1*r20*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*sj0*(x8849.value)), ((x8850.value)*((((gconst2*r21*sj3))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+((gconst1*r20*sj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x8851=IKsin(j4);
IkReal x8852=IKcos(j4);
IkReal x8853=((1.0)*sj3);
IkReal x8854=(cj2*sj0);
IkReal x8855=(sj1*sj2);
IkReal x8856=(gconst1*r20);
IkReal x8857=(cj1*cj2);
IkReal x8858=(gconst2*r21);
IkReal x8859=((1.0)*cj3);
IkReal x8860=(cj2*sj1);
IkReal x8861=((1.0)*cj0);
IkReal x8862=(gconst2*r01);
IkReal x8863=(gconst1*r00);
IkReal x8864=(cj1*sj2);
IkReal x8865=(gconst1*x8851);
IkReal x8866=(r12*x8851);
IkReal x8867=(gconst1*x8852);
IkReal x8868=(gconst2*r00*x8852);
IkReal x8869=((1.0)*gconst2*x8851);
IkReal x8870=(gconst2*r20*x8852);
evalcond[0]=((((-1.0)*x8861))+(((-1.0)*r12*x8852)));
evalcond[1]=(((r21*x8865))+(((-1.0)*r20*x8869)));
evalcond[2]=(sj0+((r01*x8865))+(((-1.0)*r00*x8869)));
evalcond[3]=(((sj1*x8854))+((sj3*x8866))+((sj0*x8864)));
evalcond[4]=(((cj1*x8854))+(((-1.0)*sj0*x8855))+(((-1.0)*x8859*x8866)));
evalcond[5]=((((-1.0)*r21*x8859*x8867))+(((-1.0)*x8853*x8858))+(((-1.0)*x8853*x8856))+x8864+x8860+((cj3*x8870)));
evalcond[6]=((((-1.0)*x8853*x8870))+x8855+(((-1.0)*x8858*x8859))+((r21*sj3*x8867))+(((-1.0)*x8856*x8859))+(((-1.0)*x8857)));
evalcond[7]=((((-1.0)*x8853*x8868))+((r01*sj3*x8867))+((cj0*x8864))+((cj0*x8860))+(((-1.0)*x8859*x8862))+(((-1.0)*x8859*x8863)));
evalcond[8]=((((-1.0)*x8853*x8862))+(((-1.0)*x8853*x8863))+((cj3*x8868))+(((-1.0)*r01*x8859*x8867))+(((-1.0)*x8855*x8861))+((cj0*x8857)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8871=IKPowWithIntegerCheck((((gconst1*r01))+(((-1.0)*gconst2*r00))),-1);
if(!x8871.valid){
continue;
}
CheckValue<IkReal> x8872=IKPowWithIntegerCheck(r12,-1);
if(!x8872.valid){
continue;
}
if( IKabs(((-1.0)*sj0*(x8871.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*cj0*(x8872.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*sj0*(x8871.value)))+IKsqr(((-1.0)*cj0*(x8872.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*sj0*(x8871.value)), ((-1.0)*cj0*(x8872.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x8873=IKsin(j4);
IkReal x8874=IKcos(j4);
IkReal x8875=((1.0)*sj3);
IkReal x8876=(cj2*sj0);
IkReal x8877=(sj1*sj2);
IkReal x8878=(gconst1*r20);
IkReal x8879=(cj1*cj2);
IkReal x8880=(gconst2*r21);
IkReal x8881=((1.0)*cj3);
IkReal x8882=(cj2*sj1);
IkReal x8883=((1.0)*cj0);
IkReal x8884=(gconst2*r01);
IkReal x8885=(gconst1*r00);
IkReal x8886=(cj1*sj2);
IkReal x8887=(gconst1*x8873);
IkReal x8888=(r12*x8873);
IkReal x8889=(gconst1*x8874);
IkReal x8890=(gconst2*r00*x8874);
IkReal x8891=((1.0)*gconst2*x8873);
IkReal x8892=(gconst2*r20*x8874);
evalcond[0]=((((-1.0)*x8883))+(((-1.0)*r12*x8874)));
evalcond[1]=((((-1.0)*r20*x8891))+((r21*x8887)));
evalcond[2]=((((-1.0)*r00*x8891))+sj0+((r01*x8887)));
evalcond[3]=(((sj3*x8888))+((sj0*x8886))+((sj1*x8876)));
evalcond[4]=((((-1.0)*x8881*x8888))+(((-1.0)*sj0*x8877))+((cj1*x8876)));
evalcond[5]=((((-1.0)*x8875*x8878))+x8886+x8882+(((-1.0)*r21*x8881*x8889))+((cj3*x8892))+(((-1.0)*x8875*x8880)));
evalcond[6]=((((-1.0)*x8879))+(((-1.0)*x8875*x8892))+x8877+((r21*sj3*x8889))+(((-1.0)*x8878*x8881))+(((-1.0)*x8880*x8881)));
evalcond[7]=((((-1.0)*x8881*x8884))+(((-1.0)*x8881*x8885))+(((-1.0)*x8875*x8890))+((cj0*x8882))+((cj0*x8886))+((r01*sj3*x8889)));
evalcond[8]=((((-1.0)*x8877*x8883))+(((-1.0)*r01*x8881*x8889))+((cj3*x8890))+((cj0*x8879))+(((-1.0)*x8875*x8884))+(((-1.0)*x8875*x8885)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8893=gconst1*gconst1;
IkReal x8894=r21*r21;
IkReal x8895=gconst2*gconst2;
IkReal x8896=r20*r20;
IkReal x8897=((1.0)*gconst2);
IkReal x8898=(gconst1*sj3);
IkReal x8899=(cj1*sj2);
IkReal x8900=((1.0)*r20);
IkReal x8901=(r20*r21);
IkReal x8902=(cj2*sj1);
IkReal x8903=(gconst1*r21);
IkReal x8904=(r21*sj3);
CheckValue<IkReal> x8905=IKPowWithIntegerCheck(IKsign((((cj3*x8895*x8896))+((cj3*(r22*r22)))+(((-2.0)*cj3*gconst1*gconst2*x8901))+((cj3*x8893*x8894)))),-1);
if(!x8905.valid){
continue;
}
CheckValue<IkReal> x8906 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x8898*x8900))+(((-1.0)*r22*x8897*x8904))+((r22*x8899))+((r22*x8902)))),IkReal(((((-1.0)*x8894*x8897*x8898))+(((-1.0)*r20*x8897*x8899))+(((-1.0)*x8893*x8900*x8904))+((sj3*x8895*x8901))+((x8902*x8903))+((gconst2*x8896*x8898))+(((-1.0)*r20*x8897*x8902))+((x8899*x8903)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8906.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8905.value)))+(x8906.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x8907=IKsin(j4);
IkReal x8908=IKcos(j4);
IkReal x8909=(gconst2*r00);
IkReal x8910=(cj3*r11);
IkReal x8911=((1.0)*gconst2);
IkReal x8912=(cj2*sj0);
IkReal x8913=(sj1*sj2);
IkReal x8914=((1.0)*gconst1);
IkReal x8915=(r20*sj3);
IkReal x8916=(cj1*cj2);
IkReal x8917=(r21*sj3);
IkReal x8918=(cj3*r21);
IkReal x8919=(cj2*sj1);
IkReal x8920=((1.0)*cj0);
IkReal x8921=(gconst2*r10);
IkReal x8922=(r01*sj3);
IkReal x8923=(r11*sj3);
IkReal x8924=(cj3*r01);
IkReal x8925=(cj1*sj2);
IkReal x8926=((1.0)*x8908);
IkReal x8927=(gconst1*x8907);
IkReal x8928=(cj3*x8908);
IkReal x8929=(sj3*x8907);
IkReal x8930=((1.0)*x8907);
IkReal x8931=(gconst1*x8908);
evalcond[0]=((((-1.0)*r22*x8926))+(((-1.0)*r20*x8907*x8911))+((r21*x8927)));
evalcond[1]=((((-1.0)*r02*x8926))+sj0+(((-1.0)*x8909*x8930))+((r01*x8927)));
evalcond[2]=((((-1.0)*r10*x8907*x8911))+(((-1.0)*x8920))+(((-1.0)*r12*x8926))+((r11*x8927)));
evalcond[3]=((((-1.0)*x8916))+((r22*x8929))+x8913+(((-1.0)*x8908*x8911*x8915))+(((-1.0)*x8911*x8918))+((x8917*x8931))+(((-1.0)*cj3*r20*x8914)));
evalcond[4]=(x8925+x8919+(((-1.0)*cj3*r22*x8930))+(((-1.0)*x8911*x8917))+((gconst2*r20*x8928))+(((-1.0)*x8914*x8915))+(((-1.0)*x8908*x8914*x8918)));
evalcond[5]=((((-1.0)*sj3*x8909*x8926))+((cj0*x8925))+((cj0*x8919))+((r02*x8929))+(((-1.0)*x8911*x8924))+((x8922*x8931))+(((-1.0)*cj3*r00*x8914)));
evalcond[6]=((((-1.0)*cj3*r10*x8914))+(((-1.0)*r10*sj3*x8908*x8911))+(((-1.0)*x8910*x8911))+((r12*x8929))+((sj0*x8925))+((sj1*x8912))+((x8923*x8931)));
evalcond[7]=((((-1.0)*x8908*x8914*x8924))+(((-1.0)*r00*sj3*x8914))+((cj0*x8916))+((x8909*x8928))+(((-1.0)*x8911*x8922))+(((-1.0)*cj3*r02*x8930))+(((-1.0)*x8913*x8920)));
evalcond[8]=(((x8921*x8928))+(((-1.0)*cj3*r12*x8930))+(((-1.0)*sj0*x8913))+(((-1.0)*x8911*x8923))+(((-1.0)*r10*sj3*x8914))+((cj1*x8912))+(((-1.0)*x8908*x8910*x8914)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8932=IKPowWithIntegerCheck(IKsign((((gconst1*r00))+((gconst2*r01)))),-1);
if(!x8932.valid){
continue;
}
CheckValue<IkReal> x8933 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst1*r21))+(((-1.0)*cj0*gconst2*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8933.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8932.value)))+(x8933.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x8934=IKsin(j4);
IkReal x8935=IKcos(j4);
IkReal x8936=(gconst2*r00);
IkReal x8937=(cj3*r11);
IkReal x8938=((1.0)*gconst2);
IkReal x8939=(cj2*sj0);
IkReal x8940=(sj1*sj2);
IkReal x8941=((1.0)*gconst1);
IkReal x8942=(r20*sj3);
IkReal x8943=(cj1*cj2);
IkReal x8944=(r21*sj3);
IkReal x8945=(cj3*r21);
IkReal x8946=(cj2*sj1);
IkReal x8947=((1.0)*cj0);
IkReal x8948=(gconst2*r10);
IkReal x8949=(r01*sj3);
IkReal x8950=(r11*sj3);
IkReal x8951=(cj3*r01);
IkReal x8952=(cj1*sj2);
IkReal x8953=((1.0)*x8935);
IkReal x8954=(gconst1*x8934);
IkReal x8955=(cj3*x8935);
IkReal x8956=(sj3*x8934);
IkReal x8957=((1.0)*x8934);
IkReal x8958=(gconst1*x8935);
evalcond[0]=((((-1.0)*r22*x8953))+(((-1.0)*r20*x8934*x8938))+((r21*x8954)));
evalcond[1]=(sj0+(((-1.0)*x8936*x8957))+((r01*x8954))+(((-1.0)*r02*x8953)));
evalcond[2]=((((-1.0)*r12*x8953))+(((-1.0)*r10*x8934*x8938))+(((-1.0)*x8947))+((r11*x8954)));
evalcond[3]=(((r22*x8956))+((x8944*x8958))+(((-1.0)*cj3*r20*x8941))+(((-1.0)*x8938*x8945))+x8940+(((-1.0)*x8935*x8938*x8942))+(((-1.0)*x8943)));
evalcond[4]=((((-1.0)*x8938*x8944))+x8952+x8946+(((-1.0)*cj3*r22*x8957))+(((-1.0)*x8935*x8941*x8945))+(((-1.0)*x8941*x8942))+((gconst2*r20*x8955)));
evalcond[5]=(((r02*x8956))+(((-1.0)*x8938*x8951))+(((-1.0)*sj3*x8936*x8953))+((cj0*x8946))+((cj0*x8952))+((x8949*x8958))+(((-1.0)*cj3*r00*x8941)));
evalcond[6]=(((sj1*x8939))+((x8950*x8958))+(((-1.0)*r10*sj3*x8935*x8938))+(((-1.0)*cj3*r10*x8941))+((r12*x8956))+(((-1.0)*x8937*x8938))+((sj0*x8952)));
evalcond[7]=(((x8936*x8955))+(((-1.0)*x8938*x8949))+(((-1.0)*x8940*x8947))+(((-1.0)*r00*sj3*x8941))+(((-1.0)*x8935*x8941*x8951))+((cj0*x8943))+(((-1.0)*cj3*r02*x8957)));
evalcond[8]=((((-1.0)*x8935*x8937*x8941))+(((-1.0)*r10*sj3*x8941))+(((-1.0)*x8938*x8950))+((cj1*x8939))+(((-1.0)*sj0*x8940))+(((-1.0)*cj3*r12*x8957))+((x8948*x8955)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8959=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x8959.valid){
continue;
}
CheckValue<IkReal> x8960 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*gconst2*r20*sj0))+((gconst1*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8960.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8959.value)))+(x8960.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x8961=IKsin(j4);
IkReal x8962=IKcos(j4);
IkReal x8963=(gconst2*r00);
IkReal x8964=(cj3*r11);
IkReal x8965=((1.0)*gconst2);
IkReal x8966=(cj2*sj0);
IkReal x8967=(sj1*sj2);
IkReal x8968=((1.0)*gconst1);
IkReal x8969=(r20*sj3);
IkReal x8970=(cj1*cj2);
IkReal x8971=(r21*sj3);
IkReal x8972=(cj3*r21);
IkReal x8973=(cj2*sj1);
IkReal x8974=((1.0)*cj0);
IkReal x8975=(gconst2*r10);
IkReal x8976=(r01*sj3);
IkReal x8977=(r11*sj3);
IkReal x8978=(cj3*r01);
IkReal x8979=(cj1*sj2);
IkReal x8980=((1.0)*x8962);
IkReal x8981=(gconst1*x8961);
IkReal x8982=(cj3*x8962);
IkReal x8983=(sj3*x8961);
IkReal x8984=((1.0)*x8961);
IkReal x8985=(gconst1*x8962);
evalcond[0]=((((-1.0)*r20*x8961*x8965))+((r21*x8981))+(((-1.0)*r22*x8980)));
evalcond[1]=(((r01*x8981))+sj0+(((-1.0)*r02*x8980))+(((-1.0)*x8963*x8984)));
evalcond[2]=((((-1.0)*x8974))+(((-1.0)*r12*x8980))+((r11*x8981))+(((-1.0)*r10*x8961*x8965)));
evalcond[3]=(((r22*x8983))+(((-1.0)*cj3*r20*x8968))+x8967+(((-1.0)*x8965*x8972))+((x8971*x8985))+(((-1.0)*x8970))+(((-1.0)*x8962*x8965*x8969)));
evalcond[4]=((((-1.0)*cj3*r22*x8984))+(((-1.0)*x8968*x8969))+(((-1.0)*x8962*x8968*x8972))+x8979+x8973+(((-1.0)*x8965*x8971))+((gconst2*r20*x8982)));
evalcond[5]=((((-1.0)*sj3*x8963*x8980))+((r02*x8983))+((x8976*x8985))+(((-1.0)*x8965*x8978))+((cj0*x8973))+((cj0*x8979))+(((-1.0)*cj3*r00*x8968)));
evalcond[6]=(((x8977*x8985))+((sj0*x8979))+(((-1.0)*x8964*x8965))+(((-1.0)*r10*sj3*x8962*x8965))+((r12*x8983))+(((-1.0)*cj3*r10*x8968))+((sj1*x8966)));
evalcond[7]=((((-1.0)*cj3*r02*x8984))+(((-1.0)*x8962*x8968*x8978))+(((-1.0)*x8965*x8976))+((cj0*x8970))+(((-1.0)*r00*sj3*x8968))+((x8963*x8982))+(((-1.0)*x8967*x8974)));
evalcond[8]=((((-1.0)*r10*sj3*x8968))+((cj1*x8966))+(((-1.0)*sj0*x8967))+(((-1.0)*x8965*x8977))+((x8975*x8982))+(((-1.0)*cj3*r12*x8984))+(((-1.0)*x8962*x8964*x8968)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x8986=((-1.0)*r21);
IkReal x8988 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x8988)==0){
continue;
}
IkReal x8987=pow(x8988,-0.5);
CheckValue<IkReal> x8989 = IKatan2WithCheck(IkReal(x8986),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8989.valid){
continue;
}
IkReal gconst3=((3.14159265358979)+(((-1.0)*(x8989.value))));
IkReal gconst4=(x8986*x8987);
IkReal gconst5=((1.0)*r20*x8987);
CheckValue<IkReal> x8990 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8990.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x8990.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8991=((-1.0)*r21);
CheckValue<IkReal> x8994 = IKatan2WithCheck(IkReal(x8991),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8994.valid){
continue;
}
IkReal x8992=((1.0)*(x8994.value));
IkReal x8993=x8987;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x8992)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x8992)));
IkReal gconst4=(x8991*x8993);
IkReal gconst5=((1.0)*r20*x8993);
IkReal x8995=r22*r22;
IkReal x8996=((1.0)*x8995);
CheckValue<IkReal> x9000=IKPowWithIntegerCheck(((-1.0)+x8995),-1);
if(!x9000.valid){
continue;
}
IkReal x8997=x9000.value;
if((((1.0)+(((-1.0)*x8996)))) < -0.00001)
continue;
IkReal x8998=IKsqrt(((1.0)+(((-1.0)*x8996))));
IkReal x8999=(sj0*x8997*x8998);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs((x8999+(((-1.0)*x8996*x8999))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9001=((-1.0)*r21);
CheckValue<IkReal> x9004 = IKatan2WithCheck(IkReal(x9001),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9004.valid){
continue;
}
IkReal x9002=((1.0)*(x9004.value));
IkReal x9003=x8987;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9002)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9002)));
IkReal gconst4=(x9001*x9003);
IkReal gconst5=((1.0)*r20*x9003);
IkReal x9005=r22*r22;
IkReal x9006=((1.0)*x9005);
CheckValue<IkReal> x9010=IKPowWithIntegerCheck(((-1.0)+x9005),-1);
if(!x9010.valid){
continue;
}
IkReal x9007=x9010.value;
if((((1.0)+(((-1.0)*x9006)))) < -0.00001)
continue;
IkReal x9008=IKsqrt(((1.0)+(((-1.0)*x9006))));
IkReal x9009=(cj0*x9007*x9008);
j4eval[0]=((IKabs((x9009+(((-1.0)*x9006*x9009)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x9011=((-1.0)*r21);
CheckValue<IkReal> x9014 = IKatan2WithCheck(IkReal(x9011),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9014.valid){
continue;
}
IkReal x9012=((1.0)*(x9014.value));
IkReal x9013=x8987;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9012)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9012)));
IkReal gconst4=(x9011*x9013);
IkReal gconst5=((1.0)*r20*x9013);
IkReal x9015=r22*r22;
IkReal x9016=(cj0*r02);
IkReal x9017=(r12*sj0);
CheckValue<IkReal> x9021=IKPowWithIntegerCheck(((-1.0)+x9015),-1);
if(!x9021.valid){
continue;
}
IkReal x9018=x9021.value;
if((((1.0)+(((-1.0)*x9015)))) < -0.00001)
continue;
IkReal x9019=IKsqrt(((1.0)+(((-1.0)*x9015))));
IkReal x9020=((1.0)*r22*x9018*x9019);
j4eval[0]=0;
j4eval[1]=((IKabs((x9016+x9017)))+(IKabs(((((-1.0)*x9017*x9020))+(((-1.0)*x9016*x9020))))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9022=((-1.0)*r21);
CheckValue<IkReal> x9025 = IKatan2WithCheck(IkReal(x9022),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9025.valid){
continue;
}
IkReal x9023=((1.0)*(x9025.value));
IkReal x9024=x8987;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9023)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9023)));
IkReal gconst4=(x9022*x9024);
IkReal gconst5=((1.0)*r20*x9024);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x9026=((-1.0)*r21);
CheckValue<IkReal> x9029 = IKatan2WithCheck(IkReal(x9026),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9029.valid){
continue;
}
IkReal x9027=((1.0)*(x9029.value));
IkReal x9028=x8987;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9027)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9027)));
IkReal gconst4=(x9026*x9028);
IkReal gconst5=((1.0)*r20*x9028);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x9030=((-1.0)*r21);
CheckValue<IkReal> x9033 = IKatan2WithCheck(IkReal(x9030),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9033.valid){
continue;
}
IkReal x9031=((1.0)*(x9033.value));
IkReal x9032=x8987;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9031)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9031)));
IkReal gconst4=(x9030*x9032);
IkReal gconst5=((1.0)*r20*x9032);
j4eval[0]=r12;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9034=((-1.0)*r21);
CheckValue<IkReal> x9037 = IKatan2WithCheck(IkReal(x9034),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9037.valid){
continue;
}
IkReal x9035=((1.0)*(x9037.value));
IkReal x9036=x8987;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9035)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9035)));
IkReal gconst4=(x9034*x9036);
IkReal gconst5=((1.0)*r20*x9036);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x9038=((-1.0)*r21);
CheckValue<IkReal> x9041 = IKatan2WithCheck(IkReal(x9038),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9041.valid){
continue;
}
IkReal x9039=((1.0)*(x9041.value));
IkReal x9040=x8987;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9039)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9039)));
IkReal gconst4=(x9038*x9040);
IkReal gconst5=((1.0)*r20*x9040);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x9042=((-1.0)*r21);
CheckValue<IkReal> x9045 = IKatan2WithCheck(IkReal(x9042),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9045.valid){
continue;
}
IkReal x9043=((1.0)*(x9045.value));
IkReal x9044=x8987;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9043)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9043)));
IkReal gconst4=(x9042*x9044);
IkReal gconst5=((1.0)*r20*x9044);
IkReal x9046=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x9050=IKPowWithIntegerCheck(x9046,-1);
if(!x9050.valid){
continue;
}
IkReal x9047=x9050.value;
IkReal x9048=((1.0)*x9047);
IkReal x9049=((((-1.0)*(r02*r02)))+(((-1.0)*x9048*(r01*r01)*(r21*r21)))+(((-2.0)*r00*r01*r20*r21*x9047))+(((-1.0)*x9048*(r00*r00)*(r20*r20))));
j4eval[0]=x9049;
j4eval[1]=IKsign(x9049);
j4eval[2]=r02;
j4eval[3]=x9046;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9051=(gconst4*r01);
IkReal x9052=(gconst5*r00);
CheckValue<IkReal> x9053 = IKatan2WithCheck(IkReal((x9051+(((-1.0)*x9052)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x9053.valid){
continue;
}
CheckValue<IkReal> x9054=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r02*r02)))+(((-1.0)*(x9052*x9052)))+(((2.0)*x9051*x9052))+(((-1.0)*(x9051*x9051))))),-1);
if(!x9054.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9053.value)+(((1.5707963267949)*(x9054.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9055=IKcos(j4);
IkReal x9056=IKsin(j4);
IkReal x9057=(gconst4*r11);
IkReal x9058=(gconst5*r10);
IkReal x9059=(gconst5*r00);
IkReal x9060=(gconst5*r20);
IkReal x9061=((1.0)*x9055);
IkReal x9062=(gconst4*x9055);
IkReal x9063=((1.0)*x9056);
IkReal x9064=(gconst4*x9056);
evalcond[0]=(((r01*x9062))+(((-1.0)*x9059*x9061))+((r02*x9056)));
evalcond[1]=(((r21*x9064))+(((-1.0)*r22*x9061))+(((-1.0)*x9060*x9063)));
evalcond[2]=((((-1.0)*x9058*x9063))+((x9056*x9057))+(((-1.0)*r12*x9061)));
evalcond[3]=((1.0)+((r01*x9064))+(((-1.0)*x9059*x9063))+(((-1.0)*r02*x9061)));
evalcond[4]=(((x9055*x9057))+((cj2*sj1))+((cj1*sj2))+((r12*x9056))+(((-1.0)*x9058*x9061)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r21*x9062))+((r22*x9056))+(((-1.0)*x9060*x9061)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9065=((1.0)*gconst5);
CheckValue<IkReal> x9066 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x9065))+((gconst4*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9066.valid){
continue;
}
CheckValue<IkReal> x9067=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x9065))+(((-1.0)*gconst4*r20)))),-1);
if(!x9067.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9066.value)+(((1.5707963267949)*(x9067.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9068=IKcos(j4);
IkReal x9069=IKsin(j4);
IkReal x9070=(gconst4*r11);
IkReal x9071=(gconst5*r10);
IkReal x9072=(gconst5*r00);
IkReal x9073=(gconst5*r20);
IkReal x9074=((1.0)*x9068);
IkReal x9075=(gconst4*x9068);
IkReal x9076=((1.0)*x9069);
IkReal x9077=(gconst4*x9069);
evalcond[0]=((((-1.0)*x9072*x9074))+((r02*x9069))+((r01*x9075)));
evalcond[1]=(((r21*x9077))+(((-1.0)*r22*x9074))+(((-1.0)*x9073*x9076)));
evalcond[2]=((((-1.0)*x9071*x9076))+((x9069*x9070))+(((-1.0)*r12*x9074)));
evalcond[3]=((1.0)+(((-1.0)*x9072*x9076))+(((-1.0)*r02*x9074))+((r01*x9077)));
evalcond[4]=(((x9068*x9070))+(((-1.0)*x9071*x9074))+((cj2*sj1))+((r12*x9069))+((cj1*sj2)));
evalcond[5]=(((r22*x9069))+((r21*x9075))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x9073*x9074)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9078=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x9078.valid){
continue;
}
CheckValue<IkReal> x9079 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9079.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9078.value)))+(x9079.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9080=IKcos(j4);
IkReal x9081=IKsin(j4);
IkReal x9082=(gconst4*r11);
IkReal x9083=(gconst5*r10);
IkReal x9084=(gconst5*r00);
IkReal x9085=(gconst5*r20);
IkReal x9086=((1.0)*x9080);
IkReal x9087=(gconst4*x9080);
IkReal x9088=((1.0)*x9081);
IkReal x9089=(gconst4*x9081);
evalcond[0]=(((r01*x9087))+(((-1.0)*x9084*x9086))+((r02*x9081)));
evalcond[1]=(((r21*x9089))+(((-1.0)*x9085*x9088))+(((-1.0)*r22*x9086)));
evalcond[2]=(((x9081*x9082))+(((-1.0)*x9083*x9088))+(((-1.0)*r12*x9086)));
evalcond[3]=((1.0)+((r01*x9089))+(((-1.0)*x9084*x9088))+(((-1.0)*r02*x9086)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r12*x9081))+((x9080*x9082))+(((-1.0)*x9083*x9086)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r21*x9087))+(((-1.0)*x9085*x9086))+((r22*x9081)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9090=((-1.0)*r21);
CheckValue<IkReal> x9093 = IKatan2WithCheck(IkReal(x9090),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9093.valid){
continue;
}
IkReal x9091=((1.0)*(x9093.value));
IkReal x9092=x8987;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9091)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9091)));
IkReal gconst4=(x9090*x9092);
IkReal gconst5=((1.0)*r20*x9092);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x9094=((-1.0)*r21);
CheckValue<IkReal> x9097 = IKatan2WithCheck(IkReal(x9094),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9097.valid){
continue;
}
IkReal x9095=((1.0)*(x9097.value));
IkReal x9096=x8987;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9095)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9095)));
IkReal gconst4=(x9094*x9096);
IkReal gconst5=((1.0)*r20*x9096);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9098=((-1.0)*r21);
CheckValue<IkReal> x9101 = IKatan2WithCheck(IkReal(x9098),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9101.valid){
continue;
}
IkReal x9099=((1.0)*(x9101.value));
IkReal x9100=x8987;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9099)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9099)));
IkReal gconst4=(x9098*x9100);
IkReal gconst5=((1.0)*r20*x9100);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9102=(gconst5*r00);
IkReal x9103=(gconst4*r01);
CheckValue<IkReal> x9104=IKPowWithIntegerCheck(IKsign(((x9102*x9102)+(x9103*x9103)+(r02*r02)+(((-2.0)*x9102*x9103)))),-1);
if(!x9104.valid){
continue;
}
CheckValue<IkReal> x9105 = IKatan2WithCheck(IkReal(((((-1.0)*x9103))+x9102)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x9105.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9104.value)))+(x9105.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9106=IKsin(j4);
IkReal x9107=IKcos(j4);
IkReal x9108=(gconst4*r11);
IkReal x9109=(gconst5*r10);
IkReal x9110=(gconst4*r01);
IkReal x9111=(gconst5*r00);
IkReal x9112=(gconst4*r21);
IkReal x9113=(gconst5*r20);
IkReal x9114=((1.0)*x9107);
IkReal x9115=((1.0)*x9106);
evalcond[0]=((((-1.0)*x9113*x9115))+((x9106*x9112))+(((-1.0)*r22*x9114)));
evalcond[1]=(((x9106*x9108))+(((-1.0)*x9109*x9115))+(((-1.0)*r12*x9114)));
evalcond[2]=((((-1.0)*x9110*x9114))+(((-1.0)*r02*x9115))+((x9107*x9111)));
evalcond[3]=((1.0)+(((-1.0)*x9111*x9115))+(((-1.0)*r02*x9114))+((x9106*x9110)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x9107*x9109))+(((-1.0)*x9108*x9114))+(((-1.0)*r12*x9115)));
evalcond[5]=((((-1.0)*x9112*x9114))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x9115))+((x9107*x9113)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9116=((1.0)*gconst5);
CheckValue<IkReal> x9117=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x9116))+(((-1.0)*gconst4*r20)))),-1);
if(!x9117.valid){
continue;
}
CheckValue<IkReal> x9118 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x9116))+((gconst4*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9118.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9117.value)))+(x9118.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9119=IKsin(j4);
IkReal x9120=IKcos(j4);
IkReal x9121=(gconst4*r11);
IkReal x9122=(gconst5*r10);
IkReal x9123=(gconst4*r01);
IkReal x9124=(gconst5*r00);
IkReal x9125=(gconst4*r21);
IkReal x9126=(gconst5*r20);
IkReal x9127=((1.0)*x9120);
IkReal x9128=((1.0)*x9119);
evalcond[0]=(((x9119*x9125))+(((-1.0)*r22*x9127))+(((-1.0)*x9126*x9128)));
evalcond[1]=((((-1.0)*r12*x9127))+((x9119*x9121))+(((-1.0)*x9122*x9128)));
evalcond[2]=((((-1.0)*r02*x9128))+(((-1.0)*x9123*x9127))+((x9120*x9124)));
evalcond[3]=((1.0)+(((-1.0)*x9124*x9128))+(((-1.0)*r02*x9127))+((x9119*x9123)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r12*x9128))+((cj1*sj2))+(((-1.0)*x9121*x9127))+((x9120*x9122)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x9128))+(((-1.0)*x9125*x9127))+((x9120*x9126)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9129=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x9129.valid){
continue;
}
CheckValue<IkReal> x9130 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9130.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9129.value)))+(x9130.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9131=IKsin(j4);
IkReal x9132=IKcos(j4);
IkReal x9133=(gconst4*r11);
IkReal x9134=(gconst5*r10);
IkReal x9135=(gconst4*r01);
IkReal x9136=(gconst5*r00);
IkReal x9137=(gconst4*r21);
IkReal x9138=(gconst5*r20);
IkReal x9139=((1.0)*x9132);
IkReal x9140=((1.0)*x9131);
evalcond[0]=(((x9131*x9137))+(((-1.0)*r22*x9139))+(((-1.0)*x9138*x9140)));
evalcond[1]=(((x9131*x9133))+(((-1.0)*r12*x9139))+(((-1.0)*x9134*x9140)));
evalcond[2]=(((x9132*x9136))+(((-1.0)*x9135*x9139))+(((-1.0)*r02*x9140)));
evalcond[3]=((1.0)+((x9131*x9135))+(((-1.0)*r02*x9139))+(((-1.0)*x9136*x9140)));
evalcond[4]=(((cj2*sj1))+((x9132*x9134))+((cj1*sj2))+(((-1.0)*x9133*x9139))+(((-1.0)*r12*x9140)));
evalcond[5]=(((x9132*x9138))+(((-1.0)*x9137*x9139))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x9140)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9141=((-1.0)*r21);
CheckValue<IkReal> x9144 = IKatan2WithCheck(IkReal(x9141),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9144.valid){
continue;
}
IkReal x9142=((1.0)*(x9144.value));
IkReal x9143=x8987;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9142)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9142)));
IkReal gconst4=(x9141*x9143);
IkReal gconst5=((1.0)*r20*x9143);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x9145=((-1.0)*r21);
CheckValue<IkReal> x9148 = IKatan2WithCheck(IkReal(x9145),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9148.valid){
continue;
}
IkReal x9146=((1.0)*(x9148.value));
IkReal x9147=x8987;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9146)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9146)));
IkReal gconst4=(x9145*x9147);
IkReal gconst5=((1.0)*r20*x9147);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9149=((-1.0)*r21);
CheckValue<IkReal> x9152 = IKatan2WithCheck(IkReal(x9149),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9152.valid){
continue;
}
IkReal x9150=((1.0)*(x9152.value));
IkReal x9151=x8987;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9150)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9150)));
IkReal gconst4=(x9149*x9151);
IkReal gconst5=((1.0)*r20*x9151);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9153=(gconst5*r00);
IkReal x9154=(gconst4*r01);
CheckValue<IkReal> x9155 = IKatan2WithCheck(IkReal((x9153+(((-1.0)*x9154)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x9155.valid){
continue;
}
CheckValue<IkReal> x9156=IKPowWithIntegerCheck(IKsign(((x9154*x9154)+(x9153*x9153)+(r02*r02)+(((-2.0)*x9153*x9154)))),-1);
if(!x9156.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9155.value)+(((1.5707963267949)*(x9156.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9157=IKsin(j4);
IkReal x9158=IKcos(j4);
IkReal x9159=(gconst4*r11);
IkReal x9160=(gconst5*r10);
IkReal x9161=(gconst5*r00);
IkReal x9162=(gconst5*r20);
IkReal x9163=((1.0)*x9158);
IkReal x9164=(gconst4*x9157);
IkReal x9165=((1.0)*x9157);
evalcond[0]=((((-1.0)*r22*x9163))+(((-1.0)*x9162*x9165))+((r21*x9164)));
evalcond[1]=((((-1.0)*r12*x9163))+(((-1.0)*x9160*x9165))+((x9157*x9159)));
evalcond[2]=((((-1.0)*r02*x9165))+((x9158*x9161))+(((-1.0)*gconst4*r01*x9163)));
evalcond[3]=((1.0)+((r01*x9164))+(((-1.0)*x9161*x9165))+(((-1.0)*r02*x9163)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x9165))+((cj1*sj2))+(((-1.0)*gconst4*r21*x9163))+((x9158*x9162)));
evalcond[5]=((((-1.0)*x9159*x9163))+(((-1.0)*sj1*sj2))+(((-1.0)*r12*x9165))+((x9158*x9160))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9166=((1.0)*gconst5);
CheckValue<IkReal> x9167=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x9166))+(((-1.0)*gconst4*r20)))),-1);
if(!x9167.valid){
continue;
}
CheckValue<IkReal> x9168 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*r10*x9166)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9168.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9167.value)))+(x9168.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9169=IKsin(j4);
IkReal x9170=IKcos(j4);
IkReal x9171=(gconst4*r11);
IkReal x9172=(gconst5*r10);
IkReal x9173=(gconst5*r00);
IkReal x9174=(gconst5*r20);
IkReal x9175=((1.0)*x9170);
IkReal x9176=(gconst4*x9169);
IkReal x9177=((1.0)*x9169);
evalcond[0]=(((r21*x9176))+(((-1.0)*r22*x9175))+(((-1.0)*x9174*x9177)));
evalcond[1]=(((x9169*x9171))+(((-1.0)*x9172*x9177))+(((-1.0)*r12*x9175)));
evalcond[2]=(((x9170*x9173))+(((-1.0)*r02*x9177))+(((-1.0)*gconst4*r01*x9175)));
evalcond[3]=((1.0)+((r01*x9176))+(((-1.0)*x9173*x9177))+(((-1.0)*r02*x9175)));
evalcond[4]=(((x9170*x9174))+((cj2*sj1))+(((-1.0)*gconst4*r21*x9175))+((cj1*sj2))+(((-1.0)*r22*x9177)));
evalcond[5]=(((x9170*x9172))+(((-1.0)*sj1*sj2))+(((-1.0)*x9171*x9175))+(((-1.0)*r12*x9177))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9178=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x9178.valid){
continue;
}
CheckValue<IkReal> x9179 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9179.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9178.value)))+(x9179.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9180=IKsin(j4);
IkReal x9181=IKcos(j4);
IkReal x9182=(gconst4*r11);
IkReal x9183=(gconst5*r10);
IkReal x9184=(gconst5*r00);
IkReal x9185=(gconst5*r20);
IkReal x9186=((1.0)*x9181);
IkReal x9187=(gconst4*x9180);
IkReal x9188=((1.0)*x9180);
evalcond[0]=((((-1.0)*x9185*x9188))+(((-1.0)*r22*x9186))+((r21*x9187)));
evalcond[1]=((((-1.0)*x9183*x9188))+(((-1.0)*r12*x9186))+((x9180*x9182)));
evalcond[2]=((((-1.0)*r02*x9188))+((x9181*x9184))+(((-1.0)*gconst4*r01*x9186)));
evalcond[3]=((1.0)+(((-1.0)*r02*x9186))+(((-1.0)*x9184*x9188))+((r01*x9187)));
evalcond[4]=(((cj2*sj1))+((x9181*x9185))+(((-1.0)*r22*x9188))+((cj1*sj2))+(((-1.0)*gconst4*r21*x9186)));
evalcond[5]=((((-1.0)*r12*x9188))+((x9181*x9183))+(((-1.0)*x9182*x9186))+(((-1.0)*sj1*sj2))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9189=((-1.0)*r21);
CheckValue<IkReal> x9192 = IKatan2WithCheck(IkReal(x9189),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9192.valid){
continue;
}
IkReal x9190=((1.0)*(x9192.value));
IkReal x9191=x8987;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9190)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9190)));
IkReal gconst4=(x9189*x9191);
IkReal gconst5=((1.0)*r20*x9191);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x9193=((-1.0)*r21);
CheckValue<IkReal> x9196 = IKatan2WithCheck(IkReal(x9193),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9196.valid){
continue;
}
IkReal x9194=((1.0)*(x9196.value));
IkReal x9195=x8987;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9194)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9194)));
IkReal gconst4=(x9193*x9195);
IkReal gconst5=((1.0)*r20*x9195);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x9197=((-1.0)*r21);
CheckValue<IkReal> x9200 = IKatan2WithCheck(IkReal(x9197),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9200.valid){
continue;
}
IkReal x9198=((1.0)*(x9200.value));
IkReal x9199=x8987;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9198)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9198)));
IkReal gconst4=(x9197*x9199);
IkReal gconst5=((1.0)*r20*x9199);
IkReal x9201=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x9205=IKPowWithIntegerCheck(x9201,-1);
if(!x9205.valid){
continue;
}
IkReal x9202=x9205.value;
IkReal x9203=((1.0)*x9202);
IkReal x9204=((((-2.0)*r00*r01*r20*r21*x9202))+(((-1.0)*(r02*r02)))+(((-1.0)*x9203*(r00*r00)*(r20*r20)))+(((-1.0)*x9203*(r01*r01)*(r21*r21))));
j4eval[0]=x9204;
j4eval[1]=IKsign(x9204);
j4eval[2]=r02;
j4eval[3]=x9201;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9206=(gconst4*r01);
IkReal x9207=(gconst5*r00);
CheckValue<IkReal> x9208=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r02*r02)))+(((-1.0)*(x9207*x9207)))+(((2.0)*x9206*x9207))+(((-1.0)*(x9206*x9206))))),-1);
if(!x9208.valid){
continue;
}
CheckValue<IkReal> x9209 = IKatan2WithCheck(IkReal((x9206+(((-1.0)*x9207)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x9209.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9208.value)))+(x9209.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9210=IKcos(j4);
IkReal x9211=IKsin(j4);
IkReal x9212=(gconst5*r10);
IkReal x9213=(gconst5*r00);
IkReal x9214=(gconst5*r20);
IkReal x9215=((1.0)*x9210);
IkReal x9216=(gconst4*x9211);
IkReal x9217=(gconst4*x9210);
IkReal x9218=((1.0)*x9211);
evalcond[0]=((((-1.0)*x9213*x9215))+((r02*x9211))+((r01*x9217)));
evalcond[1]=(((r21*x9216))+(((-1.0)*x9214*x9218))+(((-1.0)*r22*x9215)));
evalcond[2]=((((-1.0)*x9212*x9218))+((r11*x9216))+(((-1.0)*r12*x9215)));
evalcond[3]=((1.0)+(((-1.0)*r02*x9215))+(((-1.0)*x9213*x9218))+((r01*x9216)));
evalcond[4]=(((cj2*sj1))+((r21*x9217))+((cj1*sj2))+((r22*x9211))+(((-1.0)*x9214*x9215)));
evalcond[5]=((((-1.0)*x9212*x9215))+(((-1.0)*sj1*sj2))+((r12*x9211))+((r11*x9217))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9219=((1.0)*gconst5);
CheckValue<IkReal> x9220 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x9219))+((gconst4*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9220.valid){
continue;
}
CheckValue<IkReal> x9221=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x9219))+(((-1.0)*gconst4*r20)))),-1);
if(!x9221.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9220.value)+(((1.5707963267949)*(x9221.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9222=IKcos(j4);
IkReal x9223=IKsin(j4);
IkReal x9224=(gconst5*r10);
IkReal x9225=(gconst5*r00);
IkReal x9226=(gconst5*r20);
IkReal x9227=((1.0)*x9222);
IkReal x9228=(gconst4*x9223);
IkReal x9229=(gconst4*x9222);
IkReal x9230=((1.0)*x9223);
evalcond[0]=(((r01*x9229))+((r02*x9223))+(((-1.0)*x9225*x9227)));
evalcond[1]=((((-1.0)*x9226*x9230))+((r21*x9228))+(((-1.0)*r22*x9227)));
evalcond[2]=(((r11*x9228))+(((-1.0)*r12*x9227))+(((-1.0)*x9224*x9230)));
evalcond[3]=((1.0)+((r01*x9228))+(((-1.0)*x9225*x9230))+(((-1.0)*r02*x9227)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r21*x9229))+((r22*x9223))+(((-1.0)*x9226*x9227)));
evalcond[5]=((((-1.0)*sj1*sj2))+((r12*x9223))+((r11*x9229))+(((-1.0)*x9224*x9227))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9231=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x9231.valid){
continue;
}
CheckValue<IkReal> x9232 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9232.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9231.value)))+(x9232.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9233=IKcos(j4);
IkReal x9234=IKsin(j4);
IkReal x9235=(gconst5*r10);
IkReal x9236=(gconst5*r00);
IkReal x9237=(gconst5*r20);
IkReal x9238=((1.0)*x9233);
IkReal x9239=(gconst4*x9234);
IkReal x9240=(gconst4*x9233);
IkReal x9241=((1.0)*x9234);
evalcond[0]=((((-1.0)*x9236*x9238))+((r02*x9234))+((r01*x9240)));
evalcond[1]=((((-1.0)*x9237*x9241))+((r21*x9239))+(((-1.0)*r22*x9238)));
evalcond[2]=((((-1.0)*x9235*x9241))+(((-1.0)*r12*x9238))+((r11*x9239)));
evalcond[3]=((1.0)+(((-1.0)*x9236*x9241))+((r01*x9239))+(((-1.0)*r02*x9238)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x9237*x9238))+((cj1*sj2))+((r21*x9240))+((r22*x9234)));
evalcond[5]=((((-1.0)*x9235*x9238))+(((-1.0)*sj1*sj2))+((cj1*cj2))+((r12*x9234))+((r11*x9240)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x9242=((-1.0)*r21);
IkReal x9243=((-1.0)*r20);
CheckValue<IkReal> x9245 = IKatan2WithCheck(IkReal(x9242),IkReal(x9243),IKFAST_ATAN2_MAGTHRESH);
if(!x9245.valid){
continue;
}
IkReal x9244=((1.0)*(x9245.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9244)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x9243);
rxp0_2=(py*r00);
rxp1_0=(py*x9242);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9244)));
IkReal gconst4=x9242;
IkReal gconst5=((1.0)*r20);
IkReal x9246=((1.0)*r01*r21);
IkReal x9247=((1.0)*r00*r20);
j4eval[0]=((((-1.0)*x9246))+(((-1.0)*x9247)));
j4eval[1]=((((-1.0)*sj3*x9246))+(((-1.0)*sj3*x9247)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9248=((-1.0)*r21);
IkReal x9249=((-1.0)*r20);
CheckValue<IkReal> x9251 = IKatan2WithCheck(IkReal(x9248),IkReal(x9249),IKFAST_ATAN2_MAGTHRESH);
if(!x9251.valid){
continue;
}
IkReal x9250=((1.0)*(x9251.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9250)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x9249);
rxp0_2=(py*r00);
rxp1_0=(py*x9248);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9250)));
IkReal gconst4=x9248;
IkReal gconst5=((1.0)*r20);
IkReal x9252=((1.0)*r01*r21);
IkReal x9253=((1.0)*r00*r20);
j4eval[0]=((((-1.0)*x9253))+(((-1.0)*x9252)));
j4eval[1]=(((cj3*x9253))+((cj3*x9252)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x9254=((-1.0)*r21);
IkReal x9255=((-1.0)*r20);
CheckValue<IkReal> x9257 = IKatan2WithCheck(IkReal(x9254),IkReal(x9255),IKFAST_ATAN2_MAGTHRESH);
if(!x9257.valid){
continue;
}
IkReal x9256=((1.0)*(x9257.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9256)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x9255);
rxp0_2=(py*r00);
rxp1_0=(py*x9254);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9256)));
IkReal gconst4=x9254;
IkReal gconst5=((1.0)*r20);
IkReal x9258=((1.0)*sj3);
j4eval[0]=r12;
j4eval[1]=sj3;
j4eval[2]=((((-1.0)*r01*r21*x9258))+(((-1.0)*r00*r20*x9258)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9259=IKPowWithIntegerCheck(r12,-1);
if(!x9259.valid){
continue;
}
CheckValue<IkReal> x9260=IKPowWithIntegerCheck(sj3,-1);
if(!x9260.valid){
continue;
}
CheckValue<IkReal> x9261=IKPowWithIntegerCheck((((gconst4*r01*sj3))+(((-1.0)*gconst5*r00*sj3))),-1);
if(!x9261.valid){
continue;
}
if( IKabs(((x9259.value)*(x9260.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x9261.value)*((((cj3*gconst5*r01))+((cj3*gconst4*r00)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x9259.value)*(x9260.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))))+IKsqr(((x9261.value)*((((cj3*gconst5*r01))+((cj3*gconst4*r00))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x9259.value)*(x9260.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))), ((x9261.value)*((((cj3*gconst5*r01))+((cj3*gconst4*r00))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9262=IKsin(j4);
IkReal x9263=IKcos(j4);
IkReal x9264=(cj2*sj1);
IkReal x9265=(cj1*sj2);
IkReal x9266=(sj1*sj2);
IkReal x9267=((1.0)*r01);
IkReal x9268=(r21*sj3);
IkReal x9269=(gconst5*sj3);
IkReal x9270=(cj3*gconst5);
IkReal x9271=((1.0)*r21);
IkReal x9272=((1.0)*r00);
IkReal x9273=(cj3*gconst4);
IkReal x9274=((1.0)*r20);
IkReal x9275=(gconst4*sj3);
IkReal x9276=(cj1*cj2);
IkReal x9277=(gconst4*x9263);
IkReal x9278=(r12*x9262);
IkReal x9279=(gconst4*x9262);
IkReal x9280=(r00*x9263);
IkReal x9281=(r20*x9263);
IkReal x9282=(gconst5*x9262);
IkReal x9283=(x9265+x9264);
evalcond[0]=((-1.0)*r12*x9263);
evalcond[1]=(x9283+((sj3*x9278)));
evalcond[2]=((((-1.0)*x9274*x9282))+((r21*x9279)));
evalcond[3]=((1.0)+((r01*x9279))+(((-1.0)*x9272*x9282)));
evalcond[4]=(x9276+(((-1.0)*cj3*x9278))+(((-1.0)*x9266)));
evalcond[5]=(((r01*x9263*x9275))+(((-1.0)*x9267*x9270))+(((-1.0)*x9263*x9269*x9272))+(((-1.0)*x9272*x9273)));
evalcond[6]=((((-1.0)*x9263*x9267*x9273))+(((-1.0)*x9267*x9269))+((x9270*x9280))+(((-1.0)*x9272*x9275)));
evalcond[7]=(x9283+((x9270*x9281))+(((-1.0)*gconst5*x9268))+(((-1.0)*x9274*x9275))+(((-1.0)*x9263*x9271*x9273)));
evalcond[8]=(x9266+((x9268*x9277))+(((-1.0)*x9273*x9274))+(((-1.0)*x9276))+(((-1.0)*x9270*x9271))+(((-1.0)*x9263*x9269*x9274)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9284=(gconst4*r01);
IkReal x9285=(gconst5*r00);
CheckValue<IkReal> x9286=IKPowWithIntegerCheck((x9284+(((-1.0)*x9285))),-1);
if(!x9286.valid){
continue;
}
CheckValue<IkReal> x9287=IKPowWithIntegerCheck((((cj3*x9285))+(((-1.0)*cj3*x9284))),-1);
if(!x9287.valid){
continue;
}
if( IKabs(((-1.0)*(x9286.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x9287.value)*((((gconst5*r01*sj3))+((gconst4*r00*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x9286.value)))+IKsqr(((x9287.value)*((((gconst5*r01*sj3))+((gconst4*r00*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x9286.value)), ((x9287.value)*((((gconst5*r01*sj3))+((gconst4*r00*sj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9288=IKsin(j4);
IkReal x9289=IKcos(j4);
IkReal x9290=(cj2*sj1);
IkReal x9291=(cj1*sj2);
IkReal x9292=(sj1*sj2);
IkReal x9293=((1.0)*r01);
IkReal x9294=(r21*sj3);
IkReal x9295=(gconst5*sj3);
IkReal x9296=(cj3*gconst5);
IkReal x9297=((1.0)*r21);
IkReal x9298=((1.0)*r00);
IkReal x9299=(cj3*gconst4);
IkReal x9300=((1.0)*r20);
IkReal x9301=(gconst4*sj3);
IkReal x9302=(cj1*cj2);
IkReal x9303=(gconst4*x9289);
IkReal x9304=(r12*x9288);
IkReal x9305=(gconst4*x9288);
IkReal x9306=(r00*x9289);
IkReal x9307=(r20*x9289);
IkReal x9308=(gconst5*x9288);
IkReal x9309=(x9290+x9291);
evalcond[0]=((-1.0)*r12*x9289);
evalcond[1]=(x9309+((sj3*x9304)));
evalcond[2]=((((-1.0)*x9300*x9308))+((r21*x9305)));
evalcond[3]=((1.0)+((r01*x9305))+(((-1.0)*x9298*x9308)));
evalcond[4]=(x9302+(((-1.0)*cj3*x9304))+(((-1.0)*x9292)));
evalcond[5]=(((r01*x9289*x9301))+(((-1.0)*x9289*x9295*x9298))+(((-1.0)*x9293*x9296))+(((-1.0)*x9298*x9299)));
evalcond[6]=(((x9296*x9306))+(((-1.0)*x9293*x9295))+(((-1.0)*x9298*x9301))+(((-1.0)*x9289*x9293*x9299)));
evalcond[7]=((((-1.0)*x9300*x9301))+x9309+(((-1.0)*gconst5*x9294))+((x9296*x9307))+(((-1.0)*x9289*x9297*x9299)));
evalcond[8]=((((-1.0)*x9296*x9297))+(((-1.0)*x9289*x9295*x9300))+x9292+((x9294*x9303))+(((-1.0)*x9299*x9300))+(((-1.0)*x9302)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9310=(gconst4*r01);
IkReal x9311=((1.0)*gconst5*r00);
CheckValue<IkReal> x9312=IKPowWithIntegerCheck((x9310+(((-1.0)*x9311))),-1);
if(!x9312.valid){
continue;
}
CheckValue<IkReal> x9313=IKPowWithIntegerCheck(((((-1.0)*sj3*x9311))+((sj3*x9310))),-1);
if(!x9313.valid){
continue;
}
if( IKabs(((-1.0)*(x9312.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x9313.value)*((((cj3*gconst5*r01))+((cj3*gconst4*r00)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x9312.value)))+IKsqr(((x9313.value)*((((cj3*gconst5*r01))+((cj3*gconst4*r00))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x9312.value)), ((x9313.value)*((((cj3*gconst5*r01))+((cj3*gconst4*r00))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9314=IKsin(j4);
IkReal x9315=IKcos(j4);
IkReal x9316=(cj2*sj1);
IkReal x9317=(cj1*sj2);
IkReal x9318=(sj1*sj2);
IkReal x9319=((1.0)*r01);
IkReal x9320=(r21*sj3);
IkReal x9321=(gconst5*sj3);
IkReal x9322=(cj3*gconst5);
IkReal x9323=((1.0)*r21);
IkReal x9324=((1.0)*r00);
IkReal x9325=(cj3*gconst4);
IkReal x9326=((1.0)*r20);
IkReal x9327=(gconst4*sj3);
IkReal x9328=(cj1*cj2);
IkReal x9329=(gconst4*x9315);
IkReal x9330=(r12*x9314);
IkReal x9331=(gconst4*x9314);
IkReal x9332=(r00*x9315);
IkReal x9333=(r20*x9315);
IkReal x9334=(gconst5*x9314);
IkReal x9335=(x9317+x9316);
evalcond[0]=((-1.0)*r12*x9315);
evalcond[1]=(x9335+((sj3*x9330)));
evalcond[2]=((((-1.0)*x9326*x9334))+((r21*x9331)));
evalcond[3]=((1.0)+(((-1.0)*x9324*x9334))+((r01*x9331)));
evalcond[4]=(x9328+(((-1.0)*cj3*x9330))+(((-1.0)*x9318)));
evalcond[5]=((((-1.0)*x9324*x9325))+((r01*x9315*x9327))+(((-1.0)*x9319*x9322))+(((-1.0)*x9315*x9321*x9324)));
evalcond[6]=((((-1.0)*x9324*x9327))+(((-1.0)*x9319*x9321))+(((-1.0)*x9315*x9319*x9325))+((x9322*x9332)));
evalcond[7]=(x9335+(((-1.0)*x9326*x9327))+(((-1.0)*gconst5*x9320))+(((-1.0)*x9315*x9323*x9325))+((x9322*x9333)));
evalcond[8]=((((-1.0)*x9322*x9323))+(((-1.0)*x9328))+x9318+(((-1.0)*x9325*x9326))+(((-1.0)*x9315*x9321*x9326))+((x9320*x9329)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9336=gconst4*gconst4;
IkReal x9337=gconst5*gconst5;
IkReal x9338=(gconst4*r00);
IkReal x9339=(gconst5*r01);
IkReal x9340=((1.0)*sj3);
IkReal x9341=((1.0)*cj3);
IkReal x9342=(r20*sj3);
IkReal x9343=(r22*x9340);
IkReal x9344=(r21*x9336);
CheckValue<IkReal> x9345=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r20*x9339*x9341))+((cj3*r01*x9344))+(((-1.0)*gconst5*r21*x9338*x9341))+((cj3*r02*r22))+((cj3*r00*r20*x9337)))),-1);
if(!x9345.valid){
continue;
}
CheckValue<IkReal> x9346 = IKatan2WithCheck(IkReal(((((-1.0)*x9338*x9343))+(((-1.0)*x9339*x9343)))),IkReal((((r01*x9337*x9342))+(((-1.0)*gconst4*r21*x9339*x9340))+(((-1.0)*r00*x9340*x9344))+((gconst5*x9338*x9342)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9346.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9345.value)))+(x9346.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9347=IKsin(j4);
IkReal x9348=IKcos(j4);
IkReal x9349=(cj2*sj1);
IkReal x9350=(cj1*sj2);
IkReal x9351=(cj3*gconst4);
IkReal x9352=(sj1*sj2);
IkReal x9353=(cj1*cj2);
IkReal x9354=((1.0)*gconst5);
IkReal x9355=(gconst5*sj3);
IkReal x9356=((1.0)*r10);
IkReal x9357=((1.0)*r00);
IkReal x9358=(gconst4*sj3);
IkReal x9359=((1.0)*r20);
IkReal x9360=((1.0)*x9348);
IkReal x9361=(gconst4*x9347);
IkReal x9362=(r12*x9347);
IkReal x9363=(sj3*x9347);
IkReal x9364=(x9349+x9350);
IkReal x9365=(x9348*x9358);
IkReal x9366=(cj3*gconst5*x9348);
IkReal x9367=((1.0)*cj3*x9347);
evalcond[0]=(((r21*x9361))+(((-1.0)*r20*x9347*x9354))+(((-1.0)*r22*x9360)));
evalcond[1]=(((r11*x9361))+(((-1.0)*r10*x9347*x9354))+(((-1.0)*r12*x9360)));
evalcond[2]=((1.0)+(((-1.0)*r00*x9347*x9354))+(((-1.0)*r02*x9360))+((r01*x9361)));
evalcond[3]=((((-1.0)*r00*sj3*x9348*x9354))+((r02*x9363))+((r01*x9365))+(((-1.0)*cj3*r01*x9354))+(((-1.0)*x9351*x9357)));
evalcond[4]=((((-1.0)*r01*x9351*x9360))+(((-1.0)*r02*x9367))+(((-1.0)*r01*sj3*x9354))+(((-1.0)*x9357*x9358))+((r00*x9366)));
evalcond[5]=(x9364+(((-1.0)*r10*sj3*x9348*x9354))+((sj3*x9362))+(((-1.0)*cj3*r11*x9354))+((r11*x9365))+(((-1.0)*x9351*x9356)));
evalcond[6]=(((r21*x9365))+x9352+(((-1.0)*x9353))+(((-1.0)*r20*sj3*x9348*x9354))+((r22*x9363))+(((-1.0)*x9351*x9359))+(((-1.0)*cj3*r21*x9354)));
evalcond[7]=(x9364+(((-1.0)*r21*sj3*x9354))+(((-1.0)*r21*x9351*x9360))+(((-1.0)*x9358*x9359))+(((-1.0)*r22*x9367))+((r20*x9366)));
evalcond[8]=((((-1.0)*r11*x9351*x9360))+x9353+(((-1.0)*x9352))+(((-1.0)*cj3*x9362))+(((-1.0)*x9356*x9358))+(((-1.0)*r11*sj3*x9354))+((r10*x9366)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9368=((1.0)*gconst5);
CheckValue<IkReal> x9369=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x9368))+(((-1.0)*gconst4*r20)))),-1);
if(!x9369.valid){
continue;
}
CheckValue<IkReal> x9370 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x9368))+((gconst4*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9370.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9369.value)))+(x9370.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9371=IKsin(j4);
IkReal x9372=IKcos(j4);
IkReal x9373=(cj2*sj1);
IkReal x9374=(cj1*sj2);
IkReal x9375=(cj3*gconst4);
IkReal x9376=(sj1*sj2);
IkReal x9377=(cj1*cj2);
IkReal x9378=((1.0)*gconst5);
IkReal x9379=(gconst5*sj3);
IkReal x9380=((1.0)*r10);
IkReal x9381=((1.0)*r00);
IkReal x9382=(gconst4*sj3);
IkReal x9383=((1.0)*r20);
IkReal x9384=((1.0)*x9372);
IkReal x9385=(gconst4*x9371);
IkReal x9386=(r12*x9371);
IkReal x9387=(sj3*x9371);
IkReal x9388=(x9373+x9374);
IkReal x9389=(x9372*x9382);
IkReal x9390=(cj3*gconst5*x9372);
IkReal x9391=((1.0)*cj3*x9371);
evalcond[0]=(((r21*x9385))+(((-1.0)*r20*x9371*x9378))+(((-1.0)*r22*x9384)));
evalcond[1]=(((r11*x9385))+(((-1.0)*r10*x9371*x9378))+(((-1.0)*r12*x9384)));
evalcond[2]=((1.0)+(((-1.0)*r02*x9384))+(((-1.0)*r00*x9371*x9378))+((r01*x9385)));
evalcond[3]=(((r02*x9387))+(((-1.0)*r00*sj3*x9372*x9378))+(((-1.0)*cj3*r01*x9378))+(((-1.0)*x9375*x9381))+((r01*x9389)));
evalcond[4]=((((-1.0)*x9381*x9382))+(((-1.0)*r02*x9391))+(((-1.0)*r01*x9375*x9384))+(((-1.0)*r01*sj3*x9378))+((r00*x9390)));
evalcond[5]=(((sj3*x9386))+x9388+(((-1.0)*r10*sj3*x9372*x9378))+((r11*x9389))+(((-1.0)*x9375*x9380))+(((-1.0)*cj3*r11*x9378)));
evalcond[6]=(x9376+((r21*x9389))+((r22*x9387))+(((-1.0)*r20*sj3*x9372*x9378))+(((-1.0)*x9377))+(((-1.0)*cj3*r21*x9378))+(((-1.0)*x9375*x9383)));
evalcond[7]=(x9388+((r20*x9390))+(((-1.0)*r21*sj3*x9378))+(((-1.0)*r22*x9391))+(((-1.0)*r21*x9375*x9384))+(((-1.0)*x9382*x9383)));
evalcond[8]=(((r10*x9390))+(((-1.0)*r11*sj3*x9378))+x9377+(((-1.0)*r11*x9375*x9384))+(((-1.0)*cj3*x9386))+(((-1.0)*x9380*x9382))+(((-1.0)*x9376)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9392=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x9392.valid){
continue;
}
CheckValue<IkReal> x9393 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9393.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9392.value)))+(x9393.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9394=IKsin(j4);
IkReal x9395=IKcos(j4);
IkReal x9396=(cj2*sj1);
IkReal x9397=(cj1*sj2);
IkReal x9398=(cj3*gconst4);
IkReal x9399=(sj1*sj2);
IkReal x9400=(cj1*cj2);
IkReal x9401=((1.0)*gconst5);
IkReal x9402=(gconst5*sj3);
IkReal x9403=((1.0)*r10);
IkReal x9404=((1.0)*r00);
IkReal x9405=(gconst4*sj3);
IkReal x9406=((1.0)*r20);
IkReal x9407=((1.0)*x9395);
IkReal x9408=(gconst4*x9394);
IkReal x9409=(r12*x9394);
IkReal x9410=(sj3*x9394);
IkReal x9411=(x9397+x9396);
IkReal x9412=(x9395*x9405);
IkReal x9413=(cj3*gconst5*x9395);
IkReal x9414=((1.0)*cj3*x9394);
evalcond[0]=((((-1.0)*r22*x9407))+(((-1.0)*r20*x9394*x9401))+((r21*x9408)));
evalcond[1]=(((r11*x9408))+(((-1.0)*r10*x9394*x9401))+(((-1.0)*r12*x9407)));
evalcond[2]=((1.0)+((r01*x9408))+(((-1.0)*r00*x9394*x9401))+(((-1.0)*r02*x9407)));
evalcond[3]=((((-1.0)*r00*sj3*x9395*x9401))+((r02*x9410))+((r01*x9412))+(((-1.0)*cj3*r01*x9401))+(((-1.0)*x9398*x9404)));
evalcond[4]=((((-1.0)*r01*sj3*x9401))+(((-1.0)*r02*x9414))+((r00*x9413))+(((-1.0)*x9404*x9405))+(((-1.0)*r01*x9398*x9407)));
evalcond[5]=(((sj3*x9409))+((r11*x9412))+(((-1.0)*r10*sj3*x9395*x9401))+x9411+(((-1.0)*cj3*r11*x9401))+(((-1.0)*x9398*x9403)));
evalcond[6]=(((r21*x9412))+x9399+(((-1.0)*x9400))+(((-1.0)*r20*sj3*x9395*x9401))+(((-1.0)*cj3*r21*x9401))+((r22*x9410))+(((-1.0)*x9398*x9406)));
evalcond[7]=(((r20*x9413))+(((-1.0)*r21*sj3*x9401))+(((-1.0)*x9405*x9406))+(((-1.0)*r21*x9398*x9407))+(((-1.0)*r22*x9414))+x9411);
evalcond[8]=(((r10*x9413))+(((-1.0)*cj3*x9409))+(((-1.0)*r11*sj3*x9401))+(((-1.0)*x9399))+x9400+(((-1.0)*x9403*x9405))+(((-1.0)*r11*x9398*x9407)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x9415=((-1.0)*r21);
CheckValue<IkReal> x9418 = IKatan2WithCheck(IkReal(x9415),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9418.valid){
continue;
}
IkReal x9416=((1.0)*(x9418.value));
IkReal x9417=x8987;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9416)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9416)));
IkReal gconst4=(x9415*x9417);
IkReal gconst5=((1.0)*r20*x9417);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r12;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9419=((-1.0)*r21);
CheckValue<IkReal> x9422 = IKatan2WithCheck(IkReal(x9419),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9422.valid){
continue;
}
IkReal x9420=((1.0)*(x9422.value));
IkReal x9421=x8987;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9420)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9420)));
IkReal gconst4=(x9419*x9421);
IkReal gconst5=((1.0)*r20*x9421);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x9423=((-1.0)*r21);
CheckValue<IkReal> x9426 = IKatan2WithCheck(IkReal(x9423),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9426.valid){
continue;
}
IkReal x9424=((1.0)*(x9426.value));
IkReal x9425=x8987;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9424)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9424)));
IkReal gconst4=(x9423*x9425);
IkReal gconst5=((1.0)*r20*x9425);
j4eval[0]=r12;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x9427=((-1.0)*r21);
CheckValue<IkReal> x9430 = IKatan2WithCheck(IkReal(x9427),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9430.valid){
continue;
}
IkReal x9428=((1.0)*(x9430.value));
IkReal x9429=x8987;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9428)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9428)));
IkReal gconst4=(x9427*x9429);
IkReal gconst5=((1.0)*r20*x9429);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r12;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9431=((-1.0)*r21);
CheckValue<IkReal> x9434 = IKatan2WithCheck(IkReal(x9431),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9434.valid){
continue;
}
IkReal x9432=((1.0)*(x9434.value));
IkReal x9433=x8987;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9432)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9432)));
IkReal gconst4=(x9431*x9433);
IkReal gconst5=((1.0)*r20*x9433);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9435=((-1.0)*r21);
CheckValue<IkReal> x9438 = IKatan2WithCheck(IkReal(x9435),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9438.valid){
continue;
}
IkReal x9436=((1.0)*(x9438.value));
IkReal x9437=x8987;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9436)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9436)));
IkReal gconst4=(x9435*x9437);
IkReal gconst5=((1.0)*r20*x9437);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9439=(gconst4*r01);
IkReal x9440=(gconst5*r00);
CheckValue<IkReal> x9441=IKPowWithIntegerCheck(IKsign(((((-2.0)*x9439*x9440))+(x9440*x9440)+(r02*r02)+(x9439*x9439))),-1);
if(!x9441.valid){
continue;
}
CheckValue<IkReal> x9442 = IKatan2WithCheck(IkReal(((((-1.0)*x9440))+x9439)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x9442.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9441.value)))+(x9442.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9443=IKcos(j4);
IkReal x9444=IKsin(j4);
IkReal x9445=(gconst4*r11);
IkReal x9446=(gconst5*r10);
IkReal x9447=((1.0)*cj1);
IkReal x9448=(gconst5*r00);
IkReal x9449=(gconst5*r20);
IkReal x9450=((1.0)*x9443);
IkReal x9451=(gconst4*x9443);
IkReal x9452=((1.0)*x9444);
IkReal x9453=(gconst4*x9444);
evalcond[0]=(((r01*x9451))+((r02*x9444))+(((-1.0)*x9448*x9450)));
evalcond[1]=(((r21*x9453))+(((-1.0)*r22*x9450))+(((-1.0)*x9449*x9452)));
evalcond[2]=((((-1.0)*x9446*x9452))+((x9444*x9445))+(((-1.0)*r12*x9450)));
evalcond[3]=((-1.0)+((r01*x9453))+(((-1.0)*r02*x9450))+(((-1.0)*x9448*x9452)));
evalcond[4]=(((r22*x9444))+(((-1.0)*cj2*x9447))+((sj1*sj2))+((r21*x9451))+(((-1.0)*x9449*x9450)));
evalcond[5]=((((-1.0)*x9446*x9450))+((x9443*x9445))+(((-1.0)*cj2*sj1))+(((-1.0)*sj2*x9447))+((r12*x9444)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9454=((1.0)*gconst5);
CheckValue<IkReal> x9455=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x9454))+(((-1.0)*gconst4*r10)))),-1);
if(!x9455.valid){
continue;
}
CheckValue<IkReal> x9456 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*r20*x9454)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9456.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9455.value)))+(x9456.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9457=IKcos(j4);
IkReal x9458=IKsin(j4);
IkReal x9459=(gconst4*r11);
IkReal x9460=(gconst5*r10);
IkReal x9461=((1.0)*cj1);
IkReal x9462=(gconst5*r00);
IkReal x9463=(gconst5*r20);
IkReal x9464=((1.0)*x9457);
IkReal x9465=(gconst4*x9457);
IkReal x9466=((1.0)*x9458);
IkReal x9467=(gconst4*x9458);
evalcond[0]=(((r01*x9465))+(((-1.0)*x9462*x9464))+((r02*x9458)));
evalcond[1]=(((r21*x9467))+(((-1.0)*r22*x9464))+(((-1.0)*x9463*x9466)));
evalcond[2]=(((x9458*x9459))+(((-1.0)*r12*x9464))+(((-1.0)*x9460*x9466)));
evalcond[3]=((-1.0)+((r01*x9467))+(((-1.0)*x9462*x9466))+(((-1.0)*r02*x9464)));
evalcond[4]=((((-1.0)*cj2*x9461))+((r22*x9458))+((sj1*sj2))+((r21*x9465))+(((-1.0)*x9463*x9464)));
evalcond[5]=(((x9457*x9459))+(((-1.0)*cj2*sj1))+(((-1.0)*sj2*x9461))+((r12*x9458))+(((-1.0)*x9460*x9464)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9468 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*gconst5*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9468.valid){
continue;
}
CheckValue<IkReal> x9469=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x9469.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9468.value)+(((1.5707963267949)*(x9469.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9470=IKcos(j4);
IkReal x9471=IKsin(j4);
IkReal x9472=(gconst4*r11);
IkReal x9473=(gconst5*r10);
IkReal x9474=((1.0)*cj1);
IkReal x9475=(gconst5*r00);
IkReal x9476=(gconst5*r20);
IkReal x9477=((1.0)*x9470);
IkReal x9478=(gconst4*x9470);
IkReal x9479=((1.0)*x9471);
IkReal x9480=(gconst4*x9471);
evalcond[0]=((((-1.0)*x9475*x9477))+((r01*x9478))+((r02*x9471)));
evalcond[1]=((((-1.0)*x9476*x9479))+((r21*x9480))+(((-1.0)*r22*x9477)));
evalcond[2]=((((-1.0)*x9473*x9479))+(((-1.0)*r12*x9477))+((x9471*x9472)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x9477))+((r01*x9480))+(((-1.0)*x9475*x9479)));
evalcond[4]=((((-1.0)*x9476*x9477))+((r22*x9471))+(((-1.0)*cj2*x9474))+((sj1*sj2))+((r21*x9478)));
evalcond[5]=(((x9470*x9472))+(((-1.0)*cj2*sj1))+(((-1.0)*sj2*x9474))+(((-1.0)*x9473*x9477))+((r12*x9471)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x9481=((-1.0)*r21);
CheckValue<IkReal> x9484 = IKatan2WithCheck(IkReal(x9481),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9484.valid){
continue;
}
IkReal x9482=((1.0)*(x9484.value));
IkReal x9483=x8987;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9482)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9482)));
IkReal gconst4=(x9481*x9483);
IkReal gconst5=((1.0)*r20*x9483);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r12;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9485=((-1.0)*r21);
CheckValue<IkReal> x9488 = IKatan2WithCheck(IkReal(x9485),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9488.valid){
continue;
}
IkReal x9486=((1.0)*(x9488.value));
IkReal x9487=x8987;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9486)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9486)));
IkReal gconst4=(x9485*x9487);
IkReal gconst5=((1.0)*r20*x9487);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x9489=((-1.0)*r21);
CheckValue<IkReal> x9492 = IKatan2WithCheck(IkReal(x9489),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9492.valid){
continue;
}
IkReal x9490=((1.0)*(x9492.value));
IkReal x9491=x8987;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9490)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9490)));
IkReal gconst4=(x9489*x9491);
IkReal gconst5=((1.0)*r20*x9491);
IkReal x9493=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x9497=IKPowWithIntegerCheck(x9493,-1);
if(!x9497.valid){
continue;
}
IkReal x9494=x9497.value;
IkReal x9495=((1.0)*x9494);
IkReal x9496=((((-1.0)*x9495*(r00*r00)*(r20*r20)))+(((-2.0)*r00*r01*r20*r21*x9494))+(((-1.0)*(r02*r02)))+(((-1.0)*x9495*(r01*r01)*(r21*r21))));
j4eval[0]=x9496;
j4eval[1]=r02;
j4eval[2]=x9493;
j4eval[3]=IKsign(x9496);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9498=(gconst5*r00);
IkReal x9499=(gconst4*r01);
CheckValue<IkReal> x9500 = IKatan2WithCheck(IkReal((x9498+(((-1.0)*x9499)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x9500.valid){
continue;
}
CheckValue<IkReal> x9501=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x9498*x9498)))+(((2.0)*x9498*x9499))+(((-1.0)*(r02*r02)))+(((-1.0)*(x9499*x9499))))),-1);
if(!x9501.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9500.value)+(((1.5707963267949)*(x9501.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9502=IKsin(j4);
IkReal x9503=IKcos(j4);
IkReal x9504=(gconst4*r11);
IkReal x9505=((1.0)*cj1);
IkReal x9506=(gconst5*r10);
IkReal x9507=(gconst4*r01);
IkReal x9508=(gconst5*r00);
IkReal x9509=(gconst4*r21);
IkReal x9510=(gconst5*r20);
IkReal x9511=((1.0)*x9503);
IkReal x9512=((1.0)*x9502);
evalcond[0]=((((-1.0)*x9510*x9512))+((x9502*x9509))+(((-1.0)*r22*x9511)));
evalcond[1]=(((x9502*x9504))+(((-1.0)*r12*x9511))+(((-1.0)*x9506*x9512)));
evalcond[2]=((((-1.0)*x9507*x9511))+(((-1.0)*r02*x9512))+((x9503*x9508)));
evalcond[3]=((-1.0)+(((-1.0)*x9508*x9512))+(((-1.0)*r02*x9511))+((x9502*x9507)));
evalcond[4]=(((sj1*sj2))+(((-1.0)*r22*x9512))+((x9503*x9510))+(((-1.0)*x9509*x9511))+(((-1.0)*cj2*x9505)));
evalcond[5]=((((-1.0)*x9504*x9511))+(((-1.0)*cj2*sj1))+((x9503*x9506))+(((-1.0)*r12*x9512))+(((-1.0)*sj2*x9505)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9513=((1.0)*gconst5);
CheckValue<IkReal> x9514 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x9513))+((gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9514.valid){
continue;
}
CheckValue<IkReal> x9515=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x9513))+(((-1.0)*gconst4*r10)))),-1);
if(!x9515.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9514.value)+(((1.5707963267949)*(x9515.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9516=IKsin(j4);
IkReal x9517=IKcos(j4);
IkReal x9518=(gconst4*r11);
IkReal x9519=((1.0)*cj1);
IkReal x9520=(gconst5*r10);
IkReal x9521=(gconst4*r01);
IkReal x9522=(gconst5*r00);
IkReal x9523=(gconst4*r21);
IkReal x9524=(gconst5*r20);
IkReal x9525=((1.0)*x9517);
IkReal x9526=((1.0)*x9516);
evalcond[0]=(((x9516*x9523))+(((-1.0)*r22*x9525))+(((-1.0)*x9524*x9526)));
evalcond[1]=((((-1.0)*r12*x9525))+((x9516*x9518))+(((-1.0)*x9520*x9526)));
evalcond[2]=(((x9517*x9522))+(((-1.0)*x9521*x9525))+(((-1.0)*r02*x9526)));
evalcond[3]=((-1.0)+((x9516*x9521))+(((-1.0)*r02*x9525))+(((-1.0)*x9522*x9526)));
evalcond[4]=(((x9517*x9524))+(((-1.0)*cj2*x9519))+(((-1.0)*r22*x9526))+((sj1*sj2))+(((-1.0)*x9523*x9525)));
evalcond[5]=(((x9517*x9520))+(((-1.0)*r12*x9526))+(((-1.0)*cj2*sj1))+(((-1.0)*x9518*x9525))+(((-1.0)*sj2*x9519)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9527 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*gconst5*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9527.valid){
continue;
}
CheckValue<IkReal> x9528=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x9528.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9527.value)+(((1.5707963267949)*(x9528.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9529=IKsin(j4);
IkReal x9530=IKcos(j4);
IkReal x9531=(gconst4*r11);
IkReal x9532=((1.0)*cj1);
IkReal x9533=(gconst5*r10);
IkReal x9534=(gconst4*r01);
IkReal x9535=(gconst5*r00);
IkReal x9536=(gconst4*r21);
IkReal x9537=(gconst5*r20);
IkReal x9538=((1.0)*x9530);
IkReal x9539=((1.0)*x9529);
evalcond[0]=(((x9529*x9536))+(((-1.0)*r22*x9538))+(((-1.0)*x9537*x9539)));
evalcond[1]=(((x9529*x9531))+(((-1.0)*x9533*x9539))+(((-1.0)*r12*x9538)));
evalcond[2]=((((-1.0)*r02*x9539))+(((-1.0)*x9534*x9538))+((x9530*x9535)));
evalcond[3]=((-1.0)+((x9529*x9534))+(((-1.0)*r02*x9538))+(((-1.0)*x9535*x9539)));
evalcond[4]=((((-1.0)*x9536*x9538))+(((-1.0)*r22*x9539))+((sj1*sj2))+(((-1.0)*cj2*x9532))+((x9530*x9537)));
evalcond[5]=((((-1.0)*x9531*x9538))+(((-1.0)*cj2*sj1))+(((-1.0)*sj2*x9532))+((x9530*x9533))+(((-1.0)*r12*x9539)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x9540=((-1.0)*r21);
CheckValue<IkReal> x9543 = IKatan2WithCheck(IkReal(x9540),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9543.valid){
continue;
}
IkReal x9541=((1.0)*(x9543.value));
IkReal x9542=x8987;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9541)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9541)));
IkReal gconst4=(x9540*x9542);
IkReal gconst5=((1.0)*r20*x9542);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r12;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9544=((-1.0)*r21);
CheckValue<IkReal> x9547 = IKatan2WithCheck(IkReal(x9544),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9547.valid){
continue;
}
IkReal x9545=((1.0)*(x9547.value));
IkReal x9546=x8987;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9545)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9545)));
IkReal gconst4=(x9544*x9546);
IkReal gconst5=((1.0)*r20*x9546);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x9548=((-1.0)*r21);
CheckValue<IkReal> x9551 = IKatan2WithCheck(IkReal(x9548),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9551.valid){
continue;
}
IkReal x9549=((1.0)*(x9551.value));
IkReal x9550=x8987;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9549)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9549)));
IkReal gconst4=(x9548*x9550);
IkReal gconst5=((1.0)*r20*x9550);
IkReal x9552=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x9556=IKPowWithIntegerCheck(x9552,-1);
if(!x9556.valid){
continue;
}
IkReal x9553=x9556.value;
IkReal x9554=((1.0)*x9553);
IkReal x9555=((((-1.0)*x9554*(r01*r01)*(r21*r21)))+(((-2.0)*r00*r01*r20*r21*x9553))+(((-1.0)*(r02*r02)))+(((-1.0)*x9554*(r00*r00)*(r20*r20))));
j4eval[0]=x9555;
j4eval[1]=r02;
j4eval[2]=x9552;
j4eval[3]=IKsign(x9555);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9557=(gconst5*r00);
IkReal x9558=(gconst4*r01);
CheckValue<IkReal> x9559 = IKatan2WithCheck(IkReal((x9557+(((-1.0)*x9558)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x9559.valid){
continue;
}
CheckValue<IkReal> x9560=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x9558*x9558)))+(((-1.0)*(r02*r02)))+(((2.0)*x9557*x9558))+(((-1.0)*(x9557*x9557))))),-1);
if(!x9560.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9559.value)+(((1.5707963267949)*(x9560.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9561=IKsin(j4);
IkReal x9562=IKcos(j4);
IkReal x9563=(gconst4*r11);
IkReal x9564=(gconst5*r10);
IkReal x9565=(gconst4*r01);
IkReal x9566=(gconst5*r00);
IkReal x9567=(gconst4*r21);
IkReal x9568=(gconst5*r20);
IkReal x9569=((1.0)*x9562);
IkReal x9570=((1.0)*x9561);
evalcond[0]=(((x9561*x9567))+(((-1.0)*r22*x9569))+(((-1.0)*x9568*x9570)));
evalcond[1]=(((x9561*x9563))+(((-1.0)*x9564*x9570))+(((-1.0)*r12*x9569)));
evalcond[2]=((((-1.0)*r02*x9570))+((x9562*x9566))+(((-1.0)*x9565*x9569)));
evalcond[3]=((-1.0)+((x9561*x9565))+(((-1.0)*x9566*x9570))+(((-1.0)*r02*x9569)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x9562*x9568))+(((-1.0)*x9567*x9569))+(((-1.0)*r22*x9570)));
evalcond[5]=(((x9562*x9564))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x9563*x9569))+(((-1.0)*r12*x9570)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9571=((1.0)*gconst5);
CheckValue<IkReal> x9572=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x9571))+(((-1.0)*gconst4*r10)))),-1);
if(!x9572.valid){
continue;
}
CheckValue<IkReal> x9573 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x9571))+((gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9573.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9572.value)))+(x9573.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9574=IKsin(j4);
IkReal x9575=IKcos(j4);
IkReal x9576=(gconst4*r11);
IkReal x9577=(gconst5*r10);
IkReal x9578=(gconst4*r01);
IkReal x9579=(gconst5*r00);
IkReal x9580=(gconst4*r21);
IkReal x9581=(gconst5*r20);
IkReal x9582=((1.0)*x9575);
IkReal x9583=((1.0)*x9574);
evalcond[0]=((((-1.0)*x9581*x9583))+((x9574*x9580))+(((-1.0)*r22*x9582)));
evalcond[1]=(((x9574*x9576))+(((-1.0)*x9577*x9583))+(((-1.0)*r12*x9582)));
evalcond[2]=(((x9575*x9579))+(((-1.0)*x9578*x9582))+(((-1.0)*r02*x9583)));
evalcond[3]=((-1.0)+((x9574*x9578))+(((-1.0)*x9579*x9583))+(((-1.0)*r02*x9582)));
evalcond[4]=(((cj2*sj1))+((x9575*x9581))+((cj1*sj2))+(((-1.0)*r22*x9583))+(((-1.0)*x9580*x9582)));
evalcond[5]=(((x9575*x9577))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x9576*x9582))+(((-1.0)*r12*x9583)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9584 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*gconst5*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9584.valid){
continue;
}
CheckValue<IkReal> x9585=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x9585.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9584.value)+(((1.5707963267949)*(x9585.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9586=IKsin(j4);
IkReal x9587=IKcos(j4);
IkReal x9588=(gconst4*r11);
IkReal x9589=(gconst5*r10);
IkReal x9590=(gconst4*r01);
IkReal x9591=(gconst5*r00);
IkReal x9592=(gconst4*r21);
IkReal x9593=(gconst5*r20);
IkReal x9594=((1.0)*x9587);
IkReal x9595=((1.0)*x9586);
evalcond[0]=((((-1.0)*x9593*x9595))+(((-1.0)*r22*x9594))+((x9586*x9592)));
evalcond[1]=(((x9586*x9588))+(((-1.0)*x9589*x9595))+(((-1.0)*r12*x9594)));
evalcond[2]=((((-1.0)*x9590*x9594))+((x9587*x9591))+(((-1.0)*r02*x9595)));
evalcond[3]=((-1.0)+((x9586*x9590))+(((-1.0)*x9591*x9595))+(((-1.0)*r02*x9594)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x9595))+(((-1.0)*x9592*x9594))+((cj1*sj2))+((x9587*x9593)));
evalcond[5]=((((-1.0)*x9588*x9594))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x9587*x9589))+(((-1.0)*r12*x9595)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x9596=((-1.0)*r21);
CheckValue<IkReal> x9599 = IKatan2WithCheck(IkReal(x9596),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9599.valid){
continue;
}
IkReal x9597=((1.0)*(x9599.value));
IkReal x9598=x8987;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9597)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9597)));
IkReal gconst4=(x9596*x9598);
IkReal gconst5=((1.0)*r20*x9598);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r12;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9600=((-1.0)*r21);
CheckValue<IkReal> x9603 = IKatan2WithCheck(IkReal(x9600),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9603.valid){
continue;
}
IkReal x9601=((1.0)*(x9603.value));
IkReal x9602=x8987;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9601)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9601)));
IkReal gconst4=(x9600*x9602);
IkReal gconst5=((1.0)*r20*x9602);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9604=((-1.0)*r21);
CheckValue<IkReal> x9607 = IKatan2WithCheck(IkReal(x9604),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9607.valid){
continue;
}
IkReal x9605=((1.0)*(x9607.value));
IkReal x9606=x8987;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9605)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9605)));
IkReal gconst4=(x9604*x9606);
IkReal gconst5=((1.0)*r20*x9606);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9608=(gconst4*r01);
IkReal x9609=(gconst5*r00);
CheckValue<IkReal> x9610 = IKatan2WithCheck(IkReal(((((-1.0)*x9609))+x9608)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x9610.valid){
continue;
}
CheckValue<IkReal> x9611=IKPowWithIntegerCheck(IKsign(((((-2.0)*x9608*x9609))+(x9609*x9609)+(x9608*x9608)+(r02*r02))),-1);
if(!x9611.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9610.value)+(((1.5707963267949)*(x9611.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9612=IKcos(j4);
IkReal x9613=IKsin(j4);
IkReal x9614=(gconst4*r11);
IkReal x9615=(gconst5*r10);
IkReal x9616=(gconst5*r00);
IkReal x9617=(gconst5*r20);
IkReal x9618=((1.0)*x9612);
IkReal x9619=(gconst4*x9612);
IkReal x9620=((1.0)*x9613);
IkReal x9621=(gconst4*x9613);
evalcond[0]=(((r01*x9619))+((r02*x9613))+(((-1.0)*x9616*x9618)));
evalcond[1]=((((-1.0)*x9617*x9620))+(((-1.0)*r22*x9618))+((r21*x9621)));
evalcond[2]=((((-1.0)*x9615*x9620))+(((-1.0)*r12*x9618))+((x9613*x9614)));
evalcond[3]=((-1.0)+((r01*x9621))+(((-1.0)*r02*x9618))+(((-1.0)*x9616*x9620)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x9617*x9618))+((cj1*sj2))+((r22*x9613))+((r21*x9619)));
evalcond[5]=(((x9612*x9614))+(((-1.0)*x9615*x9618))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r12*x9613)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9622=((1.0)*gconst5);
CheckValue<IkReal> x9623 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*r20*x9622)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9623.valid){
continue;
}
CheckValue<IkReal> x9624=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x9622))+(((-1.0)*gconst4*r10)))),-1);
if(!x9624.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9623.value)+(((1.5707963267949)*(x9624.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9625=IKcos(j4);
IkReal x9626=IKsin(j4);
IkReal x9627=(gconst4*r11);
IkReal x9628=(gconst5*r10);
IkReal x9629=(gconst5*r00);
IkReal x9630=(gconst5*r20);
IkReal x9631=((1.0)*x9625);
IkReal x9632=(gconst4*x9625);
IkReal x9633=((1.0)*x9626);
IkReal x9634=(gconst4*x9626);
evalcond[0]=((((-1.0)*x9629*x9631))+((r01*x9632))+((r02*x9626)));
evalcond[1]=((((-1.0)*r22*x9631))+((r21*x9634))+(((-1.0)*x9630*x9633)));
evalcond[2]=((((-1.0)*x9628*x9633))+(((-1.0)*r12*x9631))+((x9626*x9627)));
evalcond[3]=((-1.0)+(((-1.0)*x9629*x9633))+((r01*x9634))+(((-1.0)*r02*x9631)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r21*x9632))+(((-1.0)*x9630*x9631))+((r22*x9626)));
evalcond[5]=((((-1.0)*x9628*x9631))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r12*x9626))+((x9625*x9627)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9635 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*gconst5*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9635.valid){
continue;
}
CheckValue<IkReal> x9636=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x9636.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9635.value)+(((1.5707963267949)*(x9636.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9637=IKcos(j4);
IkReal x9638=IKsin(j4);
IkReal x9639=(gconst4*r11);
IkReal x9640=(gconst5*r10);
IkReal x9641=(gconst5*r00);
IkReal x9642=(gconst5*r20);
IkReal x9643=((1.0)*x9637);
IkReal x9644=(gconst4*x9637);
IkReal x9645=((1.0)*x9638);
IkReal x9646=(gconst4*x9638);
evalcond[0]=((((-1.0)*x9641*x9643))+((r01*x9644))+((r02*x9638)));
evalcond[1]=((((-1.0)*x9642*x9645))+((r21*x9646))+(((-1.0)*r22*x9643)));
evalcond[2]=((((-1.0)*r12*x9643))+((x9638*x9639))+(((-1.0)*x9640*x9645)));
evalcond[3]=((-1.0)+(((-1.0)*x9641*x9645))+((r01*x9646))+(((-1.0)*r02*x9643)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r22*x9638))+(((-1.0)*x9642*x9643))+((r21*x9644)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r12*x9638))+((x9637*x9639))+(((-1.0)*x9640*x9643)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r12);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
j4array[0]=0;
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9647=gconst4*gconst4;
IkReal x9648=gconst5*gconst5;
IkReal x9649=(gconst4*r00);
IkReal x9650=(gconst5*r01);
IkReal x9651=((1.0)*sj3);
IkReal x9652=((1.0)*cj3);
IkReal x9653=(r20*sj3);
IkReal x9654=(r22*x9651);
IkReal x9655=(r21*x9647);
CheckValue<IkReal> x9656=IKPowWithIntegerCheck(IKsign((((cj3*r01*x9655))+(((-1.0)*gconst4*r20*x9650*x9652))+(((-1.0)*gconst5*r21*x9649*x9652))+((cj3*r02*r22))+((cj3*r00*r20*x9648)))),-1);
if(!x9656.valid){
continue;
}
CheckValue<IkReal> x9657 = IKatan2WithCheck(IkReal(((((-1.0)*x9649*x9654))+(((-1.0)*x9650*x9654)))),IkReal(((((-1.0)*gconst4*r21*x9650*x9651))+((gconst5*x9649*x9653))+((r01*x9648*x9653))+(((-1.0)*r00*x9651*x9655)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9657.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9656.value)))+(x9657.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9658=IKsin(j4);
IkReal x9659=IKcos(j4);
IkReal x9660=(sj1*sj2);
IkReal x9661=((1.0)*cj1);
IkReal x9662=(cj3*gconst4);
IkReal x9663=(r21*sj3);
IkReal x9664=((1.0)*gconst5);
IkReal x9665=(r01*sj3);
IkReal x9666=(cj2*sj1);
IkReal x9667=(gconst5*sj3);
IkReal x9668=(r11*sj3);
IkReal x9669=((1.0)*r10);
IkReal x9670=((1.0)*r00);
IkReal x9671=(gconst4*sj3);
IkReal x9672=((1.0)*r20);
IkReal x9673=(cj2*x9661);
IkReal x9674=((1.0)*x9659);
IkReal x9675=(gconst4*x9658);
IkReal x9676=(r12*x9658);
IkReal x9677=(gconst4*x9659);
IkReal x9678=(sj3*x9658);
IkReal x9679=(cj3*gconst5*x9659);
IkReal x9680=((1.0)*cj3*x9658);
evalcond[0]=(((r21*x9675))+(((-1.0)*r20*x9658*x9664))+(((-1.0)*r22*x9674)));
evalcond[1]=(((r11*x9675))+(((-1.0)*r10*x9658*x9664))+(((-1.0)*r12*x9674)));
evalcond[2]=((-1.0)+(((-1.0)*r00*x9658*x9664))+((r01*x9675))+(((-1.0)*r02*x9674)));
evalcond[3]=((((-1.0)*cj3*r01*x9664))+((x9665*x9677))+(((-1.0)*x9662*x9670))+(((-1.0)*r00*sj3*x9659*x9664))+((r02*x9678)));
evalcond[4]=((((-1.0)*r02*x9680))+(((-1.0)*r01*x9662*x9674))+(((-1.0)*x9664*x9665))+((r00*x9679))+(((-1.0)*x9670*x9671)));
evalcond[5]=((((-1.0)*x9673))+((x9663*x9677))+(((-1.0)*x9662*x9672))+(((-1.0)*r20*sj3*x9659*x9664))+(((-1.0)*cj3*r21*x9664))+x9660+((r22*x9678)));
evalcond[6]=((((-1.0)*x9663*x9664))+((cj1*sj2))+((r20*x9679))+(((-1.0)*r22*x9680))+(((-1.0)*x9671*x9672))+x9666+(((-1.0)*r21*x9662*x9674)));
evalcond[7]=((((-1.0)*x9662*x9669))+((sj3*x9676))+(((-1.0)*r10*sj3*x9659*x9664))+(((-1.0)*cj3*r11*x9664))+(((-1.0)*x9666))+((x9668*x9677))+(((-1.0)*sj2*x9661)));
evalcond[8]=((((-1.0)*x9673))+(((-1.0)*x9664*x9668))+((r10*x9679))+x9660+(((-1.0)*r11*x9662*x9674))+(((-1.0)*x9669*x9671))+(((-1.0)*cj3*x9676)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9681=((1.0)*gconst5);
CheckValue<IkReal> x9682=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x9681))+(((-1.0)*gconst4*r10)))),-1);
if(!x9682.valid){
continue;
}
CheckValue<IkReal> x9683 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*r20*x9681)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9683.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9682.value)))+(x9683.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9684=IKsin(j4);
IkReal x9685=IKcos(j4);
IkReal x9686=(sj1*sj2);
IkReal x9687=((1.0)*cj1);
IkReal x9688=(cj3*gconst4);
IkReal x9689=(r21*sj3);
IkReal x9690=((1.0)*gconst5);
IkReal x9691=(r01*sj3);
IkReal x9692=(cj2*sj1);
IkReal x9693=(gconst5*sj3);
IkReal x9694=(r11*sj3);
IkReal x9695=((1.0)*r10);
IkReal x9696=((1.0)*r00);
IkReal x9697=(gconst4*sj3);
IkReal x9698=((1.0)*r20);
IkReal x9699=(cj2*x9687);
IkReal x9700=((1.0)*x9685);
IkReal x9701=(gconst4*x9684);
IkReal x9702=(r12*x9684);
IkReal x9703=(gconst4*x9685);
IkReal x9704=(sj3*x9684);
IkReal x9705=(cj3*gconst5*x9685);
IkReal x9706=((1.0)*cj3*x9684);
evalcond[0]=((((-1.0)*r22*x9700))+(((-1.0)*r20*x9684*x9690))+((r21*x9701)));
evalcond[1]=((((-1.0)*r10*x9684*x9690))+((r11*x9701))+(((-1.0)*r12*x9700)));
evalcond[2]=((-1.0)+(((-1.0)*r02*x9700))+((r01*x9701))+(((-1.0)*r00*x9684*x9690)));
evalcond[3]=((((-1.0)*r00*sj3*x9685*x9690))+((r02*x9704))+(((-1.0)*cj3*r01*x9690))+((x9691*x9703))+(((-1.0)*x9688*x9696)));
evalcond[4]=((((-1.0)*r02*x9706))+(((-1.0)*x9690*x9691))+((r00*x9705))+(((-1.0)*x9696*x9697))+(((-1.0)*r01*x9688*x9700)));
evalcond[5]=((((-1.0)*r20*sj3*x9685*x9690))+(((-1.0)*cj3*r21*x9690))+x9686+(((-1.0)*x9688*x9698))+(((-1.0)*x9699))+((x9689*x9703))+((r22*x9704)));
evalcond[6]=((((-1.0)*r22*x9706))+((cj1*sj2))+(((-1.0)*x9697*x9698))+((r20*x9705))+(((-1.0)*r21*x9688*x9700))+x9692+(((-1.0)*x9689*x9690)));
evalcond[7]=((((-1.0)*cj3*r11*x9690))+(((-1.0)*x9692))+((sj3*x9702))+(((-1.0)*r10*sj3*x9685*x9690))+(((-1.0)*sj2*x9687))+((x9694*x9703))+(((-1.0)*x9688*x9695)));
evalcond[8]=(((r10*x9705))+(((-1.0)*x9690*x9694))+x9686+(((-1.0)*x9699))+(((-1.0)*r11*x9688*x9700))+(((-1.0)*cj3*x9702))+(((-1.0)*x9695*x9697)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9707 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*gconst5*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9707.valid){
continue;
}
CheckValue<IkReal> x9708=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x9708.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9707.value)+(((1.5707963267949)*(x9708.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9709=IKsin(j4);
IkReal x9710=IKcos(j4);
IkReal x9711=(sj1*sj2);
IkReal x9712=((1.0)*cj1);
IkReal x9713=(cj3*gconst4);
IkReal x9714=(r21*sj3);
IkReal x9715=((1.0)*gconst5);
IkReal x9716=(r01*sj3);
IkReal x9717=(cj2*sj1);
IkReal x9718=(gconst5*sj3);
IkReal x9719=(r11*sj3);
IkReal x9720=((1.0)*r10);
IkReal x9721=((1.0)*r00);
IkReal x9722=(gconst4*sj3);
IkReal x9723=((1.0)*r20);
IkReal x9724=(cj2*x9712);
IkReal x9725=((1.0)*x9710);
IkReal x9726=(gconst4*x9709);
IkReal x9727=(r12*x9709);
IkReal x9728=(gconst4*x9710);
IkReal x9729=(sj3*x9709);
IkReal x9730=(cj3*gconst5*x9710);
IkReal x9731=((1.0)*cj3*x9709);
evalcond[0]=((((-1.0)*r22*x9725))+((r21*x9726))+(((-1.0)*r20*x9709*x9715)));
evalcond[1]=(((r11*x9726))+(((-1.0)*r10*x9709*x9715))+(((-1.0)*r12*x9725)));
evalcond[2]=((-1.0)+((r01*x9726))+(((-1.0)*r02*x9725))+(((-1.0)*r00*x9709*x9715)));
evalcond[3]=((((-1.0)*cj3*r01*x9715))+((r02*x9729))+((x9716*x9728))+(((-1.0)*x9713*x9721))+(((-1.0)*r00*sj3*x9710*x9715)));
evalcond[4]=((((-1.0)*r02*x9731))+(((-1.0)*x9715*x9716))+(((-1.0)*r01*x9713*x9725))+(((-1.0)*x9721*x9722))+((r00*x9730)));
evalcond[5]=(((x9714*x9728))+(((-1.0)*r20*sj3*x9710*x9715))+(((-1.0)*cj3*r21*x9715))+x9711+(((-1.0)*x9724))+(((-1.0)*x9713*x9723))+((r22*x9729)));
evalcond[6]=((((-1.0)*x9722*x9723))+(((-1.0)*x9714*x9715))+((cj1*sj2))+((r20*x9730))+x9717+(((-1.0)*r22*x9731))+(((-1.0)*r21*x9713*x9725)));
evalcond[7]=(((x9719*x9728))+((sj3*x9727))+(((-1.0)*sj2*x9712))+(((-1.0)*x9713*x9720))+(((-1.0)*cj3*r11*x9715))+(((-1.0)*x9717))+(((-1.0)*r10*sj3*x9710*x9715)));
evalcond[8]=((((-1.0)*r11*x9713*x9725))+x9711+(((-1.0)*x9724))+(((-1.0)*x9715*x9719))+(((-1.0)*cj3*x9727))+((r10*x9730))+(((-1.0)*x9720*x9722)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9732=((-1.0)*r21);
CheckValue<IkReal> x9735 = IKatan2WithCheck(IkReal(x9732),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9735.valid){
continue;
}
IkReal x9733=((1.0)*(x9735.value));
IkReal x9734=x8987;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9733)));
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9733)));
IkReal gconst4=(x9732*x9734);
IkReal gconst5=((1.0)*r20*x9734);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x9736=((-1.0)*r21);
CheckValue<IkReal> x9739 = IKatan2WithCheck(IkReal(x9736),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9739.valid){
continue;
}
IkReal x9737=((1.0)*(x9739.value));
IkReal x9738=x8987;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9737)));
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9737)));
IkReal gconst4=(x9736*x9738);
IkReal gconst5=((1.0)*r20*x9738);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x9740=((-1.0)*r21);
CheckValue<IkReal> x9743 = IKatan2WithCheck(IkReal(x9740),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9743.valid){
continue;
}
IkReal x9741=((1.0)*(x9743.value));
IkReal x9742=x8987;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9741)));
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9741)));
IkReal gconst4=(x9740*x9742);
IkReal gconst5=((1.0)*r20*x9742);
j4eval[0]=cj3;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9744=((-1.0)*r21);
CheckValue<IkReal> x9747 = IKatan2WithCheck(IkReal(x9744),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9747.valid){
continue;
}
IkReal x9745=((1.0)*(x9747.value));
IkReal x9746=x8987;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9745)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9745)));
IkReal gconst4=(x9744*x9746);
IkReal gconst5=((1.0)*r20*x9746);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x9748=((-1.0)*r21);
CheckValue<IkReal> x9751 = IKatan2WithCheck(IkReal(x9748),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9751.valid){
continue;
}
IkReal x9749=((1.0)*(x9751.value));
IkReal x9750=x8987;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9749)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9749)));
IkReal gconst4=(x9748*x9750);
IkReal gconst5=((1.0)*r20*x9750);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x9752=((-1.0)*r21);
CheckValue<IkReal> x9755 = IKatan2WithCheck(IkReal(x9752),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9755.valid){
continue;
}
IkReal x9753=((1.0)*(x9755.value));
IkReal x9754=x8987;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9753)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9753)));
IkReal gconst4=(x9752*x9754);
IkReal gconst5=((1.0)*r20*x9754);
IkReal x9756=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x9760=IKPowWithIntegerCheck(x9756,-1);
if(!x9760.valid){
continue;
}
IkReal x9757=x9760.value;
IkReal x9758=((1.0)*x9757);
IkReal x9759=((((-1.0)*x9758*(r10*r10)*(r20*r20)))+(((-1.0)*(r12*r12)))+(((-1.0)*x9758*(r11*r11)*(r21*r21)))+(((-2.0)*r10*r11*r20*r21*x9757)));
j4eval[0]=x9759;
j4eval[1]=r12;
j4eval[2]=x9756;
j4eval[3]=IKsign(x9759);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9761=(gconst5*r10);
IkReal x9762=(gconst4*r11);
CheckValue<IkReal> x9763 = IKatan2WithCheck(IkReal(((((-1.0)*x9762))+x9761)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x9763.valid){
continue;
}
CheckValue<IkReal> x9764=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x9761*x9761)))+(((2.0)*x9761*x9762))+(((-1.0)*(x9762*x9762)))+(((-1.0)*(r12*r12))))),-1);
if(!x9764.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9763.value)+(((1.5707963267949)*(x9764.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9765=IKsin(j4);
IkReal x9766=IKcos(j4);
IkReal x9767=(gconst4*r11);
IkReal x9768=(gconst5*r10);
IkReal x9769=(gconst5*r00);
IkReal x9770=(gconst5*r20);
IkReal x9771=((1.0)*x9766);
IkReal x9772=(gconst4*x9765);
IkReal x9773=((1.0)*x9765);
evalcond[0]=((((-1.0)*r22*x9771))+((r21*x9772))+(((-1.0)*x9770*x9773)));
evalcond[1]=((((-1.0)*x9769*x9773))+((r01*x9772))+(((-1.0)*r02*x9771)));
evalcond[2]=((((-1.0)*x9767*x9771))+(((-1.0)*r12*x9773))+((x9766*x9768)));
evalcond[3]=((-1.0)+((x9765*x9767))+(((-1.0)*x9768*x9773))+(((-1.0)*r12*x9771)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x9773))+((cj1*sj2))+(((-1.0)*gconst4*r21*x9771))+((x9766*x9770)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*r02*x9773))+((cj1*cj2))+((x9766*x9769))+(((-1.0)*gconst4*r01*x9771)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9774=((1.0)*gconst5);
CheckValue<IkReal> x9775 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*r00*x9774)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9775.valid){
continue;
}
CheckValue<IkReal> x9776=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x9774))+(((-1.0)*gconst4*r20)))),-1);
if(!x9776.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9775.value)+(((1.5707963267949)*(x9776.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9777=IKsin(j4);
IkReal x9778=IKcos(j4);
IkReal x9779=(gconst4*r11);
IkReal x9780=(gconst5*r10);
IkReal x9781=(gconst5*r00);
IkReal x9782=(gconst5*r20);
IkReal x9783=((1.0)*x9778);
IkReal x9784=(gconst4*x9777);
IkReal x9785=((1.0)*x9777);
evalcond[0]=(((r21*x9784))+(((-1.0)*x9782*x9785))+(((-1.0)*r22*x9783)));
evalcond[1]=((((-1.0)*x9781*x9785))+((r01*x9784))+(((-1.0)*r02*x9783)));
evalcond[2]=((((-1.0)*r12*x9785))+((x9778*x9780))+(((-1.0)*x9779*x9783)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x9783))+(((-1.0)*x9780*x9785))+((x9777*x9779)));
evalcond[4]=(((cj2*sj1))+((x9778*x9782))+((cj1*sj2))+(((-1.0)*r22*x9785))+(((-1.0)*gconst4*r21*x9783)));
evalcond[5]=(((x9778*x9781))+(((-1.0)*sj1*sj2))+((cj1*cj2))+(((-1.0)*r02*x9785))+(((-1.0)*gconst4*r01*x9783)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9786=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x9786.valid){
continue;
}
CheckValue<IkReal> x9787 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9787.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9786.value)))+(x9787.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9788=IKsin(j4);
IkReal x9789=IKcos(j4);
IkReal x9790=(gconst4*r11);
IkReal x9791=(gconst5*r10);
IkReal x9792=(gconst5*r00);
IkReal x9793=(gconst5*r20);
IkReal x9794=((1.0)*x9789);
IkReal x9795=(gconst4*x9788);
IkReal x9796=((1.0)*x9788);
evalcond[0]=((((-1.0)*x9793*x9796))+((r21*x9795))+(((-1.0)*r22*x9794)));
evalcond[1]=((((-1.0)*x9792*x9796))+(((-1.0)*r02*x9794))+((r01*x9795)));
evalcond[2]=((((-1.0)*x9790*x9794))+((x9789*x9791))+(((-1.0)*r12*x9796)));
evalcond[3]=((-1.0)+((x9788*x9790))+(((-1.0)*x9791*x9796))+(((-1.0)*r12*x9794)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst4*r21*x9794))+((cj1*sj2))+((x9789*x9793))+(((-1.0)*r22*x9796)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*r02*x9796))+(((-1.0)*gconst4*r01*x9794))+((x9789*x9792))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9797=((-1.0)*r21);
CheckValue<IkReal> x9800 = IKatan2WithCheck(IkReal(x9797),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9800.valid){
continue;
}
IkReal x9798=((1.0)*(x9800.value));
IkReal x9799=x8987;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9798)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9798)));
IkReal gconst4=(x9797*x9799);
IkReal gconst5=((1.0)*r20*x9799);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x9801=((-1.0)*r21);
CheckValue<IkReal> x9804 = IKatan2WithCheck(IkReal(x9801),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9804.valid){
continue;
}
IkReal x9802=((1.0)*(x9804.value));
IkReal x9803=x8987;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9802)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9802)));
IkReal gconst4=(x9801*x9803);
IkReal gconst5=((1.0)*r20*x9803);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9805=((-1.0)*r21);
CheckValue<IkReal> x9808 = IKatan2WithCheck(IkReal(x9805),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9808.valid){
continue;
}
IkReal x9806=((1.0)*(x9808.value));
IkReal x9807=x8987;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9806)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9806)));
IkReal gconst4=(x9805*x9807);
IkReal gconst5=((1.0)*r20*x9807);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9809=(gconst5*r10);
IkReal x9810=(gconst4*r11);
CheckValue<IkReal> x9811 = IKatan2WithCheck(IkReal(((((-1.0)*x9809))+x9810)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x9811.valid){
continue;
}
CheckValue<IkReal> x9812=IKPowWithIntegerCheck(IKsign(((((-2.0)*x9809*x9810))+(r12*r12)+(x9809*x9809)+(x9810*x9810))),-1);
if(!x9812.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9811.value)+(((1.5707963267949)*(x9812.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9813=IKcos(j4);
IkReal x9814=IKsin(j4);
IkReal x9815=(gconst5*r10);
IkReal x9816=(gconst5*r00);
IkReal x9817=(gconst5*r20);
IkReal x9818=((1.0)*x9813);
IkReal x9819=(gconst4*x9814);
IkReal x9820=(gconst4*x9813);
IkReal x9821=((1.0)*x9814);
evalcond[0]=(((r11*x9820))+((r12*x9814))+(((-1.0)*x9815*x9818)));
evalcond[1]=(((r21*x9819))+(((-1.0)*r22*x9818))+(((-1.0)*x9817*x9821)));
evalcond[2]=((((-1.0)*r02*x9818))+(((-1.0)*x9816*x9821))+((r01*x9819)));
evalcond[3]=((-1.0)+((r11*x9819))+(((-1.0)*x9815*x9821))+(((-1.0)*r12*x9818)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r22*x9814))+((r21*x9820))+(((-1.0)*x9817*x9818)));
evalcond[5]=((((-1.0)*sj1*sj2))+((r01*x9820))+((r02*x9814))+(((-1.0)*x9816*x9818))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9822=((1.0)*gconst5);
CheckValue<IkReal> x9823 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x9822))+((gconst4*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9823.valid){
continue;
}
CheckValue<IkReal> x9824=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x9822))+(((-1.0)*gconst4*r20)))),-1);
if(!x9824.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9823.value)+(((1.5707963267949)*(x9824.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9825=IKcos(j4);
IkReal x9826=IKsin(j4);
IkReal x9827=(gconst5*r10);
IkReal x9828=(gconst5*r00);
IkReal x9829=(gconst5*r20);
IkReal x9830=((1.0)*x9825);
IkReal x9831=(gconst4*x9826);
IkReal x9832=(gconst4*x9825);
IkReal x9833=((1.0)*x9826);
evalcond[0]=((((-1.0)*x9827*x9830))+((r11*x9832))+((r12*x9826)));
evalcond[1]=((((-1.0)*x9829*x9833))+((r21*x9831))+(((-1.0)*r22*x9830)));
evalcond[2]=(((r01*x9831))+(((-1.0)*r02*x9830))+(((-1.0)*x9828*x9833)));
evalcond[3]=((-1.0)+(((-1.0)*x9827*x9833))+((r11*x9831))+(((-1.0)*r12*x9830)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x9829*x9830))+((r21*x9832))+((cj1*sj2))+((r22*x9826)));
evalcond[5]=(((r01*x9832))+(((-1.0)*sj1*sj2))+(((-1.0)*x9828*x9830))+((cj1*cj2))+((r02*x9826)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9834=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x9834.valid){
continue;
}
CheckValue<IkReal> x9835 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9835.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9834.value)))+(x9835.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9836=IKcos(j4);
IkReal x9837=IKsin(j4);
IkReal x9838=(gconst5*r10);
IkReal x9839=(gconst5*r00);
IkReal x9840=(gconst5*r20);
IkReal x9841=((1.0)*x9836);
IkReal x9842=(gconst4*x9837);
IkReal x9843=(gconst4*x9836);
IkReal x9844=((1.0)*x9837);
evalcond[0]=(((r11*x9843))+((r12*x9837))+(((-1.0)*x9838*x9841)));
evalcond[1]=((((-1.0)*x9840*x9844))+(((-1.0)*r22*x9841))+((r21*x9842)));
evalcond[2]=((((-1.0)*r02*x9841))+(((-1.0)*x9839*x9844))+((r01*x9842)));
evalcond[3]=((-1.0)+((r11*x9842))+(((-1.0)*r12*x9841))+(((-1.0)*x9838*x9844)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x9840*x9841))+((cj1*sj2))+((r22*x9837))+((r21*x9843)));
evalcond[5]=((((-1.0)*x9839*x9841))+(((-1.0)*sj1*sj2))+((r01*x9843))+((r02*x9837))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9845=((-1.0)*r21);
CheckValue<IkReal> x9848 = IKatan2WithCheck(IkReal(x9845),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9848.valid){
continue;
}
IkReal x9846=((1.0)*(x9848.value));
IkReal x9847=x8987;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9846)));
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9846)));
IkReal gconst4=(x9845*x9847);
IkReal gconst5=((1.0)*r20*x9847);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x9849=((-1.0)*r21);
CheckValue<IkReal> x9852 = IKatan2WithCheck(IkReal(x9849),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9852.valid){
continue;
}
IkReal x9850=((1.0)*(x9852.value));
IkReal x9851=x8987;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9850)));
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9850)));
IkReal gconst4=(x9849*x9851);
IkReal gconst5=((1.0)*r20*x9851);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9853=((-1.0)*r21);
CheckValue<IkReal> x9856 = IKatan2WithCheck(IkReal(x9853),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9856.valid){
continue;
}
IkReal x9854=((1.0)*(x9856.value));
IkReal x9855=x8987;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9854)));
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9854)));
IkReal gconst4=(x9853*x9855);
IkReal gconst5=((1.0)*r20*x9855);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9857=(gconst5*r10);
IkReal x9858=(gconst4*r11);
CheckValue<IkReal> x9859 = IKatan2WithCheck(IkReal(((((-1.0)*x9857))+x9858)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x9859.valid){
continue;
}
CheckValue<IkReal> x9860=IKPowWithIntegerCheck(IKsign(((((-2.0)*x9857*x9858))+(r12*r12)+(x9858*x9858)+(x9857*x9857))),-1);
if(!x9860.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9859.value)+(((1.5707963267949)*(x9860.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9861=IKcos(j4);
IkReal x9862=IKsin(j4);
IkReal x9863=(gconst4*r11);
IkReal x9864=(gconst5*r10);
IkReal x9865=(gconst5*r00);
IkReal x9866=(gconst5*r20);
IkReal x9867=((1.0)*x9861);
IkReal x9868=(gconst4*x9861);
IkReal x9869=((1.0)*x9862);
IkReal x9870=(gconst4*x9862);
evalcond[0]=(((x9861*x9863))+((r12*x9862))+(((-1.0)*x9864*x9867)));
evalcond[1]=((((-1.0)*r22*x9867))+(((-1.0)*x9866*x9869))+((r21*x9870)));
evalcond[2]=(((r01*x9870))+(((-1.0)*r02*x9867))+(((-1.0)*x9865*x9869)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x9867))+((x9862*x9863))+(((-1.0)*x9864*x9869)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r01*x9868))+((r02*x9862))+(((-1.0)*x9865*x9867)));
evalcond[5]=((((-1.0)*x9866*x9867))+((r22*x9862))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r21*x9868)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9871=((1.0)*gconst5);
CheckValue<IkReal> x9872 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*r00*x9871)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9872.valid){
continue;
}
CheckValue<IkReal> x9873=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x9871))+(((-1.0)*gconst4*r20)))),-1);
if(!x9873.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9872.value)+(((1.5707963267949)*(x9873.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9874=IKcos(j4);
IkReal x9875=IKsin(j4);
IkReal x9876=(gconst4*r11);
IkReal x9877=(gconst5*r10);
IkReal x9878=(gconst5*r00);
IkReal x9879=(gconst5*r20);
IkReal x9880=((1.0)*x9874);
IkReal x9881=(gconst4*x9874);
IkReal x9882=((1.0)*x9875);
IkReal x9883=(gconst4*x9875);
evalcond[0]=(((r12*x9875))+((x9874*x9876))+(((-1.0)*x9877*x9880)));
evalcond[1]=((((-1.0)*r22*x9880))+((r21*x9883))+(((-1.0)*x9879*x9882)));
evalcond[2]=(((r01*x9883))+(((-1.0)*x9878*x9882))+(((-1.0)*r02*x9880)));
evalcond[3]=((-1.0)+((x9875*x9876))+(((-1.0)*r12*x9880))+(((-1.0)*x9877*x9882)));
evalcond[4]=(((cj2*sj1))+((r02*x9875))+((r01*x9881))+((cj1*sj2))+(((-1.0)*x9878*x9880)));
evalcond[5]=(((r21*x9881))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x9875))+(((-1.0)*x9879*x9880)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9884=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x9884.valid){
continue;
}
CheckValue<IkReal> x9885 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9885.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9884.value)))+(x9885.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9886=IKcos(j4);
IkReal x9887=IKsin(j4);
IkReal x9888=(gconst4*r11);
IkReal x9889=(gconst5*r10);
IkReal x9890=(gconst5*r00);
IkReal x9891=(gconst5*r20);
IkReal x9892=((1.0)*x9886);
IkReal x9893=(gconst4*x9886);
IkReal x9894=((1.0)*x9887);
IkReal x9895=(gconst4*x9887);
evalcond[0]=(((r12*x9887))+(((-1.0)*x9889*x9892))+((x9886*x9888)));
evalcond[1]=((((-1.0)*x9891*x9894))+((r21*x9895))+(((-1.0)*r22*x9892)));
evalcond[2]=(((r01*x9895))+(((-1.0)*x9890*x9894))+(((-1.0)*r02*x9892)));
evalcond[3]=((-1.0)+((x9887*x9888))+(((-1.0)*x9889*x9894))+(((-1.0)*r12*x9892)));
evalcond[4]=(((cj2*sj1))+((r01*x9893))+((cj1*sj2))+(((-1.0)*x9890*x9892))+((r02*x9887)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x9891*x9892))+((r22*x9887))+((r21*x9893)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9896=((-1.0)*r21);
CheckValue<IkReal> x9899 = IKatan2WithCheck(IkReal(x9896),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9899.valid){
continue;
}
IkReal x9897=((1.0)*(x9899.value));
IkReal x9898=x8987;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9897)));
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9897)));
IkReal gconst4=(x9896*x9898);
IkReal gconst5=((1.0)*r20*x9898);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x9900=((-1.0)*r21);
CheckValue<IkReal> x9903 = IKatan2WithCheck(IkReal(x9900),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9903.valid){
continue;
}
IkReal x9901=((1.0)*(x9903.value));
IkReal x9902=x8987;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9901)));
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9901)));
IkReal gconst4=(x9900*x9902);
IkReal gconst5=((1.0)*r20*x9902);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x9904=((-1.0)*r21);
CheckValue<IkReal> x9907 = IKatan2WithCheck(IkReal(x9904),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9907.valid){
continue;
}
IkReal x9905=((1.0)*(x9907.value));
IkReal x9906=x8987;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9905)));
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9905)));
IkReal gconst4=(x9904*x9906);
IkReal gconst5=((1.0)*r20*x9906);
IkReal x9908=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x9912=IKPowWithIntegerCheck(x9908,-1);
if(!x9912.valid){
continue;
}
IkReal x9909=x9912.value;
IkReal x9910=((1.0)*x9909);
IkReal x9911=((((-1.0)*x9910*(r11*r11)*(r21*r21)))+(((-1.0)*x9910*(r10*r10)*(r20*r20)))+(((-1.0)*(r12*r12)))+(((-2.0)*r10*r11*r20*r21*x9909)));
j4eval[0]=x9911;
j4eval[1]=r12;
j4eval[2]=x9908;
j4eval[3]=IKsign(x9911);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9913=(gconst5*r10);
IkReal x9914=(gconst4*r11);
CheckValue<IkReal> x9915 = IKatan2WithCheck(IkReal(((((-1.0)*x9914))+x9913)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x9915.valid){
continue;
}
CheckValue<IkReal> x9916=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x9914*x9914)))+(((2.0)*x9913*x9914))+(((-1.0)*(r12*r12)))+(((-1.0)*(x9913*x9913))))),-1);
if(!x9916.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9915.value)+(((1.5707963267949)*(x9916.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9917=IKsin(j4);
IkReal x9918=IKcos(j4);
IkReal x9919=(gconst4*r11);
IkReal x9920=(gconst5*r10);
IkReal x9921=(gconst4*r01);
IkReal x9922=(gconst5*r00);
IkReal x9923=(gconst4*r21);
IkReal x9924=(gconst5*r20);
IkReal x9925=((1.0)*x9918);
IkReal x9926=((1.0)*x9917);
evalcond[0]=((((-1.0)*r22*x9925))+((x9917*x9923))+(((-1.0)*x9924*x9926)));
evalcond[1]=((((-1.0)*r02*x9925))+(((-1.0)*x9922*x9926))+((x9917*x9921)));
evalcond[2]=((((-1.0)*x9919*x9925))+(((-1.0)*r12*x9926))+((x9918*x9920)));
evalcond[3]=((-1.0)+(((-1.0)*x9920*x9926))+(((-1.0)*r12*x9925))+((x9917*x9919)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r02*x9926))+((cj1*sj2))+(((-1.0)*x9921*x9925))+((x9918*x9922)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x9926))+((x9918*x9924))+(((-1.0)*x9923*x9925)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9927=((1.0)*gconst5);
CheckValue<IkReal> x9928 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*r00*x9927)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9928.valid){
continue;
}
CheckValue<IkReal> x9929=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x9927))+(((-1.0)*gconst4*r20)))),-1);
if(!x9929.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9928.value)+(((1.5707963267949)*(x9929.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9930=IKsin(j4);
IkReal x9931=IKcos(j4);
IkReal x9932=(gconst4*r11);
IkReal x9933=(gconst5*r10);
IkReal x9934=(gconst4*r01);
IkReal x9935=(gconst5*r00);
IkReal x9936=(gconst4*r21);
IkReal x9937=(gconst5*r20);
IkReal x9938=((1.0)*x9931);
IkReal x9939=((1.0)*x9930);
evalcond[0]=((((-1.0)*r22*x9938))+(((-1.0)*x9937*x9939))+((x9930*x9936)));
evalcond[1]=((((-1.0)*r02*x9938))+((x9930*x9934))+(((-1.0)*x9935*x9939)));
evalcond[2]=(((x9931*x9933))+(((-1.0)*r12*x9939))+(((-1.0)*x9932*x9938)));
evalcond[3]=((-1.0)+((x9930*x9932))+(((-1.0)*x9933*x9939))+(((-1.0)*r12*x9938)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r02*x9939))+((cj1*sj2))+(((-1.0)*x9934*x9938))+((x9931*x9935)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x9939))+(((-1.0)*x9936*x9938))+((x9931*x9937)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9940=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x9940.valid){
continue;
}
CheckValue<IkReal> x9941 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9941.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9940.value)))+(x9941.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9942=IKsin(j4);
IkReal x9943=IKcos(j4);
IkReal x9944=(gconst4*r11);
IkReal x9945=(gconst5*r10);
IkReal x9946=(gconst4*r01);
IkReal x9947=(gconst5*r00);
IkReal x9948=(gconst4*r21);
IkReal x9949=(gconst5*r20);
IkReal x9950=((1.0)*x9943);
IkReal x9951=((1.0)*x9942);
evalcond[0]=((((-1.0)*r22*x9950))+((x9942*x9948))+(((-1.0)*x9949*x9951)));
evalcond[1]=((((-1.0)*r02*x9950))+((x9942*x9946))+(((-1.0)*x9947*x9951)));
evalcond[2]=((((-1.0)*x9944*x9950))+(((-1.0)*r12*x9951))+((x9943*x9945)));
evalcond[3]=((-1.0)+(((-1.0)*x9945*x9951))+(((-1.0)*r12*x9950))+((x9942*x9944)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x9946*x9950))+(((-1.0)*r02*x9951))+((cj1*sj2))+((x9943*x9947)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x9951))+((x9943*x9949))+(((-1.0)*x9948*x9950)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x9952=((-1.0)*r21);
IkReal x9953=((-1.0)*px);
CheckValue<IkReal> x9955 = IKatan2WithCheck(IkReal(x9952),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9955.valid){
continue;
}
IkReal x9954=((1.0)*(x9955.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9954)));
sj0=0;
cj0=1.0;
j0=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9953);
rxp1_1=(px*r21);
rxp1_2=(r11*x9953);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9954)));
IkReal gconst4=x9952;
IkReal gconst5=((1.0)*r20);
IkReal x9956=((1.0)*r11*r21);
IkReal x9957=((1.0)*r10*r20);
j4eval[0]=((((-1.0)*x9956))+(((-1.0)*x9957)));
j4eval[1]=((((-1.0)*sj3*x9956))+(((-1.0)*sj3*x9957)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9958=((-1.0)*r21);
IkReal x9959=((-1.0)*px);
CheckValue<IkReal> x9961 = IKatan2WithCheck(IkReal(x9958),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9961.valid){
continue;
}
IkReal x9960=((1.0)*(x9961.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9960)));
sj0=0;
cj0=1.0;
j0=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9959);
rxp1_1=(px*r21);
rxp1_2=(r11*x9959);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9960)));
IkReal gconst4=x9958;
IkReal gconst5=((1.0)*r20);
IkReal x9962=((1.0)*cj3);
IkReal x9963=(r10*r20);
IkReal x9964=(r11*r21);
j4eval[0]=((((-1.0)*x9963))+(((-1.0)*x9964)));
j4eval[1]=(((x9962*x9963))+((x9962*x9964)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x9965=((-1.0)*r21);
IkReal x9966=((-1.0)*px);
CheckValue<IkReal> x9968 = IKatan2WithCheck(IkReal(x9965),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9968.valid){
continue;
}
IkReal x9967=((1.0)*(x9968.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9967)));
sj0=0;
cj0=1.0;
j0=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9966);
rxp1_1=(px*r21);
rxp1_2=(r11*x9966);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9967)));
IkReal gconst4=x9965;
IkReal gconst5=((1.0)*r20);
IkReal x9969=((1.0)*sj3);
j4eval[0]=r02;
j4eval[1]=sj3;
j4eval[2]=((((-1.0)*r10*r20*x9969))+(((-1.0)*r11*r21*x9969)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9970=IKPowWithIntegerCheck(r02,-1);
if(!x9970.valid){
continue;
}
CheckValue<IkReal> x9971=IKPowWithIntegerCheck(sj3,-1);
if(!x9971.valid){
continue;
}
CheckValue<IkReal> x9972=IKPowWithIntegerCheck(((((-1.0)*gconst5*r10*sj3))+((gconst4*r11*sj3))),-1);
if(!x9972.valid){
continue;
}
if( IKabs(((x9970.value)*(x9971.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x9972.value)*((((cj3*gconst5*r11))+((cj3*gconst4*r10)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x9970.value)*(x9971.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))))+IKsqr(((x9972.value)*((((cj3*gconst5*r11))+((cj3*gconst4*r10))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x9970.value)*(x9971.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))), ((x9972.value)*((((cj3*gconst5*r11))+((cj3*gconst4*r10))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9973=IKsin(j4);
IkReal x9974=IKcos(j4);
IkReal x9975=(cj2*sj1);
IkReal x9976=(cj1*sj2);
IkReal x9977=(sj1*sj2);
IkReal x9978=(r21*sj3);
IkReal x9979=((1.0)*gconst5);
IkReal x9980=((1.0)*cj3);
IkReal x9981=(r11*sj3);
IkReal x9982=(cj1*cj2);
IkReal x9983=(gconst4*r10);
IkReal x9984=((1.0)*sj3);
IkReal x9985=(gconst4*r20);
IkReal x9986=(gconst4*x9973);
IkReal x9987=(gconst4*x9974);
IkReal x9988=(sj3*x9974);
IkReal x9989=(r02*x9973);
IkReal x9990=(x9976+x9975);
IkReal x9991=(cj3*gconst5*x9974);
evalcond[0]=((-1.0)*r02*x9974);
evalcond[1]=(((sj3*x9989))+x9990);
evalcond[2]=((((-1.0)*r20*x9973*x9979))+((r21*x9986)));
evalcond[3]=((-1.0)+((r11*x9986))+(((-1.0)*r10*x9973*x9979)));
evalcond[4]=((((-1.0)*x9977))+(((-1.0)*x9980*x9989))+x9982);
evalcond[5]=((((-1.0)*r10*x9979*x9988))+(((-1.0)*x9980*x9983))+(((-1.0)*cj3*r11*x9979))+((x9981*x9987)));
evalcond[6]=((((-1.0)*r11*x9980*x9987))+((r10*x9991))+(((-1.0)*x9979*x9981))+(((-1.0)*x9983*x9984)));
evalcond[7]=((((-1.0)*x9984*x9985))+(((-1.0)*r21*x9980*x9987))+((r20*x9991))+(((-1.0)*x9978*x9979))+x9990);
evalcond[8]=((((-1.0)*r20*x9979*x9988))+(((-1.0)*cj3*r21*x9979))+((x9978*x9987))+(((-1.0)*x9980*x9985))+(((-1.0)*x9982))+x9977);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9992=(gconst5*r10);
IkReal x9993=(gconst4*r11);
CheckValue<IkReal> x9994=IKPowWithIntegerCheck(((((-1.0)*x9992))+x9993),-1);
if(!x9994.valid){
continue;
}
CheckValue<IkReal> x9995=IKPowWithIntegerCheck((((cj3*x9992))+(((-1.0)*cj3*x9993))),-1);
if(!x9995.valid){
continue;
}
if( IKabs(x9994.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x9995.value)*((((gconst4*r10*sj3))+((gconst5*r11*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x9994.value)+IKsqr(((x9995.value)*((((gconst4*r10*sj3))+((gconst5*r11*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x9994.value, ((x9995.value)*((((gconst4*r10*sj3))+((gconst5*r11*sj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9996=IKsin(j4);
IkReal x9997=IKcos(j4);
IkReal x9998=(cj2*sj1);
IkReal x9999=(cj1*sj2);
IkReal x10000=(sj1*sj2);
IkReal x10001=(r21*sj3);
IkReal x10002=((1.0)*gconst5);
IkReal x10003=((1.0)*cj3);
IkReal x10004=(r11*sj3);
IkReal x10005=(cj1*cj2);
IkReal x10006=(gconst4*r10);
IkReal x10007=((1.0)*sj3);
IkReal x10008=(gconst4*r20);
IkReal x10009=(gconst4*x9996);
IkReal x10010=(gconst4*x9997);
IkReal x10011=(sj3*x9997);
IkReal x10012=(r02*x9996);
IkReal x10013=(x9999+x9998);
IkReal x10014=(cj3*gconst5*x9997);
evalcond[0]=((-1.0)*r02*x9997);
evalcond[1]=(x10013+((sj3*x10012)));
evalcond[2]=((((-1.0)*r20*x10002*x9996))+((r21*x10009)));
evalcond[3]=((-1.0)+((r11*x10009))+(((-1.0)*r10*x10002*x9996)));
evalcond[4]=((((-1.0)*x10003*x10012))+(((-1.0)*x10000))+x10005);
evalcond[5]=((((-1.0)*cj3*r11*x10002))+(((-1.0)*x10003*x10006))+((x10004*x10010))+(((-1.0)*r10*x10002*x10011)));
evalcond[6]=((((-1.0)*x10002*x10004))+(((-1.0)*r11*x10003*x10010))+((r10*x10014))+(((-1.0)*x10006*x10007)));
evalcond[7]=((((-1.0)*r21*x10003*x10010))+(((-1.0)*x10007*x10008))+x10013+((r20*x10014))+(((-1.0)*x10001*x10002)));
evalcond[8]=((((-1.0)*cj3*r21*x10002))+(((-1.0)*x10003*x10008))+(((-1.0)*x10005))+((x10001*x10010))+x10000+(((-1.0)*r20*x10002*x10011)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10015=(gconst4*r11);
IkReal x10016=((1.0)*gconst5*r10);
CheckValue<IkReal> x10017=IKPowWithIntegerCheck((x10015+(((-1.0)*x10016))),-1);
if(!x10017.valid){
continue;
}
CheckValue<IkReal> x10018=IKPowWithIntegerCheck(((((-1.0)*sj3*x10016))+((sj3*x10015))),-1);
if(!x10018.valid){
continue;
}
if( IKabs(x10017.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x10018.value)*((((cj3*gconst5*r11))+((cj3*gconst4*r10)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x10017.value)+IKsqr(((x10018.value)*((((cj3*gconst5*r11))+((cj3*gconst4*r10))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x10017.value, ((x10018.value)*((((cj3*gconst5*r11))+((cj3*gconst4*r10))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10019=IKsin(j4);
IkReal x10020=IKcos(j4);
IkReal x10021=(cj2*sj1);
IkReal x10022=(cj1*sj2);
IkReal x10023=(sj1*sj2);
IkReal x10024=(r21*sj3);
IkReal x10025=((1.0)*gconst5);
IkReal x10026=((1.0)*cj3);
IkReal x10027=(r11*sj3);
IkReal x10028=(cj1*cj2);
IkReal x10029=(gconst4*r10);
IkReal x10030=((1.0)*sj3);
IkReal x10031=(gconst4*r20);
IkReal x10032=(gconst4*x10019);
IkReal x10033=(gconst4*x10020);
IkReal x10034=(sj3*x10020);
IkReal x10035=(r02*x10019);
IkReal x10036=(x10021+x10022);
IkReal x10037=(cj3*gconst5*x10020);
evalcond[0]=((-1.0)*r02*x10020);
evalcond[1]=(((sj3*x10035))+x10036);
evalcond[2]=(((r21*x10032))+(((-1.0)*r20*x10019*x10025)));
evalcond[3]=((-1.0)+((r11*x10032))+(((-1.0)*r10*x10019*x10025)));
evalcond[4]=((((-1.0)*x10023))+x10028+(((-1.0)*x10026*x10035)));
evalcond[5]=(((x10027*x10033))+(((-1.0)*x10026*x10029))+(((-1.0)*r10*x10025*x10034))+(((-1.0)*cj3*r11*x10025)));
evalcond[6]=((((-1.0)*r11*x10026*x10033))+((r10*x10037))+(((-1.0)*x10025*x10027))+(((-1.0)*x10029*x10030)));
evalcond[7]=((((-1.0)*r21*x10026*x10033))+(((-1.0)*x10024*x10025))+(((-1.0)*x10030*x10031))+((r20*x10037))+x10036);
evalcond[8]=(((x10024*x10033))+(((-1.0)*x10028))+(((-1.0)*r20*x10025*x10034))+(((-1.0)*cj3*r21*x10025))+x10023+(((-1.0)*x10026*x10031)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10038=gconst5*gconst5;
IkReal x10039=gconst4*gconst4;
IkReal x10040=(r21*sj3);
IkReal x10041=(gconst4*gconst5);
IkReal x10042=((1.0)*sj3);
IkReal x10043=(cj3*r10);
IkReal x10044=(cj3*r11);
IkReal x10045=((1.0)*r22);
IkReal x10046=((1.0)*x10039);
IkReal x10047=(r20*x10038);
CheckValue<IkReal> x10048 = IKatan2WithCheck(IkReal(((((-1.0)*gconst5*x10044*x10045))+(((-1.0)*gconst4*x10043*x10045)))),IkReal(((((-1.0)*r21*x10041*x10044))+((x10044*x10047))+((r20*x10041*x10043))+(((-1.0)*r21*x10043*x10046)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10048.valid){
continue;
}
CheckValue<IkReal> x10049=IKPowWithIntegerCheck(IKsign(((((-1.0)*r12*r22*x10042))+((r10*x10040*x10041))+((r11*r20*sj3*x10041))+(((-1.0)*r11*x10040*x10046))+(((-1.0)*r10*x10042*x10047)))),-1);
if(!x10049.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10048.value)+(((1.5707963267949)*(x10049.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10050=IKsin(j4);
IkReal x10051=IKcos(j4);
IkReal x10052=(cj2*sj1);
IkReal x10053=(cj1*sj2);
IkReal x10054=(cj3*gconst4);
IkReal x10055=(sj1*sj2);
IkReal x10056=(cj1*cj2);
IkReal x10057=((1.0)*gconst5);
IkReal x10058=(gconst5*sj3);
IkReal x10059=((1.0)*r10);
IkReal x10060=((1.0)*x10051);
IkReal x10061=(gconst4*x10050);
IkReal x10062=(r12*x10050);
IkReal x10063=((1.0)*gconst4*sj3);
IkReal x10064=(sj3*x10050);
IkReal x10065=(x10053+x10052);
IkReal x10066=(gconst4*sj3*x10051);
IkReal x10067=((1.0)*cj3*x10050);
IkReal x10068=(cj3*gconst5*x10051);
evalcond[0]=(((r21*x10061))+(((-1.0)*r22*x10060))+(((-1.0)*r20*x10050*x10057)));
evalcond[1]=((((-1.0)*r00*x10050*x10057))+((r01*x10061))+(((-1.0)*r02*x10060)));
evalcond[2]=((-1.0)+(((-1.0)*r10*x10050*x10057))+(((-1.0)*r12*x10060))+((r11*x10061)));
evalcond[3]=(((sj3*x10062))+(((-1.0)*r10*sj3*x10051*x10057))+(((-1.0)*cj3*r11*x10057))+((r11*x10066))+(((-1.0)*x10054*x10059)));
evalcond[4]=((((-1.0)*r11*sj3*x10057))+((r10*x10068))+(((-1.0)*r11*x10054*x10060))+(((-1.0)*gconst4*sj3*x10059))+(((-1.0)*cj3*x10062)));
evalcond[5]=((((-1.0)*r00*sj3*x10051*x10057))+(((-1.0)*cj3*r01*x10057))+((r01*x10066))+((r02*x10064))+x10065+(((-1.0)*r00*x10054)));
evalcond[6]=((((-1.0)*x10056))+((r22*x10064))+x10055+(((-1.0)*r20*x10054))+((r21*x10066))+(((-1.0)*r20*sj3*x10051*x10057))+(((-1.0)*cj3*r21*x10057)));
evalcond[7]=(((r20*x10068))+(((-1.0)*r21*sj3*x10057))+(((-1.0)*r21*x10054*x10060))+x10065+(((-1.0)*r20*x10063))+(((-1.0)*r22*x10067)));
evalcond[8]=((((-1.0)*x10055))+((r00*x10068))+(((-1.0)*r01*sj3*x10057))+(((-1.0)*r01*x10054*x10060))+(((-1.0)*r00*x10063))+x10056+(((-1.0)*r02*x10067)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10069=((1.0)*gconst5);
CheckValue<IkReal> x10070=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x10069))+(((-1.0)*gconst4*r20)))),-1);
if(!x10070.valid){
continue;
}
CheckValue<IkReal> x10071 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*r00*x10069)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10071.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10070.value)))+(x10071.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10072=IKsin(j4);
IkReal x10073=IKcos(j4);
IkReal x10074=(cj2*sj1);
IkReal x10075=(cj1*sj2);
IkReal x10076=(cj3*gconst4);
IkReal x10077=(sj1*sj2);
IkReal x10078=(cj1*cj2);
IkReal x10079=((1.0)*gconst5);
IkReal x10080=(gconst5*sj3);
IkReal x10081=((1.0)*r10);
IkReal x10082=((1.0)*x10073);
IkReal x10083=(gconst4*x10072);
IkReal x10084=(r12*x10072);
IkReal x10085=((1.0)*gconst4*sj3);
IkReal x10086=(sj3*x10072);
IkReal x10087=(x10075+x10074);
IkReal x10088=(gconst4*sj3*x10073);
IkReal x10089=((1.0)*cj3*x10072);
IkReal x10090=(cj3*gconst5*x10073);
evalcond[0]=((((-1.0)*r20*x10072*x10079))+((r21*x10083))+(((-1.0)*r22*x10082)));
evalcond[1]=(((r01*x10083))+(((-1.0)*r00*x10072*x10079))+(((-1.0)*r02*x10082)));
evalcond[2]=((-1.0)+(((-1.0)*r12*x10082))+(((-1.0)*r10*x10072*x10079))+((r11*x10083)));
evalcond[3]=(((sj3*x10084))+(((-1.0)*x10076*x10081))+(((-1.0)*cj3*r11*x10079))+(((-1.0)*r10*sj3*x10073*x10079))+((r11*x10088)));
evalcond[4]=((((-1.0)*cj3*x10084))+(((-1.0)*gconst4*sj3*x10081))+(((-1.0)*r11*x10076*x10082))+((r10*x10090))+(((-1.0)*r11*sj3*x10079)));
evalcond[5]=(((r01*x10088))+(((-1.0)*cj3*r01*x10079))+x10087+((r02*x10086))+(((-1.0)*r00*x10076))+(((-1.0)*r00*sj3*x10073*x10079)));
evalcond[6]=((((-1.0)*r20*sj3*x10073*x10079))+(((-1.0)*r20*x10076))+x10077+((r21*x10088))+((r22*x10086))+(((-1.0)*x10078))+(((-1.0)*cj3*r21*x10079)));
evalcond[7]=((((-1.0)*r21*sj3*x10079))+(((-1.0)*r20*x10085))+x10087+(((-1.0)*r21*x10076*x10082))+((r20*x10090))+(((-1.0)*r22*x10089)));
evalcond[8]=((((-1.0)*r00*x10085))+(((-1.0)*r01*sj3*x10079))+(((-1.0)*r01*x10076*x10082))+x10078+(((-1.0)*r02*x10089))+((r00*x10090))+(((-1.0)*x10077)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10091=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x10091.valid){
continue;
}
CheckValue<IkReal> x10092 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10092.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10091.value)))+(x10092.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10093=IKsin(j4);
IkReal x10094=IKcos(j4);
IkReal x10095=(cj2*sj1);
IkReal x10096=(cj1*sj2);
IkReal x10097=(cj3*gconst4);
IkReal x10098=(sj1*sj2);
IkReal x10099=(cj1*cj2);
IkReal x10100=((1.0)*gconst5);
IkReal x10101=(gconst5*sj3);
IkReal x10102=((1.0)*r10);
IkReal x10103=((1.0)*x10094);
IkReal x10104=(gconst4*x10093);
IkReal x10105=(r12*x10093);
IkReal x10106=((1.0)*gconst4*sj3);
IkReal x10107=(sj3*x10093);
IkReal x10108=(x10095+x10096);
IkReal x10109=(gconst4*sj3*x10094);
IkReal x10110=((1.0)*cj3*x10093);
IkReal x10111=(cj3*gconst5*x10094);
evalcond[0]=(((r21*x10104))+(((-1.0)*r20*x10093*x10100))+(((-1.0)*r22*x10103)));
evalcond[1]=(((r01*x10104))+(((-1.0)*r02*x10103))+(((-1.0)*r00*x10093*x10100)));
evalcond[2]=((-1.0)+(((-1.0)*r12*x10103))+(((-1.0)*r10*x10093*x10100))+((r11*x10104)));
evalcond[3]=((((-1.0)*r10*sj3*x10094*x10100))+(((-1.0)*cj3*r11*x10100))+((r11*x10109))+((sj3*x10105))+(((-1.0)*x10097*x10102)));
evalcond[4]=((((-1.0)*gconst4*sj3*x10102))+(((-1.0)*r11*x10097*x10103))+(((-1.0)*r11*sj3*x10100))+((r10*x10111))+(((-1.0)*cj3*x10105)));
evalcond[5]=(((r01*x10109))+(((-1.0)*r00*x10097))+x10108+((r02*x10107))+(((-1.0)*r00*sj3*x10094*x10100))+(((-1.0)*cj3*r01*x10100)));
evalcond[6]=((((-1.0)*cj3*r21*x10100))+((r21*x10109))+(((-1.0)*r20*x10097))+x10098+(((-1.0)*r20*sj3*x10094*x10100))+((r22*x10107))+(((-1.0)*x10099)));
evalcond[7]=(((r20*x10111))+(((-1.0)*r21*sj3*x10100))+(((-1.0)*r22*x10110))+x10108+(((-1.0)*r21*x10097*x10103))+(((-1.0)*r20*x10106)));
evalcond[8]=(((r00*x10111))+(((-1.0)*r00*x10106))+(((-1.0)*r01*sj3*x10100))+x10099+(((-1.0)*r02*x10110))+(((-1.0)*r01*x10097*x10103))+(((-1.0)*x10098)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10112=((-1.0)*r21);
CheckValue<IkReal> x10115 = IKatan2WithCheck(IkReal(x10112),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10115.valid){
continue;
}
IkReal x10113=((1.0)*(x10115.value));
IkReal x10114=x8987;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10113)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10113)));
IkReal gconst4=(x10112*x10114);
IkReal gconst5=((1.0)*r20*x10114);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r02;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10116=((-1.0)*r21);
CheckValue<IkReal> x10119 = IKatan2WithCheck(IkReal(x10116),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10119.valid){
continue;
}
IkReal x10117=((1.0)*(x10119.value));
IkReal x10118=x8987;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10117)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10117)));
IkReal gconst4=(x10116*x10118);
IkReal gconst5=((1.0)*r20*x10118);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x10120=((-1.0)*r21);
CheckValue<IkReal> x10123 = IKatan2WithCheck(IkReal(x10120),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10123.valid){
continue;
}
IkReal x10121=((1.0)*(x10123.value));
IkReal x10122=x8987;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10121)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10121)));
IkReal gconst4=(x10120*x10122);
IkReal gconst5=((1.0)*r20*x10122);
j4eval[0]=cj3;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10124=((-1.0)*r21);
CheckValue<IkReal> x10127 = IKatan2WithCheck(IkReal(x10124),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10127.valid){
continue;
}
IkReal x10125=((1.0)*(x10127.value));
IkReal x10126=x8987;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10125)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10125)));
IkReal gconst4=(x10124*x10126);
IkReal gconst5=((1.0)*r20*x10126);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r02;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10128=((-1.0)*r21);
CheckValue<IkReal> x10131 = IKatan2WithCheck(IkReal(x10128),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10131.valid){
continue;
}
IkReal x10129=((1.0)*(x10131.value));
IkReal x10130=x8987;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10129)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10129)));
IkReal gconst4=(x10128*x10130);
IkReal gconst5=((1.0)*r20*x10130);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10132=((-1.0)*r21);
CheckValue<IkReal> x10135 = IKatan2WithCheck(IkReal(x10132),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10135.valid){
continue;
}
IkReal x10133=((1.0)*(x10135.value));
IkReal x10134=x8987;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10133)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10133)));
IkReal gconst4=(x10132*x10134);
IkReal gconst5=((1.0)*r20*x10134);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10136=(gconst5*r10);
IkReal x10137=(gconst4*r11);
CheckValue<IkReal> x10138=IKPowWithIntegerCheck(IKsign(((r12*r12)+(x10137*x10137)+(((-2.0)*x10136*x10137))+(x10136*x10136))),-1);
if(!x10138.valid){
continue;
}
CheckValue<IkReal> x10139 = IKatan2WithCheck(IkReal((x10136+(((-1.0)*x10137)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x10139.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10138.value)))+(x10139.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10140=IKsin(j4);
IkReal x10141=IKcos(j4);
IkReal x10142=(gconst4*r11);
IkReal x10143=(gconst5*r10);
IkReal x10144=(gconst4*r01);
IkReal x10145=(gconst5*r00);
IkReal x10146=(gconst4*r21);
IkReal x10147=(gconst5*r20);
IkReal x10148=((1.0)*x10141);
IkReal x10149=((1.0)*x10140);
evalcond[0]=((((-1.0)*x10147*x10149))+(((-1.0)*r22*x10148))+((x10140*x10146)));
evalcond[1]=((((-1.0)*r02*x10148))+(((-1.0)*x10145*x10149))+((x10140*x10144)));
evalcond[2]=((((-1.0)*x10142*x10148))+(((-1.0)*r12*x10149))+((x10141*x10143)));
evalcond[3]=((1.0)+(((-1.0)*x10143*x10149))+(((-1.0)*r12*x10148))+((x10140*x10142)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x10146*x10148))+(((-1.0)*r22*x10149))+((x10141*x10147)));
evalcond[5]=((((-1.0)*r02*x10149))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x10144*x10148))+((x10141*x10145)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10150=((1.0)*gconst5);
CheckValue<IkReal> x10151 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*r20*x10150)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10151.valid){
continue;
}
CheckValue<IkReal> x10152=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r00))+(((-1.0)*r01*x10150)))),-1);
if(!x10152.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10151.value)+(((1.5707963267949)*(x10152.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10153=IKsin(j4);
IkReal x10154=IKcos(j4);
IkReal x10155=(gconst4*r11);
IkReal x10156=(gconst5*r10);
IkReal x10157=(gconst4*r01);
IkReal x10158=(gconst5*r00);
IkReal x10159=(gconst4*r21);
IkReal x10160=(gconst5*r20);
IkReal x10161=((1.0)*x10154);
IkReal x10162=((1.0)*x10153);
evalcond[0]=(((x10153*x10159))+(((-1.0)*r22*x10161))+(((-1.0)*x10160*x10162)));
evalcond[1]=(((x10153*x10157))+(((-1.0)*x10158*x10162))+(((-1.0)*r02*x10161)));
evalcond[2]=((((-1.0)*r12*x10162))+(((-1.0)*x10155*x10161))+((x10154*x10156)));
evalcond[3]=((1.0)+((x10153*x10155))+(((-1.0)*x10156*x10162))+(((-1.0)*r12*x10161)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x10162))+((cj1*sj2))+((x10154*x10160))+(((-1.0)*x10159*x10161)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x10157*x10161))+(((-1.0)*r02*x10162))+((x10154*x10158)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10163 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*gconst5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10163.valid){
continue;
}
CheckValue<IkReal> x10164=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10164.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10163.value)+(((1.5707963267949)*(x10164.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10165=IKsin(j4);
IkReal x10166=IKcos(j4);
IkReal x10167=(gconst4*r11);
IkReal x10168=(gconst5*r10);
IkReal x10169=(gconst4*r01);
IkReal x10170=(gconst5*r00);
IkReal x10171=(gconst4*r21);
IkReal x10172=(gconst5*r20);
IkReal x10173=((1.0)*x10166);
IkReal x10174=((1.0)*x10165);
evalcond[0]=((((-1.0)*r22*x10173))+(((-1.0)*x10172*x10174))+((x10165*x10171)));
evalcond[1]=(((x10165*x10169))+(((-1.0)*x10170*x10174))+(((-1.0)*r02*x10173)));
evalcond[2]=(((x10166*x10168))+(((-1.0)*r12*x10174))+(((-1.0)*x10167*x10173)));
evalcond[3]=((1.0)+((x10165*x10167))+(((-1.0)*r12*x10173))+(((-1.0)*x10168*x10174)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x10174))+((cj1*sj2))+((x10166*x10172))+(((-1.0)*x10171*x10173)));
evalcond[5]=((((-1.0)*x10169*x10173))+((x10166*x10170))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r02*x10174)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10175=((-1.0)*r21);
CheckValue<IkReal> x10178 = IKatan2WithCheck(IkReal(x10175),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10178.valid){
continue;
}
IkReal x10176=((1.0)*(x10178.value));
IkReal x10177=x8987;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10176)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10176)));
IkReal gconst4=(x10175*x10177);
IkReal gconst5=((1.0)*r20*x10177);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r02;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10179=((-1.0)*r21);
CheckValue<IkReal> x10182 = IKatan2WithCheck(IkReal(x10179),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10182.valid){
continue;
}
IkReal x10180=((1.0)*(x10182.value));
IkReal x10181=x8987;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10180)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10180)));
IkReal gconst4=(x10179*x10181);
IkReal gconst5=((1.0)*r20*x10181);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10183=((-1.0)*r21);
CheckValue<IkReal> x10186 = IKatan2WithCheck(IkReal(x10183),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10186.valid){
continue;
}
IkReal x10184=((1.0)*(x10186.value));
IkReal x10185=x8987;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10184)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10184)));
IkReal gconst4=(x10183*x10185);
IkReal gconst5=((1.0)*r20*x10185);
IkReal x10187=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x10191=IKPowWithIntegerCheck(x10187,-1);
if(!x10191.valid){
continue;
}
IkReal x10188=x10191.value;
IkReal x10189=((1.0)*x10188);
IkReal x10190=((((-1.0)*x10189*(r10*r10)*(r20*r20)))+(((-1.0)*(r12*r12)))+(((-1.0)*x10189*(r11*r11)*(r21*r21)))+(((-2.0)*r10*r11*r20*r21*x10188)));
j4eval[0]=x10190;
j4eval[1]=r12;
j4eval[2]=x10187;
j4eval[3]=IKsign(x10190);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10192=(gconst5*r10);
IkReal x10193=(gconst4*r11);
CheckValue<IkReal> x10194 = IKatan2WithCheck(IkReal((x10193+(((-1.0)*x10192)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x10194.valid){
continue;
}
CheckValue<IkReal> x10195=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x10192*x10192)))+(((-1.0)*(x10193*x10193)))+(((-1.0)*(r12*r12)))+(((2.0)*x10192*x10193)))),-1);
if(!x10195.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10194.value)+(((1.5707963267949)*(x10195.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10196=IKcos(j4);
IkReal x10197=IKsin(j4);
IkReal x10198=(gconst4*r11);
IkReal x10199=(gconst5*r10);
IkReal x10200=(gconst5*r00);
IkReal x10201=(gconst5*r20);
IkReal x10202=((1.0)*x10196);
IkReal x10203=(gconst4*x10196);
IkReal x10204=((1.0)*x10197);
IkReal x10205=(gconst4*x10197);
evalcond[0]=(((x10196*x10198))+(((-1.0)*x10199*x10202))+((r12*x10197)));
evalcond[1]=((((-1.0)*r22*x10202))+((r21*x10205))+(((-1.0)*x10201*x10204)));
evalcond[2]=((((-1.0)*x10200*x10204))+(((-1.0)*r02*x10202))+((r01*x10205)));
evalcond[3]=((1.0)+((x10197*x10198))+(((-1.0)*x10199*x10204))+(((-1.0)*r12*x10202)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r21*x10203))+((r22*x10197))+(((-1.0)*x10201*x10202)));
evalcond[5]=((((-1.0)*x10200*x10202))+((r02*x10197))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r01*x10203)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10206=((1.0)*gconst5);
CheckValue<IkReal> x10207 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x10206))+((gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10207.valid){
continue;
}
CheckValue<IkReal> x10208=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r00))+(((-1.0)*r01*x10206)))),-1);
if(!x10208.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10207.value)+(((1.5707963267949)*(x10208.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10209=IKcos(j4);
IkReal x10210=IKsin(j4);
IkReal x10211=(gconst4*r11);
IkReal x10212=(gconst5*r10);
IkReal x10213=(gconst5*r00);
IkReal x10214=(gconst5*r20);
IkReal x10215=((1.0)*x10209);
IkReal x10216=(gconst4*x10209);
IkReal x10217=((1.0)*x10210);
IkReal x10218=(gconst4*x10210);
evalcond[0]=((((-1.0)*x10212*x10215))+((r12*x10210))+((x10209*x10211)));
evalcond[1]=((((-1.0)*r22*x10215))+(((-1.0)*x10214*x10217))+((r21*x10218)));
evalcond[2]=((((-1.0)*x10213*x10217))+((r01*x10218))+(((-1.0)*r02*x10215)));
evalcond[3]=((1.0)+(((-1.0)*x10212*x10217))+(((-1.0)*r12*x10215))+((x10210*x10211)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x10214*x10215))+((r21*x10216))+((r22*x10210)));
evalcond[5]=((((-1.0)*x10213*x10215))+((r01*x10216))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r02*x10210)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10219 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*gconst5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10219.valid){
continue;
}
CheckValue<IkReal> x10220=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10220.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10219.value)+(((1.5707963267949)*(x10220.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10221=IKcos(j4);
IkReal x10222=IKsin(j4);
IkReal x10223=(gconst4*r11);
IkReal x10224=(gconst5*r10);
IkReal x10225=(gconst5*r00);
IkReal x10226=(gconst5*r20);
IkReal x10227=((1.0)*x10221);
IkReal x10228=(gconst4*x10221);
IkReal x10229=((1.0)*x10222);
IkReal x10230=(gconst4*x10222);
evalcond[0]=(((r12*x10222))+(((-1.0)*x10224*x10227))+((x10221*x10223)));
evalcond[1]=((((-1.0)*x10226*x10229))+((r21*x10230))+(((-1.0)*r22*x10227)));
evalcond[2]=((((-1.0)*r02*x10227))+(((-1.0)*x10225*x10229))+((r01*x10230)));
evalcond[3]=((1.0)+(((-1.0)*x10224*x10229))+(((-1.0)*r12*x10227))+((x10222*x10223)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x10226*x10227))+((r22*x10222))+((cj1*sj2))+((r21*x10228)));
evalcond[5]=(((r02*x10222))+(((-1.0)*x10225*x10227))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r01*x10228)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10231=((-1.0)*r21);
CheckValue<IkReal> x10234 = IKatan2WithCheck(IkReal(x10231),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10234.valid){
continue;
}
IkReal x10232=((1.0)*(x10234.value));
IkReal x10233=x8987;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10232)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10232)));
IkReal gconst4=(x10231*x10233);
IkReal gconst5=((1.0)*r20*x10233);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r02;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10235=((-1.0)*r21);
CheckValue<IkReal> x10238 = IKatan2WithCheck(IkReal(x10235),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10238.valid){
continue;
}
IkReal x10236=((1.0)*(x10238.value));
IkReal x10237=x8987;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10236)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10236)));
IkReal gconst4=(x10235*x10237);
IkReal gconst5=((1.0)*r20*x10237);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10239=((-1.0)*r21);
CheckValue<IkReal> x10242 = IKatan2WithCheck(IkReal(x10239),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10242.valid){
continue;
}
IkReal x10240=((1.0)*(x10242.value));
IkReal x10241=x8987;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10240)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10240)));
IkReal gconst4=(x10239*x10241);
IkReal gconst5=((1.0)*r20*x10241);
IkReal x10243=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x10247=IKPowWithIntegerCheck(x10243,-1);
if(!x10247.valid){
continue;
}
IkReal x10244=x10247.value;
IkReal x10245=((1.0)*x10244);
IkReal x10246=((((-1.0)*x10245*(r11*r11)*(r21*r21)))+(((-2.0)*r10*r11*r20*r21*x10244))+(((-1.0)*(r12*r12)))+(((-1.0)*x10245*(r10*r10)*(r20*r20))));
j4eval[0]=x10246;
j4eval[1]=r12;
j4eval[2]=x10243;
j4eval[3]=IKsign(x10246);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10248=(gconst5*r10);
IkReal x10249=(gconst4*r11);
CheckValue<IkReal> x10250 = IKatan2WithCheck(IkReal((x10249+(((-1.0)*x10248)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x10250.valid){
continue;
}
CheckValue<IkReal> x10251=IKPowWithIntegerCheck(IKsign(((((2.0)*x10248*x10249))+(((-1.0)*(x10248*x10248)))+(((-1.0)*(x10249*x10249)))+(((-1.0)*(r12*r12))))),-1);
if(!x10251.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10250.value)+(((1.5707963267949)*(x10251.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10252=IKcos(j4);
IkReal x10253=IKsin(j4);
IkReal x10254=(gconst4*r11);
IkReal x10255=(gconst5*r10);
IkReal x10256=((1.0)*cj1);
IkReal x10257=(gconst5*r00);
IkReal x10258=(gconst5*r20);
IkReal x10259=((1.0)*x10252);
IkReal x10260=(gconst4*x10252);
IkReal x10261=((1.0)*x10253);
IkReal x10262=(gconst4*x10253);
evalcond[0]=(((r12*x10253))+(((-1.0)*x10255*x10259))+((x10252*x10254)));
evalcond[1]=((((-1.0)*r22*x10259))+((r21*x10262))+(((-1.0)*x10258*x10261)));
evalcond[2]=((((-1.0)*x10257*x10261))+(((-1.0)*r02*x10259))+((r01*x10262)));
evalcond[3]=((1.0)+(((-1.0)*x10255*x10261))+(((-1.0)*r12*x10259))+((x10253*x10254)));
evalcond[4]=(((r22*x10253))+(((-1.0)*x10258*x10259))+(((-1.0)*cj2*x10256))+((sj1*sj2))+((r21*x10260)));
evalcond[5]=(((r02*x10253))+(((-1.0)*cj2*sj1))+((r01*x10260))+(((-1.0)*x10257*x10259))+(((-1.0)*sj2*x10256)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10263=((1.0)*gconst5);
CheckValue<IkReal> x10264=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r00))+(((-1.0)*r01*x10263)))),-1);
if(!x10264.valid){
continue;
}
CheckValue<IkReal> x10265 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x10263))+((gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10265.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10264.value)))+(x10265.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10266=IKcos(j4);
IkReal x10267=IKsin(j4);
IkReal x10268=(gconst4*r11);
IkReal x10269=(gconst5*r10);
IkReal x10270=((1.0)*cj1);
IkReal x10271=(gconst5*r00);
IkReal x10272=(gconst5*r20);
IkReal x10273=((1.0)*x10266);
IkReal x10274=(gconst4*x10266);
IkReal x10275=((1.0)*x10267);
IkReal x10276=(gconst4*x10267);
evalcond[0]=(((r12*x10267))+(((-1.0)*x10269*x10273))+((x10266*x10268)));
evalcond[1]=((((-1.0)*r22*x10273))+(((-1.0)*x10272*x10275))+((r21*x10276)));
evalcond[2]=(((r01*x10276))+(((-1.0)*r02*x10273))+(((-1.0)*x10271*x10275)));
evalcond[3]=((1.0)+((x10267*x10268))+(((-1.0)*x10269*x10275))+(((-1.0)*r12*x10273)));
evalcond[4]=(((r22*x10267))+((sj1*sj2))+(((-1.0)*x10272*x10273))+((r21*x10274))+(((-1.0)*cj2*x10270)));
evalcond[5]=(((r02*x10267))+((r01*x10274))+(((-1.0)*cj2*sj1))+(((-1.0)*sj2*x10270))+(((-1.0)*x10271*x10273)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10277 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*gconst5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10277.valid){
continue;
}
CheckValue<IkReal> x10278=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10278.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10277.value)+(((1.5707963267949)*(x10278.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10279=IKcos(j4);
IkReal x10280=IKsin(j4);
IkReal x10281=(gconst4*r11);
IkReal x10282=(gconst5*r10);
IkReal x10283=((1.0)*cj1);
IkReal x10284=(gconst5*r00);
IkReal x10285=(gconst5*r20);
IkReal x10286=((1.0)*x10279);
IkReal x10287=(gconst4*x10279);
IkReal x10288=((1.0)*x10280);
IkReal x10289=(gconst4*x10280);
evalcond[0]=((((-1.0)*x10282*x10286))+((x10279*x10281))+((r12*x10280)));
evalcond[1]=((((-1.0)*r22*x10286))+((r21*x10289))+(((-1.0)*x10285*x10288)));
evalcond[2]=(((r01*x10289))+(((-1.0)*r02*x10286))+(((-1.0)*x10284*x10288)));
evalcond[3]=((1.0)+(((-1.0)*x10282*x10288))+(((-1.0)*r12*x10286))+((x10280*x10281)));
evalcond[4]=(((sj1*sj2))+((r22*x10280))+(((-1.0)*cj2*x10283))+((r21*x10287))+(((-1.0)*x10285*x10286)));
evalcond[5]=(((r01*x10287))+(((-1.0)*cj2*sj1))+((r02*x10280))+(((-1.0)*x10284*x10286))+(((-1.0)*sj2*x10283)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10290=((-1.0)*r21);
CheckValue<IkReal> x10293 = IKatan2WithCheck(IkReal(x10290),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10293.valid){
continue;
}
IkReal x10291=((1.0)*(x10293.value));
IkReal x10292=x8987;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10291)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10291)));
IkReal gconst4=(x10290*x10292);
IkReal gconst5=((1.0)*r20*x10292);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r02;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10294=((-1.0)*r21);
CheckValue<IkReal> x10297 = IKatan2WithCheck(IkReal(x10294),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10297.valid){
continue;
}
IkReal x10295=((1.0)*(x10297.value));
IkReal x10296=x8987;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10295)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10295)));
IkReal gconst4=(x10294*x10296);
IkReal gconst5=((1.0)*r20*x10296);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10298=((-1.0)*r21);
CheckValue<IkReal> x10301 = IKatan2WithCheck(IkReal(x10298),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10301.valid){
continue;
}
IkReal x10299=((1.0)*(x10301.value));
IkReal x10300=x8987;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10299)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10299)));
IkReal gconst4=(x10298*x10300);
IkReal gconst5=((1.0)*r20*x10300);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10302=(gconst5*r10);
IkReal x10303=(gconst4*r11);
CheckValue<IkReal> x10304=IKPowWithIntegerCheck(IKsign(((r12*r12)+(x10303*x10303)+(x10302*x10302)+(((-2.0)*x10302*x10303)))),-1);
if(!x10304.valid){
continue;
}
CheckValue<IkReal> x10305 = IKatan2WithCheck(IkReal(((((-1.0)*x10303))+x10302)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x10305.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10304.value)))+(x10305.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10306=IKsin(j4);
IkReal x10307=IKcos(j4);
IkReal x10308=(gconst4*r11);
IkReal x10309=((1.0)*cj1);
IkReal x10310=(gconst5*r10);
IkReal x10311=(gconst4*r01);
IkReal x10312=(gconst5*r00);
IkReal x10313=(gconst4*r21);
IkReal x10314=(gconst5*r20);
IkReal x10315=((1.0)*x10307);
IkReal x10316=((1.0)*x10306);
evalcond[0]=(((x10306*x10313))+(((-1.0)*x10314*x10316))+(((-1.0)*r22*x10315)));
evalcond[1]=((((-1.0)*x10312*x10316))+((x10306*x10311))+(((-1.0)*r02*x10315)));
evalcond[2]=((((-1.0)*r12*x10316))+(((-1.0)*x10308*x10315))+((x10307*x10310)));
evalcond[3]=((1.0)+((x10306*x10308))+(((-1.0)*x10310*x10316))+(((-1.0)*r12*x10315)));
evalcond[4]=((((-1.0)*cj2*x10309))+(((-1.0)*x10313*x10315))+((sj1*sj2))+(((-1.0)*r22*x10316))+((x10307*x10314)));
evalcond[5]=((((-1.0)*sj2*x10309))+(((-1.0)*cj2*sj1))+(((-1.0)*r02*x10316))+(((-1.0)*x10311*x10315))+((x10307*x10312)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10317=((1.0)*gconst5);
CheckValue<IkReal> x10318 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x10317))+((gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10318.valid){
continue;
}
CheckValue<IkReal> x10319=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r00))+(((-1.0)*r01*x10317)))),-1);
if(!x10319.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10318.value)+(((1.5707963267949)*(x10319.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10320=IKsin(j4);
IkReal x10321=IKcos(j4);
IkReal x10322=(gconst4*r11);
IkReal x10323=((1.0)*cj1);
IkReal x10324=(gconst5*r10);
IkReal x10325=(gconst4*r01);
IkReal x10326=(gconst5*r00);
IkReal x10327=(gconst4*r21);
IkReal x10328=(gconst5*r20);
IkReal x10329=((1.0)*x10321);
IkReal x10330=((1.0)*x10320);
evalcond[0]=((((-1.0)*x10328*x10330))+((x10320*x10327))+(((-1.0)*r22*x10329)));
evalcond[1]=((((-1.0)*r02*x10329))+((x10320*x10325))+(((-1.0)*x10326*x10330)));
evalcond[2]=((((-1.0)*r12*x10330))+((x10321*x10324))+(((-1.0)*x10322*x10329)));
evalcond[3]=((1.0)+(((-1.0)*x10324*x10330))+((x10320*x10322))+(((-1.0)*r12*x10329)));
evalcond[4]=((((-1.0)*r22*x10330))+(((-1.0)*cj2*x10323))+((x10321*x10328))+((sj1*sj2))+(((-1.0)*x10327*x10329)));
evalcond[5]=((((-1.0)*sj2*x10323))+(((-1.0)*cj2*sj1))+((x10321*x10326))+(((-1.0)*x10325*x10329))+(((-1.0)*r02*x10330)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10331 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*gconst5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10331.valid){
continue;
}
CheckValue<IkReal> x10332=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10332.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10331.value)+(((1.5707963267949)*(x10332.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10333=IKsin(j4);
IkReal x10334=IKcos(j4);
IkReal x10335=(gconst4*r11);
IkReal x10336=((1.0)*cj1);
IkReal x10337=(gconst5*r10);
IkReal x10338=(gconst4*r01);
IkReal x10339=(gconst5*r00);
IkReal x10340=(gconst4*r21);
IkReal x10341=(gconst5*r20);
IkReal x10342=((1.0)*x10334);
IkReal x10343=((1.0)*x10333);
evalcond[0]=((((-1.0)*x10341*x10343))+((x10333*x10340))+(((-1.0)*r22*x10342)));
evalcond[1]=((((-1.0)*x10339*x10343))+(((-1.0)*r02*x10342))+((x10333*x10338)));
evalcond[2]=((((-1.0)*r12*x10343))+(((-1.0)*x10335*x10342))+((x10334*x10337)));
evalcond[3]=((1.0)+(((-1.0)*x10337*x10343))+(((-1.0)*r12*x10342))+((x10333*x10335)));
evalcond[4]=((((-1.0)*x10340*x10342))+(((-1.0)*cj2*x10336))+((x10334*x10341))+((sj1*sj2))+(((-1.0)*r22*x10343)));
evalcond[5]=((((-1.0)*x10338*x10342))+(((-1.0)*cj2*sj1))+(((-1.0)*sj2*x10336))+(((-1.0)*r02*x10343))+((x10334*x10339)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r02);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
j4array[0]=0;
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10344=gconst5*gconst5;
IkReal x10345=gconst4*gconst4;
IkReal x10346=(r21*sj3);
IkReal x10347=(gconst4*gconst5);
IkReal x10348=((1.0)*sj3);
IkReal x10349=(cj3*r10);
IkReal x10350=(cj3*r11);
IkReal x10351=((1.0)*r22);
IkReal x10352=((1.0)*x10345);
IkReal x10353=(r20*x10344);
CheckValue<IkReal> x10354=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x10346*x10352))+((r10*x10346*x10347))+((r11*r20*sj3*x10347))+(((-1.0)*r12*r22*x10348))+(((-1.0)*r10*x10348*x10353)))),-1);
if(!x10354.valid){
continue;
}
CheckValue<IkReal> x10355 = IKatan2WithCheck(IkReal(((((-1.0)*gconst5*x10350*x10351))+(((-1.0)*gconst4*x10349*x10351)))),IkReal((((r20*x10347*x10349))+((x10350*x10353))+(((-1.0)*r21*x10349*x10352))+(((-1.0)*r21*x10347*x10350)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10355.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10354.value)))+(x10355.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10356=IKsin(j4);
IkReal x10357=IKcos(j4);
IkReal x10358=(sj1*sj2);
IkReal x10359=((1.0)*cj1);
IkReal x10360=(cj3*gconst4);
IkReal x10361=((1.0)*gconst5);
IkReal x10362=(cj2*sj1);
IkReal x10363=(gconst5*sj3);
IkReal x10364=((1.0)*r10);
IkReal x10365=(cj2*x10359);
IkReal x10366=((1.0)*x10357);
IkReal x10367=(gconst4*x10356);
IkReal x10368=(r12*x10356);
IkReal x10369=((1.0)*gconst4*sj3);
IkReal x10370=(sj3*x10356);
IkReal x10371=(gconst4*sj3*x10357);
IkReal x10372=((1.0)*cj3*x10356);
IkReal x10373=(cj3*gconst5*x10357);
evalcond[0]=(((r21*x10367))+(((-1.0)*r20*x10356*x10361))+(((-1.0)*r22*x10366)));
evalcond[1]=((((-1.0)*r00*x10356*x10361))+((r01*x10367))+(((-1.0)*r02*x10366)));
evalcond[2]=((1.0)+(((-1.0)*r10*x10356*x10361))+((r11*x10367))+(((-1.0)*r12*x10366)));
evalcond[3]=((((-1.0)*x10360*x10364))+((sj3*x10368))+(((-1.0)*cj3*r11*x10361))+(((-1.0)*r10*sj3*x10357*x10361))+((r11*x10371)));
evalcond[4]=((((-1.0)*r11*sj3*x10361))+(((-1.0)*cj3*x10368))+((r10*x10373))+(((-1.0)*r11*x10360*x10366))+(((-1.0)*gconst4*sj3*x10364)));
evalcond[5]=(((r22*x10370))+(((-1.0)*r20*x10360))+x10358+(((-1.0)*cj3*r21*x10361))+(((-1.0)*x10365))+(((-1.0)*r20*sj3*x10357*x10361))+((r21*x10371)));
evalcond[6]=(((cj1*sj2))+(((-1.0)*r21*x10360*x10366))+((r20*x10373))+x10362+(((-1.0)*r21*sj3*x10361))+(((-1.0)*r20*x10369))+(((-1.0)*r22*x10372)));
evalcond[7]=(((r01*x10371))+(((-1.0)*r00*x10360))+((r02*x10370))+(((-1.0)*x10362))+(((-1.0)*cj3*r01*x10361))+(((-1.0)*sj2*x10359))+(((-1.0)*r00*sj3*x10357*x10361)));
evalcond[8]=((((-1.0)*r01*x10360*x10366))+((r00*x10373))+(((-1.0)*r02*x10372))+(((-1.0)*r00*x10369))+x10358+(((-1.0)*r01*sj3*x10361))+(((-1.0)*x10365)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10374=((1.0)*gconst5);
CheckValue<IkReal> x10375=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r00))+(((-1.0)*r01*x10374)))),-1);
if(!x10375.valid){
continue;
}
CheckValue<IkReal> x10376 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*r20*x10374)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10376.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10375.value)))+(x10376.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10377=IKsin(j4);
IkReal x10378=IKcos(j4);
IkReal x10379=(sj1*sj2);
IkReal x10380=((1.0)*cj1);
IkReal x10381=(cj3*gconst4);
IkReal x10382=((1.0)*gconst5);
IkReal x10383=(cj2*sj1);
IkReal x10384=(gconst5*sj3);
IkReal x10385=((1.0)*r10);
IkReal x10386=(cj2*x10380);
IkReal x10387=((1.0)*x10378);
IkReal x10388=(gconst4*x10377);
IkReal x10389=(r12*x10377);
IkReal x10390=((1.0)*gconst4*sj3);
IkReal x10391=(sj3*x10377);
IkReal x10392=(gconst4*sj3*x10378);
IkReal x10393=((1.0)*cj3*x10377);
IkReal x10394=(cj3*gconst5*x10378);
evalcond[0]=(((r21*x10388))+(((-1.0)*r20*x10377*x10382))+(((-1.0)*r22*x10387)));
evalcond[1]=((((-1.0)*r02*x10387))+(((-1.0)*r00*x10377*x10382))+((r01*x10388)));
evalcond[2]=((1.0)+((r11*x10388))+(((-1.0)*r12*x10387))+(((-1.0)*r10*x10377*x10382)));
evalcond[3]=(((r11*x10392))+(((-1.0)*x10381*x10385))+((sj3*x10389))+(((-1.0)*cj3*r11*x10382))+(((-1.0)*r10*sj3*x10378*x10382)));
evalcond[4]=((((-1.0)*cj3*x10389))+(((-1.0)*r11*x10381*x10387))+((r10*x10394))+(((-1.0)*r11*sj3*x10382))+(((-1.0)*gconst4*sj3*x10385)));
evalcond[5]=((((-1.0)*cj3*r21*x10382))+((r21*x10392))+(((-1.0)*x10386))+((r22*x10391))+(((-1.0)*r20*sj3*x10378*x10382))+x10379+(((-1.0)*r20*x10381)));
evalcond[6]=((((-1.0)*r21*sj3*x10382))+(((-1.0)*r21*x10381*x10387))+((cj1*sj2))+(((-1.0)*r20*x10390))+x10383+(((-1.0)*r22*x10393))+((r20*x10394)));
evalcond[7]=(((r01*x10392))+(((-1.0)*r00*x10381))+(((-1.0)*r00*sj3*x10378*x10382))+(((-1.0)*cj3*r01*x10382))+((r02*x10391))+(((-1.0)*x10383))+(((-1.0)*sj2*x10380)));
evalcond[8]=((((-1.0)*x10386))+(((-1.0)*r02*x10393))+x10379+(((-1.0)*r01*x10381*x10387))+(((-1.0)*r01*sj3*x10382))+(((-1.0)*r00*x10390))+((r00*x10394)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10395 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*gconst5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10395.valid){
continue;
}
CheckValue<IkReal> x10396=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10396.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10395.value)+(((1.5707963267949)*(x10396.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10397=IKsin(j4);
IkReal x10398=IKcos(j4);
IkReal x10399=(sj1*sj2);
IkReal x10400=((1.0)*cj1);
IkReal x10401=(cj3*gconst4);
IkReal x10402=((1.0)*gconst5);
IkReal x10403=(cj2*sj1);
IkReal x10404=(gconst5*sj3);
IkReal x10405=((1.0)*r10);
IkReal x10406=(cj2*x10400);
IkReal x10407=((1.0)*x10398);
IkReal x10408=(gconst4*x10397);
IkReal x10409=(r12*x10397);
IkReal x10410=((1.0)*gconst4*sj3);
IkReal x10411=(sj3*x10397);
IkReal x10412=(gconst4*sj3*x10398);
IkReal x10413=((1.0)*cj3*x10397);
IkReal x10414=(cj3*gconst5*x10398);
evalcond[0]=(((r21*x10408))+(((-1.0)*r22*x10407))+(((-1.0)*r20*x10397*x10402)));
evalcond[1]=(((r01*x10408))+(((-1.0)*r00*x10397*x10402))+(((-1.0)*r02*x10407)));
evalcond[2]=((1.0)+(((-1.0)*r10*x10397*x10402))+(((-1.0)*r12*x10407))+((r11*x10408)));
evalcond[3]=((((-1.0)*cj3*r11*x10402))+(((-1.0)*r10*sj3*x10398*x10402))+((sj3*x10409))+(((-1.0)*x10401*x10405))+((r11*x10412)));
evalcond[4]=((((-1.0)*r11*sj3*x10402))+(((-1.0)*r11*x10401*x10407))+(((-1.0)*gconst4*sj3*x10405))+(((-1.0)*cj3*x10409))+((r10*x10414)));
evalcond[5]=(((r22*x10411))+((r21*x10412))+(((-1.0)*r20*x10401))+(((-1.0)*x10406))+x10399+(((-1.0)*cj3*r21*x10402))+(((-1.0)*r20*sj3*x10398*x10402)));
evalcond[6]=((((-1.0)*r21*sj3*x10402))+((cj1*sj2))+(((-1.0)*r20*x10410))+(((-1.0)*r21*x10401*x10407))+(((-1.0)*r22*x10413))+x10403+((r20*x10414)));
evalcond[7]=((((-1.0)*r00*x10401))+((r01*x10412))+(((-1.0)*sj2*x10400))+(((-1.0)*r00*sj3*x10398*x10402))+((r02*x10411))+(((-1.0)*cj3*r01*x10402))+(((-1.0)*x10403)));
evalcond[8]=((((-1.0)*r02*x10413))+((r00*x10414))+(((-1.0)*r01*x10401*x10407))+(((-1.0)*r01*sj3*x10402))+(((-1.0)*x10406))+x10399+(((-1.0)*r00*x10410)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x10415=((-1.0)*r21);
IkReal x10416=((-1.0)*r20);
CheckValue<IkReal> x10418 = IKatan2WithCheck(IkReal(x10415),IkReal(x10416),IKFAST_ATAN2_MAGTHRESH);
if(!x10418.valid){
continue;
}
IkReal x10417=((1.0)*(x10418.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10417)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x10416);
rxp0_2=(py*r00);
rxp1_0=(py*x10415);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10417)));
IkReal gconst4=x10415;
IkReal gconst5=((1.0)*r20);
j4eval[0]=((((-1.0)*r01*r21))+(((-1.0)*r00*r20)));
j4eval[1]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10419=((-1.0)*r21);
IkReal x10420=((-1.0)*r20);
CheckValue<IkReal> x10422 = IKatan2WithCheck(IkReal(x10419),IkReal(x10420),IKFAST_ATAN2_MAGTHRESH);
if(!x10422.valid){
continue;
}
IkReal x10421=((1.0)*(x10422.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10421)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x10420);
rxp0_2=(py*r00);
rxp1_0=(py*x10419);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10421)));
IkReal gconst4=x10419;
IkReal gconst5=((1.0)*r20);
IkReal x10423=((1.0)*cj3);
j4eval[0]=((((-1.0)*r01*r21))+(((-1.0)*r00*r20)));
j4eval[1]=((((-1.0)*x10423*(r00*r00)))+x10423+((x10423*(r21*r21))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10424=((-1.0)*r21);
IkReal x10425=((-1.0)*r20);
CheckValue<IkReal> x10427 = IKatan2WithCheck(IkReal(x10424),IkReal(x10425),IKFAST_ATAN2_MAGTHRESH);
if(!x10427.valid){
continue;
}
IkReal x10426=((1.0)*(x10427.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10426)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x10425);
rxp0_2=(py*r00);
rxp1_0=(py*x10424);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10426)));
IkReal gconst4=x10424;
IkReal gconst5=((1.0)*r20);
j4eval[0]=cj3;
j4eval[1]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x10428=((-1.0)*r21);
IkReal x10429=((-1.0)*r20);
CheckValue<IkReal> x10431 = IKatan2WithCheck(IkReal(x10428),IkReal(x10429),IKFAST_ATAN2_MAGTHRESH);
if(!x10431.valid){
continue;
}
IkReal x10430=((1.0)*(x10431.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10430)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x10429);
rxp0_2=(py*r00);
rxp1_0=(py*x10428);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10430)));
IkReal gconst4=x10428;
IkReal gconst5=((1.0)*r20);
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10432=((-1.0)*r21);
IkReal x10433=((-1.0)*r20);
CheckValue<IkReal> x10435 = IKatan2WithCheck(IkReal(x10432),IkReal(x10433),IKFAST_ATAN2_MAGTHRESH);
if(!x10435.valid){
continue;
}
IkReal x10434=((1.0)*(x10435.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10434)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x10433);
rxp0_2=(py*r00);
rxp1_0=(py*x10432);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10434)));
IkReal gconst4=x10432;
IkReal gconst5=((1.0)*r20);
j4eval[0]=((-1.0)+(((-1.0)*(r21*r21)))+(((1.0)*(r00*r00))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10436=((-1.0)*r21);
IkReal x10437=((-1.0)*r20);
CheckValue<IkReal> x10439 = IKatan2WithCheck(IkReal(x10436),IkReal(x10437),IKFAST_ATAN2_MAGTHRESH);
if(!x10439.valid){
continue;
}
IkReal x10438=((1.0)*(x10439.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10438)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x10437);
rxp0_2=(py*r00);
rxp1_0=(py*x10436);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10438)));
IkReal gconst4=x10436;
IkReal gconst5=((1.0)*r20);
j4eval[0]=((((-1.0)*r01*r21))+(((-1.0)*r00*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x10442=IKPowWithIntegerCheck((((gconst4*r01))+(((-1.0)*gconst5*r00))),-1);
if(!x10442.valid){
continue;
}
IkReal x10440=x10442.value;
IkReal x10441=((1.0)*cj0*x10440);
cj4array[0]=((((-1.0)*cj1*sj2*x10441))+(((-1.0)*cj2*sj1*x10441)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x10443=IKsin(j4);
IkReal x10444=IKcos(j4);
IkReal x10445=(gconst4*x10443);
IkReal x10446=((1.0)*x10444);
IkReal x10447=((1.0)*gconst5*x10443);
evalcond[0]=(r12*x10443);
evalcond[1]=((((-1.0)*r12*x10446))+(((-1.0)*cj0)));
evalcond[2]=((((-1.0)*r20*x10447))+((r21*x10445)));
evalcond[3]=((((-1.0)*r00*x10447))+((r01*x10445)));
evalcond[4]=((((-1.0)*gconst5*r20*x10446))+((gconst4*r21*x10444))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x10449=IKPowWithIntegerCheck((((gconst4*r21))+(((-1.0)*gconst5*r20))),-1);
if(!x10449.valid){
continue;
}
IkReal x10448=x10449.value;
cj4array[0]=(((cj1*cj2*x10448))+(((-1.0)*sj1*sj2*x10448)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x10450=IKsin(j4);
IkReal x10451=IKcos(j4);
IkReal x10452=(gconst4*r01);
IkReal x10453=((1.0)*gconst5*r00);
evalcond[0]=(r12*x10450);
evalcond[1]=((((-1.0)*r12*x10451))+(((-1.0)*cj0)));
evalcond[2]=((((-1.0)*gconst5*r20*x10450))+((gconst4*r21*x10450)));
evalcond[3]=(((x10450*x10452))+(((-1.0)*x10450*x10453)));
evalcond[4]=(((x10451*x10452))+((cj0*cj2*sj1))+(((-1.0)*x10451*x10453))+((cj0*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x10454=IKPowWithIntegerCheck(r12,-1);
if(!x10454.valid){
continue;
}
cj4array[0]=((-1.0)*cj0*(x10454.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x10455=IKsin(j4);
IkReal x10456=IKcos(j4);
IkReal x10457=((1.0)*gconst5*r00);
IkReal x10458=(gconst4*x10455);
IkReal x10459=(gconst4*x10456);
IkReal x10460=((1.0)*gconst5*r20);
evalcond[0]=(r12*x10455);
evalcond[1]=(((r21*x10458))+(((-1.0)*x10455*x10460)));
evalcond[2]=((((-1.0)*x10455*x10457))+((r01*x10458)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x10456*x10460))+((r21*x10459)));
evalcond[4]=(((r01*x10459))+((cj0*cj2*sj1))+(((-1.0)*x10456*x10457))+((cj0*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x10461=((-1.0)*r21);
IkReal x10462=((-1.0)*r20);
CheckValue<IkReal> x10464 = IKatan2WithCheck(IkReal(x10461),IkReal(x10462),IKFAST_ATAN2_MAGTHRESH);
if(!x10464.valid){
continue;
}
IkReal x10463=((1.0)*(x10464.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10463)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x10462);
rxp0_2=(py*r00);
rxp1_0=(py*x10461);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10463)));
IkReal gconst4=x10461;
IkReal gconst5=((1.0)*r20);
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10465=((-1.0)*r21);
IkReal x10466=((-1.0)*r20);
CheckValue<IkReal> x10468 = IKatan2WithCheck(IkReal(x10465),IkReal(x10466),IKFAST_ATAN2_MAGTHRESH);
if(!x10468.valid){
continue;
}
IkReal x10467=((1.0)*(x10468.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10467)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x10466);
rxp0_2=(py*r00);
rxp1_0=(py*x10465);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10467)));
IkReal gconst4=x10465;
IkReal gconst5=((1.0)*r20);
j4eval[0]=((1.0)+(((1.0)*(r21*r21)))+(((-1.0)*(r00*r00))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10469=((-1.0)*r21);
IkReal x10470=((-1.0)*r20);
CheckValue<IkReal> x10472 = IKatan2WithCheck(IkReal(x10469),IkReal(x10470),IKFAST_ATAN2_MAGTHRESH);
if(!x10472.valid){
continue;
}
IkReal x10471=((1.0)*(x10472.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10471)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x10470);
rxp0_2=(py*r00);
rxp1_0=(py*x10469);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10471)));
IkReal gconst4=x10469;
IkReal gconst5=((1.0)*r20);
j4eval[0]=((((1.0)*r01*r21))+(((1.0)*r00*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x10475=IKPowWithIntegerCheck(((((-1.0)*gconst4*r01))+((gconst5*r00))),-1);
if(!x10475.valid){
continue;
}
IkReal x10473=x10475.value;
IkReal x10474=((1.0)*cj0*x10473);
cj4array[0]=((((-1.0)*cj2*sj1*x10474))+(((-1.0)*cj1*sj2*x10474)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x10476=IKsin(j4);
IkReal x10477=IKcos(j4);
IkReal x10478=(gconst4*x10476);
IkReal x10479=((1.0)*x10477);
IkReal x10480=((1.0)*gconst5*x10476);
evalcond[0]=((-1.0)*r12*x10476);
evalcond[1]=((((-1.0)*cj0))+(((-1.0)*r12*x10479)));
evalcond[2]=((((-1.0)*r20*x10480))+((r21*x10478)));
evalcond[3]=(((r01*x10478))+(((-1.0)*r00*x10480)));
evalcond[4]=((((-1.0)*cj1*cj2))+((gconst5*r20*x10477))+((sj1*sj2))+(((-1.0)*gconst4*r21*x10479)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x10482=IKPowWithIntegerCheck((((gconst5*r20))+(((-1.0)*gconst4*r21))),-1);
if(!x10482.valid){
continue;
}
IkReal x10481=x10482.value;
cj4array[0]=((((-1.0)*sj1*sj2*x10481))+((cj1*cj2*x10481)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x10483=IKsin(j4);
IkReal x10484=IKcos(j4);
IkReal x10485=(gconst5*r00);
IkReal x10486=(gconst4*r01);
IkReal x10487=((1.0)*x10483);
IkReal x10488=((1.0)*x10484);
evalcond[0]=((-1.0)*r12*x10483);
evalcond[1]=((((-1.0)*r12*x10488))+(((-1.0)*cj0)));
evalcond[2]=(((gconst4*r21*x10483))+(((-1.0)*gconst5*r20*x10487)));
evalcond[3]=((((-1.0)*x10485*x10487))+((x10483*x10486)));
evalcond[4]=(((cj0*cj2*sj1))+(((-1.0)*x10486*x10488))+((x10484*x10485))+((cj0*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x10489=IKPowWithIntegerCheck(r12,-1);
if(!x10489.valid){
continue;
}
cj4array[0]=((-1.0)*cj0*(x10489.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x10490=IKsin(j4);
IkReal x10491=IKcos(j4);
IkReal x10492=(gconst5*r00);
IkReal x10493=(gconst5*r20);
IkReal x10494=((1.0)*x10490);
IkReal x10495=(gconst4*x10490);
IkReal x10496=((1.0)*gconst4*x10491);
evalcond[0]=((-1.0)*r12*x10490);
evalcond[1]=(((r21*x10495))+(((-1.0)*x10493*x10494)));
evalcond[2]=(((r01*x10495))+(((-1.0)*x10492*x10494)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r21*x10496))+((x10491*x10493)));
evalcond[4]=((((-1.0)*r01*x10496))+((cj0*cj2*sj1))+((x10491*x10492))+((cj0*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10498=IKPowWithIntegerCheck(r12,-1);
if(!x10498.valid){
continue;
}
IkReal x10497=x10498.value;
CheckValue<IkReal> x10499=IKPowWithIntegerCheck(cj3,-1);
if(!x10499.valid){
continue;
}
if( IKabs((x10497*(x10499.value)*((((cj1*cj2*sj0))+(((-1.0)*sj0*sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*cj0*x10497)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x10497*(x10499.value)*((((cj1*cj2*sj0))+(((-1.0)*sj0*sj1*sj2))))))+IKsqr(((-1.0)*cj0*x10497))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x10497*(x10499.value)*((((cj1*cj2*sj0))+(((-1.0)*sj0*sj1*sj2))))), ((-1.0)*cj0*x10497));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10500=IKsin(j4);
IkReal x10501=IKcos(j4);
IkReal x10502=(cj2*sj0);
IkReal x10503=(sj1*sj2);
IkReal x10504=((1.0)*r01);
IkReal x10505=(cj1*cj2);
IkReal x10506=(r21*sj3);
IkReal x10507=(gconst5*sj3);
IkReal x10508=((1.0)*gconst5);
IkReal x10509=(cj2*sj1);
IkReal x10510=((1.0)*gconst4);
IkReal x10511=(cj1*sj2);
IkReal x10512=((1.0)*cj0);
IkReal x10513=(gconst4*x10501);
IkReal x10514=(r12*x10500);
IkReal x10515=((1.0)*cj3*r21);
IkReal x10516=((1.0)*x10501);
IkReal x10517=(gconst4*x10500);
IkReal x10518=(cj3*gconst5*x10501);
evalcond[0]=((((-1.0)*x10512))+(((-1.0)*r12*x10516)));
evalcond[1]=((((-1.0)*r20*x10500*x10508))+((r21*x10517)));
evalcond[2]=(sj0+((r01*x10517))+(((-1.0)*r00*x10500*x10508)));
evalcond[3]=(((sj1*x10502))+((sj3*x10514))+((sj0*x10511)));
evalcond[4]=(((cj1*x10502))+(((-1.0)*cj3*x10514))+(((-1.0)*sj0*x10503)));
evalcond[5]=((((-1.0)*r20*sj3*x10510))+((r20*x10518))+x10511+x10509+(((-1.0)*cj3*r21*x10501*x10510))+(((-1.0)*x10506*x10508)));
evalcond[6]=((((-1.0)*cj3*r20*x10510))+((x10506*x10513))+x10503+(((-1.0)*x10505))+(((-1.0)*r20*x10507*x10516))+(((-1.0)*cj3*r21*x10508)));
evalcond[7]=((((-1.0)*r00*x10507*x10516))+(((-1.0)*cj3*gconst5*x10504))+((cj0*x10511))+((cj0*x10509))+(((-1.0)*cj3*r00*x10510))+((r01*sj3*x10513)));
evalcond[8]=((((-1.0)*cj3*x10504*x10513))+(((-1.0)*r00*sj3*x10510))+(((-1.0)*x10503*x10512))+((cj0*x10505))+((r00*x10518))+(((-1.0)*x10504*x10507)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10519=IKPowWithIntegerCheck((((gconst4*r01))+(((-1.0)*gconst5*r00))),-1);
if(!x10519.valid){
continue;
}
CheckValue<IkReal> x10520=IKPowWithIntegerCheck(((((-1.0)*cj3*gconst4*r21))+((cj3*gconst5*r20))),-1);
if(!x10520.valid){
continue;
}
if( IKabs(((-1.0)*sj0*(x10519.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x10520.value)*((((gconst5*r21*sj3))+((gconst4*r20*sj3))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*sj0*(x10519.value)))+IKsqr(((x10520.value)*((((gconst5*r21*sj3))+((gconst4*r20*sj3))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*sj0*(x10519.value)), ((x10520.value)*((((gconst5*r21*sj3))+((gconst4*r20*sj3))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10521=IKsin(j4);
IkReal x10522=IKcos(j4);
IkReal x10523=(cj2*sj0);
IkReal x10524=(sj1*sj2);
IkReal x10525=((1.0)*r01);
IkReal x10526=(cj1*cj2);
IkReal x10527=(r21*sj3);
IkReal x10528=(gconst5*sj3);
IkReal x10529=((1.0)*gconst5);
IkReal x10530=(cj2*sj1);
IkReal x10531=((1.0)*gconst4);
IkReal x10532=(cj1*sj2);
IkReal x10533=((1.0)*cj0);
IkReal x10534=(gconst4*x10522);
IkReal x10535=(r12*x10521);
IkReal x10536=((1.0)*cj3*r21);
IkReal x10537=((1.0)*x10522);
IkReal x10538=(gconst4*x10521);
IkReal x10539=(cj3*gconst5*x10522);
evalcond[0]=((((-1.0)*x10533))+(((-1.0)*r12*x10537)));
evalcond[1]=(((r21*x10538))+(((-1.0)*r20*x10521*x10529)));
evalcond[2]=((((-1.0)*r00*x10521*x10529))+sj0+((r01*x10538)));
evalcond[3]=(((sj1*x10523))+((sj0*x10532))+((sj3*x10535)));
evalcond[4]=((((-1.0)*cj3*x10535))+(((-1.0)*sj0*x10524))+((cj1*x10523)));
evalcond[5]=((((-1.0)*x10527*x10529))+(((-1.0)*cj3*r21*x10522*x10531))+x10532+x10530+((r20*x10539))+(((-1.0)*r20*sj3*x10531)));
evalcond[6]=((((-1.0)*r20*x10528*x10537))+(((-1.0)*x10526))+((x10527*x10534))+x10524+(((-1.0)*cj3*r21*x10529))+(((-1.0)*cj3*r20*x10531)));
evalcond[7]=((((-1.0)*cj3*gconst5*x10525))+(((-1.0)*cj3*r00*x10531))+((r01*sj3*x10534))+((cj0*x10530))+((cj0*x10532))+(((-1.0)*r00*x10528*x10537)));
evalcond[8]=((((-1.0)*x10524*x10533))+(((-1.0)*cj3*x10525*x10534))+((cj0*x10526))+((r00*x10539))+(((-1.0)*x10525*x10528))+(((-1.0)*r00*sj3*x10531)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10540=IKPowWithIntegerCheck((((gconst4*r01))+(((-1.0)*gconst5*r00))),-1);
if(!x10540.valid){
continue;
}
CheckValue<IkReal> x10541=IKPowWithIntegerCheck(r12,-1);
if(!x10541.valid){
continue;
}
if( IKabs(((-1.0)*sj0*(x10540.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*cj0*(x10541.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*sj0*(x10540.value)))+IKsqr(((-1.0)*cj0*(x10541.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*sj0*(x10540.value)), ((-1.0)*cj0*(x10541.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10542=IKsin(j4);
IkReal x10543=IKcos(j4);
IkReal x10544=(cj2*sj0);
IkReal x10545=(sj1*sj2);
IkReal x10546=((1.0)*r01);
IkReal x10547=(cj1*cj2);
IkReal x10548=(r21*sj3);
IkReal x10549=(gconst5*sj3);
IkReal x10550=((1.0)*gconst5);
IkReal x10551=(cj2*sj1);
IkReal x10552=((1.0)*gconst4);
IkReal x10553=(cj1*sj2);
IkReal x10554=((1.0)*cj0);
IkReal x10555=(gconst4*x10543);
IkReal x10556=(r12*x10542);
IkReal x10557=((1.0)*cj3*r21);
IkReal x10558=((1.0)*x10543);
IkReal x10559=(gconst4*x10542);
IkReal x10560=(cj3*gconst5*x10543);
evalcond[0]=((((-1.0)*r12*x10558))+(((-1.0)*x10554)));
evalcond[1]=(((r21*x10559))+(((-1.0)*r20*x10542*x10550)));
evalcond[2]=(sj0+((r01*x10559))+(((-1.0)*r00*x10542*x10550)));
evalcond[3]=(((sj0*x10553))+((sj1*x10544))+((sj3*x10556)));
evalcond[4]=((((-1.0)*sj0*x10545))+((cj1*x10544))+(((-1.0)*cj3*x10556)));
evalcond[5]=(((r20*x10560))+x10551+x10553+(((-1.0)*cj3*r21*x10543*x10552))+(((-1.0)*x10548*x10550))+(((-1.0)*r20*sj3*x10552)));
evalcond[6]=((((-1.0)*x10547))+x10545+(((-1.0)*cj3*r20*x10552))+((x10548*x10555))+(((-1.0)*cj3*r21*x10550))+(((-1.0)*r20*x10549*x10558)));
evalcond[7]=(((r01*sj3*x10555))+(((-1.0)*cj3*r00*x10552))+(((-1.0)*r00*x10549*x10558))+((cj0*x10553))+((cj0*x10551))+(((-1.0)*cj3*gconst5*x10546)));
evalcond[8]=(((r00*x10560))+(((-1.0)*x10545*x10554))+((cj0*x10547))+(((-1.0)*x10546*x10549))+(((-1.0)*r00*sj3*x10552))+(((-1.0)*cj3*x10546*x10555)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10561=((1.0)*gconst5);
CheckValue<IkReal> x10562=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x10561))+(((-1.0)*gconst4*r20)))),-1);
if(!x10562.valid){
continue;
}
CheckValue<IkReal> x10563 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*cj0*r00*x10561))+((cj0*gconst4*r01))+(((-1.0)*r10*sj0*x10561))+((gconst4*r11*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10563.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10562.value)))+(x10563.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10564=IKsin(j4);
IkReal x10565=IKcos(j4);
IkReal x10566=(cj3*gconst4);
IkReal x10567=(cj2*sj0);
IkReal x10568=(sj1*sj2);
IkReal x10569=(r21*sj3);
IkReal x10570=((1.0)*gconst5);
IkReal x10571=(cj1*cj2);
IkReal x10572=(r01*sj3);
IkReal x10573=(cj2*sj1);
IkReal x10574=(gconst5*sj3);
IkReal x10575=(r11*sj3);
IkReal x10576=((1.0)*r10);
IkReal x10577=(cj1*sj2);
IkReal x10578=((1.0)*cj0);
IkReal x10579=((1.0)*x10565);
IkReal x10580=(gconst4*x10564);
IkReal x10581=(r12*x10564);
IkReal x10582=(gconst4*x10565);
IkReal x10583=((1.0)*gconst4*sj3);
IkReal x10584=(sj3*x10564);
IkReal x10585=((1.0)*cj3*x10564);
IkReal x10586=(cj3*gconst5*x10565);
evalcond[0]=((((-1.0)*r22*x10579))+((r21*x10580))+(((-1.0)*r20*x10564*x10570)));
evalcond[1]=(sj0+(((-1.0)*r00*x10564*x10570))+(((-1.0)*r02*x10579))+((r01*x10580)));
evalcond[2]=(((r11*x10580))+(((-1.0)*r10*x10564*x10570))+(((-1.0)*x10578))+(((-1.0)*r12*x10579)));
evalcond[3]=((((-1.0)*cj3*r21*x10570))+((x10569*x10582))+((r22*x10584))+(((-1.0)*r20*x10566))+(((-1.0)*x10571))+x10568+(((-1.0)*r20*sj3*x10565*x10570)));
evalcond[4]=((((-1.0)*x10569*x10570))+(((-1.0)*r22*x10585))+(((-1.0)*r20*x10583))+(((-1.0)*r21*x10566*x10579))+x10577+x10573+((r20*x10586)));
evalcond[5]=((((-1.0)*r00*x10566))+((cj0*x10577))+((cj0*x10573))+((x10572*x10582))+((r02*x10584))+(((-1.0)*r00*sj3*x10565*x10570))+(((-1.0)*cj3*r01*x10570)));
evalcond[6]=(((sj1*x10567))+((sj0*x10577))+(((-1.0)*x10566*x10576))+((sj3*x10581))+(((-1.0)*r10*sj3*x10565*x10570))+(((-1.0)*cj3*r11*x10570))+((x10575*x10582)));
evalcond[7]=((((-1.0)*r00*x10583))+(((-1.0)*x10568*x10578))+(((-1.0)*r01*x10566*x10579))+((cj0*x10571))+(((-1.0)*r02*x10585))+(((-1.0)*x10570*x10572))+((r00*x10586)));
evalcond[8]=(((r10*x10586))+(((-1.0)*gconst4*sj3*x10576))+(((-1.0)*sj0*x10568))+((cj1*x10567))+(((-1.0)*cj3*x10581))+(((-1.0)*r11*x10566*x10579))+(((-1.0)*x10570*x10575)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10587=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x10587.valid){
continue;
}
CheckValue<IkReal> x10588 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*gconst5*r20))+((cj0*gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10588.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10587.value)))+(x10588.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10589=IKsin(j4);
IkReal x10590=IKcos(j4);
IkReal x10591=(cj3*gconst4);
IkReal x10592=(cj2*sj0);
IkReal x10593=(sj1*sj2);
IkReal x10594=(r21*sj3);
IkReal x10595=((1.0)*gconst5);
IkReal x10596=(cj1*cj2);
IkReal x10597=(r01*sj3);
IkReal x10598=(cj2*sj1);
IkReal x10599=(gconst5*sj3);
IkReal x10600=(r11*sj3);
IkReal x10601=((1.0)*r10);
IkReal x10602=(cj1*sj2);
IkReal x10603=((1.0)*cj0);
IkReal x10604=((1.0)*x10590);
IkReal x10605=(gconst4*x10589);
IkReal x10606=(r12*x10589);
IkReal x10607=(gconst4*x10590);
IkReal x10608=((1.0)*gconst4*sj3);
IkReal x10609=(sj3*x10589);
IkReal x10610=((1.0)*cj3*x10589);
IkReal x10611=(cj3*gconst5*x10590);
evalcond[0]=(((r21*x10605))+(((-1.0)*r20*x10589*x10595))+(((-1.0)*r22*x10604)));
evalcond[1]=(((r01*x10605))+sj0+(((-1.0)*r02*x10604))+(((-1.0)*r00*x10589*x10595)));
evalcond[2]=(((r11*x10605))+(((-1.0)*r12*x10604))+(((-1.0)*r10*x10589*x10595))+(((-1.0)*x10603)));
evalcond[3]=((((-1.0)*r20*x10591))+((x10594*x10607))+(((-1.0)*x10596))+((r22*x10609))+(((-1.0)*r20*sj3*x10590*x10595))+(((-1.0)*cj3*r21*x10595))+x10593);
evalcond[4]=((((-1.0)*r21*x10591*x10604))+(((-1.0)*x10594*x10595))+((r20*x10611))+(((-1.0)*r22*x10610))+(((-1.0)*r20*x10608))+x10598+x10602);
evalcond[5]=(((r02*x10609))+((cj0*x10598))+(((-1.0)*cj3*r01*x10595))+(((-1.0)*r00*sj3*x10590*x10595))+((x10597*x10607))+((cj0*x10602))+(((-1.0)*r00*x10591)));
evalcond[6]=(((x10600*x10607))+(((-1.0)*r10*sj3*x10590*x10595))+((sj3*x10606))+(((-1.0)*x10591*x10601))+((sj1*x10592))+((sj0*x10602))+(((-1.0)*cj3*r11*x10595)));
evalcond[7]=((((-1.0)*r02*x10610))+((cj0*x10596))+(((-1.0)*x10593*x10603))+(((-1.0)*r00*x10608))+(((-1.0)*x10595*x10597))+((r00*x10611))+(((-1.0)*r01*x10591*x10604)));
evalcond[8]=((((-1.0)*sj0*x10593))+(((-1.0)*x10595*x10600))+(((-1.0)*gconst4*sj3*x10601))+(((-1.0)*cj3*x10606))+((r10*x10611))+(((-1.0)*r11*x10591*x10604))+((cj1*x10592)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10612=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x10612.valid){
continue;
}
CheckValue<IkReal> x10613 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*gconst5*r20*sj0))+((gconst4*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10613.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10612.value)))+(x10613.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10614=IKsin(j4);
IkReal x10615=IKcos(j4);
IkReal x10616=(cj3*gconst4);
IkReal x10617=(cj2*sj0);
IkReal x10618=(sj1*sj2);
IkReal x10619=(r21*sj3);
IkReal x10620=((1.0)*gconst5);
IkReal x10621=(cj1*cj2);
IkReal x10622=(r01*sj3);
IkReal x10623=(cj2*sj1);
IkReal x10624=(gconst5*sj3);
IkReal x10625=(r11*sj3);
IkReal x10626=((1.0)*r10);
IkReal x10627=(cj1*sj2);
IkReal x10628=((1.0)*cj0);
IkReal x10629=((1.0)*x10615);
IkReal x10630=(gconst4*x10614);
IkReal x10631=(r12*x10614);
IkReal x10632=(gconst4*x10615);
IkReal x10633=((1.0)*gconst4*sj3);
IkReal x10634=(sj3*x10614);
IkReal x10635=((1.0)*cj3*x10614);
IkReal x10636=(cj3*gconst5*x10615);
evalcond[0]=((((-1.0)*r22*x10629))+(((-1.0)*r20*x10614*x10620))+((r21*x10630)));
evalcond[1]=((((-1.0)*r02*x10629))+sj0+((r01*x10630))+(((-1.0)*r00*x10614*x10620)));
evalcond[2]=((((-1.0)*x10628))+(((-1.0)*r12*x10629))+(((-1.0)*r10*x10614*x10620))+((r11*x10630)));
evalcond[3]=((((-1.0)*cj3*r21*x10620))+(((-1.0)*r20*x10616))+(((-1.0)*x10621))+(((-1.0)*r20*sj3*x10615*x10620))+((r22*x10634))+((x10619*x10632))+x10618);
evalcond[4]=(((r20*x10636))+(((-1.0)*x10619*x10620))+(((-1.0)*r22*x10635))+(((-1.0)*r21*x10616*x10629))+(((-1.0)*r20*x10633))+x10623+x10627);
evalcond[5]=(((cj0*x10623))+((cj0*x10627))+(((-1.0)*r00*sj3*x10615*x10620))+(((-1.0)*r00*x10616))+(((-1.0)*cj3*r01*x10620))+((r02*x10634))+((x10622*x10632)));
evalcond[6]=(((sj1*x10617))+((sj0*x10627))+((sj3*x10631))+(((-1.0)*r10*sj3*x10615*x10620))+((x10625*x10632))+(((-1.0)*cj3*r11*x10620))+(((-1.0)*x10616*x10626)));
evalcond[7]=((((-1.0)*r02*x10635))+(((-1.0)*r00*x10633))+((r00*x10636))+(((-1.0)*x10618*x10628))+((cj0*x10621))+(((-1.0)*r01*x10616*x10629))+(((-1.0)*x10620*x10622)));
evalcond[8]=((((-1.0)*cj3*x10631))+(((-1.0)*sj0*x10618))+((r10*x10636))+(((-1.0)*gconst4*sj3*x10626))+(((-1.0)*r11*x10616*x10629))+((cj1*x10617))+(((-1.0)*x10620*x10625)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x10638 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x10638)==0){
continue;
}
IkReal x10637=pow(x10638,-0.5);
CheckValue<IkReal> x10639 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x10639.valid){
continue;
}
IkReal gconst6=((-1.0)*(x10639.value));
IkReal gconst7=((-1.0)*r01*x10637);
IkReal gconst8=(r00*x10637);
CheckValue<IkReal> x10640 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x10640.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x10640.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x10643 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x10643.valid){
continue;
}
IkReal x10641=((-1.0)*(x10643.value));
IkReal x10642=x10637;
sj5=gconst7;
cj5=gconst8;
j5=x10641;
IkReal gconst6=x10641;
IkReal gconst7=((-1.0)*r01*x10642);
IkReal gconst8=(r00*x10642);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10644=((1.0)*gconst8);
CheckValue<IkReal> x10645 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((cj0*gconst7*r01))+((gconst7*r11*sj0))+(((-1.0)*r10*sj0*x10644))+(((-1.0)*cj0*r00*x10644)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10645.valid){
continue;
}
CheckValue<IkReal> x10646=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst7*r20))+(((-1.0)*r21*x10644)))),-1);
if(!x10646.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10645.value)+(((1.5707963267949)*(x10646.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10647=IKsin(j4);
IkReal x10648=IKcos(j4);
IkReal x10649=((1.0)*gconst7);
IkReal x10650=(r00*sj3);
IkReal x10651=(cj2*sj0);
IkReal x10652=(cj3*gconst7);
IkReal x10653=(sj1*sj2);
IkReal x10654=(r10*sj3);
IkReal x10655=(cj1*cj2);
IkReal x10656=((1.0)*cj3);
IkReal x10657=(gconst8*r11);
IkReal x10658=(cj2*sj1);
IkReal x10659=(gconst8*r21);
IkReal x10660=((1.0)*sj3);
IkReal x10661=(gconst8*r01);
IkReal x10662=(cj1*sj2);
IkReal x10663=((1.0)*cj0);
IkReal x10664=(r20*sj3);
IkReal x10665=((1.0)*x10648);
IkReal x10666=(r12*x10647);
IkReal x10667=(gconst7*x10647);
IkReal x10668=(r22*x10647);
IkReal x10669=(r02*x10647);
IkReal x10670=(cj3*gconst8*x10648);
IkReal x10671=(gconst7*sj3*x10648);
IkReal x10672=((1.0)*gconst8*x10647);
evalcond[0]=((((-1.0)*r20*x10672))+(((-1.0)*r22*x10665))+((r21*x10667)));
evalcond[1]=(sj0+(((-1.0)*r02*x10665))+(((-1.0)*r00*x10672))+((r01*x10667)));
evalcond[2]=((((-1.0)*r10*x10672))+(((-1.0)*r12*x10665))+(((-1.0)*x10663))+((r11*x10667)));
evalcond[3]=((((-1.0)*x10655))+(((-1.0)*x10656*x10659))+(((-1.0)*cj3*r20*x10649))+(((-1.0)*gconst8*r20*x10648*x10660))+((r21*x10671))+x10653+((sj3*x10668)));
evalcond[4]=((((-1.0)*x10649*x10664))+(((-1.0)*cj3*r21*x10648*x10649))+(((-1.0)*x10659*x10660))+((r20*x10670))+(((-1.0)*x10656*x10668))+x10662+x10658);
evalcond[5]=(((cj0*x10662))+((cj0*x10658))+(((-1.0)*cj3*r00*x10649))+(((-1.0)*gconst8*x10650*x10665))+((r01*x10671))+(((-1.0)*x10656*x10661))+((sj3*x10669)));
evalcond[6]=((((-1.0)*gconst8*x10654*x10665))+((r11*x10671))+((sj1*x10651))+(((-1.0)*cj3*r10*x10649))+(((-1.0)*x10656*x10657))+((sj0*x10662))+((sj3*x10666)));
evalcond[7]=((((-1.0)*cj3*r01*x10648*x10649))+((cj0*x10655))+(((-1.0)*x10653*x10663))+(((-1.0)*x10660*x10661))+((r00*x10670))+(((-1.0)*x10649*x10650))+(((-1.0)*x10656*x10669)));
evalcond[8]=(((r10*x10670))+(((-1.0)*cj3*r11*x10648*x10649))+(((-1.0)*x10657*x10660))+(((-1.0)*x10649*x10654))+(((-1.0)*x10656*x10666))+((cj1*x10651))+(((-1.0)*sj0*x10653)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10673 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*gconst8*r20*sj0))+((gconst7*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10673.valid){
continue;
}
CheckValue<IkReal> x10674=IKPowWithIntegerCheck(IKsign((((gconst7*r10))+((gconst8*r11)))),-1);
if(!x10674.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10673.value)+(((1.5707963267949)*(x10674.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10675=IKsin(j4);
IkReal x10676=IKcos(j4);
IkReal x10677=((1.0)*gconst7);
IkReal x10678=(r00*sj3);
IkReal x10679=(cj2*sj0);
IkReal x10680=(cj3*gconst7);
IkReal x10681=(sj1*sj2);
IkReal x10682=(r10*sj3);
IkReal x10683=(cj1*cj2);
IkReal x10684=((1.0)*cj3);
IkReal x10685=(gconst8*r11);
IkReal x10686=(cj2*sj1);
IkReal x10687=(gconst8*r21);
IkReal x10688=((1.0)*sj3);
IkReal x10689=(gconst8*r01);
IkReal x10690=(cj1*sj2);
IkReal x10691=((1.0)*cj0);
IkReal x10692=(r20*sj3);
IkReal x10693=((1.0)*x10676);
IkReal x10694=(r12*x10675);
IkReal x10695=(gconst7*x10675);
IkReal x10696=(r22*x10675);
IkReal x10697=(r02*x10675);
IkReal x10698=(cj3*gconst8*x10676);
IkReal x10699=(gconst7*sj3*x10676);
IkReal x10700=((1.0)*gconst8*x10675);
evalcond[0]=(((r21*x10695))+(((-1.0)*r22*x10693))+(((-1.0)*r20*x10700)));
evalcond[1]=(sj0+(((-1.0)*r02*x10693))+((r01*x10695))+(((-1.0)*r00*x10700)));
evalcond[2]=((((-1.0)*x10691))+(((-1.0)*r10*x10700))+((r11*x10695))+(((-1.0)*r12*x10693)));
evalcond[3]=((((-1.0)*gconst8*r20*x10676*x10688))+((r21*x10699))+(((-1.0)*x10684*x10687))+((sj3*x10696))+(((-1.0)*cj3*r20*x10677))+(((-1.0)*x10683))+x10681);
evalcond[4]=((((-1.0)*x10687*x10688))+(((-1.0)*cj3*r21*x10676*x10677))+(((-1.0)*x10677*x10692))+(((-1.0)*x10684*x10696))+x10686+x10690+((r20*x10698)));
evalcond[5]=((((-1.0)*x10684*x10689))+(((-1.0)*cj3*r00*x10677))+((cj0*x10686))+((sj3*x10697))+(((-1.0)*gconst8*x10678*x10693))+((cj0*x10690))+((r01*x10699)));
evalcond[6]=((((-1.0)*cj3*r10*x10677))+((r11*x10699))+((sj1*x10679))+(((-1.0)*x10684*x10685))+((sj3*x10694))+((sj0*x10690))+(((-1.0)*gconst8*x10682*x10693)));
evalcond[7]=((((-1.0)*x10677*x10678))+(((-1.0)*cj3*r01*x10676*x10677))+(((-1.0)*x10681*x10691))+((cj0*x10683))+(((-1.0)*x10684*x10697))+(((-1.0)*x10688*x10689))+((r00*x10698)));
evalcond[8]=(((r10*x10698))+(((-1.0)*cj3*r11*x10676*x10677))+((cj1*x10679))+(((-1.0)*x10677*x10682))+(((-1.0)*sj0*x10681))+(((-1.0)*x10685*x10688))+(((-1.0)*x10684*x10694)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x10702 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x10702)==0){
continue;
}
IkReal x10701=pow(x10702,-0.5);
CheckValue<IkReal> x10703 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x10703.valid){
continue;
}
IkReal gconst9=((3.14159265358979)+(((-1.0)*(x10703.value))));
IkReal gconst10=((1.0)*r01*x10701);
IkReal gconst11=((-1.0)*r00*x10701);
CheckValue<IkReal> x10704 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x10704.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x10704.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x10707 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x10707.valid){
continue;
}
IkReal x10705=((1.0)*(x10707.value));
IkReal x10706=x10701;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x10705)));
IkReal gconst9=((3.14159265358979)+(((-1.0)*x10705)));
IkReal gconst10=((1.0)*r01*x10706);
IkReal gconst11=((-1.0)*r00*x10706);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[5];
CheckValue<IkReal> x10710 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x10710.valid){
continue;
}
IkReal x10708=((1.0)*(x10710.value));
IkReal x10709=x10701;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x10708)));
IkReal gconst9=((3.14159265358979)+(((-1.0)*x10708)));
IkReal gconst10=((1.0)*r01*x10709);
IkReal gconst11=((-1.0)*r00*x10709);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=cj0;
j4eval[3]=r22;
j4eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x10713 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x10713.valid){
continue;
}
IkReal x10711=((1.0)*(x10713.value));
IkReal x10712=x10701;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x10711)));
IkReal gconst9=((3.14159265358979)+(((-1.0)*x10711)));
IkReal gconst10=((1.0)*r01*x10712);
IkReal gconst11=((-1.0)*r00*x10712);
IkReal x10714=r02*r02;
IkReal x10715=(r12*sj0);
IkReal x10716=x10701;
IkReal x10717=(cj0*x10716);
j4eval[0]=((IKabs((x10715+((cj0*r02)))))+(IKabs(((((-1.0)*x10717))+((r02*x10715*x10716))+((x10714*x10717))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
j4array[0]=0;
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
j4array[0]=0;
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x10720 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x10720.valid){
continue;
}
IkReal x10718=((1.0)*(x10720.value));
IkReal x10719=x10701;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x10718)));
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x10718)));
IkReal gconst10=((1.0)*r01*x10719);
IkReal gconst11=((-1.0)*r00*x10719);
j4eval[0]=0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x10723 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x10723.valid){
continue;
}
IkReal x10721=((1.0)*(x10723.value));
IkReal x10722=x10701;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x10721)));
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x10721)));
IkReal gconst10=((1.0)*r01*x10722);
IkReal gconst11=((-1.0)*r00*x10722);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10724=gconst10*gconst10;
IkReal x10725=gconst11*gconst11;
IkReal x10726=(gconst10*r10);
IkReal x10727=((1.0)*r22);
IkReal x10728=(gconst11*sj3);
IkReal x10729=(cj3*r11);
IkReal x10730=((1.0)*r21);
IkReal x10731=(r20*x10725);
CheckValue<IkReal> x10732=IKPowWithIntegerCheck(IKsign(((((-1.0)*r12*sj3*x10727))+(((-1.0)*r11*sj3*x10724*x10730))+((gconst10*r11*r20*x10728))+((r21*x10726*x10728))+(((-1.0)*r10*sj3*x10731)))),-1);
if(!x10732.valid){
continue;
}
CheckValue<IkReal> x10733 = IKatan2WithCheck(IkReal(((((-1.0)*cj3*x10726*x10727))+(((-1.0)*gconst11*x10727*x10729)))),IkReal((((x10729*x10731))+(((-1.0)*gconst10*gconst11*x10729*x10730))+((cj3*gconst11*r20*x10726))+(((-1.0)*cj3*r10*x10724*x10730)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10733.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10732.value)))+(x10733.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10734=IKsin(j4);
IkReal x10735=IKcos(j4);
IkReal x10736=(cj2*sj1);
IkReal x10737=(cj1*sj2);
IkReal x10738=((1.0)*gconst10);
IkReal x10739=(r00*sj3);
IkReal x10740=((1.0)*gconst11);
IkReal x10741=(gconst10*r21);
IkReal x10742=(cj3*r10);
IkReal x10743=(gconst10*r01);
IkReal x10744=(r10*sj3);
IkReal x10745=(cj1*cj2);
IkReal x10746=(r20*sj3);
IkReal x10747=(gconst10*r11);
IkReal x10748=(sj1*sj2);
IkReal x10749=(cj3*r20);
IkReal x10750=(cj3*r00);
IkReal x10751=((1.0)*x10735);
IkReal x10752=(sj3*x10735);
IkReal x10753=(r12*x10734);
IkReal x10754=(gconst11*x10735);
IkReal x10755=(sj3*x10734);
IkReal x10756=(x10736+x10737);
IkReal x10757=((1.0)*cj3*x10734);
evalcond[0]=(((x10734*x10741))+(((-1.0)*r20*x10734*x10740))+(((-1.0)*r22*x10751)));
evalcond[1]=((((-1.0)*r02*x10751))+((x10734*x10743))+(((-1.0)*r00*x10734*x10740)));
evalcond[2]=((-1.0)+((x10734*x10747))+(((-1.0)*r12*x10751))+(((-1.0)*r10*x10734*x10740)));
evalcond[3]=(((sj3*x10753))+(((-1.0)*x10738*x10742))+((x10747*x10752))+(((-1.0)*x10735*x10740*x10744))+(((-1.0)*cj3*r11*x10740)));
evalcond[4]=((((-1.0)*x10738*x10744))+(((-1.0)*cj3*x10753))+(((-1.0)*cj3*r11*x10735*x10738))+((x10742*x10754))+(((-1.0)*r11*sj3*x10740)));
evalcond[5]=(((x10743*x10752))+(((-1.0)*x10738*x10750))+((r02*x10755))+(((-1.0)*x10735*x10739*x10740))+(((-1.0)*cj3*r01*x10740))+x10756);
evalcond[6]=((((-1.0)*x10745))+(((-1.0)*x10738*x10749))+((r22*x10755))+(((-1.0)*x10735*x10740*x10746))+x10748+(((-1.0)*cj3*r21*x10740))+((x10741*x10752)));
evalcond[7]=((((-1.0)*x10738*x10746))+((x10749*x10754))+(((-1.0)*cj3*r21*x10735*x10738))+(((-1.0)*r21*sj3*x10740))+(((-1.0)*r22*x10757))+x10756);
evalcond[8]=((((-1.0)*x10748))+(((-1.0)*cj3*r01*x10735*x10738))+(((-1.0)*r01*sj3*x10740))+(((-1.0)*x10738*x10739))+(((-1.0)*r02*x10757))+x10745+((x10750*x10754)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10758=((1.0)*gconst11);
CheckValue<IkReal> x10759 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst10*r01))+(((-1.0)*r00*x10758)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10759.valid){
continue;
}
CheckValue<IkReal> x10760=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst10*r20))+(((-1.0)*r21*x10758)))),-1);
if(!x10760.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10759.value)+(((1.5707963267949)*(x10760.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10761=IKsin(j4);
IkReal x10762=IKcos(j4);
IkReal x10763=(cj2*sj1);
IkReal x10764=(cj1*sj2);
IkReal x10765=((1.0)*gconst10);
IkReal x10766=(r00*sj3);
IkReal x10767=((1.0)*gconst11);
IkReal x10768=(gconst10*r21);
IkReal x10769=(cj3*r10);
IkReal x10770=(gconst10*r01);
IkReal x10771=(r10*sj3);
IkReal x10772=(cj1*cj2);
IkReal x10773=(r20*sj3);
IkReal x10774=(gconst10*r11);
IkReal x10775=(sj1*sj2);
IkReal x10776=(cj3*r20);
IkReal x10777=(cj3*r00);
IkReal x10778=((1.0)*x10762);
IkReal x10779=(sj3*x10762);
IkReal x10780=(r12*x10761);
IkReal x10781=(gconst11*x10762);
IkReal x10782=(sj3*x10761);
IkReal x10783=(x10763+x10764);
IkReal x10784=((1.0)*cj3*x10761);
evalcond[0]=((((-1.0)*r22*x10778))+(((-1.0)*r20*x10761*x10767))+((x10761*x10768)));
evalcond[1]=((((-1.0)*r02*x10778))+((x10761*x10770))+(((-1.0)*r00*x10761*x10767)));
evalcond[2]=((-1.0)+(((-1.0)*r12*x10778))+((x10761*x10774))+(((-1.0)*r10*x10761*x10767)));
evalcond[3]=(((x10774*x10779))+(((-1.0)*x10762*x10767*x10771))+(((-1.0)*x10765*x10769))+(((-1.0)*cj3*r11*x10767))+((sj3*x10780)));
evalcond[4]=(((x10769*x10781))+(((-1.0)*x10765*x10771))+(((-1.0)*cj3*x10780))+(((-1.0)*r11*sj3*x10767))+(((-1.0)*cj3*r11*x10762*x10765)));
evalcond[5]=(((r02*x10782))+(((-1.0)*x10762*x10766*x10767))+(((-1.0)*x10765*x10777))+((x10770*x10779))+(((-1.0)*cj3*r01*x10767))+x10783);
evalcond[6]=(((r22*x10782))+(((-1.0)*x10772))+(((-1.0)*x10762*x10767*x10773))+(((-1.0)*x10765*x10776))+(((-1.0)*cj3*r21*x10767))+x10775+((x10768*x10779)));
evalcond[7]=((((-1.0)*r21*sj3*x10767))+(((-1.0)*x10765*x10773))+((x10776*x10781))+x10783+(((-1.0)*cj3*r21*x10762*x10765))+(((-1.0)*r22*x10784)));
evalcond[8]=((((-1.0)*x10775))+((x10777*x10781))+(((-1.0)*x10765*x10766))+(((-1.0)*cj3*r01*x10762*x10765))+x10772+(((-1.0)*r01*sj3*x10767))+(((-1.0)*r02*x10784)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10785 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst10*r21))+(((-1.0)*gconst11*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10785.valid){
continue;
}
CheckValue<IkReal> x10786=IKPowWithIntegerCheck(IKsign((((gconst10*r00))+((gconst11*r01)))),-1);
if(!x10786.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10785.value)+(((1.5707963267949)*(x10786.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10787=IKsin(j4);
IkReal x10788=IKcos(j4);
IkReal x10789=(cj2*sj1);
IkReal x10790=(cj1*sj2);
IkReal x10791=((1.0)*gconst10);
IkReal x10792=(r00*sj3);
IkReal x10793=((1.0)*gconst11);
IkReal x10794=(gconst10*r21);
IkReal x10795=(cj3*r10);
IkReal x10796=(gconst10*r01);
IkReal x10797=(r10*sj3);
IkReal x10798=(cj1*cj2);
IkReal x10799=(r20*sj3);
IkReal x10800=(gconst10*r11);
IkReal x10801=(sj1*sj2);
IkReal x10802=(cj3*r20);
IkReal x10803=(cj3*r00);
IkReal x10804=((1.0)*x10788);
IkReal x10805=(sj3*x10788);
IkReal x10806=(r12*x10787);
IkReal x10807=(gconst11*x10788);
IkReal x10808=(sj3*x10787);
IkReal x10809=(x10789+x10790);
IkReal x10810=((1.0)*cj3*x10787);
evalcond[0]=((((-1.0)*r22*x10804))+((x10787*x10794))+(((-1.0)*r20*x10787*x10793)));
evalcond[1]=(((x10787*x10796))+(((-1.0)*r02*x10804))+(((-1.0)*r00*x10787*x10793)));
evalcond[2]=((-1.0)+(((-1.0)*r10*x10787*x10793))+(((-1.0)*r12*x10804))+((x10787*x10800)));
evalcond[3]=((((-1.0)*x10788*x10793*x10797))+((sj3*x10806))+((x10800*x10805))+(((-1.0)*x10791*x10795))+(((-1.0)*cj3*r11*x10793)));
evalcond[4]=(((x10795*x10807))+(((-1.0)*cj3*r11*x10788*x10791))+(((-1.0)*x10791*x10797))+(((-1.0)*r11*sj3*x10793))+(((-1.0)*cj3*x10806)));
evalcond[5]=((((-1.0)*x10791*x10803))+((r02*x10808))+(((-1.0)*cj3*r01*x10793))+((x10796*x10805))+(((-1.0)*x10788*x10792*x10793))+x10809);
evalcond[6]=((((-1.0)*x10791*x10802))+(((-1.0)*x10788*x10793*x10799))+(((-1.0)*cj3*r21*x10793))+((r22*x10808))+(((-1.0)*x10798))+((x10794*x10805))+x10801);
evalcond[7]=(((x10802*x10807))+(((-1.0)*cj3*r21*x10788*x10791))+(((-1.0)*x10791*x10799))+(((-1.0)*r21*sj3*x10793))+(((-1.0)*r22*x10810))+x10809);
evalcond[8]=((((-1.0)*cj3*r01*x10788*x10791))+(((-1.0)*r02*x10810))+((x10803*x10807))+(((-1.0)*r01*sj3*x10793))+(((-1.0)*x10801))+(((-1.0)*x10791*x10792))+x10798);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x10813 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x10813.valid){
continue;
}
IkReal x10811=((1.0)*(x10813.value));
IkReal x10812=x10701;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x10811)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x10811)));
IkReal gconst10=((1.0)*r01*x10812);
IkReal gconst11=((-1.0)*r00*x10812);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x10816 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x10816.valid){
continue;
}
IkReal x10814=((1.0)*(x10816.value));
IkReal x10815=x10701;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x10814)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x10814)));
IkReal gconst10=((1.0)*r01*x10815);
IkReal gconst11=((-1.0)*r00*x10815);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10817=gconst10*gconst10;
IkReal x10818=gconst11*gconst11;
IkReal x10819=(gconst10*r10);
IkReal x10820=((1.0)*r22);
IkReal x10821=(gconst11*sj3);
IkReal x10822=(cj3*r11);
IkReal x10823=((1.0)*r21);
IkReal x10824=(r20*x10818);
CheckValue<IkReal> x10825=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*sj3*x10817*x10823))+((gconst10*r11*r20*x10821))+(((-1.0)*r10*sj3*x10824))+(((-1.0)*r12*sj3*x10820))+((r21*x10819*x10821)))),-1);
if(!x10825.valid){
continue;
}
CheckValue<IkReal> x10826 = IKatan2WithCheck(IkReal(((((-1.0)*cj3*x10819*x10820))+(((-1.0)*gconst11*x10820*x10822)))),IkReal((((cj3*gconst11*r20*x10819))+(((-1.0)*cj3*r10*x10817*x10823))+(((-1.0)*gconst10*gconst11*x10822*x10823))+((x10822*x10824)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10826.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10825.value)))+(x10826.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10827=IKsin(j4);
IkReal x10828=IKcos(j4);
IkReal x10829=(sj1*sj2);
IkReal x10830=((1.0)*gconst10);
IkReal x10831=(r00*sj3);
IkReal x10832=((1.0)*gconst11);
IkReal x10833=(gconst10*r21);
IkReal x10834=(cj3*r10);
IkReal x10835=(gconst10*r01);
IkReal x10836=(r10*sj3);
IkReal x10837=((1.0)*cj2);
IkReal x10838=(gconst10*r11);
IkReal x10839=(r20*sj3);
IkReal x10840=(cj1*sj2);
IkReal x10841=(cj3*r20);
IkReal x10842=(cj3*r00);
IkReal x10843=(cj1*x10837);
IkReal x10844=((1.0)*x10828);
IkReal x10845=(sj3*x10828);
IkReal x10846=(r12*x10827);
IkReal x10847=(gconst11*x10828);
IkReal x10848=(sj3*x10827);
IkReal x10849=((1.0)*cj3*x10827);
evalcond[0]=(((x10827*x10833))+(((-1.0)*r22*x10844))+(((-1.0)*r20*x10827*x10832)));
evalcond[1]=((((-1.0)*r02*x10844))+((x10827*x10835))+(((-1.0)*r00*x10827*x10832)));
evalcond[2]=((1.0)+((x10827*x10838))+(((-1.0)*r10*x10827*x10832))+(((-1.0)*r12*x10844)));
evalcond[3]=(((x10838*x10845))+(((-1.0)*cj3*r11*x10832))+(((-1.0)*x10828*x10832*x10836))+(((-1.0)*x10830*x10834))+((sj3*x10846)));
evalcond[4]=((((-1.0)*cj3*r11*x10828*x10830))+(((-1.0)*x10830*x10836))+((x10834*x10847))+(((-1.0)*cj3*x10846))+(((-1.0)*r11*sj3*x10832)));
evalcond[5]=((((-1.0)*x10843))+(((-1.0)*x10830*x10841))+((x10833*x10845))+((r22*x10848))+(((-1.0)*x10828*x10832*x10839))+(((-1.0)*cj3*r21*x10832))+x10829);
evalcond[6]=(((x10841*x10847))+((cj2*sj1))+(((-1.0)*cj3*r21*x10828*x10830))+(((-1.0)*r22*x10849))+(((-1.0)*r21*sj3*x10832))+(((-1.0)*x10830*x10839))+x10840);
evalcond[7]=((((-1.0)*x10830*x10842))+(((-1.0)*cj3*r01*x10832))+((r02*x10848))+(((-1.0)*x10840))+(((-1.0)*sj1*x10837))+(((-1.0)*x10828*x10831*x10832))+((x10835*x10845)));
evalcond[8]=((((-1.0)*x10843))+(((-1.0)*r02*x10849))+(((-1.0)*x10830*x10831))+((x10842*x10847))+(((-1.0)*cj3*r01*x10828*x10830))+(((-1.0)*r01*sj3*x10832))+x10829);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10850=((1.0)*gconst11);
CheckValue<IkReal> x10851 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst10*r21))+(((-1.0)*r20*x10850)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10851.valid){
continue;
}
CheckValue<IkReal> x10852=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst10*r00))+(((-1.0)*r01*x10850)))),-1);
if(!x10852.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10851.value)+(((1.5707963267949)*(x10852.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10853=IKsin(j4);
IkReal x10854=IKcos(j4);
IkReal x10855=(sj1*sj2);
IkReal x10856=((1.0)*gconst10);
IkReal x10857=(r00*sj3);
IkReal x10858=((1.0)*gconst11);
IkReal x10859=(gconst10*r21);
IkReal x10860=(cj3*r10);
IkReal x10861=(gconst10*r01);
IkReal x10862=(r10*sj3);
IkReal x10863=((1.0)*cj2);
IkReal x10864=(gconst10*r11);
IkReal x10865=(r20*sj3);
IkReal x10866=(cj1*sj2);
IkReal x10867=(cj3*r20);
IkReal x10868=(cj3*r00);
IkReal x10869=(cj1*x10863);
IkReal x10870=((1.0)*x10854);
IkReal x10871=(sj3*x10854);
IkReal x10872=(r12*x10853);
IkReal x10873=(gconst11*x10854);
IkReal x10874=(sj3*x10853);
IkReal x10875=((1.0)*cj3*x10853);
evalcond[0]=((((-1.0)*r22*x10870))+((x10853*x10859))+(((-1.0)*r20*x10853*x10858)));
evalcond[1]=(((x10853*x10861))+(((-1.0)*r02*x10870))+(((-1.0)*r00*x10853*x10858)));
evalcond[2]=((1.0)+(((-1.0)*r10*x10853*x10858))+(((-1.0)*r12*x10870))+((x10853*x10864)));
evalcond[3]=((((-1.0)*cj3*r11*x10858))+(((-1.0)*x10854*x10858*x10862))+((x10864*x10871))+((sj3*x10872))+(((-1.0)*x10856*x10860)));
evalcond[4]=((((-1.0)*r11*sj3*x10858))+((x10860*x10873))+(((-1.0)*cj3*r11*x10854*x10856))+(((-1.0)*x10856*x10862))+(((-1.0)*cj3*x10872)));
evalcond[5]=((((-1.0)*x10854*x10858*x10865))+(((-1.0)*cj3*r21*x10858))+(((-1.0)*x10856*x10867))+(((-1.0)*x10869))+((x10859*x10871))+((r22*x10874))+x10855);
evalcond[6]=(((cj2*sj1))+(((-1.0)*r22*x10875))+(((-1.0)*cj3*r21*x10854*x10856))+((x10867*x10873))+(((-1.0)*r21*sj3*x10858))+(((-1.0)*x10856*x10865))+x10866);
evalcond[7]=(((r02*x10874))+(((-1.0)*cj3*r01*x10858))+(((-1.0)*x10854*x10857*x10858))+(((-1.0)*sj1*x10863))+(((-1.0)*x10856*x10868))+(((-1.0)*x10866))+((x10861*x10871)));
evalcond[8]=((((-1.0)*x10856*x10857))+(((-1.0)*r02*x10875))+(((-1.0)*cj3*r01*x10854*x10856))+((x10868*x10873))+(((-1.0)*x10869))+(((-1.0)*r01*sj3*x10858))+x10855);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10876 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst10*r01))+(((-1.0)*gconst11*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10876.valid){
continue;
}
CheckValue<IkReal> x10877=IKPowWithIntegerCheck(IKsign((((gconst11*r21))+((gconst10*r20)))),-1);
if(!x10877.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10876.value)+(((1.5707963267949)*(x10877.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10878=IKsin(j4);
IkReal x10879=IKcos(j4);
IkReal x10880=(sj1*sj2);
IkReal x10881=((1.0)*gconst10);
IkReal x10882=(r00*sj3);
IkReal x10883=((1.0)*gconst11);
IkReal x10884=(gconst10*r21);
IkReal x10885=(cj3*r10);
IkReal x10886=(gconst10*r01);
IkReal x10887=(r10*sj3);
IkReal x10888=((1.0)*cj2);
IkReal x10889=(gconst10*r11);
IkReal x10890=(r20*sj3);
IkReal x10891=(cj1*sj2);
IkReal x10892=(cj3*r20);
IkReal x10893=(cj3*r00);
IkReal x10894=(cj1*x10888);
IkReal x10895=((1.0)*x10879);
IkReal x10896=(sj3*x10879);
IkReal x10897=(r12*x10878);
IkReal x10898=(gconst11*x10879);
IkReal x10899=(sj3*x10878);
IkReal x10900=((1.0)*cj3*x10878);
evalcond[0]=((((-1.0)*r20*x10878*x10883))+(((-1.0)*r22*x10895))+((x10878*x10884)));
evalcond[1]=((((-1.0)*r02*x10895))+(((-1.0)*r00*x10878*x10883))+((x10878*x10886)));
evalcond[2]=((1.0)+(((-1.0)*r12*x10895))+(((-1.0)*r10*x10878*x10883))+((x10878*x10889)));
evalcond[3]=(((sj3*x10897))+(((-1.0)*cj3*r11*x10883))+(((-1.0)*x10881*x10885))+((x10889*x10896))+(((-1.0)*x10879*x10883*x10887)));
evalcond[4]=(((x10885*x10898))+(((-1.0)*cj3*x10897))+(((-1.0)*r11*sj3*x10883))+(((-1.0)*x10881*x10887))+(((-1.0)*cj3*r11*x10879*x10881)));
evalcond[5]=((((-1.0)*x10894))+((r22*x10899))+(((-1.0)*cj3*r21*x10883))+(((-1.0)*x10881*x10892))+(((-1.0)*x10879*x10883*x10890))+x10880+((x10884*x10896)));
evalcond[6]=(((cj2*sj1))+(((-1.0)*cj3*r21*x10879*x10881))+(((-1.0)*r21*sj3*x10883))+(((-1.0)*r22*x10900))+((x10892*x10898))+(((-1.0)*x10881*x10890))+x10891);
evalcond[7]=((((-1.0)*sj1*x10888))+(((-1.0)*x10891))+((r02*x10899))+(((-1.0)*x10879*x10882*x10883))+(((-1.0)*x10881*x10893))+((x10886*x10896))+(((-1.0)*cj3*r01*x10883)));
evalcond[8]=((((-1.0)*x10894))+((x10893*x10898))+(((-1.0)*r01*sj3*x10883))+(((-1.0)*x10881*x10882))+(((-1.0)*cj3*r01*x10879*x10881))+(((-1.0)*r02*x10900))+x10880);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
CheckValue<IkReal> x10903 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x10903.valid){
continue;
}
IkReal x10901=((1.0)*(x10903.value));
IkReal x10902=((-1.0)*py);
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x10901)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x10902);
rxp0_2=(py*r00);
rxp1_0=(r21*x10902);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x10901)));
IkReal gconst10=((1.0)*r01);
IkReal gconst11=((-1.0)*r00);
j4eval[0]=1.0;
j4eval[1]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x10906 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x10906.valid){
continue;
}
IkReal x10904=((1.0)*(x10906.value));
IkReal x10905=((-1.0)*py);
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x10904)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x10905);
rxp0_2=(py*r00);
rxp1_0=(r21*x10905);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x10904)));
IkReal gconst10=((1.0)*r01);
IkReal gconst11=((-1.0)*r00);
IkReal x10907=((1.0)*cj3);
j4eval[0]=1.0;
j4eval[1]=((((-1.0)*r01*r21*x10907))+(((-1.0)*r00*r20*x10907)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x10910 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x10910.valid){
continue;
}
IkReal x10908=((1.0)*(x10910.value));
IkReal x10909=((-1.0)*py);
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x10908)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x10909);
rxp0_2=(py*r00);
rxp1_0=(r21*x10909);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x10908)));
IkReal gconst10=((1.0)*r01);
IkReal gconst11=((-1.0)*r00);
j4eval[0]=cj3;
j4eval[1]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x10913 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x10913.valid){
continue;
}
IkReal x10911=((1.0)*(x10913.value));
IkReal x10912=((-1.0)*py);
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x10911)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x10912);
rxp0_2=(py*r00);
rxp1_0=(r21*x10912);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x10911)));
IkReal gconst10=((1.0)*r01);
IkReal gconst11=((-1.0)*r00);
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x10916 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x10916.valid){
continue;
}
IkReal x10914=((1.0)*(x10916.value));
IkReal x10915=((-1.0)*py);
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x10914)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x10915);
rxp0_2=(py*r00);
rxp1_0=(r21*x10915);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x10914)));
IkReal gconst10=((1.0)*r01);
IkReal gconst11=((-1.0)*r00);
j4eval[0]=((((1.0)*r01*r21))+(((1.0)*r00*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x10919 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x10919.valid){
continue;
}
IkReal x10917=((1.0)*(x10919.value));
IkReal x10918=((-1.0)*py);
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x10917)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x10918);
rxp0_2=(py*r00);
rxp1_0=(r21*x10918);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x10917)));
IkReal gconst10=((1.0)*r01);
IkReal gconst11=((-1.0)*r00);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x10922=IKPowWithIntegerCheck((((gconst10*r01))+(((-1.0)*gconst11*r00))),-1);
if(!x10922.valid){
continue;
}
IkReal x10920=x10922.value;
IkReal x10921=((1.0)*cj0*x10920);
cj4array[0]=((((-1.0)*cj1*sj2*x10921))+(((-1.0)*cj2*sj1*x10921)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x10923=IKsin(j4);
IkReal x10924=IKcos(j4);
IkReal x10925=(gconst10*r21);
IkReal x10926=((1.0)*gconst11*r20);
evalcond[0]=(r12*x10923);
evalcond[1]=((((-1.0)*r12*x10924))+(((-1.0)*cj0)));
evalcond[2]=(((x10923*x10925))+(((-1.0)*x10923*x10926)));
evalcond[3]=(((gconst10*r01*x10923))+(((-1.0)*gconst11*r00*x10923)));
evalcond[4]=(((x10924*x10925))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x10924*x10926)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x10928=IKPowWithIntegerCheck((((gconst10*r21))+(((-1.0)*gconst11*r20))),-1);
if(!x10928.valid){
continue;
}
IkReal x10927=x10928.value;
cj4array[0]=((((-1.0)*sj1*sj2*x10927))+((cj1*cj2*x10927)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x10929=IKsin(j4);
IkReal x10930=IKcos(j4);
IkReal x10931=(gconst10*r01);
IkReal x10932=((1.0)*x10930);
IkReal x10933=((1.0)*gconst11*x10929);
evalcond[0]=(r12*x10929);
evalcond[1]=((((-1.0)*r12*x10932))+(((-1.0)*cj0)));
evalcond[2]=(((gconst10*r21*x10929))+(((-1.0)*r20*x10933)));
evalcond[3]=(((x10929*x10931))+(((-1.0)*r00*x10933)));
evalcond[4]=(((x10930*x10931))+(((-1.0)*gconst11*r00*x10932))+((cj0*cj2*sj1))+((cj0*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x10934=IKPowWithIntegerCheck(r12,-1);
if(!x10934.valid){
continue;
}
cj4array[0]=((-1.0)*cj0*(x10934.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x10935=IKsin(j4);
IkReal x10936=IKcos(j4);
IkReal x10937=(gconst10*x10936);
IkReal x10938=(gconst10*x10935);
IkReal x10939=((1.0)*gconst11*r20);
IkReal x10940=((1.0)*gconst11*r00);
evalcond[0]=(r12*x10935);
evalcond[1]=(((r21*x10938))+(((-1.0)*x10935*x10939)));
evalcond[2]=((((-1.0)*x10935*x10940))+((r01*x10938)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x10936*x10939))+((r21*x10937)));
evalcond[4]=((((-1.0)*x10936*x10940))+((cj0*cj2*sj1))+((r01*x10937))+((cj0*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x10943 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x10943.valid){
continue;
}
IkReal x10941=((1.0)*(x10943.value));
IkReal x10942=((-1.0)*py);
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x10941)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x10942);
rxp0_2=(py*r00);
rxp1_0=(r21*x10942);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x10941)));
IkReal gconst10=((1.0)*r01);
IkReal gconst11=((-1.0)*r00);
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x10946 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x10946.valid){
continue;
}
IkReal x10944=((1.0)*(x10946.value));
IkReal x10945=((-1.0)*py);
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x10944)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x10945);
rxp0_2=(py*r00);
rxp1_0=(r21*x10945);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x10944)));
IkReal gconst10=((1.0)*r01);
IkReal gconst11=((-1.0)*r00);
j4eval[0]=((((-1.0)*r01*r21))+(((-1.0)*r00*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x10949 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x10949.valid){
continue;
}
IkReal x10947=((1.0)*(x10949.value));
IkReal x10948=((-1.0)*py);
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x10947)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x10948);
rxp0_2=(py*r00);
rxp1_0=(r21*x10948);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x10947)));
IkReal gconst10=((1.0)*r01);
IkReal gconst11=((-1.0)*r00);
j4eval[0]=-1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x10952=IKPowWithIntegerCheck(((((-1.0)*gconst10*r01))+((gconst11*r00))),-1);
if(!x10952.valid){
continue;
}
IkReal x10950=x10952.value;
IkReal x10951=((1.0)*cj0*x10950);
cj4array[0]=((((-1.0)*cj1*sj2*x10951))+(((-1.0)*cj2*sj1*x10951)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x10953=IKsin(j4);
IkReal x10954=IKcos(j4);
IkReal x10955=(gconst10*x10953);
IkReal x10956=((1.0)*x10954);
IkReal x10957=((1.0)*gconst11*x10953);
evalcond[0]=((-1.0)*r12*x10953);
evalcond[1]=((((-1.0)*r12*x10956))+(((-1.0)*cj0)));
evalcond[2]=((((-1.0)*r20*x10957))+((r21*x10955)));
evalcond[3]=(((r01*x10955))+(((-1.0)*r00*x10957)));
evalcond[4]=((((-1.0)*gconst10*r21*x10956))+((gconst11*r20*x10954))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x10959=IKPowWithIntegerCheck((((gconst11*r20))+(((-1.0)*gconst10*r21))),-1);
if(!x10959.valid){
continue;
}
IkReal x10958=x10959.value;
cj4array[0]=(((cj1*cj2*x10958))+(((-1.0)*sj1*sj2*x10958)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x10960=IKsin(j4);
IkReal x10961=IKcos(j4);
IkReal x10962=(gconst10*x10960);
IkReal x10963=((1.0)*x10961);
IkReal x10964=((1.0)*gconst11*x10960);
evalcond[0]=((-1.0)*r12*x10960);
evalcond[1]=((((-1.0)*r12*x10963))+(((-1.0)*cj0)));
evalcond[2]=((((-1.0)*r20*x10964))+((r21*x10962)));
evalcond[3]=((((-1.0)*r00*x10964))+((r01*x10962)));
evalcond[4]=(((cj0*cj2*sj1))+((cj0*cj1*sj2))+((gconst11*r00*x10961))+(((-1.0)*gconst10*r01*x10963)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x10965=IKPowWithIntegerCheck(r12,-1);
if(!x10965.valid){
continue;
}
cj4array[0]=((-1.0)*cj0*(x10965.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x10966=IKsin(j4);
IkReal x10967=IKcos(j4);
IkReal x10968=(gconst10*x10966);
IkReal x10969=(gconst11*x10967);
IkReal x10970=((1.0)*gconst11*x10966);
IkReal x10971=((1.0)*gconst10*x10967);
evalcond[0]=((-1.0)*r12*x10966);
evalcond[1]=((((-1.0)*r20*x10970))+((r21*x10968)));
evalcond[2]=(((r01*x10968))+(((-1.0)*r00*x10970)));
evalcond[3]=((((-1.0)*r21*x10971))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r20*x10969)));
evalcond[4]=(((r00*x10969))+((cj0*cj2*sj1))+((cj0*cj1*sj2))+(((-1.0)*r01*x10971)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10973=IKPowWithIntegerCheck(r12,-1);
if(!x10973.valid){
continue;
}
IkReal x10972=x10973.value;
CheckValue<IkReal> x10974=IKPowWithIntegerCheck(cj3,-1);
if(!x10974.valid){
continue;
}
if( IKabs((x10972*(x10974.value)*((((cj1*cj2*sj0))+(((-1.0)*sj0*sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*cj0*x10972)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x10972*(x10974.value)*((((cj1*cj2*sj0))+(((-1.0)*sj0*sj1*sj2))))))+IKsqr(((-1.0)*cj0*x10972))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x10972*(x10974.value)*((((cj1*cj2*sj0))+(((-1.0)*sj0*sj1*sj2))))), ((-1.0)*cj0*x10972));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10975=IKsin(j4);
IkReal x10976=IKcos(j4);
IkReal x10977=(gconst10*sj3);
IkReal x10978=((1.0)*r00);
IkReal x10979=(cj2*sj0);
IkReal x10980=((1.0)*r20);
IkReal x10981=(sj1*sj2);
IkReal x10982=(cj1*cj2);
IkReal x10983=((1.0)*cj3);
IkReal x10984=(gconst11*r01);
IkReal x10985=(cj2*sj1);
IkReal x10986=((1.0)*sj3);
IkReal x10987=(cj3*gconst10);
IkReal x10988=(gconst11*r21);
IkReal x10989=(cj1*sj2);
IkReal x10990=((1.0)*cj0);
IkReal x10991=(gconst11*x10975);
IkReal x10992=(r21*x10976);
IkReal x10993=(r01*x10976);
IkReal x10994=(gconst10*x10975);
IkReal x10995=(r12*x10975);
IkReal x10996=(gconst11*x10976);
evalcond[0]=((((-1.0)*r12*x10976))+(((-1.0)*x10990)));
evalcond[1]=(((r21*x10994))+(((-1.0)*x10980*x10991)));
evalcond[2]=(((r01*x10994))+sj0+(((-1.0)*x10978*x10991)));
evalcond[3]=(((sj3*x10995))+((sj1*x10979))+((sj0*x10989)));
evalcond[4]=(((cj1*x10979))+(((-1.0)*sj0*x10981))+(((-1.0)*x10983*x10995)));
evalcond[5]=(((cj3*r20*x10996))+(((-1.0)*x10986*x10988))+(((-1.0)*gconst10*x10983*x10992))+(((-1.0)*x10977*x10980))+x10989+x10985);
evalcond[6]=((((-1.0)*x10983*x10988))+((x10977*x10992))+(((-1.0)*sj3*x10980*x10996))+(((-1.0)*x10982))+(((-1.0)*x10980*x10987))+x10981);
evalcond[7]=((((-1.0)*x10983*x10984))+((x10977*x10993))+(((-1.0)*sj3*x10978*x10996))+((cj0*x10989))+((cj0*x10985))+(((-1.0)*x10978*x10987)));
evalcond[8]=(((cj3*r00*x10996))+(((-1.0)*gconst10*x10983*x10993))+(((-1.0)*x10984*x10986))+((cj0*x10982))+(((-1.0)*x10981*x10990))+(((-1.0)*x10977*x10978)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10997=IKPowWithIntegerCheck((((gconst10*r01))+(((-1.0)*gconst11*r00))),-1);
if(!x10997.valid){
continue;
}
CheckValue<IkReal> x10998=IKPowWithIntegerCheck((((cj3*gconst11*r20))+(((-1.0)*cj3*gconst10*r21))),-1);
if(!x10998.valid){
continue;
}
if( IKabs(((-1.0)*sj0*(x10997.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x10998.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+((gconst10*r20*sj3))+((gconst11*r21*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*sj0*(x10997.value)))+IKsqr(((x10998.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+((gconst10*r20*sj3))+((gconst11*r21*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*sj0*(x10997.value)), ((x10998.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+((gconst10*r20*sj3))+((gconst11*r21*sj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10999=IKsin(j4);
IkReal x11000=IKcos(j4);
IkReal x11001=(gconst10*sj3);
IkReal x11002=((1.0)*r00);
IkReal x11003=(cj2*sj0);
IkReal x11004=((1.0)*r20);
IkReal x11005=(sj1*sj2);
IkReal x11006=(cj1*cj2);
IkReal x11007=((1.0)*cj3);
IkReal x11008=(gconst11*r01);
IkReal x11009=(cj2*sj1);
IkReal x11010=((1.0)*sj3);
IkReal x11011=(cj3*gconst10);
IkReal x11012=(gconst11*r21);
IkReal x11013=(cj1*sj2);
IkReal x11014=((1.0)*cj0);
IkReal x11015=(gconst11*x10999);
IkReal x11016=(r21*x11000);
IkReal x11017=(r01*x11000);
IkReal x11018=(gconst10*x10999);
IkReal x11019=(r12*x10999);
IkReal x11020=(gconst11*x11000);
evalcond[0]=((((-1.0)*x11014))+(((-1.0)*r12*x11000)));
evalcond[1]=((((-1.0)*x11004*x11015))+((r21*x11018)));
evalcond[2]=(sj0+(((-1.0)*x11002*x11015))+((r01*x11018)));
evalcond[3]=(((sj1*x11003))+((sj0*x11013))+((sj3*x11019)));
evalcond[4]=(((cj1*x11003))+(((-1.0)*sj0*x11005))+(((-1.0)*x11007*x11019)));
evalcond[5]=((((-1.0)*gconst10*x11007*x11016))+(((-1.0)*x11010*x11012))+x11009+x11013+(((-1.0)*x11001*x11004))+((cj3*r20*x11020)));
evalcond[6]=((((-1.0)*sj3*x11004*x11020))+(((-1.0)*x11004*x11011))+x11005+(((-1.0)*x11007*x11012))+((x11001*x11016))+(((-1.0)*x11006)));
evalcond[7]=((((-1.0)*x11002*x11011))+(((-1.0)*x11007*x11008))+(((-1.0)*sj3*x11002*x11020))+((x11001*x11017))+((cj0*x11009))+((cj0*x11013)));
evalcond[8]=((((-1.0)*gconst10*x11007*x11017))+(((-1.0)*x11005*x11014))+((cj3*r00*x11020))+((cj0*x11006))+(((-1.0)*x11001*x11002))+(((-1.0)*x11008*x11010)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11021=IKPowWithIntegerCheck((((gconst10*r01))+(((-1.0)*gconst11*r00))),-1);
if(!x11021.valid){
continue;
}
CheckValue<IkReal> x11022=IKPowWithIntegerCheck(r12,-1);
if(!x11022.valid){
continue;
}
if( IKabs(((-1.0)*sj0*(x11021.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*cj0*(x11022.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*sj0*(x11021.value)))+IKsqr(((-1.0)*cj0*(x11022.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*sj0*(x11021.value)), ((-1.0)*cj0*(x11022.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11023=IKsin(j4);
IkReal x11024=IKcos(j4);
IkReal x11025=(gconst10*sj3);
IkReal x11026=((1.0)*r00);
IkReal x11027=(cj2*sj0);
IkReal x11028=((1.0)*r20);
IkReal x11029=(sj1*sj2);
IkReal x11030=(cj1*cj2);
IkReal x11031=((1.0)*cj3);
IkReal x11032=(gconst11*r01);
IkReal x11033=(cj2*sj1);
IkReal x11034=((1.0)*sj3);
IkReal x11035=(cj3*gconst10);
IkReal x11036=(gconst11*r21);
IkReal x11037=(cj1*sj2);
IkReal x11038=((1.0)*cj0);
IkReal x11039=(gconst11*x11023);
IkReal x11040=(r21*x11024);
IkReal x11041=(r01*x11024);
IkReal x11042=(gconst10*x11023);
IkReal x11043=(r12*x11023);
IkReal x11044=(gconst11*x11024);
evalcond[0]=((((-1.0)*r12*x11024))+(((-1.0)*x11038)));
evalcond[1]=((((-1.0)*x11028*x11039))+((r21*x11042)));
evalcond[2]=(sj0+((r01*x11042))+(((-1.0)*x11026*x11039)));
evalcond[3]=(((sj0*x11037))+((sj3*x11043))+((sj1*x11027)));
evalcond[4]=((((-1.0)*x11031*x11043))+((cj1*x11027))+(((-1.0)*sj0*x11029)));
evalcond[5]=((((-1.0)*x11034*x11036))+(((-1.0)*gconst10*x11031*x11040))+x11037+x11033+((cj3*r20*x11044))+(((-1.0)*x11025*x11028)));
evalcond[6]=((((-1.0)*x11030))+(((-1.0)*x11028*x11035))+x11029+(((-1.0)*x11031*x11036))+(((-1.0)*sj3*x11028*x11044))+((x11025*x11040)));
evalcond[7]=((((-1.0)*sj3*x11026*x11044))+(((-1.0)*x11031*x11032))+((x11025*x11041))+(((-1.0)*x11026*x11035))+((cj0*x11037))+((cj0*x11033)));
evalcond[8]=((((-1.0)*gconst10*x11031*x11041))+((cj3*r00*x11044))+(((-1.0)*x11029*x11038))+(((-1.0)*x11032*x11034))+((cj0*x11030))+(((-1.0)*x11025*x11026)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r22);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x11047 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x11047.valid){
continue;
}
IkReal x11045=((1.0)*(x11047.value));
IkReal x11046=x10701;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11045)));
r22=0;
npz=(((px*r02))+((py*r12)));
rxp2_0=(pz*r12);
rxp2_1=((-1.0)*pz*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11045)));
IkReal gconst10=((1.0)*r01*x11046);
IkReal gconst11=((-1.0)*r00*x11046);
IkReal x11048=r02*r02;
IkReal x11049=(r12*sj0);
IkReal x11050=x10701;
IkReal x11051=(cj0*x11050);
j4eval[0]=((IKabs((x11049+((cj0*r02)))))+(IKabs(((((-1.0)*x11051))+((r02*x11049*x11050))+((x11048*x11051))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11052=((1.0)*sj3);
IkReal x11053=(gconst11*r20);
IkReal x11054=(gconst10*r21);
IkReal x11055=(cj1*cj2);
IkReal x11056=((1.0)*sj1*sj2);
IkReal x11057=(cj3*gconst10*r20);
IkReal x11058=(cj3*gconst11*r21);
CheckValue<IkReal> x11059=IKPowWithIntegerCheck(((((-1.0)*gconst11*r00*x11052*x11054))+(((-1.0)*gconst10*r01*x11052*x11053))+((gconst10*r01*sj3*x11054))+((gconst11*r00*sj3*x11053))),-1);
if(!x11059.valid){
continue;
}
CheckValue<IkReal> x11060=IKPowWithIntegerCheck(((((-1.0)*x11052*x11053))+((sj3*x11054))),-1);
if(!x11060.valid){
continue;
}
if( IKabs(((x11059.value)*(((((-1.0)*sj0*x11052*x11054))+((sj0*sj3*x11053))+((r02*x11058))+((r02*x11057))+((r02*x11055))+(((-1.0)*r02*x11056)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11060.value)*((x11057+x11055+x11058+(((-1.0)*x11056)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x11059.value)*(((((-1.0)*sj0*x11052*x11054))+((sj0*sj3*x11053))+((r02*x11058))+((r02*x11057))+((r02*x11055))+(((-1.0)*r02*x11056))))))+IKsqr(((x11060.value)*((x11057+x11055+x11058+(((-1.0)*x11056))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x11059.value)*(((((-1.0)*sj0*x11052*x11054))+((sj0*sj3*x11053))+((r02*x11058))+((r02*x11057))+((r02*x11055))+(((-1.0)*r02*x11056))))), ((x11060.value)*((x11057+x11055+x11058+(((-1.0)*x11056))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11061=IKsin(j4);
IkReal x11062=IKcos(j4);
IkReal x11063=((1.0)*gconst10);
IkReal x11064=(r00*sj3);
IkReal x11065=(cj1*cj2);
IkReal x11066=((1.0)*gconst11);
IkReal x11067=(cj3*r10);
IkReal x11068=(gconst10*sj3);
IkReal x11069=(sj1*sj2);
IkReal x11070=(r10*sj3);
IkReal x11071=(cj3*r11);
IkReal x11072=(r20*sj3);
IkReal x11073=(cj2*sj1);
IkReal x11074=(cj3*r20);
IkReal x11075=((1.0)*cj3);
IkReal x11076=(cj1*sj2);
IkReal x11077=(cj3*r00);
IkReal x11078=((1.0)*cj0);
IkReal x11079=(r21*x11062);
IkReal x11080=(r01*x11062);
IkReal x11081=(gconst10*x11061);
IkReal x11082=(r12*x11061);
IkReal x11083=((1.0)*x11062);
IkReal x11084=(gconst11*x11062);
IkReal x11085=(r02*x11061);
evalcond[0]=(((r21*x11081))+(((-1.0)*r20*x11061*x11066)));
evalcond[1]=(sj0+(((-1.0)*r02*x11083))+((r01*x11081))+(((-1.0)*r00*x11061*x11066)));
evalcond[2]=((((-1.0)*x11078))+(((-1.0)*r10*x11061*x11066))+(((-1.0)*r12*x11083))+((r11*x11081)));
evalcond[3]=((((-1.0)*cj3*x11063*x11079))+((x11074*x11084))+(((-1.0)*x11063*x11072))+x11073+x11076+(((-1.0)*r21*sj3*x11066)));
evalcond[4]=((((-1.0)*cj3*r21*x11066))+(((-1.0)*x11062*x11066*x11072))+(((-1.0)*x11063*x11074))+x11069+((x11068*x11079))+(((-1.0)*x11065)));
evalcond[5]=((((-1.0)*x11062*x11064*x11066))+(((-1.0)*x11063*x11077))+(((-1.0)*cj3*r01*x11066))+((sj3*x11085))+((cj0*x11073))+((cj0*x11076))+((x11068*x11080)));
evalcond[6]=(((r11*x11062*x11068))+(((-1.0)*x11062*x11066*x11070))+((sj3*x11082))+(((-1.0)*x11066*x11071))+((sj0*x11073))+((sj0*x11076))+(((-1.0)*x11063*x11067)));
evalcond[7]=((((-1.0)*x11075*x11085))+(((-1.0)*cj3*x11063*x11080))+((x11077*x11084))+((cj0*x11065))+(((-1.0)*x11063*x11064))+(((-1.0)*x11069*x11078))+(((-1.0)*r01*sj3*x11066)));
evalcond[8]=((((-1.0)*x11062*x11063*x11071))+(((-1.0)*x11075*x11082))+((sj0*x11065))+(((-1.0)*x11063*x11070))+(((-1.0)*sj0*x11069))+((x11067*x11084))+(((-1.0)*r11*sj3*x11066)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11086=((1.0)*gconst11);
CheckValue<IkReal> x11087 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*r10*sj0*x11086))+(((-1.0)*cj0*r00*x11086))+((gconst10*r11*sj0))+((cj0*gconst10*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11087.valid){
continue;
}
CheckValue<IkReal> x11088=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x11086))+(((-1.0)*gconst10*r20)))),-1);
if(!x11088.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11087.value)+(((1.5707963267949)*(x11088.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11089=IKsin(j4);
IkReal x11090=IKcos(j4);
IkReal x11091=((1.0)*gconst10);
IkReal x11092=(r00*sj3);
IkReal x11093=(cj1*cj2);
IkReal x11094=((1.0)*gconst11);
IkReal x11095=(cj3*r10);
IkReal x11096=(gconst10*sj3);
IkReal x11097=(sj1*sj2);
IkReal x11098=(r10*sj3);
IkReal x11099=(cj3*r11);
IkReal x11100=(r20*sj3);
IkReal x11101=(cj2*sj1);
IkReal x11102=(cj3*r20);
IkReal x11103=((1.0)*cj3);
IkReal x11104=(cj1*sj2);
IkReal x11105=(cj3*r00);
IkReal x11106=((1.0)*cj0);
IkReal x11107=(r21*x11090);
IkReal x11108=(r01*x11090);
IkReal x11109=(gconst10*x11089);
IkReal x11110=(r12*x11089);
IkReal x11111=((1.0)*x11090);
IkReal x11112=(gconst11*x11090);
IkReal x11113=(r02*x11089);
evalcond[0]=(((r21*x11109))+(((-1.0)*r20*x11089*x11094)));
evalcond[1]=(sj0+(((-1.0)*r02*x11111))+(((-1.0)*r00*x11089*x11094))+((r01*x11109)));
evalcond[2]=((((-1.0)*r12*x11111))+((r11*x11109))+(((-1.0)*x11106))+(((-1.0)*r10*x11089*x11094)));
evalcond[3]=(((x11102*x11112))+(((-1.0)*r21*sj3*x11094))+x11101+x11104+(((-1.0)*x11091*x11100))+(((-1.0)*cj3*x11091*x11107)));
evalcond[4]=((((-1.0)*x11093))+x11097+(((-1.0)*x11090*x11094*x11100))+(((-1.0)*x11091*x11102))+(((-1.0)*cj3*r21*x11094))+((x11096*x11107)));
evalcond[5]=((((-1.0)*x11090*x11092*x11094))+((cj0*x11104))+((cj0*x11101))+((sj3*x11113))+(((-1.0)*x11091*x11105))+((x11096*x11108))+(((-1.0)*cj3*r01*x11094)));
evalcond[6]=((((-1.0)*x11094*x11099))+((sj0*x11101))+((sj0*x11104))+((r11*x11090*x11096))+(((-1.0)*x11091*x11095))+((sj3*x11110))+(((-1.0)*x11090*x11094*x11098)));
evalcond[7]=((((-1.0)*x11097*x11106))+((x11105*x11112))+((cj0*x11093))+(((-1.0)*x11103*x11113))+(((-1.0)*x11091*x11092))+(((-1.0)*r01*sj3*x11094))+(((-1.0)*cj3*x11091*x11108)));
evalcond[8]=((((-1.0)*x11103*x11110))+((x11095*x11112))+(((-1.0)*sj0*x11097))+(((-1.0)*x11090*x11091*x11099))+(((-1.0)*r11*sj3*x11094))+(((-1.0)*x11091*x11098))+((sj0*x11093)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11114=((1.0)*gconst11);
CheckValue<IkReal> x11115=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x11114))+(((-1.0)*gconst10*r20)))),-1);
if(!x11115.valid){
continue;
}
CheckValue<IkReal> x11116 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*r10*sj0*x11114))+((gconst10*r11*sj0))+((cj0*gconst10*r01))+(((-1.0)*cj0*r00*x11114)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11116.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11115.value)))+(x11116.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11117=IKsin(j4);
IkReal x11118=IKcos(j4);
IkReal x11119=((1.0)*gconst10);
IkReal x11120=(r00*sj3);
IkReal x11121=(cj1*cj2);
IkReal x11122=(gconst11*r20);
IkReal x11123=(gconst10*r21);
IkReal x11124=(cj3*r10);
IkReal x11125=(gconst10*r01);
IkReal x11126=(cj2*sj1);
IkReal x11127=(r10*sj3);
IkReal x11128=(gconst10*r11);
IkReal x11129=(gconst11*r00);
IkReal x11130=(cj1*sj2);
IkReal x11131=(sj1*sj2);
IkReal x11132=((1.0)*cj0);
IkReal x11133=((1.0)*x11118);
IkReal x11134=((1.0)*x11117);
IkReal x11135=(sj3*x11118);
IkReal x11136=((1.0)*gconst11*r11);
IkReal x11137=(sj3*x11117);
IkReal x11138=((1.0)*gconst11*r01);
IkReal x11139=(cj3*x11118);
IkReal x11140=((1.0)*gconst11*r21);
evalcond[0]=(((x11117*x11123))+(((-1.0)*r22*x11133))+(((-1.0)*x11122*x11134)));
evalcond[1]=(sj0+(((-1.0)*x11129*x11134))+((x11117*x11125))+(((-1.0)*r02*x11133)));
evalcond[2]=((((-1.0)*gconst11*r10*x11134))+((x11117*x11128))+(((-1.0)*r12*x11133))+(((-1.0)*x11132)));
evalcond[3]=(((r22*x11137))+(((-1.0)*cj3*x11140))+(((-1.0)*cj3*r20*x11119))+(((-1.0)*x11121))+((x11123*x11135))+x11131+(((-1.0)*sj3*x11122*x11133)));
evalcond[4]=((((-1.0)*r20*sj3*x11119))+((x11122*x11139))+x11130+x11126+(((-1.0)*cj3*r22*x11134))+(((-1.0)*r21*x11119*x11139))+(((-1.0)*sj3*x11140)));
evalcond[5]=((((-1.0)*gconst11*x11120*x11133))+((r02*x11137))+((cj0*x11130))+(((-1.0)*cj3*x11138))+((cj0*x11126))+(((-1.0)*cj3*r00*x11119))+((x11125*x11135)));
evalcond[6]=(((sj0*x11126))+(((-1.0)*x11119*x11124))+(((-1.0)*cj3*x11136))+((sj0*x11130))+((x11128*x11135))+(((-1.0)*gconst11*x11127*x11133))+((r12*x11137)));
evalcond[7]=((((-1.0)*x11131*x11132))+(((-1.0)*x11119*x11120))+((cj0*x11121))+((x11129*x11139))+(((-1.0)*r01*x11119*x11139))+(((-1.0)*sj3*x11138))+(((-1.0)*cj3*r02*x11134)));
evalcond[8]=((((-1.0)*cj3*r12*x11134))+((sj0*x11121))+(((-1.0)*x11119*x11127))+(((-1.0)*sj0*x11131))+(((-1.0)*sj3*x11136))+(((-1.0)*r11*x11119*x11139))+((gconst11*x11118*x11124)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11141 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*gconst11*r20))+((cj0*gconst10*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11141.valid){
continue;
}
CheckValue<IkReal> x11142=IKPowWithIntegerCheck(IKsign((((gconst10*r00))+((gconst11*r01)))),-1);
if(!x11142.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11141.value)+(((1.5707963267949)*(x11142.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11143=IKsin(j4);
IkReal x11144=IKcos(j4);
IkReal x11145=((1.0)*gconst10);
IkReal x11146=(r00*sj3);
IkReal x11147=(cj1*cj2);
IkReal x11148=(gconst11*r20);
IkReal x11149=(gconst10*r21);
IkReal x11150=(cj3*r10);
IkReal x11151=(gconst10*r01);
IkReal x11152=(cj2*sj1);
IkReal x11153=(r10*sj3);
IkReal x11154=(gconst10*r11);
IkReal x11155=(gconst11*r00);
IkReal x11156=(cj1*sj2);
IkReal x11157=(sj1*sj2);
IkReal x11158=((1.0)*cj0);
IkReal x11159=((1.0)*x11144);
IkReal x11160=((1.0)*x11143);
IkReal x11161=(sj3*x11144);
IkReal x11162=((1.0)*gconst11*r11);
IkReal x11163=(sj3*x11143);
IkReal x11164=((1.0)*gconst11*r01);
IkReal x11165=(cj3*x11144);
IkReal x11166=((1.0)*gconst11*r21);
evalcond[0]=(((x11143*x11149))+(((-1.0)*x11148*x11160))+(((-1.0)*r22*x11159)));
evalcond[1]=((((-1.0)*x11155*x11160))+sj0+((x11143*x11151))+(((-1.0)*r02*x11159)));
evalcond[2]=((((-1.0)*gconst11*r10*x11160))+((x11143*x11154))+(((-1.0)*r12*x11159))+(((-1.0)*x11158)));
evalcond[3]=(((x11149*x11161))+(((-1.0)*x11147))+x11157+(((-1.0)*sj3*x11148*x11159))+((r22*x11163))+(((-1.0)*cj3*r20*x11145))+(((-1.0)*cj3*x11166)));
evalcond[4]=((((-1.0)*r20*sj3*x11145))+(((-1.0)*sj3*x11166))+(((-1.0)*cj3*r22*x11160))+x11156+x11152+(((-1.0)*r21*x11145*x11165))+((x11148*x11165)));
evalcond[5]=((((-1.0)*cj3*r00*x11145))+((cj0*x11152))+((cj0*x11156))+(((-1.0)*gconst11*x11146*x11159))+((r02*x11163))+((x11151*x11161))+(((-1.0)*cj3*x11164)));
evalcond[6]=(((r12*x11163))+((sj0*x11156))+((sj0*x11152))+(((-1.0)*gconst11*x11153*x11159))+((x11154*x11161))+(((-1.0)*x11145*x11150))+(((-1.0)*cj3*x11162)));
evalcond[7]=((((-1.0)*sj3*x11164))+((cj0*x11147))+(((-1.0)*r01*x11145*x11165))+(((-1.0)*x11157*x11158))+(((-1.0)*cj3*r02*x11160))+((x11155*x11165))+(((-1.0)*x11145*x11146)));
evalcond[8]=(((gconst11*x11144*x11150))+((sj0*x11147))+(((-1.0)*sj0*x11157))+(((-1.0)*cj3*r12*x11160))+(((-1.0)*sj3*x11162))+(((-1.0)*r11*x11145*x11165))+(((-1.0)*x11145*x11153)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11167=IKPowWithIntegerCheck(IKsign((((gconst10*r10))+((gconst11*r11)))),-1);
if(!x11167.valid){
continue;
}
CheckValue<IkReal> x11168 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*gconst11*r20*sj0))+((gconst10*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11168.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11167.value)))+(x11168.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11169=IKsin(j4);
IkReal x11170=IKcos(j4);
IkReal x11171=((1.0)*gconst10);
IkReal x11172=(r00*sj3);
IkReal x11173=(cj1*cj2);
IkReal x11174=(gconst11*r20);
IkReal x11175=(gconst10*r21);
IkReal x11176=(cj3*r10);
IkReal x11177=(gconst10*r01);
IkReal x11178=(cj2*sj1);
IkReal x11179=(r10*sj3);
IkReal x11180=(gconst10*r11);
IkReal x11181=(gconst11*r00);
IkReal x11182=(cj1*sj2);
IkReal x11183=(sj1*sj2);
IkReal x11184=((1.0)*cj0);
IkReal x11185=((1.0)*x11170);
IkReal x11186=((1.0)*x11169);
IkReal x11187=(sj3*x11170);
IkReal x11188=((1.0)*gconst11*r11);
IkReal x11189=(sj3*x11169);
IkReal x11190=((1.0)*gconst11*r01);
IkReal x11191=(cj3*x11170);
IkReal x11192=((1.0)*gconst11*r21);
evalcond[0]=((((-1.0)*x11174*x11186))+(((-1.0)*r22*x11185))+((x11169*x11175)));
evalcond[1]=((((-1.0)*r02*x11185))+sj0+((x11169*x11177))+(((-1.0)*x11181*x11186)));
evalcond[2]=(((x11169*x11180))+(((-1.0)*x11184))+(((-1.0)*r12*x11185))+(((-1.0)*gconst11*r10*x11186)));
evalcond[3]=(((x11175*x11187))+(((-1.0)*x11173))+x11183+((r22*x11189))+(((-1.0)*cj3*r20*x11171))+(((-1.0)*cj3*x11192))+(((-1.0)*sj3*x11174*x11185)));
evalcond[4]=((((-1.0)*sj3*x11192))+(((-1.0)*r21*x11171*x11191))+(((-1.0)*cj3*r22*x11186))+((x11174*x11191))+x11178+x11182+(((-1.0)*r20*sj3*x11171)));
evalcond[5]=(((x11177*x11187))+(((-1.0)*gconst11*x11172*x11185))+((cj0*x11178))+((r02*x11189))+((cj0*x11182))+(((-1.0)*cj3*r00*x11171))+(((-1.0)*cj3*x11190)));
evalcond[6]=(((r12*x11189))+(((-1.0)*gconst11*x11179*x11185))+((x11180*x11187))+(((-1.0)*x11171*x11176))+(((-1.0)*cj3*x11188))+((sj0*x11178))+((sj0*x11182)));
evalcond[7]=((((-1.0)*sj3*x11190))+(((-1.0)*x11183*x11184))+(((-1.0)*cj3*r02*x11186))+((x11181*x11191))+((cj0*x11173))+(((-1.0)*x11171*x11172))+(((-1.0)*r01*x11171*x11191)));
evalcond[8]=((((-1.0)*sj0*x11183))+(((-1.0)*sj3*x11188))+(((-1.0)*r11*x11171*x11191))+(((-1.0)*cj3*r12*x11186))+(((-1.0)*x11171*x11179))+((gconst11*x11170*x11176))+((sj0*x11173)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x11193=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x11193;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x11193);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x11194=((1.0)*cj5);
IkReal x11195=((((-1.0)*r21*x11194))+(((-1.0)*r20*sj5)));
j4eval[0]=x11195;
j4eval[1]=((IKabs(r12))+(IKabs((((r11*sj5))+(((-1.0)*r10*x11194))))));
j4eval[2]=IKsign(x11195);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x11196=cj5*cj5;
IkReal x11197=((1.0)*sj3);
IkReal x11198=(r01*r21);
IkReal x11199=(cj5*sj3*sj5);
IkReal x11200=((((-1.0)*x11197*x11198))+((r01*r20*x11199))+((sj3*x11196*x11198))+(((-1.0)*r00*r20*x11196*x11197))+(((-1.0)*r02*r22*x11197))+((r00*r21*x11199)));
j4eval[0]=x11200;
j4eval[1]=IKsign(x11200);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal x11201=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x11201;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x11201);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal x11202=((1.0)*cj5);
IkReal x11203=((((-1.0)*r21*x11202))+(((-1.0)*r20*sj5)));
j4eval[0]=x11203;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x11202))+((r11*sj5))))));
j4eval[2]=IKsign(x11203);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal x11204=cj5*cj5;
IkReal x11205=r01*r01;
IkReal x11206=(cj5*r00);
IkReal x11207=(r01*sj5);
IkReal x11208=(((x11204*(r00*r00)))+x11205+(((-2.0)*x11206*x11207))+(((-1.0)*x11204*x11205))+(r02*r02));
j4eval[0]=x11208;
j4eval[1]=((IKabs(r02))+(IKabs((x11206+(((-1.0)*x11207))))));
j4eval[2]=IKsign(x11208);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x11209=((-1.0)*pz);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x11209);
rxp1_0=(pz*r11);
rxp1_1=(r01*x11209);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=r22;
j4eval[1]=(((cj5*r10))+(((-1.0)*r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11210=((-1.0)*pz);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x11210);
rxp1_0=(pz*r11);
rxp1_1=(r01*x11210);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=(((r01*sj5))+(((-1.0)*cj5*r00)));
j4eval[1]=(((cj5*r10))+(((-1.0)*r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11211=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*cj5*r00))),-1);
if(!x11211.valid){
continue;
}
CheckValue<IkReal> x11212=IKPowWithIntegerCheck((((cj5*r10))+(((-1.0)*r11*sj5))),-1);
if(!x11212.valid){
continue;
}
if( IKabs(((-1.0)*(x11211.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11212.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x11211.value)))+IKsqr(((x11212.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x11211.value)), ((x11212.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11213=IKsin(j4);
IkReal x11214=IKcos(j4);
IkReal x11215=(cj5*x11214);
IkReal x11216=(sj5*x11213);
IkReal x11217=((1.0)*cj5*x11213);
IkReal x11218=((1.0)*sj5*x11214);
evalcond[0]=((-1.0)*r22*x11214);
evalcond[1]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x11213)));
evalcond[2]=(((r11*x11216))+(((-1.0)*r10*x11217)));
evalcond[3]=((((-1.0)*r01*x11218))+((r00*x11215)));
evalcond[4]=((1.0)+(((-1.0)*r00*x11217))+((r01*x11216)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*r11*x11218))+((r10*x11215))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11219=IKPowWithIntegerCheck(r22,-1);
if(!x11219.valid){
continue;
}
CheckValue<IkReal> x11220=IKPowWithIntegerCheck((((cj5*r10))+(((-1.0)*r11*sj5))),-1);
if(!x11220.valid){
continue;
}
if( IKabs(((x11219.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11220.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x11219.value)*((((cj2*sj1))+((cj1*sj2))))))+IKsqr(((x11220.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x11219.value)*((((cj2*sj1))+((cj1*sj2))))), ((x11220.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11221=IKsin(j4);
IkReal x11222=IKcos(j4);
IkReal x11223=(cj5*x11222);
IkReal x11224=(sj5*x11221);
IkReal x11225=((1.0)*cj5*x11221);
IkReal x11226=((1.0)*sj5*x11222);
evalcond[0]=((-1.0)*r22*x11222);
evalcond[1]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x11221)));
evalcond[2]=(((r11*x11224))+(((-1.0)*r10*x11225)));
evalcond[3]=((((-1.0)*r01*x11226))+((r00*x11223)));
evalcond[4]=((1.0)+(((-1.0)*r00*x11225))+((r01*x11224)));
evalcond[5]=((((-1.0)*r11*x11226))+(((-1.0)*sj1*sj2))+((r10*x11223))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x11227=((-1.0)*py);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x11227);
rxp0_2=(py*r00);
rxp1_0=(r21*x11227);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=(((r01*sj5))+(((-1.0)*cj5*r00)));
j4eval[1]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11228=((-1.0)*py);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x11228);
rxp0_2=(py*r00);
rxp1_0=(r21*x11228);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=r12;
j4eval[1]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11229=((1.0)*sj1);
CheckValue<IkReal> x11230=IKPowWithIntegerCheck(r12,-1);
if(!x11230.valid){
continue;
}
CheckValue<IkReal> x11231=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x11231.valid){
continue;
}
if( IKabs(((x11230.value)*(((((-1.0)*sj2*x11229))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11231.value)*(((((-1.0)*cj1*sj2))+(((-1.0)*cj2*x11229)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x11230.value)*(((((-1.0)*sj2*x11229))+((cj1*cj2))))))+IKsqr(((x11231.value)*(((((-1.0)*cj1*sj2))+(((-1.0)*cj2*x11229))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x11230.value)*(((((-1.0)*sj2*x11229))+((cj1*cj2))))), ((x11231.value)*(((((-1.0)*cj1*sj2))+(((-1.0)*cj2*x11229))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11232=IKsin(j4);
IkReal x11233=IKcos(j4);
IkReal x11234=(cj5*r00);
IkReal x11235=(cj5*r20);
IkReal x11236=(r21*sj5);
IkReal x11237=(r01*sj5);
IkReal x11238=((1.0)*x11232);
IkReal x11239=((1.0)*x11233);
evalcond[0]=((-1.0)*r12*x11233);
evalcond[1]=(((x11232*x11236))+(((-1.0)*x11235*x11238)));
evalcond[2]=((((-1.0)*x11237*x11239))+((x11233*x11234)));
evalcond[3]=((((-1.0)*sj1*sj2))+((cj1*cj2))+(((-1.0)*r12*x11238)));
evalcond[4]=((1.0)+((x11232*x11237))+(((-1.0)*x11234*x11238)));
evalcond[5]=(((cj2*sj1))+((cj1*sj2))+((x11233*x11235))+(((-1.0)*x11236*x11239)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11240=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*cj5*r00))),-1);
if(!x11240.valid){
continue;
}
CheckValue<IkReal> x11241=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x11241.valid){
continue;
}
if( IKabs(((-1.0)*(x11240.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11241.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x11240.value)))+IKsqr(((x11241.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x11240.value)), ((x11241.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11242=IKsin(j4);
IkReal x11243=IKcos(j4);
IkReal x11244=(cj5*r00);
IkReal x11245=(cj5*r20);
IkReal x11246=(r21*sj5);
IkReal x11247=(r01*sj5);
IkReal x11248=((1.0)*x11242);
IkReal x11249=((1.0)*x11243);
evalcond[0]=((-1.0)*r12*x11243);
evalcond[1]=(((x11242*x11246))+(((-1.0)*x11245*x11248)));
evalcond[2]=(((x11243*x11244))+(((-1.0)*x11247*x11249)));
evalcond[3]=((((-1.0)*sj1*sj2))+((cj1*cj2))+(((-1.0)*r12*x11248)));
evalcond[4]=((1.0)+(((-1.0)*x11244*x11248))+((x11242*x11247)));
evalcond[5]=(((cj2*sj1))+((x11243*x11245))+((cj1*sj2))+(((-1.0)*x11246*x11249)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11250=cj5*cj5;
IkReal x11251=r01*r01;
IkReal x11252=(r01*sj5);
IkReal x11253=(cj5*r00);
CheckValue<IkReal> x11254 = IKatan2WithCheck(IkReal(((((-1.0)*x11252))+x11253)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x11254.valid){
continue;
}
CheckValue<IkReal> x11255=IKPowWithIntegerCheck(IKsign((x11251+(((-1.0)*x11250*x11251))+(((-2.0)*x11252*x11253))+((x11250*(r00*r00)))+(r02*r02))),-1);
if(!x11255.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11254.value)+(((1.5707963267949)*(x11255.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11256=IKsin(j4);
IkReal x11257=IKcos(j4);
IkReal x11258=(cj5*r10);
IkReal x11259=(r01*sj5);
IkReal x11260=(cj5*r00);
IkReal x11261=(cj5*r20);
IkReal x11262=((1.0)*x11257);
IkReal x11263=((1.0)*x11256);
IkReal x11264=(sj5*x11256);
evalcond[0]=(((r21*x11264))+(((-1.0)*x11261*x11263))+(((-1.0)*r22*x11262)));
evalcond[1]=(((r11*x11264))+(((-1.0)*r12*x11262))+(((-1.0)*x11258*x11263)));
evalcond[2]=((((-1.0)*r02*x11263))+(((-1.0)*x11259*x11262))+((x11257*x11260)));
evalcond[3]=((1.0)+(((-1.0)*x11260*x11263))+(((-1.0)*r02*x11262))+((x11256*x11259)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r21*sj5*x11262))+(((-1.0)*r22*x11263))+((x11257*x11261)));
evalcond[5]=(((x11257*x11258))+(((-1.0)*sj1*sj2))+(((-1.0)*r12*x11263))+(((-1.0)*r11*sj5*x11262))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11265=((1.0)*cj5);
CheckValue<IkReal> x11266 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x11265))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11266.valid){
continue;
}
CheckValue<IkReal> x11267=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x11265))+(((-1.0)*r20*sj5)))),-1);
if(!x11267.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11266.value)+(((1.5707963267949)*(x11267.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11268=IKsin(j4);
IkReal x11269=IKcos(j4);
IkReal x11270=(cj5*r10);
IkReal x11271=(r01*sj5);
IkReal x11272=(cj5*r00);
IkReal x11273=(cj5*r20);
IkReal x11274=((1.0)*x11269);
IkReal x11275=((1.0)*x11268);
IkReal x11276=(sj5*x11268);
evalcond[0]=(((r21*x11276))+(((-1.0)*r22*x11274))+(((-1.0)*x11273*x11275)));
evalcond[1]=((((-1.0)*r12*x11274))+(((-1.0)*x11270*x11275))+((r11*x11276)));
evalcond[2]=((((-1.0)*r02*x11275))+(((-1.0)*x11271*x11274))+((x11269*x11272)));
evalcond[3]=((1.0)+(((-1.0)*r02*x11274))+((x11268*x11271))+(((-1.0)*x11272*x11275)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r21*sj5*x11274))+(((-1.0)*r22*x11275))+((x11269*x11273)));
evalcond[5]=((((-1.0)*r12*x11275))+(((-1.0)*r11*sj5*x11274))+(((-1.0)*sj1*sj2))+((cj1*cj2))+((x11269*x11270)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11277 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11277.valid){
continue;
}
CheckValue<IkReal> x11278=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x11278.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11277.value)+(((1.5707963267949)*(x11278.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11279=IKsin(j4);
IkReal x11280=IKcos(j4);
IkReal x11281=(cj5*r10);
IkReal x11282=(r01*sj5);
IkReal x11283=(cj5*r00);
IkReal x11284=(cj5*r20);
IkReal x11285=((1.0)*x11280);
IkReal x11286=((1.0)*x11279);
IkReal x11287=(sj5*x11279);
evalcond[0]=((((-1.0)*x11284*x11286))+(((-1.0)*r22*x11285))+((r21*x11287)));
evalcond[1]=((((-1.0)*r12*x11285))+(((-1.0)*x11281*x11286))+((r11*x11287)));
evalcond[2]=(((x11280*x11283))+(((-1.0)*r02*x11286))+(((-1.0)*x11282*x11285)));
evalcond[3]=((1.0)+(((-1.0)*r02*x11285))+((x11279*x11282))+(((-1.0)*x11283*x11286)));
evalcond[4]=(((x11280*x11284))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x11286))+(((-1.0)*r21*sj5*x11285)));
evalcond[5]=(((x11280*x11281))+(((-1.0)*r12*x11286))+(((-1.0)*r11*sj5*x11285))+(((-1.0)*sj1*sj2))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x11288=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x11288;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x11288);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x11289=((1.0)*cj5);
IkReal x11290=((((-1.0)*r21*x11289))+(((-1.0)*r20*sj5)));
j4eval[0]=x11290;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x11289))+((r11*sj5))))));
j4eval[2]=IKsign(x11290);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x11291=(r01*sj5);
IkReal x11292=(cj1*sj2);
IkReal x11293=(cj2*sj1);
IkReal x11294=((1.0)*r02);
IkReal x11295=((1.0)*cj5*r00);
IkReal x11296=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x11296;
j4eval[1]=((IKabs(((((-1.0)*x11292*x11294))+(((-1.0)*x11293*x11294)))))+(IKabs((((x11291*x11293))+((x11291*x11292))+(((-1.0)*x11292*x11295))+(((-1.0)*x11293*x11295))))));
j4eval[2]=IKsign(x11296);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x11297=((-1.0)*py);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x11297);
rxp0_2=(py*r00);
rxp1_0=(r21*x11297);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=r12;
j4eval[1]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11298=((-1.0)*py);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x11298);
rxp0_2=(py*r00);
rxp1_0=(r21*x11298);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal x11299=((1.0)*cj5);
j4eval[0]=(((r01*sj5))+(((-1.0)*r00*x11299)));
j4eval[1]=(((r21*sj5))+(((-1.0)*r20*x11299)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11300=((1.0)*cj5);
CheckValue<IkReal> x11301=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*r00*x11300))),-1);
if(!x11301.valid){
continue;
}
CheckValue<IkReal> x11302=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*r20*x11300))),-1);
if(!x11302.valid){
continue;
}
if( IKabs(((-1.0)*(x11301.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11302.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x11301.value)))+IKsqr(((x11302.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x11301.value)), ((x11302.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11303=IKsin(j4);
IkReal x11304=IKcos(j4);
IkReal x11305=((1.0)*cj5*r00);
IkReal x11306=(sj5*x11304);
IkReal x11307=(sj5*x11303);
IkReal x11308=((1.0)*cj5*r20);
evalcond[0]=((-1.0)*r12*x11304);
evalcond[1]=((((-1.0)*sj1*sj2))+((r12*x11303))+((cj1*cj2)));
evalcond[2]=((((-1.0)*x11303*x11308))+((r21*x11307)));
evalcond[3]=(((r01*x11306))+(((-1.0)*x11304*x11305)));
evalcond[4]=((1.0)+((r01*x11307))+(((-1.0)*x11303*x11305)));
evalcond[5]=(((cj2*sj1))+(((-1.0)*x11304*x11308))+((cj1*sj2))+((r21*x11306)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11309=((1.0)*cj2);
CheckValue<IkReal> x11310=IKPowWithIntegerCheck(r12,-1);
if(!x11310.valid){
continue;
}
CheckValue<IkReal> x11311=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x11311.valid){
continue;
}
if( IKabs(((x11310.value)*((((sj1*sj2))+(((-1.0)*cj1*x11309)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11311.value)*(((((-1.0)*cj1*sj2))+(((-1.0)*sj1*x11309)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x11310.value)*((((sj1*sj2))+(((-1.0)*cj1*x11309))))))+IKsqr(((x11311.value)*(((((-1.0)*cj1*sj2))+(((-1.0)*sj1*x11309))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x11310.value)*((((sj1*sj2))+(((-1.0)*cj1*x11309))))), ((x11311.value)*(((((-1.0)*cj1*sj2))+(((-1.0)*sj1*x11309))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11312=IKsin(j4);
IkReal x11313=IKcos(j4);
IkReal x11314=((1.0)*cj5*r00);
IkReal x11315=(sj5*x11313);
IkReal x11316=(sj5*x11312);
IkReal x11317=((1.0)*cj5*r20);
evalcond[0]=((-1.0)*r12*x11313);
evalcond[1]=((((-1.0)*sj1*sj2))+((cj1*cj2))+((r12*x11312)));
evalcond[2]=(((r21*x11316))+(((-1.0)*x11312*x11317)));
evalcond[3]=((((-1.0)*x11313*x11314))+((r01*x11315)));
evalcond[4]=((1.0)+(((-1.0)*x11312*x11314))+((r01*x11316)));
evalcond[5]=(((cj2*sj1))+((cj1*sj2))+((r21*x11315))+(((-1.0)*x11313*x11317)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x11318=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x11318;
j4eval[1]=IKsign(x11318);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x11319=((1.0)*cj5);
IkReal x11320=((((-1.0)*r21*x11319))+(((-1.0)*r20*sj5)));
j4eval[0]=x11320;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x11319))))));
j4eval[2]=IKsign(x11320);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x11321=cj5*cj5;
IkReal x11322=(r21*sj5);
IkReal x11323=((1.0)*r20);
IkReal x11324=(r01*r21);
IkReal x11325=(((cj5*r01*r20*sj5))+(((-1.0)*r00*x11321*x11323))+(((-1.0)*r02*r22))+((cj5*r00*x11322))+((x11321*x11324))+(((-1.0)*x11324)));
j4eval[0]=x11325;
j4eval[1]=((IKabs(r22))+(IKabs((x11322+(((-1.0)*cj5*x11323))))));
j4eval[2]=IKsign(x11325);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11326=cj5*cj5;
IkReal x11327=((1.0)*r20);
IkReal x11328=(r21*sj5);
IkReal x11329=(r01*r21);
CheckValue<IkReal> x11330=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*r00*x11326*x11327))+(((-1.0)*r02*r22))+((cj5*r00*x11328))+((x11326*x11329))+(((-1.0)*x11329)))),-1);
if(!x11330.valid){
continue;
}
CheckValue<IkReal> x11331 = IKatan2WithCheck(IkReal((x11328+(((-1.0)*cj5*x11327)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x11331.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11330.value)))+(x11331.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11332=IKcos(j4);
IkReal x11333=IKsin(j4);
IkReal x11334=(cj5*r00);
IkReal x11335=(cj5*r10);
IkReal x11336=(cj5*r20);
IkReal x11337=((1.0)*x11332);
IkReal x11338=((1.0)*x11333);
IkReal x11339=(sj5*x11332);
IkReal x11340=(sj5*x11333);
evalcond[0]=((((-1.0)*x11336*x11337))+((r22*x11333))+((r21*x11339)));
evalcond[1]=((((-1.0)*x11334*x11337))+((r01*x11339))+((r02*x11333)));
evalcond[2]=((((-1.0)*x11336*x11338))+(((-1.0)*r22*x11337))+((r21*x11340)));
evalcond[3]=((((-1.0)*r12*x11337))+((r11*x11340))+(((-1.0)*x11335*x11338)));
evalcond[4]=((1.0)+((r11*x11339))+((r12*x11333))+(((-1.0)*x11335*x11337)));
evalcond[5]=((1.0)+(((-1.0)*x11334*x11338))+((r01*x11340))+(((-1.0)*r02*x11337)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11341=((1.0)*cj5);
CheckValue<IkReal> x11342 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*r00*x11341)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x11342.valid){
continue;
}
CheckValue<IkReal> x11343=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x11341))+(((-1.0)*r20*sj5)))),-1);
if(!x11343.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11342.value)+(((1.5707963267949)*(x11343.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11344=IKcos(j4);
IkReal x11345=IKsin(j4);
IkReal x11346=(cj5*r00);
IkReal x11347=(cj5*r10);
IkReal x11348=(cj5*r20);
IkReal x11349=((1.0)*x11344);
IkReal x11350=((1.0)*x11345);
IkReal x11351=(sj5*x11344);
IkReal x11352=(sj5*x11345);
evalcond[0]=((((-1.0)*x11348*x11349))+((r21*x11351))+((r22*x11345)));
evalcond[1]=((((-1.0)*x11346*x11349))+((r01*x11351))+((r02*x11345)));
evalcond[2]=((((-1.0)*x11348*x11350))+(((-1.0)*r22*x11349))+((r21*x11352)));
evalcond[3]=(((r11*x11352))+(((-1.0)*x11347*x11350))+(((-1.0)*r12*x11349)));
evalcond[4]=((1.0)+((r11*x11351))+((r12*x11345))+(((-1.0)*x11347*x11349)));
evalcond[5]=((1.0)+(((-1.0)*x11346*x11350))+((r01*x11352))+(((-1.0)*r02*x11349)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11353=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x11353.valid){
continue;
}
CheckValue<IkReal> x11354 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x11354.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11353.value)))+(x11354.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11355=IKcos(j4);
IkReal x11356=IKsin(j4);
IkReal x11357=(cj5*r00);
IkReal x11358=(cj5*r10);
IkReal x11359=(cj5*r20);
IkReal x11360=((1.0)*x11355);
IkReal x11361=((1.0)*x11356);
IkReal x11362=(sj5*x11355);
IkReal x11363=(sj5*x11356);
evalcond[0]=(((r21*x11362))+(((-1.0)*x11359*x11360))+((r22*x11356)));
evalcond[1]=(((r01*x11362))+((r02*x11356))+(((-1.0)*x11357*x11360)));
evalcond[2]=(((r21*x11363))+(((-1.0)*r22*x11360))+(((-1.0)*x11359*x11361)));
evalcond[3]=((((-1.0)*x11358*x11361))+(((-1.0)*r12*x11360))+((r11*x11363)));
evalcond[4]=((1.0)+((r12*x11356))+(((-1.0)*x11358*x11360))+((r11*x11362)));
evalcond[5]=((1.0)+((r01*x11363))+(((-1.0)*x11357*x11361))+(((-1.0)*r02*x11360)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x11364=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x11364;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
j4eval[2]=IKsign(x11364);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x11365=((1.0)*cj5);
IkReal x11366=((((-1.0)*r00*sj5))+(((-1.0)*r01*x11365)));
j4eval[0]=x11366;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x11365))))));
j4eval[2]=IKsign(x11366);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x11367=cj5*cj5;
IkReal x11368=(r21*sj5);
IkReal x11369=((1.0)*r20);
IkReal x11370=(r01*r21);
IkReal x11371=(((cj5*r01*r20*sj5))+(((-1.0)*r00*x11367*x11369))+(((-1.0)*x11370))+(((-1.0)*r02*r22))+((cj5*r00*x11368))+((x11367*x11370)));
j4eval[0]=x11371;
j4eval[1]=((IKabs(r22))+(IKabs(((((-1.0)*cj5*x11369))+x11368))));
j4eval[2]=IKsign(x11371);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11372=cj5*cj5;
IkReal x11373=((1.0)*r20);
IkReal x11374=(r21*sj5);
IkReal x11375=(r01*r21);
CheckValue<IkReal> x11376=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*x11375))+(((-1.0)*r00*x11372*x11373))+(((-1.0)*r02*r22))+((cj5*r00*x11374))+((x11372*x11375)))),-1);
if(!x11376.valid){
continue;
}
CheckValue<IkReal> x11377 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*x11373))+x11374)),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x11377.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11376.value)))+(x11377.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11378=IKcos(j4);
IkReal x11379=IKsin(j4);
IkReal x11380=(cj5*r00);
IkReal x11381=(cj5*r10);
IkReal x11382=(cj5*r20);
IkReal x11383=((1.0)*x11378);
IkReal x11384=((1.0)*x11379);
IkReal x11385=(sj5*x11378);
IkReal x11386=(sj5*x11379);
evalcond[0]=((((-1.0)*x11382*x11383))+((r22*x11379))+((r21*x11385)));
evalcond[1]=((((-1.0)*x11380*x11383))+((r01*x11385))+((r02*x11379)));
evalcond[2]=((((-1.0)*x11382*x11384))+(((-1.0)*r22*x11383))+((r21*x11386)));
evalcond[3]=(((r11*x11386))+(((-1.0)*x11381*x11384))+(((-1.0)*r12*x11383)));
evalcond[4]=((-1.0)+((r11*x11385))+(((-1.0)*x11381*x11383))+((r12*x11379)));
evalcond[5]=((1.0)+(((-1.0)*x11380*x11384))+((r01*x11386))+(((-1.0)*r02*x11383)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11387=((1.0)*cj5);
CheckValue<IkReal> x11388 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*r20*x11387)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x11388.valid){
continue;
}
CheckValue<IkReal> x11389=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x11387)))),-1);
if(!x11389.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11388.value)+(((1.5707963267949)*(x11389.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11390=IKcos(j4);
IkReal x11391=IKsin(j4);
IkReal x11392=(cj5*r00);
IkReal x11393=(cj5*r10);
IkReal x11394=(cj5*r20);
IkReal x11395=((1.0)*x11390);
IkReal x11396=((1.0)*x11391);
IkReal x11397=(sj5*x11390);
IkReal x11398=(sj5*x11391);
evalcond[0]=(((r21*x11397))+((r22*x11391))+(((-1.0)*x11394*x11395)));
evalcond[1]=(((r02*x11391))+(((-1.0)*x11392*x11395))+((r01*x11397)));
evalcond[2]=((((-1.0)*r22*x11395))+((r21*x11398))+(((-1.0)*x11394*x11396)));
evalcond[3]=((((-1.0)*x11393*x11396))+((r11*x11398))+(((-1.0)*r12*x11395)));
evalcond[4]=((-1.0)+(((-1.0)*x11393*x11395))+((r12*x11391))+((r11*x11397)));
evalcond[5]=((1.0)+(((-1.0)*x11392*x11396))+((r01*x11398))+(((-1.0)*r02*x11395)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11399=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x11399.valid){
continue;
}
CheckValue<IkReal> x11400 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x11400.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11399.value)))+(x11400.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11401=IKcos(j4);
IkReal x11402=IKsin(j4);
IkReal x11403=(cj5*r00);
IkReal x11404=(cj5*r10);
IkReal x11405=(cj5*r20);
IkReal x11406=((1.0)*x11401);
IkReal x11407=((1.0)*x11402);
IkReal x11408=(sj5*x11401);
IkReal x11409=(sj5*x11402);
evalcond[0]=(((r21*x11408))+((r22*x11402))+(((-1.0)*x11405*x11406)));
evalcond[1]=((((-1.0)*x11403*x11406))+((r02*x11402))+((r01*x11408)));
evalcond[2]=(((r21*x11409))+(((-1.0)*x11405*x11407))+(((-1.0)*r22*x11406)));
evalcond[3]=(((r11*x11409))+(((-1.0)*x11404*x11407))+(((-1.0)*r12*x11406)));
evalcond[4]=((-1.0)+((r12*x11402))+((r11*x11408))+(((-1.0)*x11404*x11406)));
evalcond[5]=((1.0)+(((-1.0)*x11403*x11407))+(((-1.0)*r02*x11406))+((r01*x11409)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x11410=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x11410;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
j4eval[2]=IKsign(x11410);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x11411=((1.0)*cj5);
IkReal x11412=((((-1.0)*r00*sj5))+(((-1.0)*r01*x11411)));
j4eval[0]=x11412;
j4eval[1]=((IKabs(r22))+(IKabs(((((-1.0)*r20*x11411))+((r21*sj5))))));
j4eval[2]=IKsign(x11412);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x11413=cj5*cj5;
IkReal x11414=(r21*sj5);
IkReal x11415=((1.0)*r20);
IkReal x11416=(r01*r21);
IkReal x11417=(((cj5*r01*r20*sj5))+(((-1.0)*r00*x11413*x11415))+(((-1.0)*r02*r22))+(((-1.0)*x11416))+((cj5*r00*x11414))+((x11413*x11416)));
j4eval[0]=x11417;
j4eval[1]=((IKabs(((((-1.0)*cj5*x11415))+x11414)))+(IKabs(r22)));
j4eval[2]=IKsign(x11417);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11418=cj5*cj5;
IkReal x11419=((1.0)*r20);
IkReal x11420=(r21*sj5);
IkReal x11421=(r01*r21);
CheckValue<IkReal> x11422 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*x11419))+x11420)),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x11422.valid){
continue;
}
CheckValue<IkReal> x11423=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+((cj5*r00*x11420))+(((-1.0)*r02*r22))+(((-1.0)*r00*x11418*x11419))+(((-1.0)*x11421))+((x11418*x11421)))),-1);
if(!x11423.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11422.value)+(((1.5707963267949)*(x11423.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11424=IKcos(j4);
IkReal x11425=IKsin(j4);
IkReal x11426=(cj5*r00);
IkReal x11427=(cj5*r10);
IkReal x11428=(cj5*r20);
IkReal x11429=((1.0)*x11424);
IkReal x11430=((1.0)*x11425);
IkReal x11431=(sj5*x11424);
IkReal x11432=(sj5*x11425);
evalcond[0]=((((-1.0)*x11428*x11429))+((r21*x11431))+((r22*x11425)));
evalcond[1]=(((r02*x11425))+(((-1.0)*x11426*x11429))+((r01*x11431)));
evalcond[2]=((((-1.0)*x11428*x11430))+((r21*x11432))+(((-1.0)*r22*x11429)));
evalcond[3]=((((-1.0)*r12*x11429))+((r11*x11432))+(((-1.0)*x11427*x11430)));
evalcond[4]=((-1.0)+((r11*x11431))+((r12*x11425))+(((-1.0)*x11427*x11429)));
evalcond[5]=((1.0)+(((-1.0)*r02*x11429))+(((-1.0)*x11426*x11430))+((r01*x11432)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11433=((1.0)*cj5);
CheckValue<IkReal> x11434 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*r20*x11433)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x11434.valid){
continue;
}
CheckValue<IkReal> x11435=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x11433))+(((-1.0)*r00*sj5)))),-1);
if(!x11435.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11434.value)+(((1.5707963267949)*(x11435.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11436=IKcos(j4);
IkReal x11437=IKsin(j4);
IkReal x11438=(cj5*r00);
IkReal x11439=(cj5*r10);
IkReal x11440=(cj5*r20);
IkReal x11441=((1.0)*x11436);
IkReal x11442=((1.0)*x11437);
IkReal x11443=(sj5*x11436);
IkReal x11444=(sj5*x11437);
evalcond[0]=((((-1.0)*x11440*x11441))+((r22*x11437))+((r21*x11443)));
evalcond[1]=(((r02*x11437))+(((-1.0)*x11438*x11441))+((r01*x11443)));
evalcond[2]=((((-1.0)*x11440*x11442))+(((-1.0)*r22*x11441))+((r21*x11444)));
evalcond[3]=((((-1.0)*r12*x11441))+((r11*x11444))+(((-1.0)*x11439*x11442)));
evalcond[4]=((-1.0)+((r11*x11443))+(((-1.0)*x11439*x11441))+((r12*x11437)));
evalcond[5]=((1.0)+(((-1.0)*x11438*x11442))+(((-1.0)*r02*x11441))+((r01*x11444)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11445=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x11445.valid){
continue;
}
CheckValue<IkReal> x11446 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x11446.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11445.value)))+(x11446.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11447=IKcos(j4);
IkReal x11448=IKsin(j4);
IkReal x11449=(cj5*r00);
IkReal x11450=(cj5*r10);
IkReal x11451=(cj5*r20);
IkReal x11452=((1.0)*x11447);
IkReal x11453=((1.0)*x11448);
IkReal x11454=(sj5*x11447);
IkReal x11455=(sj5*x11448);
evalcond[0]=(((r21*x11454))+((r22*x11448))+(((-1.0)*x11451*x11452)));
evalcond[1]=((((-1.0)*x11449*x11452))+((r01*x11454))+((r02*x11448)));
evalcond[2]=(((r21*x11455))+(((-1.0)*x11451*x11453))+(((-1.0)*r22*x11452)));
evalcond[3]=((((-1.0)*r12*x11452))+(((-1.0)*x11450*x11453))+((r11*x11455)));
evalcond[4]=((-1.0)+((r12*x11448))+(((-1.0)*x11450*x11452))+((r11*x11454)));
evalcond[5]=((1.0)+(((-1.0)*r02*x11452))+(((-1.0)*x11449*x11453))+((r01*x11455)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x11456=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x11456;
j4eval[1]=IKsign(x11456);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x11457=((1.0)*cj5);
IkReal x11458=((((-1.0)*r21*x11457))+(((-1.0)*r20*sj5)));
j4eval[0]=x11458;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r00*x11457))+((r01*sj5))))));
j4eval[2]=IKsign(x11458);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x11459=cj5*cj5;
IkReal x11460=(r21*sj5);
IkReal x11461=((1.0)*r20);
IkReal x11462=(r01*r21);
IkReal x11463=(((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+(((-1.0)*r00*x11459*x11461))+((cj5*r00*x11460))+((x11459*x11462))+(((-1.0)*x11462)));
j4eval[0]=x11463;
j4eval[1]=((IKabs(r22))+(IKabs((x11460+(((-1.0)*cj5*x11461))))));
j4eval[2]=IKsign(x11463);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11464=cj5*cj5;
IkReal x11465=((1.0)*r20);
IkReal x11466=(r21*sj5);
IkReal x11467=(r01*r21);
CheckValue<IkReal> x11468 = IKatan2WithCheck(IkReal((x11466+(((-1.0)*cj5*x11465)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x11468.valid){
continue;
}
CheckValue<IkReal> x11469=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*r00*x11464*x11465))+(((-1.0)*r02*r22))+((cj5*r00*x11466))+((x11464*x11467))+(((-1.0)*x11467)))),-1);
if(!x11469.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11468.value)+(((1.5707963267949)*(x11469.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11470=IKcos(j4);
IkReal x11471=IKsin(j4);
IkReal x11472=(cj5*r00);
IkReal x11473=(cj5*r10);
IkReal x11474=(cj5*r20);
IkReal x11475=((1.0)*x11470);
IkReal x11476=((1.0)*x11471);
IkReal x11477=(sj5*x11470);
IkReal x11478=(sj5*x11471);
evalcond[0]=((((-1.0)*x11474*x11475))+((r22*x11471))+((r21*x11477)));
evalcond[1]=((((-1.0)*x11472*x11475))+((r02*x11471))+((r01*x11477)));
evalcond[2]=((((-1.0)*x11474*x11476))+(((-1.0)*r22*x11475))+((r21*x11478)));
evalcond[3]=((((-1.0)*r12*x11475))+((r11*x11478))+(((-1.0)*x11473*x11476)));
evalcond[4]=((1.0)+((r12*x11471))+((r11*x11477))+(((-1.0)*x11473*x11475)));
evalcond[5]=((1.0)+(((-1.0)*x11472*x11476))+(((-1.0)*r02*x11475))+((r01*x11478)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11479=((1.0)*cj5);
CheckValue<IkReal> x11480=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x11479))+(((-1.0)*r20*sj5)))),-1);
if(!x11480.valid){
continue;
}
CheckValue<IkReal> x11481 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*r00*x11479)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x11481.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11480.value)))+(x11481.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11482=IKcos(j4);
IkReal x11483=IKsin(j4);
IkReal x11484=(cj5*r00);
IkReal x11485=(cj5*r10);
IkReal x11486=(cj5*r20);
IkReal x11487=((1.0)*x11482);
IkReal x11488=((1.0)*x11483);
IkReal x11489=(sj5*x11482);
IkReal x11490=(sj5*x11483);
evalcond[0]=(((r22*x11483))+(((-1.0)*x11486*x11487))+((r21*x11489)));
evalcond[1]=(((r01*x11489))+(((-1.0)*x11484*x11487))+((r02*x11483)));
evalcond[2]=(((r21*x11490))+(((-1.0)*r22*x11487))+(((-1.0)*x11486*x11488)));
evalcond[3]=((((-1.0)*r12*x11487))+(((-1.0)*x11485*x11488))+((r11*x11490)));
evalcond[4]=((1.0)+(((-1.0)*x11485*x11487))+((r11*x11489))+((r12*x11483)));
evalcond[5]=((1.0)+(((-1.0)*r02*x11487))+(((-1.0)*x11484*x11488))+((r01*x11490)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11491=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x11491.valid){
continue;
}
CheckValue<IkReal> x11492 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x11492.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11491.value)))+(x11492.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11493=IKcos(j4);
IkReal x11494=IKsin(j4);
IkReal x11495=(cj5*r00);
IkReal x11496=(cj5*r10);
IkReal x11497=(cj5*r20);
IkReal x11498=((1.0)*x11493);
IkReal x11499=((1.0)*x11494);
IkReal x11500=(sj5*x11493);
IkReal x11501=(sj5*x11494);
evalcond[0]=(((r22*x11494))+((r21*x11500))+(((-1.0)*x11497*x11498)));
evalcond[1]=(((r02*x11494))+(((-1.0)*x11495*x11498))+((r01*x11500)));
evalcond[2]=(((r21*x11501))+(((-1.0)*x11497*x11499))+(((-1.0)*r22*x11498)));
evalcond[3]=(((r11*x11501))+(((-1.0)*x11496*x11499))+(((-1.0)*r12*x11498)));
evalcond[4]=((1.0)+((r11*x11500))+((r12*x11494))+(((-1.0)*x11496*x11498)));
evalcond[5]=((1.0)+(((-1.0)*x11495*x11499))+((r01*x11501))+(((-1.0)*r02*x11498)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x11502=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x11502;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
j4eval[2]=IKsign(x11502);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x11503=((1.0)*cj5);
IkReal x11504=((((-1.0)*r00*sj5))+(((-1.0)*r01*x11503)));
j4eval[0]=x11504;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x11503)))))+(IKabs(r22)));
j4eval[2]=IKsign(x11504);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x11505=cj5*cj5;
IkReal x11506=(r21*sj5);
IkReal x11507=((1.0)*r20);
IkReal x11508=(r01*r21);
IkReal x11509=(((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+((x11505*x11508))+(((-1.0)*r00*x11505*x11507))+((cj5*r00*x11506))+(((-1.0)*x11508)));
j4eval[0]=x11509;
j4eval[1]=((IKabs((x11506+(((-1.0)*cj5*x11507)))))+(IKabs(r22)));
j4eval[2]=IKsign(x11509);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11510=cj5*cj5;
IkReal x11511=((1.0)*r20);
IkReal x11512=(r21*sj5);
IkReal x11513=(r01*r21);
CheckValue<IkReal> x11514=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+((x11510*x11513))+(((-1.0)*r02*r22))+(((-1.0)*x11513))+(((-1.0)*r00*x11510*x11511))+((cj5*r00*x11512)))),-1);
if(!x11514.valid){
continue;
}
CheckValue<IkReal> x11515 = IKatan2WithCheck(IkReal((x11512+(((-1.0)*cj5*x11511)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x11515.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11514.value)))+(x11515.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11516=IKcos(j4);
IkReal x11517=IKsin(j4);
IkReal x11518=(cj5*r00);
IkReal x11519=(cj5*r10);
IkReal x11520=(cj5*r20);
IkReal x11521=((1.0)*x11516);
IkReal x11522=((1.0)*x11517);
IkReal x11523=(sj5*x11516);
IkReal x11524=(sj5*x11517);
evalcond[0]=(((r21*x11523))+((r22*x11517))+(((-1.0)*x11520*x11521)));
evalcond[1]=((((-1.0)*x11518*x11521))+((r02*x11517))+((r01*x11523)));
evalcond[2]=(((r21*x11524))+(((-1.0)*r22*x11521))+(((-1.0)*x11520*x11522)));
evalcond[3]=((((-1.0)*x11519*x11522))+((r11*x11524))+(((-1.0)*r12*x11521)));
evalcond[4]=((-1.0)+(((-1.0)*x11519*x11521))+((r11*x11523))+((r12*x11517)));
evalcond[5]=((1.0)+(((-1.0)*r02*x11521))+(((-1.0)*x11518*x11522))+((r01*x11524)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11525=((1.0)*cj5);
CheckValue<IkReal> x11526 = IKatan2WithCheck(IkReal(((((-1.0)*r20*x11525))+((r21*sj5)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x11526.valid){
continue;
}
CheckValue<IkReal> x11527=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x11525)))),-1);
if(!x11527.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11526.value)+(((1.5707963267949)*(x11527.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11528=IKcos(j4);
IkReal x11529=IKsin(j4);
IkReal x11530=(cj5*r00);
IkReal x11531=(cj5*r10);
IkReal x11532=(cj5*r20);
IkReal x11533=((1.0)*x11528);
IkReal x11534=((1.0)*x11529);
IkReal x11535=(sj5*x11528);
IkReal x11536=(sj5*x11529);
evalcond[0]=(((r21*x11535))+(((-1.0)*x11532*x11533))+((r22*x11529)));
evalcond[1]=((((-1.0)*x11530*x11533))+((r01*x11535))+((r02*x11529)));
evalcond[2]=(((r21*x11536))+(((-1.0)*x11532*x11534))+(((-1.0)*r22*x11533)));
evalcond[3]=((((-1.0)*r12*x11533))+((r11*x11536))+(((-1.0)*x11531*x11534)));
evalcond[4]=((-1.0)+((r12*x11529))+((r11*x11535))+(((-1.0)*x11531*x11533)));
evalcond[5]=((1.0)+(((-1.0)*x11530*x11534))+((r01*x11536))+(((-1.0)*r02*x11533)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11537=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x11537.valid){
continue;
}
CheckValue<IkReal> x11538 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x11538.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11537.value)))+(x11538.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11539=IKcos(j4);
IkReal x11540=IKsin(j4);
IkReal x11541=(cj5*r00);
IkReal x11542=(cj5*r10);
IkReal x11543=(cj5*r20);
IkReal x11544=((1.0)*x11539);
IkReal x11545=((1.0)*x11540);
IkReal x11546=(sj5*x11539);
IkReal x11547=(sj5*x11540);
evalcond[0]=(((r21*x11546))+((r22*x11540))+(((-1.0)*x11543*x11544)));
evalcond[1]=(((r01*x11546))+(((-1.0)*x11541*x11544))+((r02*x11540)));
evalcond[2]=(((r21*x11547))+(((-1.0)*x11543*x11545))+(((-1.0)*r22*x11544)));
evalcond[3]=(((r11*x11547))+(((-1.0)*x11542*x11545))+(((-1.0)*r12*x11544)));
evalcond[4]=((-1.0)+((r12*x11540))+((r11*x11546))+(((-1.0)*x11542*x11544)));
evalcond[5]=((1.0)+((r01*x11547))+(((-1.0)*x11541*x11545))+(((-1.0)*r02*x11544)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x11548=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x11548;
j4eval[1]=IKsign(x11548);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x11549=((1.0)*cj5);
IkReal x11550=((((-1.0)*r21*x11549))+(((-1.0)*r20*sj5)));
j4eval[0]=x11550;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r00*x11549))+((r01*sj5))))));
j4eval[2]=IKsign(x11550);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x11551=cj5*cj5;
IkReal x11552=(r21*sj5);
IkReal x11553=((1.0)*r20);
IkReal x11554=(r01*r21);
IkReal x11555=(((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+((x11551*x11554))+((cj5*r00*x11552))+(((-1.0)*r00*x11551*x11553))+(((-1.0)*x11554)));
j4eval[0]=x11555;
j4eval[1]=((IKabs(r22))+(IKabs((x11552+(((-1.0)*cj5*x11553))))));
j4eval[2]=IKsign(x11555);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11556=cj5*cj5;
IkReal x11557=((1.0)*r20);
IkReal x11558=(r21*sj5);
IkReal x11559=(r01*r21);
CheckValue<IkReal> x11560 = IKatan2WithCheck(IkReal((x11558+(((-1.0)*cj5*x11557)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x11560.valid){
continue;
}
CheckValue<IkReal> x11561=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*r00*x11556*x11557))+(((-1.0)*r02*r22))+((cj5*r00*x11558))+((x11556*x11559))+(((-1.0)*x11559)))),-1);
if(!x11561.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11560.value)+(((1.5707963267949)*(x11561.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11562=IKcos(j4);
IkReal x11563=IKsin(j4);
IkReal x11564=(cj5*r00);
IkReal x11565=(cj5*r10);
IkReal x11566=(cj5*r20);
IkReal x11567=((1.0)*x11562);
IkReal x11568=((1.0)*x11563);
IkReal x11569=(sj5*x11562);
IkReal x11570=(sj5*x11563);
evalcond[0]=((((-1.0)*x11566*x11567))+((r22*x11563))+((r21*x11569)));
evalcond[1]=(((r01*x11569))+((r02*x11563))+(((-1.0)*x11564*x11567)));
evalcond[2]=((((-1.0)*x11566*x11568))+((r21*x11570))+(((-1.0)*r22*x11567)));
evalcond[3]=((((-1.0)*x11565*x11568))+(((-1.0)*r12*x11567))+((r11*x11570)));
evalcond[4]=((1.0)+(((-1.0)*x11565*x11567))+((r11*x11569))+((r12*x11563)));
evalcond[5]=((1.0)+((r01*x11570))+(((-1.0)*x11564*x11568))+(((-1.0)*r02*x11567)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11571=((1.0)*cj5);
CheckValue<IkReal> x11572 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*r00*x11571)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x11572.valid){
continue;
}
CheckValue<IkReal> x11573=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x11571))+(((-1.0)*r20*sj5)))),-1);
if(!x11573.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11572.value)+(((1.5707963267949)*(x11573.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11574=IKcos(j4);
IkReal x11575=IKsin(j4);
IkReal x11576=(cj5*r00);
IkReal x11577=(cj5*r10);
IkReal x11578=(cj5*r20);
IkReal x11579=((1.0)*x11574);
IkReal x11580=((1.0)*x11575);
IkReal x11581=(sj5*x11574);
IkReal x11582=(sj5*x11575);
evalcond[0]=(((r21*x11581))+((r22*x11575))+(((-1.0)*x11578*x11579)));
evalcond[1]=(((r01*x11581))+(((-1.0)*x11576*x11579))+((r02*x11575)));
evalcond[2]=((((-1.0)*x11578*x11580))+((r21*x11582))+(((-1.0)*r22*x11579)));
evalcond[3]=((((-1.0)*x11577*x11580))+(((-1.0)*r12*x11579))+((r11*x11582)));
evalcond[4]=((1.0)+(((-1.0)*x11577*x11579))+((r12*x11575))+((r11*x11581)));
evalcond[5]=((1.0)+((r01*x11582))+(((-1.0)*r02*x11579))+(((-1.0)*x11576*x11580)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11583=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x11583.valid){
continue;
}
CheckValue<IkReal> x11584 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x11584.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11583.value)))+(x11584.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11585=IKcos(j4);
IkReal x11586=IKsin(j4);
IkReal x11587=(cj5*r00);
IkReal x11588=(cj5*r10);
IkReal x11589=(cj5*r20);
IkReal x11590=((1.0)*x11585);
IkReal x11591=((1.0)*x11586);
IkReal x11592=(sj5*x11585);
IkReal x11593=(sj5*x11586);
evalcond[0]=(((r22*x11586))+((r21*x11592))+(((-1.0)*x11589*x11590)));
evalcond[1]=(((r01*x11592))+(((-1.0)*x11587*x11590))+((r02*x11586)));
evalcond[2]=(((r21*x11593))+(((-1.0)*r22*x11590))+(((-1.0)*x11589*x11591)));
evalcond[3]=((((-1.0)*x11588*x11591))+((r11*x11593))+(((-1.0)*r12*x11590)));
evalcond[4]=((1.0)+(((-1.0)*x11588*x11590))+((r11*x11592))+((r12*x11586)));
evalcond[5]=((1.0)+((r01*x11593))+(((-1.0)*x11587*x11591))+(((-1.0)*r02*x11590)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x11594=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x11594;
j4eval[1]=IKsign(x11594);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x11595=((1.0)*cj5);
IkReal x11596=((((-1.0)*r21*x11595))+(((-1.0)*r20*sj5)));
j4eval[0]=x11596;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x11595))))));
j4eval[2]=IKsign(x11596);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x11597=cj5*cj5;
IkReal x11598=(r21*sj5);
IkReal x11599=((1.0)*r20);
IkReal x11600=(r01*r21);
IkReal x11601=(((cj5*r01*r20*sj5))+((cj5*r00*x11598))+(((-1.0)*r02*r22))+(((-1.0)*r00*x11597*x11599))+(((-1.0)*x11600))+((x11597*x11600)));
j4eval[0]=x11601;
j4eval[1]=((IKabs(((((-1.0)*cj5*x11599))+x11598)))+(IKabs(r22)));
j4eval[2]=IKsign(x11601);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11602=cj5*cj5;
IkReal x11603=((1.0)*r20);
IkReal x11604=(r21*sj5);
IkReal x11605=(r01*r21);
CheckValue<IkReal> x11606=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+((x11602*x11605))+(((-1.0)*r00*x11602*x11603))+(((-1.0)*x11605))+((cj5*r00*x11604)))),-1);
if(!x11606.valid){
continue;
}
CheckValue<IkReal> x11607 = IKatan2WithCheck(IkReal((x11604+(((-1.0)*cj5*x11603)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x11607.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11606.value)))+(x11607.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11608=IKcos(j4);
IkReal x11609=IKsin(j4);
IkReal x11610=(cj5*r00);
IkReal x11611=(cj5*r10);
IkReal x11612=(cj5*r20);
IkReal x11613=((1.0)*x11608);
IkReal x11614=((1.0)*x11609);
IkReal x11615=(sj5*x11608);
IkReal x11616=(sj5*x11609);
evalcond[0]=(((r21*x11615))+((r22*x11609))+(((-1.0)*x11612*x11613)));
evalcond[1]=(((r02*x11609))+(((-1.0)*x11610*x11613))+((r01*x11615)));
evalcond[2]=(((r21*x11616))+(((-1.0)*r22*x11613))+(((-1.0)*x11612*x11614)));
evalcond[3]=((((-1.0)*r12*x11613))+((r11*x11616))+(((-1.0)*x11611*x11614)));
evalcond[4]=((1.0)+((r11*x11615))+(((-1.0)*x11611*x11613))+((r12*x11609)));
evalcond[5]=((1.0)+(((-1.0)*x11610*x11614))+((r01*x11616))+(((-1.0)*r02*x11613)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11617=((1.0)*cj5);
CheckValue<IkReal> x11618=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x11617))+(((-1.0)*r20*sj5)))),-1);
if(!x11618.valid){
continue;
}
CheckValue<IkReal> x11619 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*r00*x11617)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x11619.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11618.value)))+(x11619.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11620=IKcos(j4);
IkReal x11621=IKsin(j4);
IkReal x11622=(cj5*r00);
IkReal x11623=(cj5*r10);
IkReal x11624=(cj5*r20);
IkReal x11625=((1.0)*x11620);
IkReal x11626=((1.0)*x11621);
IkReal x11627=(sj5*x11620);
IkReal x11628=(sj5*x11621);
evalcond[0]=(((r22*x11621))+((r21*x11627))+(((-1.0)*x11624*x11625)));
evalcond[1]=(((r02*x11621))+(((-1.0)*x11622*x11625))+((r01*x11627)));
evalcond[2]=(((r21*x11628))+(((-1.0)*r22*x11625))+(((-1.0)*x11624*x11626)));
evalcond[3]=(((r11*x11628))+(((-1.0)*r12*x11625))+(((-1.0)*x11623*x11626)));
evalcond[4]=((1.0)+((r12*x11621))+((r11*x11627))+(((-1.0)*x11623*x11625)));
evalcond[5]=((1.0)+(((-1.0)*x11622*x11626))+((r01*x11628))+(((-1.0)*r02*x11625)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11629=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x11629.valid){
continue;
}
CheckValue<IkReal> x11630 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x11630.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11629.value)))+(x11630.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11631=IKcos(j4);
IkReal x11632=IKsin(j4);
IkReal x11633=(cj5*r00);
IkReal x11634=(cj5*r10);
IkReal x11635=(cj5*r20);
IkReal x11636=((1.0)*x11631);
IkReal x11637=((1.0)*x11632);
IkReal x11638=(sj5*x11631);
IkReal x11639=(sj5*x11632);
evalcond[0]=(((r22*x11632))+((r21*x11638))+(((-1.0)*x11635*x11636)));
evalcond[1]=((((-1.0)*x11633*x11636))+((r02*x11632))+((r01*x11638)));
evalcond[2]=((((-1.0)*r22*x11636))+((r21*x11639))+(((-1.0)*x11635*x11637)));
evalcond[3]=(((r11*x11639))+(((-1.0)*x11634*x11637))+(((-1.0)*r12*x11636)));
evalcond[4]=((1.0)+((r11*x11638))+((r12*x11632))+(((-1.0)*x11634*x11636)));
evalcond[5]=((1.0)+(((-1.0)*r02*x11636))+(((-1.0)*x11633*x11637))+((r01*x11639)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x11640=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x11640;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
j4eval[2]=IKsign(x11640);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x11641=((1.0)*cj5);
IkReal x11642=((((-1.0)*r00*sj5))+(((-1.0)*r01*x11641)));
j4eval[0]=x11642;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x11641))))));
j4eval[2]=IKsign(x11642);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x11643=cj5*cj5;
IkReal x11644=(r21*sj5);
IkReal x11645=((1.0)*r20);
IkReal x11646=(r01*r21);
IkReal x11647=(((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+((x11643*x11646))+(((-1.0)*x11646))+((cj5*r00*x11644))+(((-1.0)*r00*x11643*x11645)));
j4eval[0]=x11647;
j4eval[1]=((IKabs(r22))+(IKabs((x11644+(((-1.0)*cj5*x11645))))));
j4eval[2]=IKsign(x11647);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11648=cj5*cj5;
IkReal x11649=((1.0)*r20);
IkReal x11650=(r21*sj5);
IkReal x11651=(r01*r21);
CheckValue<IkReal> x11652 = IKatan2WithCheck(IkReal((x11650+(((-1.0)*cj5*x11649)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x11652.valid){
continue;
}
CheckValue<IkReal> x11653=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+((cj5*r00*x11650))+(((-1.0)*x11651))+(((-1.0)*r00*x11648*x11649))+((x11648*x11651)))),-1);
if(!x11653.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11652.value)+(((1.5707963267949)*(x11653.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11654=IKcos(j4);
IkReal x11655=IKsin(j4);
IkReal x11656=(cj5*r00);
IkReal x11657=(cj5*r10);
IkReal x11658=(cj5*r20);
IkReal x11659=((1.0)*x11654);
IkReal x11660=((1.0)*x11655);
IkReal x11661=(sj5*x11654);
IkReal x11662=(sj5*x11655);
evalcond[0]=(((r21*x11661))+(((-1.0)*x11658*x11659))+((r22*x11655)));
evalcond[1]=((((-1.0)*x11656*x11659))+((r02*x11655))+((r01*x11661)));
evalcond[2]=(((r21*x11662))+(((-1.0)*r22*x11659))+(((-1.0)*x11658*x11660)));
evalcond[3]=((((-1.0)*r12*x11659))+((r11*x11662))+(((-1.0)*x11657*x11660)));
evalcond[4]=((-1.0)+((r12*x11655))+(((-1.0)*x11657*x11659))+((r11*x11661)));
evalcond[5]=((1.0)+(((-1.0)*r02*x11659))+((r01*x11662))+(((-1.0)*x11656*x11660)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11663=((1.0)*cj5);
CheckValue<IkReal> x11664=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x11663))+(((-1.0)*r00*sj5)))),-1);
if(!x11664.valid){
continue;
}
CheckValue<IkReal> x11665 = IKatan2WithCheck(IkReal(((((-1.0)*r20*x11663))+((r21*sj5)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x11665.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11664.value)))+(x11665.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11666=IKcos(j4);
IkReal x11667=IKsin(j4);
IkReal x11668=(cj5*r00);
IkReal x11669=(cj5*r10);
IkReal x11670=(cj5*r20);
IkReal x11671=((1.0)*x11666);
IkReal x11672=((1.0)*x11667);
IkReal x11673=(sj5*x11666);
IkReal x11674=(sj5*x11667);
evalcond[0]=((((-1.0)*x11670*x11671))+((r21*x11673))+((r22*x11667)));
evalcond[1]=((((-1.0)*x11668*x11671))+((r01*x11673))+((r02*x11667)));
evalcond[2]=((((-1.0)*x11670*x11672))+((r21*x11674))+(((-1.0)*r22*x11671)));
evalcond[3]=((((-1.0)*x11669*x11672))+((r11*x11674))+(((-1.0)*r12*x11671)));
evalcond[4]=((-1.0)+(((-1.0)*x11669*x11671))+((r11*x11673))+((r12*x11667)));
evalcond[5]=((1.0)+(((-1.0)*x11668*x11672))+((r01*x11674))+(((-1.0)*r02*x11671)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11675=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x11675.valid){
continue;
}
CheckValue<IkReal> x11676 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x11676.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11675.value)))+(x11676.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11677=IKcos(j4);
IkReal x11678=IKsin(j4);
IkReal x11679=(cj5*r00);
IkReal x11680=(cj5*r10);
IkReal x11681=(cj5*r20);
IkReal x11682=((1.0)*x11677);
IkReal x11683=((1.0)*x11678);
IkReal x11684=(sj5*x11677);
IkReal x11685=(sj5*x11678);
evalcond[0]=(((r22*x11678))+(((-1.0)*x11681*x11682))+((r21*x11684)));
evalcond[1]=(((r02*x11678))+(((-1.0)*x11679*x11682))+((r01*x11684)));
evalcond[2]=((((-1.0)*r22*x11682))+(((-1.0)*x11681*x11683))+((r21*x11685)));
evalcond[3]=((((-1.0)*x11680*x11683))+((r11*x11685))+(((-1.0)*r12*x11682)));
evalcond[4]=((-1.0)+(((-1.0)*x11680*x11682))+((r11*x11684))+((r12*x11678)));
evalcond[5]=((1.0)+(((-1.0)*r02*x11682))+(((-1.0)*x11679*x11683))+((r01*x11685)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11686=(r01*sj5);
IkReal x11687=(cj1*sj2);
IkReal x11688=(cj2*sj1);
IkReal x11689=((1.0)*r02);
IkReal x11690=((1.0)*cj5*r00);
CheckValue<IkReal> x11691 = IKatan2WithCheck(IkReal((((x11686*x11688))+((x11686*x11687))+(((-1.0)*x11687*x11690))+(((-1.0)*x11688*x11690)))),IkReal(((((-1.0)*x11687*x11689))+(((-1.0)*x11688*x11689)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11691.valid){
continue;
}
CheckValue<IkReal> x11692=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x11692.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11691.value)+(((1.5707963267949)*(x11692.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11693=IKcos(j4);
IkReal x11694=IKsin(j4);
IkReal x11695=(cj5*r00);
IkReal x11696=(cj5*r10);
IkReal x11697=(r21*sj5);
IkReal x11698=(cj5*r20);
IkReal x11699=((1.0)*x11693);
IkReal x11700=((1.0)*x11694);
IkReal x11701=(sj5*x11694);
IkReal x11702=(sj5*x11693);
evalcond[0]=(((r01*x11702))+(((-1.0)*x11695*x11699))+((r02*x11694)));
evalcond[1]=((((-1.0)*r22*x11699))+((x11694*x11697))+(((-1.0)*x11698*x11700)));
evalcond[2]=((((-1.0)*r12*x11699))+((r11*x11701))+(((-1.0)*x11696*x11700)));
evalcond[3]=((1.0)+((r01*x11701))+(((-1.0)*r02*x11699))+(((-1.0)*x11695*x11700)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x11693*x11697))+((r22*x11694))+(((-1.0)*x11698*x11699)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*x11696*x11699))+((r12*x11694))+((cj1*cj2))+((r11*x11702)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11703=((1.0)*cj5);
CheckValue<IkReal> x11704 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj5))+(((-1.0)*r10*x11703)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11704.valid){
continue;
}
CheckValue<IkReal> x11705=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x11703))+(((-1.0)*r20*sj5)))),-1);
if(!x11705.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11704.value)+(((1.5707963267949)*(x11705.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11706=IKcos(j4);
IkReal x11707=IKsin(j4);
IkReal x11708=(cj5*r00);
IkReal x11709=(cj5*r10);
IkReal x11710=(r21*sj5);
IkReal x11711=(cj5*r20);
IkReal x11712=((1.0)*x11706);
IkReal x11713=((1.0)*x11707);
IkReal x11714=(sj5*x11707);
IkReal x11715=(sj5*x11706);
evalcond[0]=(((r01*x11715))+(((-1.0)*x11708*x11712))+((r02*x11707)));
evalcond[1]=((((-1.0)*r22*x11712))+((x11707*x11710))+(((-1.0)*x11711*x11713)));
evalcond[2]=((((-1.0)*x11709*x11713))+(((-1.0)*r12*x11712))+((r11*x11714)));
evalcond[3]=((1.0)+((r01*x11714))+(((-1.0)*x11708*x11713))+(((-1.0)*r02*x11712)));
evalcond[4]=(((cj2*sj1))+((r22*x11707))+((cj1*sj2))+((x11706*x11710))+(((-1.0)*x11711*x11712)));
evalcond[5]=((((-1.0)*x11709*x11712))+(((-1.0)*sj1*sj2))+((r12*x11707))+((cj1*cj2))+((r11*x11715)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11716 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11716.valid){
continue;
}
CheckValue<IkReal> x11717=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x11717.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11716.value)+(((1.5707963267949)*(x11717.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11718=IKcos(j4);
IkReal x11719=IKsin(j4);
IkReal x11720=(cj5*r00);
IkReal x11721=(cj5*r10);
IkReal x11722=(r21*sj5);
IkReal x11723=(cj5*r20);
IkReal x11724=((1.0)*x11718);
IkReal x11725=((1.0)*x11719);
IkReal x11726=(sj5*x11719);
IkReal x11727=(sj5*x11718);
evalcond[0]=((((-1.0)*x11720*x11724))+((r01*x11727))+((r02*x11719)));
evalcond[1]=((((-1.0)*r22*x11724))+((x11719*x11722))+(((-1.0)*x11723*x11725)));
evalcond[2]=((((-1.0)*r12*x11724))+(((-1.0)*x11721*x11725))+((r11*x11726)));
evalcond[3]=((1.0)+(((-1.0)*x11720*x11725))+((r01*x11726))+(((-1.0)*r02*x11724)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x11723*x11724))+((r22*x11719))+((x11718*x11722)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*x11721*x11724))+((cj1*cj2))+((r11*x11727))+((r12*x11719)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x11729 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x11729)==0){
continue;
}
IkReal x11728=pow(x11729,-0.5);
CheckValue<IkReal> x11730 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x11730.valid){
continue;
}
IkReal gconst24=((-1.0)*(x11730.value));
IkReal gconst25=((-1.0)*r11*x11728);
IkReal gconst26=(r10*x11728);
CheckValue<IkReal> x11731 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x11731.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x11731.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x11734 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x11734.valid){
continue;
}
IkReal x11732=((-1.0)*(x11734.value));
IkReal x11733=x11728;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst25;
cj5=gconst26;
j5=x11732;
IkReal gconst24=x11732;
IkReal gconst25=((-1.0)*r11*x11733);
IkReal gconst26=(r10*x11733);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x11737 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x11737.valid){
continue;
}
IkReal x11735=((-1.0)*(x11737.value));
IkReal x11736=x11728;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst25;
cj5=gconst26;
j5=x11735;
IkReal gconst24=x11735;
IkReal gconst25=((-1.0)*r11*x11736);
IkReal gconst26=(r10*x11736);
CheckValue<IkReal> x11745=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r12*r12)))),-1);
if(!x11745.valid){
continue;
}
IkReal x11738=x11745.value;
IkReal x11739=(cj3*x11738);
IkReal x11740=(r00*x11739);
IkReal x11741=(r21*x11739);
IkReal x11742=(r20*x11739);
IkReal x11743=(r01*x11739);
IkReal x11744=(r10*r11*x11739);
j4eval[0]=IKsign((((r01*r10*r11*x11742))+((r10*r11*r21*x11740))+((r20*x11740*(r10*r10)))+((cj3*r02*r22))+((r01*x11741*(r11*r11)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11746=gconst26*gconst26;
IkReal x11747=gconst25*gconst25;
IkReal x11748=(gconst26*r01);
IkReal x11749=(gconst25*r00);
IkReal x11750=((1.0)*sj3);
IkReal x11751=(cj3*r20);
IkReal x11752=((1.0)*cj3*r22);
IkReal x11753=((1.0)*cj3*r21);
CheckValue<IkReal> x11754=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*r21*x11747*x11750))+((gconst26*r21*sj3*x11749))+(((-1.0)*r00*r20*x11746*x11750))+((gconst25*r20*sj3*x11748))+(((-1.0)*r02*r22*x11750)))),-1);
if(!x11754.valid){
continue;
}
CheckValue<IkReal> x11755 = IKatan2WithCheck(IkReal(((((-1.0)*x11749*x11752))+(((-1.0)*x11748*x11752)))),IkReal((((gconst26*x11749*x11751))+(((-1.0)*r00*x11747*x11753))+(((-1.0)*gconst25*x11748*x11753))+((r01*x11746*x11751)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11755.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11754.value)))+(x11755.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11756=IKsin(j4);
IkReal x11757=IKcos(j4);
IkReal x11758=(cj2*sj1);
IkReal x11759=(cj1*sj2);
IkReal x11760=(gconst25*r11);
IkReal x11761=(gconst25*r21);
IkReal x11762=((1.0)*gconst26);
IkReal x11763=(sj1*sj2);
IkReal x11764=(cj1*cj2);
IkReal x11765=(gconst25*r01);
IkReal x11766=(gconst26*sj3);
IkReal x11767=((1.0)*x11757);
IkReal x11768=(sj3*x11757);
IkReal x11769=(r12*x11756);
IkReal x11770=((1.0)*cj3*gconst25);
IkReal x11771=((1.0)*gconst25*sj3);
IkReal x11772=(sj3*x11756);
IkReal x11773=(x11759+x11758);
IkReal x11774=((1.0)*cj3*x11756);
IkReal x11775=(cj3*gconst26*x11757);
evalcond[0]=((((-1.0)*r20*x11756*x11762))+(((-1.0)*r22*x11767))+((x11756*x11761)));
evalcond[1]=((((-1.0)*r12*x11767))+((x11756*x11760))+(((-1.0)*r10*x11756*x11762)));
evalcond[2]=((1.0)+(((-1.0)*r02*x11767))+(((-1.0)*r00*x11756*x11762))+((x11756*x11765)));
evalcond[3]=((((-1.0)*r00*x11762*x11768))+((x11765*x11768))+(((-1.0)*cj3*r01*x11762))+((r02*x11772))+(((-1.0)*r00*x11770)));
evalcond[4]=((((-1.0)*r01*sj3*x11762))+(((-1.0)*cj3*x11765*x11767))+(((-1.0)*r02*x11774))+((r00*x11775))+(((-1.0)*r00*x11771)));
evalcond[5]=(x11773+(((-1.0)*r10*x11770))+(((-1.0)*r10*x11762*x11768))+((sj3*x11769))+(((-1.0)*cj3*r11*x11762))+((x11760*x11768)));
evalcond[6]=(x11763+(((-1.0)*cj3*r21*x11762))+(((-1.0)*x11764))+(((-1.0)*r20*x11762*x11768))+(((-1.0)*r20*x11770))+((r22*x11772))+((x11761*x11768)));
evalcond[7]=(x11773+((r20*x11775))+(((-1.0)*r22*x11774))+(((-1.0)*r21*sj3*x11762))+(((-1.0)*cj3*x11761*x11767))+(((-1.0)*r20*x11771)));
evalcond[8]=(x11764+(((-1.0)*r11*sj3*x11762))+((r10*x11775))+(((-1.0)*r10*x11771))+(((-1.0)*cj3*x11769))+(((-1.0)*x11763))+(((-1.0)*cj3*x11760*x11767)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11776=gconst26*gconst26;
IkReal x11777=gconst25*gconst25;
IkReal x11778=((1.0)*r01);
IkReal x11779=(r00*r20);
IkReal x11780=((1.0)*r00*sj3);
IkReal x11781=(r21*x11777);
IkReal x11782=(gconst25*gconst26*sj3);
IkReal x11783=(cj3*gconst25*gconst26);
CheckValue<IkReal> x11784 = IKatan2WithCheck(IkReal(((((-1.0)*gconst25*r22*x11780))+(((-1.0)*gconst26*r22*sj3*x11778)))),IkReal(((((-1.0)*r21*x11778*x11782))+(((-1.0)*x11780*x11781))+((r01*r20*sj3*x11776))+((x11779*x11782)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11784.valid){
continue;
}
CheckValue<IkReal> x11785=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*r21*x11783))+((cj3*x11776*x11779))+((cj3*r01*x11781))+((cj3*r02*r22))+(((-1.0)*r20*x11778*x11783)))),-1);
if(!x11785.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11784.value)+(((1.5707963267949)*(x11785.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11786=IKsin(j4);
IkReal x11787=IKcos(j4);
IkReal x11788=(cj2*sj1);
IkReal x11789=(cj1*sj2);
IkReal x11790=(gconst25*r11);
IkReal x11791=(gconst25*r21);
IkReal x11792=((1.0)*gconst26);
IkReal x11793=(sj1*sj2);
IkReal x11794=(cj1*cj2);
IkReal x11795=(gconst25*r01);
IkReal x11796=(gconst26*sj3);
IkReal x11797=((1.0)*x11787);
IkReal x11798=(sj3*x11787);
IkReal x11799=(r12*x11786);
IkReal x11800=((1.0)*cj3*gconst25);
IkReal x11801=((1.0)*gconst25*sj3);
IkReal x11802=(sj3*x11786);
IkReal x11803=(x11788+x11789);
IkReal x11804=((1.0)*cj3*x11786);
IkReal x11805=(cj3*gconst26*x11787);
evalcond[0]=((((-1.0)*r22*x11797))+((x11786*x11791))+(((-1.0)*r20*x11786*x11792)));
evalcond[1]=((((-1.0)*r12*x11797))+((x11786*x11790))+(((-1.0)*r10*x11786*x11792)));
evalcond[2]=((1.0)+(((-1.0)*r02*x11797))+(((-1.0)*r00*x11786*x11792))+((x11786*x11795)));
evalcond[3]=(((r02*x11802))+(((-1.0)*r00*x11792*x11798))+((x11795*x11798))+(((-1.0)*cj3*r01*x11792))+(((-1.0)*r00*x11800)));
evalcond[4]=(((r00*x11805))+(((-1.0)*r01*sj3*x11792))+(((-1.0)*cj3*x11795*x11797))+(((-1.0)*r02*x11804))+(((-1.0)*r00*x11801)));
evalcond[5]=((((-1.0)*cj3*r11*x11792))+(((-1.0)*r10*x11800))+((x11790*x11798))+(((-1.0)*r10*x11792*x11798))+((sj3*x11799))+x11803);
evalcond[6]=(x11793+(((-1.0)*x11794))+((r22*x11802))+(((-1.0)*r20*x11792*x11798))+(((-1.0)*cj3*r21*x11792))+(((-1.0)*r20*x11800))+((x11791*x11798)));
evalcond[7]=((((-1.0)*r20*x11801))+(((-1.0)*cj3*x11791*x11797))+(((-1.0)*r22*x11804))+((r20*x11805))+x11803+(((-1.0)*r21*sj3*x11792)));
evalcond[8]=(x11794+(((-1.0)*x11793))+(((-1.0)*r10*x11801))+((r10*x11805))+(((-1.0)*cj3*x11790*x11797))+(((-1.0)*cj3*x11799))+(((-1.0)*r11*sj3*x11792)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11806=((1.0)*gconst26);
CheckValue<IkReal> x11807=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x11806))+(((-1.0)*gconst25*r20)))),-1);
if(!x11807.valid){
continue;
}
CheckValue<IkReal> x11808 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst25*r11))+(((-1.0)*r10*x11806)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11808.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11807.value)))+(x11808.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11809=IKsin(j4);
IkReal x11810=IKcos(j4);
IkReal x11811=(cj2*sj1);
IkReal x11812=(cj1*sj2);
IkReal x11813=(gconst25*r11);
IkReal x11814=(gconst25*r21);
IkReal x11815=((1.0)*gconst26);
IkReal x11816=(sj1*sj2);
IkReal x11817=(cj1*cj2);
IkReal x11818=(gconst25*r01);
IkReal x11819=(gconst26*sj3);
IkReal x11820=((1.0)*x11810);
IkReal x11821=(sj3*x11810);
IkReal x11822=(r12*x11809);
IkReal x11823=((1.0)*cj3*gconst25);
IkReal x11824=((1.0)*gconst25*sj3);
IkReal x11825=(sj3*x11809);
IkReal x11826=(x11812+x11811);
IkReal x11827=((1.0)*cj3*x11809);
IkReal x11828=(cj3*gconst26*x11810);
evalcond[0]=(((x11809*x11814))+(((-1.0)*r22*x11820))+(((-1.0)*r20*x11809*x11815)));
evalcond[1]=(((x11809*x11813))+(((-1.0)*r12*x11820))+(((-1.0)*r10*x11809*x11815)));
evalcond[2]=((1.0)+(((-1.0)*r00*x11809*x11815))+((x11809*x11818))+(((-1.0)*r02*x11820)));
evalcond[3]=(((x11818*x11821))+(((-1.0)*cj3*r01*x11815))+((r02*x11825))+(((-1.0)*r00*x11823))+(((-1.0)*r00*x11815*x11821)));
evalcond[4]=((((-1.0)*r01*sj3*x11815))+(((-1.0)*r02*x11827))+(((-1.0)*cj3*x11818*x11820))+((r00*x11828))+(((-1.0)*r00*x11824)));
evalcond[5]=((((-1.0)*cj3*r11*x11815))+(((-1.0)*r10*x11823))+((sj3*x11822))+((x11813*x11821))+(((-1.0)*r10*x11815*x11821))+x11826);
evalcond[6]=((((-1.0)*x11817))+((x11814*x11821))+(((-1.0)*r20*x11823))+(((-1.0)*cj3*r21*x11815))+((r22*x11825))+(((-1.0)*r20*x11815*x11821))+x11816);
evalcond[7]=((((-1.0)*cj3*x11814*x11820))+(((-1.0)*r20*x11824))+(((-1.0)*r22*x11827))+(((-1.0)*r21*sj3*x11815))+((r20*x11828))+x11826);
evalcond[8]=((((-1.0)*x11816))+(((-1.0)*cj3*x11813*x11820))+(((-1.0)*r10*x11824))+((r10*x11828))+(((-1.0)*cj3*x11822))+(((-1.0)*r11*sj3*x11815))+x11817);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x11830 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x11830)==0){
continue;
}
IkReal x11829=pow(x11830,-0.5);
CheckValue<IkReal> x11831 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x11831.valid){
continue;
}
IkReal gconst27=((3.14159265358979)+(((-1.0)*(x11831.value))));
IkReal gconst28=((1.0)*r11*x11829);
IkReal gconst29=((-1.0)*r10*x11829);
CheckValue<IkReal> x11832 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x11832.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x11832.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x11835 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x11835.valid){
continue;
}
IkReal x11833=((1.0)*(x11835.value));
IkReal x11834=x11829;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x11833)));
IkReal gconst27=((3.14159265358979)+(((-1.0)*x11833)));
IkReal gconst28=((1.0)*r11*x11834);
IkReal gconst29=((-1.0)*r10*x11834);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11836=gconst28*gconst28;
IkReal x11837=gconst29*gconst29;
IkReal x11838=(r01*r21);
IkReal x11839=(r01*sj3);
IkReal x11840=((1.0)*r22);
IkReal x11841=(cj3*r00);
IkReal x11842=(gconst28*sj3);
IkReal x11843=((1.0)*gconst29);
IkReal x11844=(r20*x11837);
CheckValue<IkReal> x11845 = IKatan2WithCheck(IkReal(((((-1.0)*r00*x11840*x11842))+(((-1.0)*gconst29*x11839*x11840)))),IkReal((((x11839*x11844))+(((-1.0)*r00*r21*sj3*x11836))+((gconst29*r00*r20*x11842))+(((-1.0)*x11838*x11842*x11843)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11845.valid){
continue;
}
CheckValue<IkReal> x11846=IKPowWithIntegerCheck(IKsign((((x11841*x11844))+(((-1.0)*gconst28*r21*x11841*x11843))+(((-1.0)*cj3*gconst28*r01*r20*x11843))+((cj3*r02*r22))+((cj3*x11836*x11838)))),-1);
if(!x11846.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11845.value)+(((1.5707963267949)*(x11846.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11847=IKsin(j4);
IkReal x11848=IKcos(j4);
IkReal x11849=(cj2*sj1);
IkReal x11850=(cj1*sj2);
IkReal x11851=(gconst29*r20);
IkReal x11852=(cj3*gconst28);
IkReal x11853=((1.0)*r20);
IkReal x11854=(gconst29*r10);
IkReal x11855=(gconst28*r21);
IkReal x11856=(sj1*sj2);
IkReal x11857=(cj1*cj2);
IkReal x11858=(r00*sj3);
IkReal x11859=((1.0)*gconst28);
IkReal x11860=(gconst28*r01);
IkReal x11861=(gconst28*r11);
IkReal x11862=((1.0)*gconst29);
IkReal x11863=(gconst29*r00);
IkReal x11864=((1.0)*x11848);
IkReal x11865=((1.0)*x11847);
IkReal x11866=(cj3*x11848);
IkReal x11867=(sj3*x11848);
IkReal x11868=(sj3*x11847);
IkReal x11869=(r11*x11862);
IkReal x11870=(x11849+x11850);
evalcond[0]=((((-1.0)*r22*x11864))+(((-1.0)*x11851*x11865))+((x11847*x11855)));
evalcond[1]=((((-1.0)*x11854*x11865))+(((-1.0)*r12*x11864))+((x11847*x11861)));
evalcond[2]=((1.0)+(((-1.0)*r00*x11847*x11862))+(((-1.0)*r02*x11864))+((x11847*x11860)));
evalcond[3]=(((r02*x11868))+(((-1.0)*r00*x11852))+(((-1.0)*x11848*x11858*x11862))+((x11860*x11867))+(((-1.0)*cj3*r01*x11862)));
evalcond[4]=((((-1.0)*cj3*r02*x11865))+(((-1.0)*r01*sj3*x11862))+(((-1.0)*x11858*x11859))+((x11863*x11866))+(((-1.0)*r01*x11852*x11864)));
evalcond[5]=((((-1.0)*r10*x11852))+((r12*x11868))+((x11861*x11867))+(((-1.0)*cj3*x11869))+(((-1.0)*sj3*x11854*x11864))+x11870);
evalcond[6]=((((-1.0)*sj3*x11851*x11864))+(((-1.0)*x11857))+((r22*x11868))+(((-1.0)*x11852*x11853))+((x11855*x11867))+(((-1.0)*cj3*r21*x11862))+x11856);
evalcond[7]=(((x11851*x11866))+(((-1.0)*r21*x11852*x11864))+(((-1.0)*cj3*r22*x11865))+(((-1.0)*r21*sj3*x11862))+x11870+(((-1.0)*gconst28*sj3*x11853)));
evalcond[8]=((((-1.0)*cj3*r12*x11865))+((x11854*x11866))+(((-1.0)*sj3*x11869))+(((-1.0)*r10*sj3*x11859))+(((-1.0)*x11856))+(((-1.0)*r11*x11852*x11864))+x11857);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11871=((1.0)*gconst29);
CheckValue<IkReal> x11872 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst28*r11))+(((-1.0)*r10*x11871)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11872.valid){
continue;
}
CheckValue<IkReal> x11873=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x11871))+(((-1.0)*gconst28*r20)))),-1);
if(!x11873.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11872.value)+(((1.5707963267949)*(x11873.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11874=IKsin(j4);
IkReal x11875=IKcos(j4);
IkReal x11876=(cj2*sj1);
IkReal x11877=(cj1*sj2);
IkReal x11878=(gconst29*r20);
IkReal x11879=(cj3*gconst28);
IkReal x11880=((1.0)*r20);
IkReal x11881=(gconst29*r10);
IkReal x11882=(gconst28*r21);
IkReal x11883=(sj1*sj2);
IkReal x11884=(cj1*cj2);
IkReal x11885=(r00*sj3);
IkReal x11886=((1.0)*gconst28);
IkReal x11887=(gconst28*r01);
IkReal x11888=(gconst28*r11);
IkReal x11889=((1.0)*gconst29);
IkReal x11890=(gconst29*r00);
IkReal x11891=((1.0)*x11875);
IkReal x11892=((1.0)*x11874);
IkReal x11893=(cj3*x11875);
IkReal x11894=(sj3*x11875);
IkReal x11895=(sj3*x11874);
IkReal x11896=(r11*x11889);
IkReal x11897=(x11876+x11877);
evalcond[0]=((((-1.0)*r22*x11891))+((x11874*x11882))+(((-1.0)*x11878*x11892)));
evalcond[1]=((((-1.0)*r12*x11891))+(((-1.0)*x11881*x11892))+((x11874*x11888)));
evalcond[2]=((1.0)+(((-1.0)*r00*x11874*x11889))+((x11874*x11887))+(((-1.0)*r02*x11891)));
evalcond[3]=((((-1.0)*r00*x11879))+(((-1.0)*x11875*x11885*x11889))+(((-1.0)*cj3*r01*x11889))+((r02*x11895))+((x11887*x11894)));
evalcond[4]=((((-1.0)*r01*x11879*x11891))+(((-1.0)*r01*sj3*x11889))+((x11890*x11893))+(((-1.0)*cj3*r02*x11892))+(((-1.0)*x11885*x11886)));
evalcond[5]=((((-1.0)*r10*x11879))+((x11888*x11894))+(((-1.0)*cj3*x11896))+(((-1.0)*sj3*x11881*x11891))+((r12*x11895))+x11897);
evalcond[6]=((((-1.0)*x11884))+(((-1.0)*cj3*r21*x11889))+((x11882*x11894))+(((-1.0)*sj3*x11878*x11891))+((r22*x11895))+(((-1.0)*x11879*x11880))+x11883);
evalcond[7]=((((-1.0)*gconst28*sj3*x11880))+((x11878*x11893))+(((-1.0)*r21*x11879*x11891))+(((-1.0)*r21*sj3*x11889))+(((-1.0)*cj3*r22*x11892))+x11897);
evalcond[8]=((((-1.0)*r11*x11879*x11891))+(((-1.0)*x11883))+((x11881*x11893))+(((-1.0)*cj3*r12*x11892))+(((-1.0)*r10*sj3*x11886))+(((-1.0)*sj3*x11896))+x11884);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x11898=((-1.0)*py);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x11898);
rxp0_2=(py*r00);
rxp1_0=(r21*x11898);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal x11899=(r01*sj5);
IkReal x11900=((1.0)*cj5*r00);
j4eval[0]=((((-1.0)*x11900))+x11899);
j4eval[1]=((((-1.0)*sj3*x11900))+((sj3*x11899)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11901=((-1.0)*py);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x11901);
rxp0_2=(py*r00);
rxp1_0=(r21*x11901);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal x11902=(cj5*r00);
IkReal x11903=(r01*sj5);
j4eval[0]=(x11903+(((-1.0)*x11902)));
j4eval[1]=(((cj3*x11902))+(((-1.0)*cj3*x11903)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x11904=((-1.0)*py);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x11904);
rxp0_2=(py*r00);
rxp1_0=(r21*x11904);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=r12;
j4eval[1]=sj3;
j4eval[2]=((((-1.0)*cj5*r00*sj3))+((r01*sj3*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x11905=((-1.0)*py);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x11905);
rxp0_2=(py*r00);
rxp1_0=(r21*x11905);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x11906=((1.0)*cj5);
j4eval[0]=((((-1.0)*r00*x11906))+((r01*sj5)));
j4eval[1]=(((r21*sj5))+(((-1.0)*r20*x11906)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11907=((-1.0)*py);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x11907);
rxp0_2=(py*r00);
rxp1_0=(r21*x11907);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j4eval[0]=r12;
j4eval[1]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11908=((1.0)*sj1);
CheckValue<IkReal> x11909=IKPowWithIntegerCheck(r12,-1);
if(!x11909.valid){
continue;
}
CheckValue<IkReal> x11910=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x11910.valid){
continue;
}
if( IKabs(((x11909.value)*(((((-1.0)*cj1*sj2))+(((-1.0)*cj2*x11908)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11910.value)*(((((-1.0)*sj2*x11908))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x11909.value)*(((((-1.0)*cj1*sj2))+(((-1.0)*cj2*x11908))))))+IKsqr(((x11910.value)*(((((-1.0)*sj2*x11908))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x11909.value)*(((((-1.0)*cj1*sj2))+(((-1.0)*cj2*x11908))))), ((x11910.value)*(((((-1.0)*sj2*x11908))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11911=IKsin(j4);
IkReal x11912=IKcos(j4);
IkReal x11913=((1.0)*cj5*r00);
IkReal x11914=(sj5*x11912);
IkReal x11915=(sj5*x11911);
IkReal x11916=((1.0)*cj5*r20);
evalcond[0]=((-1.0)*r12*x11912);
evalcond[1]=(((cj2*sj1))+((cj1*sj2))+((r12*x11911)));
evalcond[2]=(((r21*x11915))+(((-1.0)*x11911*x11916)));
evalcond[3]=((((-1.0)*x11912*x11913))+((r01*x11914)));
evalcond[4]=((1.0)+((r01*x11915))+(((-1.0)*x11911*x11913)));
evalcond[5]=((((-1.0)*x11912*x11916))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r21*x11914)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11917=((1.0)*cj5);
CheckValue<IkReal> x11918=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*r00*x11917))),-1);
if(!x11918.valid){
continue;
}
CheckValue<IkReal> x11919=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*r20*x11917))),-1);
if(!x11919.valid){
continue;
}
if( IKabs(((-1.0)*(x11918.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11919.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x11918.value)))+IKsqr(((x11919.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x11918.value)), ((x11919.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11920=IKsin(j4);
IkReal x11921=IKcos(j4);
IkReal x11922=((1.0)*cj5*r00);
IkReal x11923=(sj5*x11921);
IkReal x11924=(sj5*x11920);
IkReal x11925=((1.0)*cj5*r20);
evalcond[0]=((-1.0)*r12*x11921);
evalcond[1]=(((cj2*sj1))+((cj1*sj2))+((r12*x11920)));
evalcond[2]=(((r21*x11924))+(((-1.0)*x11920*x11925)));
evalcond[3]=((((-1.0)*x11921*x11922))+((r01*x11923)));
evalcond[4]=((1.0)+(((-1.0)*x11920*x11922))+((r01*x11924)));
evalcond[5]=(((r21*x11923))+(((-1.0)*x11921*x11925))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x11926=((-1.0)*py);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x11926);
rxp0_2=(py*r00);
rxp1_0=(r21*x11926);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j4eval[0]=r12;
j4eval[1]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11927=((-1.0)*py);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x11927);
rxp0_2=(py*r00);
rxp1_0=(r21*x11927);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j4eval[0]=(((r01*sj5))+(((-1.0)*cj5*r00)));
j4eval[1]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11928=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*cj5*r00))),-1);
if(!x11928.valid){
continue;
}
CheckValue<IkReal> x11929=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x11929.valid){
continue;
}
if( IKabs(((-1.0)*(x11928.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11929.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x11928.value)))+IKsqr(((x11929.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x11928.value)), ((x11929.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11930=IKsin(j4);
IkReal x11931=IKcos(j4);
IkReal x11932=(cj5*r00);
IkReal x11933=(cj5*r20);
IkReal x11934=(r21*sj5);
IkReal x11935=(r01*sj5);
IkReal x11936=((1.0)*x11930);
IkReal x11937=((1.0)*x11931);
evalcond[0]=((-1.0)*r12*x11931);
evalcond[1]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r12*x11936)));
evalcond[2]=(((x11930*x11934))+(((-1.0)*x11933*x11936)));
evalcond[3]=((((-1.0)*x11935*x11937))+((x11931*x11932)));
evalcond[4]=((1.0)+((x11930*x11935))+(((-1.0)*x11932*x11936)));
evalcond[5]=((((-1.0)*x11934*x11937))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x11931*x11933)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11938=IKPowWithIntegerCheck(r12,-1);
if(!x11938.valid){
continue;
}
CheckValue<IkReal> x11939=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x11939.valid){
continue;
}
if( IKabs(((x11938.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11939.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x11938.value)*((((cj2*sj1))+((cj1*sj2))))))+IKsqr(((x11939.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x11938.value)*((((cj2*sj1))+((cj1*sj2))))), ((x11939.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11940=IKsin(j4);
IkReal x11941=IKcos(j4);
IkReal x11942=(cj5*r00);
IkReal x11943=(cj5*r20);
IkReal x11944=(r21*sj5);
IkReal x11945=(r01*sj5);
IkReal x11946=((1.0)*x11940);
IkReal x11947=((1.0)*x11941);
evalcond[0]=((-1.0)*r12*x11941);
evalcond[1]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r12*x11946)));
evalcond[2]=((((-1.0)*x11943*x11946))+((x11940*x11944)));
evalcond[3]=((((-1.0)*x11945*x11947))+((x11941*x11942)));
evalcond[4]=((1.0)+(((-1.0)*x11942*x11946))+((x11940*x11945)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x11944*x11947))+((x11941*x11943)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11948=IKPowWithIntegerCheck(r12,-1);
if(!x11948.valid){
continue;
}
CheckValue<IkReal> x11949=IKPowWithIntegerCheck(sj3,-1);
if(!x11949.valid){
continue;
}
CheckValue<IkReal> x11950=IKPowWithIntegerCheck(((((-1.0)*cj5*r00*sj3))+((r01*sj3*sj5))),-1);
if(!x11950.valid){
continue;
}
if( IKabs(((x11948.value)*(x11949.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11950.value)*((((cj3*cj5*r01))+((cj3*r00*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x11948.value)*(x11949.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))))+IKsqr(((x11950.value)*((((cj3*cj5*r01))+((cj3*r00*sj5))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x11948.value)*(x11949.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))), ((x11950.value)*((((cj3*cj5*r01))+((cj3*r00*sj5))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11951=IKsin(j4);
IkReal x11952=IKcos(j4);
IkReal x11953=(cj2*sj1);
IkReal x11954=(cj1*sj2);
IkReal x11955=(cj3*cj5);
IkReal x11956=(sj1*sj2);
IkReal x11957=((1.0)*r01);
IkReal x11958=(cj1*cj2);
IkReal x11959=((1.0)*r00);
IkReal x11960=(sj3*sj5);
IkReal x11961=((1.0)*r21);
IkReal x11962=(cj5*sj3);
IkReal x11963=((1.0)*r20);
IkReal x11964=(r00*x11952);
IkReal x11965=(r12*x11951);
IkReal x11966=((1.0)*cj3*sj5);
IkReal x11967=(cj5*x11951);
IkReal x11968=(sj5*x11951);
IkReal x11969=(r20*x11952);
IkReal x11970=(r21*x11952);
IkReal x11971=(r01*x11952);
IkReal x11972=(x11954+x11953);
evalcond[0]=((-1.0)*r12*x11952);
evalcond[1]=(x11972+((sj3*x11965)));
evalcond[2]=(((r21*x11968))+(((-1.0)*x11963*x11967)));
evalcond[3]=((1.0)+((r01*x11968))+(((-1.0)*x11959*x11967)));
evalcond[4]=(x11958+(((-1.0)*x11956))+(((-1.0)*cj3*x11965)));
evalcond[5]=((((-1.0)*x11952*x11959*x11962))+(((-1.0)*cj3*sj5*x11959))+(((-1.0)*x11955*x11957))+((x11960*x11971)));
evalcond[6]=((((-1.0)*x11957*x11962))+(((-1.0)*x11959*x11960))+((x11955*x11964))+(((-1.0)*cj3*sj5*x11952*x11957)));
evalcond[7]=(x11972+(((-1.0)*x11961*x11962))+((x11955*x11969))+(((-1.0)*cj3*sj5*x11952*x11961))+(((-1.0)*x11960*x11963)));
evalcond[8]=(x11956+(((-1.0)*x11958))+(((-1.0)*x11952*x11962*x11963))+(((-1.0)*cj3*sj5*x11963))+(((-1.0)*x11955*x11961))+((x11960*x11970)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11973=(r01*sj5);
IkReal x11974=(cj5*r00);
CheckValue<IkReal> x11975=IKPowWithIntegerCheck((x11973+(((-1.0)*x11974))),-1);
if(!x11975.valid){
continue;
}
CheckValue<IkReal> x11976=IKPowWithIntegerCheck((((cj3*x11974))+(((-1.0)*cj3*x11973))),-1);
if(!x11976.valid){
continue;
}
if( IKabs(((-1.0)*(x11975.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11976.value)*((((cj5*r01*sj3))+((r00*sj3*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x11975.value)))+IKsqr(((x11976.value)*((((cj5*r01*sj3))+((r00*sj3*sj5))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x11975.value)), ((x11976.value)*((((cj5*r01*sj3))+((r00*sj3*sj5))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11977=IKsin(j4);
IkReal x11978=IKcos(j4);
IkReal x11979=(cj2*sj1);
IkReal x11980=(cj1*sj2);
IkReal x11981=(cj3*cj5);
IkReal x11982=(sj1*sj2);
IkReal x11983=((1.0)*r01);
IkReal x11984=(cj1*cj2);
IkReal x11985=((1.0)*r00);
IkReal x11986=(sj3*sj5);
IkReal x11987=((1.0)*r21);
IkReal x11988=(cj5*sj3);
IkReal x11989=((1.0)*r20);
IkReal x11990=(r00*x11978);
IkReal x11991=(r12*x11977);
IkReal x11992=((1.0)*cj3*sj5);
IkReal x11993=(cj5*x11977);
IkReal x11994=(sj5*x11977);
IkReal x11995=(r20*x11978);
IkReal x11996=(r21*x11978);
IkReal x11997=(r01*x11978);
IkReal x11998=(x11980+x11979);
evalcond[0]=((-1.0)*r12*x11978);
evalcond[1]=(x11998+((sj3*x11991)));
evalcond[2]=((((-1.0)*x11989*x11993))+((r21*x11994)));
evalcond[3]=((1.0)+((r01*x11994))+(((-1.0)*x11985*x11993)));
evalcond[4]=(x11984+(((-1.0)*x11982))+(((-1.0)*cj3*x11991)));
evalcond[5]=((((-1.0)*x11981*x11983))+(((-1.0)*cj3*sj5*x11985))+((x11986*x11997))+(((-1.0)*x11978*x11985*x11988)));
evalcond[6]=((((-1.0)*cj3*sj5*x11978*x11983))+((x11981*x11990))+(((-1.0)*x11985*x11986))+(((-1.0)*x11983*x11988)));
evalcond[7]=(x11998+(((-1.0)*x11986*x11989))+(((-1.0)*x11987*x11988))+(((-1.0)*cj3*sj5*x11978*x11987))+((x11981*x11995)));
evalcond[8]=(x11982+(((-1.0)*x11981*x11987))+(((-1.0)*cj3*sj5*x11989))+(((-1.0)*x11984))+((x11986*x11996))+(((-1.0)*x11978*x11988*x11989)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11999=(r01*sj5);
IkReal x12000=((1.0)*cj5*r00);
CheckValue<IkReal> x12001=IKPowWithIntegerCheck((x11999+(((-1.0)*x12000))),-1);
if(!x12001.valid){
continue;
}
CheckValue<IkReal> x12002=IKPowWithIntegerCheck(((((-1.0)*sj3*x12000))+((sj3*x11999))),-1);
if(!x12002.valid){
continue;
}
if( IKabs(((-1.0)*(x12001.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12002.value)*((((cj3*cj5*r01))+((cj3*r00*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x12001.value)))+IKsqr(((x12002.value)*((((cj3*cj5*r01))+((cj3*r00*sj5))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x12001.value)), ((x12002.value)*((((cj3*cj5*r01))+((cj3*r00*sj5))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12003=IKsin(j4);
IkReal x12004=IKcos(j4);
IkReal x12005=(cj2*sj1);
IkReal x12006=(cj1*sj2);
IkReal x12007=(cj3*cj5);
IkReal x12008=(sj1*sj2);
IkReal x12009=((1.0)*r01);
IkReal x12010=(cj1*cj2);
IkReal x12011=((1.0)*r00);
IkReal x12012=(sj3*sj5);
IkReal x12013=((1.0)*r21);
IkReal x12014=(cj5*sj3);
IkReal x12015=((1.0)*r20);
IkReal x12016=(r00*x12004);
IkReal x12017=(r12*x12003);
IkReal x12018=((1.0)*cj3*sj5);
IkReal x12019=(cj5*x12003);
IkReal x12020=(sj5*x12003);
IkReal x12021=(r20*x12004);
IkReal x12022=(r21*x12004);
IkReal x12023=(r01*x12004);
IkReal x12024=(x12005+x12006);
evalcond[0]=((-1.0)*r12*x12004);
evalcond[1]=(((sj3*x12017))+x12024);
evalcond[2]=((((-1.0)*x12015*x12019))+((r21*x12020)));
evalcond[3]=((1.0)+(((-1.0)*x12011*x12019))+((r01*x12020)));
evalcond[4]=((((-1.0)*x12008))+x12010+(((-1.0)*cj3*x12017)));
evalcond[5]=((((-1.0)*x12004*x12011*x12014))+(((-1.0)*x12007*x12009))+((x12012*x12023))+(((-1.0)*cj3*sj5*x12011)));
evalcond[6]=((((-1.0)*x12011*x12012))+((x12007*x12016))+(((-1.0)*x12009*x12014))+(((-1.0)*cj3*sj5*x12004*x12009)));
evalcond[7]=((((-1.0)*cj3*sj5*x12004*x12013))+x12024+(((-1.0)*x12013*x12014))+(((-1.0)*x12012*x12015))+((x12007*x12021)));
evalcond[8]=((((-1.0)*x12004*x12014*x12015))+((x12012*x12022))+x12008+(((-1.0)*x12007*x12013))+(((-1.0)*cj3*sj5*x12015))+(((-1.0)*x12010)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12025=cj5*cj5;
IkReal x12026=(r00*sj5);
IkReal x12027=(r21*sj3);
IkReal x12028=(cj3*r01);
IkReal x12029=((1.0)*r22);
IkReal x12030=(cj5*sj5);
IkReal x12031=(r20*x12025);
IkReal x12032=(cj3*r00*r21);
CheckValue<IkReal> x12033 = IKatan2WithCheck(IkReal(((((-1.0)*cj3*x12026*x12029))+(((-1.0)*cj5*x12028*x12029)))),IkReal((((cj3*cj5*r20*x12026))+(((-1.0)*x12032))+(((-1.0)*r21*x12028*x12030))+((x12028*x12031))+((x12025*x12032)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12033.valid){
continue;
}
CheckValue<IkReal> x12034=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj3*x12031))+((cj5*x12026*x12027))+(((-1.0)*r01*x12027))+((r01*r20*sj3*x12030))+(((-1.0)*r02*sj3*x12029))+((r01*x12025*x12027)))),-1);
if(!x12034.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12033.value)+(((1.5707963267949)*(x12034.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12035=IKsin(j4);
IkReal x12036=IKcos(j4);
IkReal x12037=(cj2*sj1);
IkReal x12038=(cj1*sj2);
IkReal x12039=(cj3*cj5);
IkReal x12040=((1.0)*r10);
IkReal x12041=(sj1*sj2);
IkReal x12042=(cj3*sj5);
IkReal x12043=(cj1*cj2);
IkReal x12044=((1.0)*r20);
IkReal x12045=((1.0)*r01);
IkReal x12046=((1.0)*r00);
IkReal x12047=((1.0)*r11);
IkReal x12048=(cj5*sj3);
IkReal x12049=(sj3*sj5);
IkReal x12050=((1.0)*r21);
IkReal x12051=((1.0)*x12036);
IkReal x12052=(cj5*x12035);
IkReal x12053=(r12*x12035);
IkReal x12054=(sj5*x12035);
IkReal x12055=(sj3*x12035);
IkReal x12056=(x12038+x12037);
IkReal x12057=((1.0)*cj3*x12035);
evalcond[0]=((((-1.0)*x12044*x12052))+(((-1.0)*r22*x12051))+((r21*x12054)));
evalcond[1]=((((-1.0)*x12040*x12052))+(((-1.0)*r12*x12051))+((r11*x12054)));
evalcond[2]=((1.0)+(((-1.0)*x12046*x12052))+((r01*x12054))+(((-1.0)*r02*x12051)));
evalcond[3]=((((-1.0)*x12036*x12046*x12048))+((r02*x12055))+(((-1.0)*x12042*x12046))+((r01*x12036*x12049))+(((-1.0)*x12039*x12045)));
evalcond[4]=((((-1.0)*x12045*x12048))+(((-1.0)*x12046*x12049))+((r00*x12036*x12039))+(((-1.0)*x12036*x12042*x12045))+(((-1.0)*r02*x12057)));
evalcond[5]=((((-1.0)*x12040*x12042))+(((-1.0)*x12036*x12040*x12048))+((r11*x12036*x12049))+x12056+((sj3*x12053))+(((-1.0)*x12039*x12047)));
evalcond[6]=((((-1.0)*x12043))+((r22*x12055))+x12041+((r21*x12036*x12049))+(((-1.0)*x12036*x12044*x12048))+(((-1.0)*x12042*x12044))+(((-1.0)*x12039*x12050)));
evalcond[7]=((((-1.0)*x12048*x12050))+((r20*x12036*x12039))+x12056+(((-1.0)*x12044*x12049))+(((-1.0)*r22*x12057))+(((-1.0)*x12036*x12042*x12050)));
evalcond[8]=((((-1.0)*cj3*x12053))+(((-1.0)*x12040*x12049))+(((-1.0)*x12036*x12042*x12047))+(((-1.0)*x12041))+(((-1.0)*x12047*x12048))+x12043+((r10*x12036*x12039)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12058=((1.0)*cj5);
CheckValue<IkReal> x12059 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x12058))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12059.valid){
continue;
}
CheckValue<IkReal> x12060=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x12058))+(((-1.0)*r20*sj5)))),-1);
if(!x12060.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12059.value)+(((1.5707963267949)*(x12060.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12061=IKsin(j4);
IkReal x12062=IKcos(j4);
IkReal x12063=(cj2*sj1);
IkReal x12064=(cj1*sj2);
IkReal x12065=(cj3*cj5);
IkReal x12066=((1.0)*r10);
IkReal x12067=(sj1*sj2);
IkReal x12068=(cj3*sj5);
IkReal x12069=(cj1*cj2);
IkReal x12070=((1.0)*r20);
IkReal x12071=((1.0)*r01);
IkReal x12072=((1.0)*r00);
IkReal x12073=((1.0)*r11);
IkReal x12074=(cj5*sj3);
IkReal x12075=(sj3*sj5);
IkReal x12076=((1.0)*r21);
IkReal x12077=((1.0)*x12062);
IkReal x12078=(cj5*x12061);
IkReal x12079=(r12*x12061);
IkReal x12080=(sj5*x12061);
IkReal x12081=(sj3*x12061);
IkReal x12082=(x12063+x12064);
IkReal x12083=((1.0)*cj3*x12061);
evalcond[0]=(((r21*x12080))+(((-1.0)*r22*x12077))+(((-1.0)*x12070*x12078)));
evalcond[1]=((((-1.0)*x12066*x12078))+(((-1.0)*r12*x12077))+((r11*x12080)));
evalcond[2]=((1.0)+(((-1.0)*x12072*x12078))+((r01*x12080))+(((-1.0)*r02*x12077)));
evalcond[3]=((((-1.0)*x12062*x12072*x12074))+((r02*x12081))+((r01*x12062*x12075))+(((-1.0)*x12065*x12071))+(((-1.0)*x12068*x12072)));
evalcond[4]=((((-1.0)*x12072*x12075))+(((-1.0)*x12062*x12068*x12071))+(((-1.0)*x12071*x12074))+(((-1.0)*r02*x12083))+((r00*x12062*x12065)));
evalcond[5]=((((-1.0)*x12066*x12068))+((r11*x12062*x12075))+x12082+((sj3*x12079))+(((-1.0)*x12065*x12073))+(((-1.0)*x12062*x12066*x12074)));
evalcond[6]=((((-1.0)*x12069))+(((-1.0)*x12062*x12070*x12074))+x12067+((r22*x12081))+(((-1.0)*x12065*x12076))+((r21*x12062*x12075))+(((-1.0)*x12068*x12070)));
evalcond[7]=((((-1.0)*x12062*x12068*x12076))+((r20*x12062*x12065))+x12082+(((-1.0)*r22*x12083))+(((-1.0)*x12070*x12075))+(((-1.0)*x12074*x12076)));
evalcond[8]=((((-1.0)*x12067))+(((-1.0)*cj3*x12079))+(((-1.0)*x12073*x12074))+(((-1.0)*x12062*x12068*x12073))+((r10*x12062*x12065))+(((-1.0)*x12066*x12075))+x12069);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12084 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12084.valid){
continue;
}
CheckValue<IkReal> x12085=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x12085.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12084.value)+(((1.5707963267949)*(x12085.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12086=IKsin(j4);
IkReal x12087=IKcos(j4);
IkReal x12088=(cj2*sj1);
IkReal x12089=(cj1*sj2);
IkReal x12090=(cj3*cj5);
IkReal x12091=((1.0)*r10);
IkReal x12092=(sj1*sj2);
IkReal x12093=(cj3*sj5);
IkReal x12094=(cj1*cj2);
IkReal x12095=((1.0)*r20);
IkReal x12096=((1.0)*r01);
IkReal x12097=((1.0)*r00);
IkReal x12098=((1.0)*r11);
IkReal x12099=(cj5*sj3);
IkReal x12100=(sj3*sj5);
IkReal x12101=((1.0)*r21);
IkReal x12102=((1.0)*x12087);
IkReal x12103=(cj5*x12086);
IkReal x12104=(r12*x12086);
IkReal x12105=(sj5*x12086);
IkReal x12106=(sj3*x12086);
IkReal x12107=(x12088+x12089);
IkReal x12108=((1.0)*cj3*x12086);
evalcond[0]=((((-1.0)*r22*x12102))+(((-1.0)*x12095*x12103))+((r21*x12105)));
evalcond[1]=((((-1.0)*r12*x12102))+(((-1.0)*x12091*x12103))+((r11*x12105)));
evalcond[2]=((1.0)+((r01*x12105))+(((-1.0)*x12097*x12103))+(((-1.0)*r02*x12102)));
evalcond[3]=((((-1.0)*x12093*x12097))+((r02*x12106))+((r01*x12087*x12100))+(((-1.0)*x12087*x12097*x12099))+(((-1.0)*x12090*x12096)));
evalcond[4]=((((-1.0)*x12096*x12099))+(((-1.0)*x12087*x12093*x12096))+((r00*x12087*x12090))+(((-1.0)*x12097*x12100))+(((-1.0)*r02*x12108)));
evalcond[5]=((((-1.0)*x12087*x12091*x12099))+x12107+(((-1.0)*x12090*x12098))+((r11*x12087*x12100))+((sj3*x12104))+(((-1.0)*x12091*x12093)));
evalcond[6]=((((-1.0)*x12093*x12095))+(((-1.0)*x12094))+((r21*x12087*x12100))+x12092+(((-1.0)*x12090*x12101))+((r22*x12106))+(((-1.0)*x12087*x12095*x12099)));
evalcond[7]=(((r20*x12087*x12090))+(((-1.0)*r22*x12108))+(((-1.0)*x12087*x12093*x12101))+x12107+(((-1.0)*x12099*x12101))+(((-1.0)*x12095*x12100)));
evalcond[8]=((((-1.0)*x12092))+(((-1.0)*x12091*x12100))+(((-1.0)*x12098*x12099))+(((-1.0)*x12087*x12093*x12098))+((r10*x12087*x12090))+x12094+(((-1.0)*cj3*x12104)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x12109=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x12109;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x12109);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x12110=((1.0)*cj5);
IkReal x12111=((((-1.0)*r11*x12110))+(((-1.0)*r10*sj5)));
j4eval[0]=x12111;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x12110))))));
j4eval[2]=IKsign(x12111);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x12112=cj5*cj5;
IkReal x12113=((1.0)*sj3);
IkReal x12114=(r01*r21);
IkReal x12115=(cj5*sj3*sj5);
IkReal x12116=(((r01*r20*x12115))+((sj3*x12112*x12114))+(((-1.0)*r02*r22*x12113))+(((-1.0)*r00*r20*x12112*x12113))+((r00*r21*x12115))+(((-1.0)*x12113*x12114)));
j4eval[0]=x12116;
j4eval[1]=IKsign(x12116);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal x12117=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x12117;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x12117);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal x12118=((1.0)*cj5);
IkReal x12119=((((-1.0)*r11*x12118))+(((-1.0)*r10*sj5)));
j4eval[0]=x12119;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x12118))))));
j4eval[2]=IKsign(x12119);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal x12120=cj5*cj5;
IkReal x12121=r01*r01;
IkReal x12122=(r01*sj5);
IkReal x12123=(cj5*r00);
IkReal x12124=((((-1.0)*(r02*r02)))+((x12120*x12121))+(((2.0)*x12122*x12123))+(((-1.0)*x12120*(r00*r00)))+(((-1.0)*x12121)));
j4eval[0]=x12124;
j4eval[1]=IKsign(x12124);
j4eval[2]=((IKabs(r02))+(IKabs((x12123+(((-1.0)*x12122))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x12125=((-1.0)*py);
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x12125);
rxp0_2=(py*r00);
rxp1_0=(r21*x12125);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=(((r01*sj5))+(((-1.0)*cj5*r00)));
j4eval[1]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12126=((-1.0)*py);
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x12126);
rxp0_2=(py*r00);
rxp1_0=(r21*x12126);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=r12;
j4eval[1]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12127=((1.0)*cj2);
CheckValue<IkReal> x12128=IKPowWithIntegerCheck(r12,-1);
if(!x12128.valid){
continue;
}
CheckValue<IkReal> x12129=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x12129.valid){
continue;
}
if( IKabs(((x12128.value)*(((((-1.0)*cj1*x12127))+((sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12129.value)*(((((-1.0)*sj1*x12127))+(((-1.0)*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12128.value)*(((((-1.0)*cj1*x12127))+((sj1*sj2))))))+IKsqr(((x12129.value)*(((((-1.0)*sj1*x12127))+(((-1.0)*cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12128.value)*(((((-1.0)*cj1*x12127))+((sj1*sj2))))), ((x12129.value)*(((((-1.0)*sj1*x12127))+(((-1.0)*cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12130=IKsin(j4);
IkReal x12131=IKcos(j4);
IkReal x12132=(cj5*r00);
IkReal x12133=(cj5*r20);
IkReal x12134=(r21*sj5);
IkReal x12135=(r01*sj5);
IkReal x12136=((1.0)*x12130);
IkReal x12137=((1.0)*x12131);
evalcond[0]=((-1.0)*r12*x12131);
evalcond[1]=((((-1.0)*x12133*x12136))+((x12130*x12134)));
evalcond[2]=(((x12131*x12132))+(((-1.0)*x12135*x12137)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r12*x12136)));
evalcond[4]=((-1.0)+(((-1.0)*x12132*x12136))+((x12130*x12135)));
evalcond[5]=(((cj2*sj1))+((x12131*x12133))+((cj1*sj2))+(((-1.0)*x12134*x12137)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12138=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*cj5*r00))),-1);
if(!x12138.valid){
continue;
}
CheckValue<IkReal> x12139=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x12139.valid){
continue;
}
if( IKabs(x12138.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12139.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x12138.value)+IKsqr(((x12139.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x12138.value, ((x12139.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12140=IKsin(j4);
IkReal x12141=IKcos(j4);
IkReal x12142=(cj5*r00);
IkReal x12143=(cj5*r20);
IkReal x12144=(r21*sj5);
IkReal x12145=(r01*sj5);
IkReal x12146=((1.0)*x12140);
IkReal x12147=((1.0)*x12141);
evalcond[0]=((-1.0)*r12*x12141);
evalcond[1]=(((x12140*x12144))+(((-1.0)*x12143*x12146)));
evalcond[2]=((((-1.0)*x12145*x12147))+((x12141*x12142)));
evalcond[3]=((((-1.0)*cj1*cj2))+(((-1.0)*r12*x12146))+((sj1*sj2)));
evalcond[4]=((-1.0)+(((-1.0)*x12142*x12146))+((x12140*x12145)));
evalcond[5]=(((cj2*sj1))+(((-1.0)*x12144*x12147))+((cj1*sj2))+((x12141*x12143)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x12148=((-1.0)*pz);
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x12148);
rxp1_0=(pz*r11);
rxp1_1=(r01*x12148);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=(((r01*sj5))+(((-1.0)*cj5*r00)));
j4eval[1]=(((cj5*r10))+(((-1.0)*r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12149=((-1.0)*pz);
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x12149);
rxp1_0=(pz*r11);
rxp1_1=(r01*x12149);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=r22;
j4eval[1]=(((cj5*r10))+(((-1.0)*r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12150=IKPowWithIntegerCheck(r22,-1);
if(!x12150.valid){
continue;
}
CheckValue<IkReal> x12151=IKPowWithIntegerCheck((((cj5*r10))+(((-1.0)*r11*sj5))),-1);
if(!x12151.valid){
continue;
}
if( IKabs(((x12150.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12151.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12150.value)*((((cj2*sj1))+((cj1*sj2))))))+IKsqr(((x12151.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12150.value)*((((cj2*sj1))+((cj1*sj2))))), ((x12151.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12152=IKsin(j4);
IkReal x12153=IKcos(j4);
IkReal x12154=(cj5*x12153);
IkReal x12155=(sj5*x12152);
IkReal x12156=((1.0)*cj5*x12152);
IkReal x12157=((1.0)*sj5*x12153);
evalcond[0]=((-1.0)*r22*x12153);
evalcond[1]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x12152)));
evalcond[2]=(((r11*x12155))+(((-1.0)*r10*x12156)));
evalcond[3]=((((-1.0)*r01*x12157))+((r00*x12154)));
evalcond[4]=((-1.0)+(((-1.0)*r00*x12156))+((r01*x12155)));
evalcond[5]=(((r10*x12154))+(((-1.0)*r11*x12157))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12158=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*cj5*r00))),-1);
if(!x12158.valid){
continue;
}
CheckValue<IkReal> x12159=IKPowWithIntegerCheck((((cj5*r10))+(((-1.0)*r11*sj5))),-1);
if(!x12159.valid){
continue;
}
if( IKabs(x12158.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12159.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x12158.value)+IKsqr(((x12159.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x12158.value, ((x12159.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12160=IKsin(j4);
IkReal x12161=IKcos(j4);
IkReal x12162=(cj5*x12161);
IkReal x12163=(sj5*x12160);
IkReal x12164=((1.0)*cj5*x12160);
IkReal x12165=((1.0)*sj5*x12161);
evalcond[0]=((-1.0)*r22*x12161);
evalcond[1]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x12160)));
evalcond[2]=((((-1.0)*r10*x12164))+((r11*x12163)));
evalcond[3]=(((r00*x12162))+(((-1.0)*r01*x12165)));
evalcond[4]=((-1.0)+(((-1.0)*r00*x12164))+((r01*x12163)));
evalcond[5]=(((r10*x12162))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r11*x12165)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12166=cj5*cj5;
IkReal x12167=r01*r01;
IkReal x12168=(r01*sj5);
IkReal x12169=(cj5*r00);
CheckValue<IkReal> x12170 = IKatan2WithCheck(IkReal(((((-1.0)*x12168))+x12169)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x12170.valid){
continue;
}
CheckValue<IkReal> x12171=IKPowWithIntegerCheck(IKsign((((x12166*x12167))+(((-1.0)*x12167))+(((-1.0)*(r02*r02)))+(((2.0)*x12168*x12169))+(((-1.0)*x12166*(r00*r00))))),-1);
if(!x12171.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12170.value)+(((1.5707963267949)*(x12171.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12172=IKsin(j4);
IkReal x12173=IKcos(j4);
IkReal x12174=(cj5*r10);
IkReal x12175=(r01*sj5);
IkReal x12176=(cj5*r00);
IkReal x12177=(cj5*r20);
IkReal x12178=((1.0)*x12173);
IkReal x12179=((1.0)*x12172);
IkReal x12180=(sj5*x12172);
evalcond[0]=((((-1.0)*r22*x12178))+(((-1.0)*x12177*x12179))+((r21*x12180)));
evalcond[1]=(((r11*x12180))+(((-1.0)*x12174*x12179))+(((-1.0)*r12*x12178)));
evalcond[2]=(((x12173*x12176))+(((-1.0)*x12175*x12178))+(((-1.0)*r02*x12179)));
evalcond[3]=((-1.0)+(((-1.0)*x12176*x12179))+((x12172*x12175))+(((-1.0)*r02*x12178)));
evalcond[4]=(((cj2*sj1))+((x12173*x12177))+(((-1.0)*r22*x12179))+((cj1*sj2))+(((-1.0)*r21*sj5*x12178)));
evalcond[5]=(((x12173*x12174))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r12*x12179))+(((-1.0)*r11*sj5*x12178)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12181=((1.0)*cj5);
CheckValue<IkReal> x12182=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x12181)))),-1);
if(!x12182.valid){
continue;
}
CheckValue<IkReal> x12183 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x12181)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12183.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12182.value)))+(x12183.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12184=IKsin(j4);
IkReal x12185=IKcos(j4);
IkReal x12186=(cj5*r10);
IkReal x12187=(r01*sj5);
IkReal x12188=(cj5*r00);
IkReal x12189=(cj5*r20);
IkReal x12190=((1.0)*x12185);
IkReal x12191=((1.0)*x12184);
IkReal x12192=(sj5*x12184);
evalcond[0]=(((r21*x12192))+(((-1.0)*x12189*x12191))+(((-1.0)*r22*x12190)));
evalcond[1]=(((r11*x12192))+(((-1.0)*x12186*x12191))+(((-1.0)*r12*x12190)));
evalcond[2]=((((-1.0)*r02*x12191))+(((-1.0)*x12187*x12190))+((x12185*x12188)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x12190))+((x12184*x12187))+(((-1.0)*x12188*x12191)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r21*sj5*x12190))+(((-1.0)*r22*x12191))+((x12185*x12189)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r11*sj5*x12190))+(((-1.0)*r12*x12191))+((x12185*x12186)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12193=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x12193.valid){
continue;
}
CheckValue<IkReal> x12194 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12194.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12193.value)))+(x12194.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12195=IKsin(j4);
IkReal x12196=IKcos(j4);
IkReal x12197=(cj5*r10);
IkReal x12198=(r01*sj5);
IkReal x12199=(cj5*r00);
IkReal x12200=(cj5*r20);
IkReal x12201=((1.0)*x12196);
IkReal x12202=((1.0)*x12195);
IkReal x12203=(sj5*x12195);
evalcond[0]=((((-1.0)*x12200*x12202))+(((-1.0)*r22*x12201))+((r21*x12203)));
evalcond[1]=((((-1.0)*x12197*x12202))+(((-1.0)*r12*x12201))+((r11*x12203)));
evalcond[2]=((((-1.0)*r02*x12202))+(((-1.0)*x12198*x12201))+((x12196*x12199)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x12201))+((x12195*x12198))+(((-1.0)*x12199*x12202)));
evalcond[4]=((((-1.0)*r21*sj5*x12201))+((cj2*sj1))+((cj1*sj2))+((x12196*x12200))+(((-1.0)*r22*x12202)));
evalcond[5]=((((-1.0)*r11*sj5*x12201))+(((-1.0)*r12*x12202))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x12196*x12197)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x12204=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x12204;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x12204);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x12205=((1.0)*cj5);
IkReal x12206=((((-1.0)*r10*sj5))+(((-1.0)*r11*x12205)));
j4eval[0]=x12206;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x12205))))));
j4eval[2]=IKsign(x12206);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x12207=cj5*cj5;
IkReal x12208=r01*r01;
IkReal x12209=(cj5*r00);
IkReal x12210=(r01*sj5);
IkReal x12211=((((-2.0)*x12209*x12210))+x12208+(((-1.0)*x12207*x12208))+((x12207*(r00*r00)))+(r02*r02));
j4eval[0]=x12211;
j4eval[1]=IKsign(x12211);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x12209))+x12210))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x12212=((-1.0)*py);
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x12212);
rxp0_2=(py*r00);
rxp1_0=(r21*x12212);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal x12213=((1.0)*cj5);
j4eval[0]=(((r01*sj5))+(((-1.0)*r00*x12213)));
j4eval[1]=(((r21*sj5))+(((-1.0)*r20*x12213)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12214=((-1.0)*py);
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x12214);
rxp0_2=(py*r00);
rxp1_0=(r21*x12214);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=r12;
j4eval[1]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12215=((1.0)*sj1);
CheckValue<IkReal> x12216=IKPowWithIntegerCheck(r12,-1);
if(!x12216.valid){
continue;
}
CheckValue<IkReal> x12217=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x12217.valid){
continue;
}
if( IKabs(((x12216.value)*((((cj1*cj2))+(((-1.0)*sj2*x12215)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12217.value)*(((((-1.0)*cj1*sj2))+(((-1.0)*cj2*x12215)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12216.value)*((((cj1*cj2))+(((-1.0)*sj2*x12215))))))+IKsqr(((x12217.value)*(((((-1.0)*cj1*sj2))+(((-1.0)*cj2*x12215))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12216.value)*((((cj1*cj2))+(((-1.0)*sj2*x12215))))), ((x12217.value)*(((((-1.0)*cj1*sj2))+(((-1.0)*cj2*x12215))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12218=IKsin(j4);
IkReal x12219=IKcos(j4);
IkReal x12220=((1.0)*cj5*r00);
IkReal x12221=(sj5*x12219);
IkReal x12222=(sj5*x12218);
IkReal x12223=((1.0)*cj5*r20);
evalcond[0]=((-1.0)*r12*x12219);
evalcond[1]=(((r12*x12218))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
evalcond[2]=(((r21*x12222))+(((-1.0)*x12218*x12223)));
evalcond[3]=((((-1.0)*x12219*x12220))+((r01*x12221)));
evalcond[4]=((-1.0)+((r01*x12222))+(((-1.0)*x12218*x12220)));
evalcond[5]=(((cj2*sj1))+((cj1*sj2))+((r21*x12221))+(((-1.0)*x12219*x12223)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12224=((1.0)*cj5);
CheckValue<IkReal> x12225=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*r00*x12224))),-1);
if(!x12225.valid){
continue;
}
CheckValue<IkReal> x12226=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*r20*x12224))),-1);
if(!x12226.valid){
continue;
}
if( IKabs(x12225.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12226.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x12225.value)+IKsqr(((x12226.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x12225.value, ((x12226.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12227=IKsin(j4);
IkReal x12228=IKcos(j4);
IkReal x12229=((1.0)*cj5*r00);
IkReal x12230=(sj5*x12228);
IkReal x12231=(sj5*x12227);
IkReal x12232=((1.0)*cj5*r20);
evalcond[0]=((-1.0)*r12*x12228);
evalcond[1]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r12*x12227)));
evalcond[2]=((((-1.0)*x12227*x12232))+((r21*x12231)));
evalcond[3]=(((r01*x12230))+(((-1.0)*x12228*x12229)));
evalcond[4]=((-1.0)+((r01*x12231))+(((-1.0)*x12227*x12229)));
evalcond[5]=(((cj2*sj1))+((cj1*sj2))+((r21*x12230))+(((-1.0)*x12228*x12232)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x12233=((-1.0)*pz);
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x12233);
rxp1_0=(pz*r11);
rxp1_1=(r01*x12233);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x12234=((1.0)*cj5);
j4eval[0]=(((r01*sj5))+(((-1.0)*r00*x12234)));
j4eval[1]=(((r11*sj5))+(((-1.0)*r10*x12234)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12235=((-1.0)*pz);
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x12235);
rxp1_0=(pz*r11);
rxp1_1=(r01*x12235);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=r22;
j4eval[1]=((((-1.0)*cj5*r10))+((r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12236=((1.0)*sj1);
CheckValue<IkReal> x12237=IKPowWithIntegerCheck(r22,-1);
if(!x12237.valid){
continue;
}
CheckValue<IkReal> x12238=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x12238.valid){
continue;
}
if( IKabs(((x12237.value)*(((((-1.0)*cj2*x12236))+(((-1.0)*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12238.value)*(((((-1.0)*sj2*x12236))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12237.value)*(((((-1.0)*cj2*x12236))+(((-1.0)*cj1*sj2))))))+IKsqr(((x12238.value)*(((((-1.0)*sj2*x12236))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12237.value)*(((((-1.0)*cj2*x12236))+(((-1.0)*cj1*sj2))))), ((x12238.value)*(((((-1.0)*sj2*x12236))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12239=IKsin(j4);
IkReal x12240=IKcos(j4);
IkReal x12241=((1.0)*cj5*r00);
IkReal x12242=(sj5*x12240);
IkReal x12243=((1.0)*cj5*r10);
IkReal x12244=(sj5*x12239);
evalcond[0]=((-1.0)*r22*x12240);
evalcond[1]=(((cj2*sj1))+((cj1*sj2))+((r22*x12239)));
evalcond[2]=(((r11*x12244))+(((-1.0)*x12239*x12243)));
evalcond[3]=(((r01*x12242))+(((-1.0)*x12240*x12241)));
evalcond[4]=((-1.0)+(((-1.0)*x12239*x12241))+((r01*x12244)));
evalcond[5]=(((r11*x12242))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x12240*x12243)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12245=((1.0)*cj5);
CheckValue<IkReal> x12246=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*r00*x12245))),-1);
if(!x12246.valid){
continue;
}
CheckValue<IkReal> x12247=IKPowWithIntegerCheck(((((-1.0)*r10*x12245))+((r11*sj5))),-1);
if(!x12247.valid){
continue;
}
if( IKabs(x12246.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12247.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x12246.value)+IKsqr(((x12247.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x12246.value, ((x12247.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12248=IKsin(j4);
IkReal x12249=IKcos(j4);
IkReal x12250=((1.0)*cj5*r00);
IkReal x12251=(sj5*x12249);
IkReal x12252=((1.0)*cj5*r10);
IkReal x12253=(sj5*x12248);
evalcond[0]=((-1.0)*r22*x12249);
evalcond[1]=(((cj2*sj1))+((cj1*sj2))+((r22*x12248)));
evalcond[2]=((((-1.0)*x12248*x12252))+((r11*x12253)));
evalcond[3]=((((-1.0)*x12249*x12250))+((r01*x12251)));
evalcond[4]=((-1.0)+(((-1.0)*x12248*x12250))+((r01*x12253)));
evalcond[5]=((((-1.0)*x12249*x12252))+(((-1.0)*cj1*cj2))+((r11*x12251))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12254=cj5*cj5;
IkReal x12255=r01*r01;
IkReal x12256=(r01*sj5);
IkReal x12257=(cj5*r00);
CheckValue<IkReal> x12258 = IKatan2WithCheck(IkReal((x12256+(((-1.0)*x12257)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x12258.valid){
continue;
}
CheckValue<IkReal> x12259=IKPowWithIntegerCheck(IKsign(((((-2.0)*x12256*x12257))+(((-1.0)*x12254*x12255))+x12255+(r02*r02)+((x12254*(r00*r00))))),-1);
if(!x12259.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12258.value)+(((1.5707963267949)*(x12259.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12260=IKcos(j4);
IkReal x12261=IKsin(j4);
IkReal x12262=(cj5*r00);
IkReal x12263=(cj5*r10);
IkReal x12264=(r21*sj5);
IkReal x12265=(cj5*r20);
IkReal x12266=((1.0)*x12260);
IkReal x12267=((1.0)*x12261);
IkReal x12268=(sj5*x12261);
IkReal x12269=(sj5*x12260);
evalcond[0]=(((r01*x12269))+(((-1.0)*x12262*x12266))+((r02*x12261)));
evalcond[1]=((((-1.0)*x12265*x12267))+((x12261*x12264))+(((-1.0)*r22*x12266)));
evalcond[2]=((((-1.0)*r12*x12266))+((r11*x12268))+(((-1.0)*x12263*x12267)));
evalcond[3]=((-1.0)+((r01*x12268))+(((-1.0)*r02*x12266))+(((-1.0)*x12262*x12267)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x12260*x12264))+(((-1.0)*x12265*x12266))+((r22*x12261)));
evalcond[5]=(((r12*x12261))+((r11*x12269))+(((-1.0)*x12263*x12266))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12270=((1.0)*cj5);
CheckValue<IkReal> x12271 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x12270)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12271.valid){
continue;
}
CheckValue<IkReal> x12272=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x12270)))),-1);
if(!x12272.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12271.value)+(((1.5707963267949)*(x12272.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12273=IKcos(j4);
IkReal x12274=IKsin(j4);
IkReal x12275=(cj5*r00);
IkReal x12276=(cj5*r10);
IkReal x12277=(r21*sj5);
IkReal x12278=(cj5*r20);
IkReal x12279=((1.0)*x12273);
IkReal x12280=((1.0)*x12274);
IkReal x12281=(sj5*x12274);
IkReal x12282=(sj5*x12273);
evalcond[0]=(((r02*x12274))+((r01*x12282))+(((-1.0)*x12275*x12279)));
evalcond[1]=((((-1.0)*x12278*x12280))+(((-1.0)*r22*x12279))+((x12274*x12277)));
evalcond[2]=((((-1.0)*x12276*x12280))+((r11*x12281))+(((-1.0)*r12*x12279)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x12279))+(((-1.0)*x12275*x12280))+((r01*x12281)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x12273*x12277))+(((-1.0)*x12278*x12279))+((r22*x12274)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r11*x12282))+(((-1.0)*x12276*x12279))+((r12*x12274)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12283=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x12283.valid){
continue;
}
CheckValue<IkReal> x12284 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12284.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12283.value)))+(x12284.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12285=IKcos(j4);
IkReal x12286=IKsin(j4);
IkReal x12287=(cj5*r00);
IkReal x12288=(cj5*r10);
IkReal x12289=(r21*sj5);
IkReal x12290=(cj5*r20);
IkReal x12291=((1.0)*x12285);
IkReal x12292=((1.0)*x12286);
IkReal x12293=(sj5*x12286);
IkReal x12294=(sj5*x12285);
evalcond[0]=(((r01*x12294))+((r02*x12286))+(((-1.0)*x12287*x12291)));
evalcond[1]=((((-1.0)*x12290*x12292))+((x12286*x12289))+(((-1.0)*r22*x12291)));
evalcond[2]=(((r11*x12293))+(((-1.0)*x12288*x12292))+(((-1.0)*r12*x12291)));
evalcond[3]=((-1.0)+((r01*x12293))+(((-1.0)*x12287*x12292))+(((-1.0)*r02*x12291)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x12290*x12291))+((r22*x12286))+((cj1*sj2))+((x12285*x12289)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r11*x12294))+((r12*x12286))+(((-1.0)*x12288*x12291)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x12295=((-1.0)*r10);
IkReal x12297 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x12297)==0){
continue;
}
IkReal x12296=pow(x12297,-0.5);
CheckValue<IkReal> x12298 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x12295),IKFAST_ATAN2_MAGTHRESH);
if(!x12298.valid){
continue;
}
IkReal gconst30=((-1.0)*(x12298.value));
IkReal gconst31=(r11*x12296);
IkReal gconst32=(x12295*x12296);
CheckValue<IkReal> x12299 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12299.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x12299.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x12300=((-1.0)*r10);
IkReal x12301=x12296;
CheckValue<IkReal> x12303 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x12300),IKFAST_ATAN2_MAGTHRESH);
if(!x12303.valid){
continue;
}
IkReal x12302=((-1.0)*(x12303.value));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst31;
cj5=gconst32;
j5=x12302;
IkReal gconst30=x12302;
IkReal gconst31=(r11*x12301);
IkReal gconst32=(x12300*x12301);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x12304=((-1.0)*r10);
IkReal x12305=x12296;
CheckValue<IkReal> x12307 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x12304),IKFAST_ATAN2_MAGTHRESH);
if(!x12307.valid){
continue;
}
IkReal x12306=((-1.0)*(x12307.value));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst31;
cj5=gconst32;
j5=x12306;
IkReal gconst30=x12306;
IkReal gconst31=(r11*x12305);
IkReal gconst32=(x12304*x12305);
CheckValue<IkReal> x12315=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r12*r12)))),-1);
if(!x12315.valid){
continue;
}
IkReal x12308=x12315.value;
IkReal x12309=(cj3*x12308);
IkReal x12310=(r00*x12309);
IkReal x12311=(r21*x12309);
IkReal x12312=(r20*x12309);
IkReal x12313=(r01*x12309);
IkReal x12314=(r10*r11*x12309);
j4eval[0]=IKsign((((r01*r10*r11*x12312))+((r10*r11*r21*x12310))+((r20*x12310*(r10*r10)))+((r01*x12311*(r11*r11)))+((cj3*r02*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12316=gconst32*gconst32;
IkReal x12317=gconst31*gconst31;
IkReal x12318=((1.0)*sj3);
IkReal x12319=(gconst31*r00);
IkReal x12320=(cj3*r20);
IkReal x12321=(gconst32*r01);
IkReal x12322=((1.0)*cj3);
IkReal x12323=(r21*x12317);
IkReal x12324=(r22*x12322);
CheckValue<IkReal> x12325=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*r20*x12316*x12318))+(((-1.0)*r02*r22*x12318))+((gconst31*r20*sj3*x12321))+((gconst32*r21*sj3*x12319))+(((-1.0)*r01*x12318*x12323)))),-1);
if(!x12325.valid){
continue;
}
CheckValue<IkReal> x12326 = IKatan2WithCheck(IkReal(((((-1.0)*x12319*x12324))+(((-1.0)*x12321*x12324)))),IkReal(((((-1.0)*r00*x12322*x12323))+((gconst32*x12319*x12320))+(((-1.0)*gconst31*r21*x12321*x12322))+((r01*x12316*x12320)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12326.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12325.value)))+(x12326.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12327=IKsin(j4);
IkReal x12328=IKcos(j4);
IkReal x12329=(sj1*sj2);
IkReal x12330=((1.0)*gconst32);
IkReal x12331=(cj3*r01);
IkReal x12332=(gconst31*r11);
IkReal x12333=(gconst31*sj3);
IkReal x12334=((1.0)*r10);
IkReal x12335=((1.0)*r00);
IkReal x12336=(gconst32*r00);
IkReal x12337=(gconst32*r20);
IkReal x12338=(cj3*gconst31);
IkReal x12339=((1.0)*cj2);
IkReal x12340=(cj1*sj2);
IkReal x12341=((1.0)*r20);
IkReal x12342=(gconst32*r10);
IkReal x12343=(cj1*x12339);
IkReal x12344=((1.0)*x12328);
IkReal x12345=(sj3*x12327);
IkReal x12346=(cj3*x12328);
IkReal x12347=(gconst31*x12327);
IkReal x12348=((1.0)*cj3*x12327);
evalcond[0]=((((-1.0)*r20*x12327*x12330))+((r21*x12347))+(((-1.0)*r22*x12344)));
evalcond[1]=(((x12327*x12332))+(((-1.0)*r10*x12327*x12330))+(((-1.0)*r12*x12344)));
evalcond[2]=((-1.0)+(((-1.0)*r02*x12344))+((r01*x12347))+(((-1.0)*r00*x12327*x12330)));
evalcond[3]=((((-1.0)*r00*sj3*x12328*x12330))+((r01*x12328*x12333))+(((-1.0)*x12335*x12338))+(((-1.0)*x12330*x12331))+((r02*x12345)));
evalcond[4]=(((x12336*x12346))+(((-1.0)*r02*x12348))+(((-1.0)*gconst31*x12331*x12344))+(((-1.0)*x12333*x12335))+(((-1.0)*r01*sj3*x12330)));
evalcond[5]=((((-1.0)*x12338*x12341))+((r21*x12328*x12333))+x12329+(((-1.0)*x12343))+((r22*x12345))+(((-1.0)*r20*sj3*x12328*x12330))+(((-1.0)*cj3*r21*x12330)));
evalcond[6]=(((cj2*sj1))+(((-1.0)*r21*x12338*x12344))+((x12337*x12346))+x12340+(((-1.0)*r21*sj3*x12330))+(((-1.0)*x12333*x12341))+(((-1.0)*r22*x12348)));
evalcond[7]=((((-1.0)*r10*sj3*x12328*x12330))+(((-1.0)*x12334*x12338))+(((-1.0)*sj1*x12339))+((sj3*x12328*x12332))+((r12*x12345))+(((-1.0)*cj3*r11*x12330))+(((-1.0)*x12340)));
evalcond[8]=((((-1.0)*r11*sj3*x12330))+x12329+(((-1.0)*x12343))+(((-1.0)*cj3*x12332*x12344))+(((-1.0)*x12333*x12334))+(((-1.0)*r12*x12348))+((x12342*x12346)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12349=gconst32*gconst32;
IkReal x12350=gconst31*gconst31;
IkReal x12351=(cj3*r00);
IkReal x12352=(r01*sj3);
IkReal x12353=(gconst31*gconst32);
IkReal x12354=(r00*sj3);
IkReal x12355=((1.0)*r22);
IkReal x12356=((1.0)*r21*sj3);
IkReal x12357=(r20*x12349);
IkReal x12358=(r01*x12353);
CheckValue<IkReal> x12359=IKPowWithIntegerCheck(IKsign((((x12351*x12357))+(((-1.0)*cj3*r20*x12358))+(((-1.0)*r21*x12351*x12353))+((cj3*r02*r22))+((cj3*r01*r21*x12350)))),-1);
if(!x12359.valid){
continue;
}
CheckValue<IkReal> x12360 = IKatan2WithCheck(IkReal(((((-1.0)*gconst31*x12354*x12355))+(((-1.0)*gconst32*x12352*x12355)))),IkReal((((x12352*x12357))+((r20*x12353*x12354))+(((-1.0)*r21*x12350*x12354))+(((-1.0)*r21*x12352*x12353)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12360.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12359.value)))+(x12360.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12361=IKsin(j4);
IkReal x12362=IKcos(j4);
IkReal x12363=(sj1*sj2);
IkReal x12364=((1.0)*gconst32);
IkReal x12365=(cj3*r01);
IkReal x12366=(gconst31*r11);
IkReal x12367=(gconst31*sj3);
IkReal x12368=((1.0)*r10);
IkReal x12369=((1.0)*r00);
IkReal x12370=(gconst32*r00);
IkReal x12371=(gconst32*r20);
IkReal x12372=(cj3*gconst31);
IkReal x12373=((1.0)*cj2);
IkReal x12374=(cj1*sj2);
IkReal x12375=((1.0)*r20);
IkReal x12376=(gconst32*r10);
IkReal x12377=(cj1*x12373);
IkReal x12378=((1.0)*x12362);
IkReal x12379=(sj3*x12361);
IkReal x12380=(cj3*x12362);
IkReal x12381=(gconst31*x12361);
IkReal x12382=((1.0)*cj3*x12361);
evalcond[0]=((((-1.0)*r22*x12378))+((r21*x12381))+(((-1.0)*r20*x12361*x12364)));
evalcond[1]=((((-1.0)*r10*x12361*x12364))+(((-1.0)*r12*x12378))+((x12361*x12366)));
evalcond[2]=((-1.0)+(((-1.0)*r00*x12361*x12364))+((r01*x12381))+(((-1.0)*r02*x12378)));
evalcond[3]=((((-1.0)*x12369*x12372))+(((-1.0)*r00*sj3*x12362*x12364))+(((-1.0)*x12364*x12365))+((r02*x12379))+((r01*x12362*x12367)));
evalcond[4]=(((x12370*x12380))+(((-1.0)*r02*x12382))+(((-1.0)*x12367*x12369))+(((-1.0)*gconst31*x12365*x12378))+(((-1.0)*r01*sj3*x12364)));
evalcond[5]=((((-1.0)*x12377))+((r21*x12362*x12367))+x12363+(((-1.0)*r20*sj3*x12362*x12364))+(((-1.0)*cj3*r21*x12364))+((r22*x12379))+(((-1.0)*x12372*x12375)));
evalcond[6]=(((cj2*sj1))+((x12371*x12380))+x12374+(((-1.0)*r21*x12372*x12378))+(((-1.0)*r22*x12382))+(((-1.0)*x12367*x12375))+(((-1.0)*r21*sj3*x12364)));
evalcond[7]=((((-1.0)*r10*sj3*x12362*x12364))+((sj3*x12362*x12366))+(((-1.0)*x12368*x12372))+(((-1.0)*cj3*r11*x12364))+(((-1.0)*sj1*x12373))+(((-1.0)*x12374))+((r12*x12379)));
evalcond[8]=((((-1.0)*x12377))+((x12376*x12380))+(((-1.0)*cj3*x12366*x12378))+x12363+(((-1.0)*r11*sj3*x12364))+(((-1.0)*x12367*x12368))+(((-1.0)*r12*x12382)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12383=IKPowWithIntegerCheck(IKsign((((gconst31*r20))+((gconst32*r21)))),-1);
if(!x12383.valid){
continue;
}
CheckValue<IkReal> x12384 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst31*r11))+(((-1.0)*gconst32*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12384.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12383.value)))+(x12384.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12385=IKsin(j4);
IkReal x12386=IKcos(j4);
IkReal x12387=(sj1*sj2);
IkReal x12388=((1.0)*gconst32);
IkReal x12389=(cj3*r01);
IkReal x12390=(gconst31*r11);
IkReal x12391=(gconst31*sj3);
IkReal x12392=((1.0)*r10);
IkReal x12393=((1.0)*r00);
IkReal x12394=(gconst32*r00);
IkReal x12395=(gconst32*r20);
IkReal x12396=(cj3*gconst31);
IkReal x12397=((1.0)*cj2);
IkReal x12398=(cj1*sj2);
IkReal x12399=((1.0)*r20);
IkReal x12400=(gconst32*r10);
IkReal x12401=(cj1*x12397);
IkReal x12402=((1.0)*x12386);
IkReal x12403=(sj3*x12385);
IkReal x12404=(cj3*x12386);
IkReal x12405=(gconst31*x12385);
IkReal x12406=((1.0)*cj3*x12385);
evalcond[0]=((((-1.0)*r22*x12402))+((r21*x12405))+(((-1.0)*r20*x12385*x12388)));
evalcond[1]=((((-1.0)*r12*x12402))+((x12385*x12390))+(((-1.0)*r10*x12385*x12388)));
evalcond[2]=((-1.0)+(((-1.0)*r00*x12385*x12388))+(((-1.0)*r02*x12402))+((r01*x12405)));
evalcond[3]=(((r02*x12403))+((r01*x12386*x12391))+(((-1.0)*r00*sj3*x12386*x12388))+(((-1.0)*x12393*x12396))+(((-1.0)*x12388*x12389)));
evalcond[4]=((((-1.0)*r01*sj3*x12388))+((x12394*x12404))+(((-1.0)*gconst31*x12389*x12402))+(((-1.0)*r02*x12406))+(((-1.0)*x12391*x12393)));
evalcond[5]=((((-1.0)*x12401))+(((-1.0)*cj3*r21*x12388))+((r22*x12403))+(((-1.0)*x12396*x12399))+x12387+(((-1.0)*r20*sj3*x12386*x12388))+((r21*x12386*x12391)));
evalcond[6]=(((cj2*sj1))+x12398+(((-1.0)*r22*x12406))+((x12395*x12404))+(((-1.0)*r21*x12396*x12402))+(((-1.0)*r21*sj3*x12388))+(((-1.0)*x12391*x12399)));
evalcond[7]=((((-1.0)*cj3*r11*x12388))+(((-1.0)*sj1*x12397))+((sj3*x12386*x12390))+(((-1.0)*r10*sj3*x12386*x12388))+(((-1.0)*x12398))+(((-1.0)*x12392*x12396))+((r12*x12403)));
evalcond[8]=((((-1.0)*x12401))+((x12400*x12404))+(((-1.0)*r12*x12406))+(((-1.0)*cj3*x12390*x12402))+x12387+(((-1.0)*r11*sj3*x12388))+(((-1.0)*x12391*x12392)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x12407=((-1.0)*r11);
IkReal x12409 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x12409)==0){
continue;
}
IkReal x12408=pow(x12409,-0.5);
CheckValue<IkReal> x12410 = IKatan2WithCheck(IkReal(x12407),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12410.valid){
continue;
}
IkReal gconst33=((3.14159265358979)+(((-1.0)*(x12410.value))));
IkReal gconst34=(x12407*x12408);
IkReal gconst35=((1.0)*r10*x12408);
CheckValue<IkReal> x12411 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12411.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x12411.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x12412=((-1.0)*r11);
CheckValue<IkReal> x12415 = IKatan2WithCheck(IkReal(x12412),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12415.valid){
continue;
}
IkReal x12413=((1.0)*(x12415.value));
IkReal x12414=x12408;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst34;
cj5=gconst35;
j5=((3.14159265)+(((-1.0)*x12413)));
IkReal gconst33=((3.14159265358979)+(((-1.0)*x12413)));
IkReal gconst34=(x12412*x12414);
IkReal gconst35=((1.0)*r10*x12414);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12416=gconst35*gconst35;
IkReal x12417=gconst34*gconst34;
IkReal x12418=((1.0)*gconst35);
IkReal x12419=(r01*sj3);
IkReal x12420=(gconst34*r21);
IkReal x12421=(cj3*r00);
IkReal x12422=(cj3*r01);
IkReal x12423=(r20*x12416);
IkReal x12424=(gconst34*r00*sj3);
IkReal x12425=(r21*x12417);
CheckValue<IkReal> x12426=IKPowWithIntegerCheck(IKsign(((((-1.0)*x12418*x12420*x12421))+((x12421*x12423))+((x12422*x12425))+(((-1.0)*gconst34*r20*x12418*x12422))+((cj3*r02*r22)))),-1);
if(!x12426.valid){
continue;
}
CheckValue<IkReal> x12427 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x12424))+(((-1.0)*r22*x12418*x12419)))),IkReal(((((-1.0)*r00*sj3*x12425))+((x12419*x12423))+((gconst35*r20*x12424))+(((-1.0)*x12418*x12419*x12420)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12427.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12426.value)))+(x12427.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12428=IKsin(j4);
IkReal x12429=IKcos(j4);
IkReal x12430=(sj1*sj2);
IkReal x12431=(gconst34*sj3);
IkReal x12432=(gconst35*sj3);
IkReal x12433=(cj3*gconst35);
IkReal x12434=(cj3*gconst34);
IkReal x12435=((1.0)*r01);
IkReal x12436=((1.0)*r20);
IkReal x12437=((1.0)*cj2);
IkReal x12438=(cj1*sj2);
IkReal x12439=((1.0)*r21);
IkReal x12440=((1.0)*r10);
IkReal x12441=((1.0)*r00);
IkReal x12442=((1.0)*r11);
IkReal x12443=(cj1*x12437);
IkReal x12444=((1.0)*x12429);
IkReal x12445=(r12*x12428);
IkReal x12446=(gconst34*x12428);
IkReal x12447=((1.0)*x12428);
IkReal x12448=(sj3*x12428);
evalcond[0]=((((-1.0)*r22*x12444))+((r21*x12446))+(((-1.0)*gconst35*x12428*x12436)));
evalcond[1]=((((-1.0)*r12*x12444))+((r11*x12446))+(((-1.0)*gconst35*x12428*x12440)));
evalcond[2]=((-1.0)+(((-1.0)*r02*x12444))+((r01*x12446))+(((-1.0)*gconst35*x12428*x12441)));
evalcond[3]=((((-1.0)*x12433*x12435))+((r02*x12448))+((r01*x12429*x12431))+(((-1.0)*x12434*x12441))+(((-1.0)*x12429*x12432*x12441)));
evalcond[4]=((((-1.0)*cj3*r02*x12447))+(((-1.0)*x12431*x12441))+((r00*x12429*x12433))+(((-1.0)*x12432*x12435))+(((-1.0)*x12429*x12434*x12435)));
evalcond[5]=((((-1.0)*x12443))+(((-1.0)*x12433*x12439))+(((-1.0)*x12429*x12432*x12436))+(((-1.0)*x12434*x12436))+((r22*x12448))+((r21*x12429*x12431))+x12430);
evalcond[6]=(((cj2*sj1))+(((-1.0)*x12431*x12436))+(((-1.0)*cj3*r22*x12447))+((r20*x12429*x12433))+x12438+(((-1.0)*x12432*x12439))+(((-1.0)*x12429*x12434*x12439)));
evalcond[7]=((((-1.0)*x12433*x12442))+((r11*x12429*x12431))+(((-1.0)*x12434*x12440))+(((-1.0)*x12429*x12432*x12440))+(((-1.0)*sj1*x12437))+((sj3*x12445))+(((-1.0)*x12438)));
evalcond[8]=(((r10*x12429*x12433))+(((-1.0)*x12443))+(((-1.0)*x12431*x12440))+(((-1.0)*x12429*x12434*x12442))+x12430+(((-1.0)*cj3*x12445))+(((-1.0)*x12432*x12442)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12449=IKPowWithIntegerCheck(IKsign((((gconst34*r20))+((gconst35*r21)))),-1);
if(!x12449.valid){
continue;
}
CheckValue<IkReal> x12450 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*gconst35*r10))+((gconst34*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12450.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12449.value)))+(x12450.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12451=IKsin(j4);
IkReal x12452=IKcos(j4);
IkReal x12453=(sj1*sj2);
IkReal x12454=(gconst34*sj3);
IkReal x12455=(gconst35*sj3);
IkReal x12456=(cj3*gconst35);
IkReal x12457=(cj3*gconst34);
IkReal x12458=((1.0)*r01);
IkReal x12459=((1.0)*r20);
IkReal x12460=((1.0)*cj2);
IkReal x12461=(cj1*sj2);
IkReal x12462=((1.0)*r21);
IkReal x12463=((1.0)*r10);
IkReal x12464=((1.0)*r00);
IkReal x12465=((1.0)*r11);
IkReal x12466=(cj1*x12460);
IkReal x12467=((1.0)*x12452);
IkReal x12468=(r12*x12451);
IkReal x12469=(gconst34*x12451);
IkReal x12470=((1.0)*x12451);
IkReal x12471=(sj3*x12451);
evalcond[0]=((((-1.0)*r22*x12467))+(((-1.0)*gconst35*x12451*x12459))+((r21*x12469)));
evalcond[1]=((((-1.0)*gconst35*x12451*x12463))+((r11*x12469))+(((-1.0)*r12*x12467)));
evalcond[2]=((-1.0)+(((-1.0)*r02*x12467))+((r01*x12469))+(((-1.0)*gconst35*x12451*x12464)));
evalcond[3]=(((r01*x12452*x12454))+(((-1.0)*x12457*x12464))+(((-1.0)*x12452*x12455*x12464))+((r02*x12471))+(((-1.0)*x12456*x12458)));
evalcond[4]=(((r00*x12452*x12456))+(((-1.0)*x12452*x12457*x12458))+(((-1.0)*cj3*r02*x12470))+(((-1.0)*x12454*x12464))+(((-1.0)*x12455*x12458)));
evalcond[5]=((((-1.0)*x12457*x12459))+(((-1.0)*x12466))+(((-1.0)*x12456*x12462))+((r22*x12471))+x12453+((r21*x12452*x12454))+(((-1.0)*x12452*x12455*x12459)));
evalcond[6]=(((cj2*sj1))+((r20*x12452*x12456))+(((-1.0)*x12452*x12457*x12462))+(((-1.0)*x12455*x12462))+(((-1.0)*x12454*x12459))+x12461+(((-1.0)*cj3*r22*x12470)));
evalcond[7]=(((sj3*x12468))+(((-1.0)*x12461))+(((-1.0)*x12457*x12463))+((r11*x12452*x12454))+(((-1.0)*x12452*x12455*x12463))+(((-1.0)*x12456*x12465))+(((-1.0)*sj1*x12460)));
evalcond[8]=((((-1.0)*x12452*x12457*x12465))+(((-1.0)*x12455*x12465))+(((-1.0)*x12466))+(((-1.0)*x12454*x12463))+(((-1.0)*cj3*x12468))+x12453+((r10*x12452*x12456)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x12473 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x12473)==0){
continue;
}
IkReal x12472=pow(x12473,-0.5);
CheckValue<IkReal> x12474 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x12474.valid){
continue;
}
IkReal gconst36=((-1.0)*(x12474.value));
IkReal gconst37=((-1.0)*r21*x12472);
IkReal gconst38=(r20*x12472);
CheckValue<IkReal> x12475 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x12475.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x12475.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x12478 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x12478.valid){
continue;
}
IkReal x12476=((-1.0)*(x12478.value));
IkReal x12477=x12472;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst37;
cj5=gconst38;
j5=x12476;
IkReal gconst36=x12476;
IkReal gconst37=((-1.0)*r21*x12477);
IkReal gconst38=(r20*x12477);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x12481 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x12481.valid){
continue;
}
IkReal x12479=((-1.0)*(x12481.value));
IkReal x12480=x12472;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst37;
cj5=gconst38;
j5=x12479;
IkReal gconst36=x12479;
IkReal gconst37=((-1.0)*r21*x12480);
IkReal gconst38=(r20*x12480);
CheckValue<IkReal> x12489=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x12489.valid){
continue;
}
IkReal x12482=x12489.value;
IkReal x12483=(cj3*x12482);
IkReal x12484=(r11*x12483);
IkReal x12485=(r01*x12483);
IkReal x12486=(r00*x12483);
IkReal x12487=(r10*x12483);
IkReal x12488=(r20*r21*x12483);
j4eval[0]=IKsign((((r10*r20*r21*x12485))+((cj3*r02*r12))+((r10*x12486*(r20*r20)))+((r01*x12484*(r21*r21)))+((r00*r20*r21*x12484))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12490=gconst38*gconst38;
IkReal x12491=gconst37*gconst37;
IkReal x12492=((1.0)*sj3);
IkReal x12493=(gconst38*r01);
IkReal x12494=((1.0)*cj3);
IkReal x12495=(gconst37*sj3);
IkReal x12496=(r00*r11);
IkReal x12497=(gconst37*r00);
IkReal x12498=(r10*x12490);
CheckValue<IkReal> x12499=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x12492*x12498))+(((-1.0)*r01*r11*x12491*x12492))+((gconst38*x12495*x12496))+((r10*x12493*x12495))+(((-1.0)*r02*r12*x12492)))),-1);
if(!x12499.valid){
continue;
}
CheckValue<IkReal> x12500 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x12494*x12497))+(((-1.0)*r12*x12493*x12494)))),IkReal((((cj3*gconst38*r10*x12497))+(((-1.0)*x12491*x12494*x12496))+(((-1.0)*gconst37*r11*x12493*x12494))+((cj3*r01*x12498)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12500.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12499.value)))+(x12500.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12501=IKsin(j4);
IkReal x12502=IKcos(j4);
IkReal x12503=(sj1*sj2);
IkReal x12504=(gconst38*sj3);
IkReal x12505=(cj3*gconst38);
IkReal x12506=((1.0)*r21);
IkReal x12507=((1.0)*cj2);
IkReal x12508=((1.0)*cj3);
IkReal x12509=(gconst37*r00);
IkReal x12510=(cj1*sj2);
IkReal x12511=((1.0)*r01);
IkReal x12512=(cj3*gconst37);
IkReal x12513=((1.0)*sj3);
IkReal x12514=(gconst37*r20);
IkReal x12515=(gconst37*r10);
IkReal x12516=((1.0)*r11);
IkReal x12517=(cj1*x12507);
IkReal x12518=((1.0)*x12502);
IkReal x12519=(sj3*x12501);
IkReal x12520=(gconst37*x12501);
IkReal x12521=((1.0)*gconst38*x12501);
IkReal x12522=(gconst37*sj3*x12502);
evalcond[0]=((((-1.0)*r22*x12518))+(((-1.0)*r20*x12521))+((r21*x12520)));
evalcond[1]=((((-1.0)*r12*x12518))+(((-1.0)*r10*x12521))+((r11*x12520)));
evalcond[2]=((-1.0)+(((-1.0)*r00*x12521))+(((-1.0)*r02*x12518))+((r01*x12520)));
evalcond[3]=((((-1.0)*r00*x12504*x12518))+(((-1.0)*x12505*x12511))+((r01*x12522))+(((-1.0)*x12508*x12509))+((r02*x12519)));
evalcond[4]=(((r00*x12502*x12505))+(((-1.0)*x12504*x12511))+(((-1.0)*gconst37*r01*x12502*x12508))+(((-1.0)*x12509*x12513))+(((-1.0)*r02*x12501*x12508)));
evalcond[5]=((((-1.0)*x12517))+(((-1.0)*r20*x12504*x12518))+((r21*x12522))+(((-1.0)*x12505*x12506))+((r22*x12519))+(((-1.0)*x12508*x12514))+x12503);
evalcond[6]=(((cj2*sj1))+(((-1.0)*r22*x12501*x12508))+(((-1.0)*x12513*x12514))+((r20*x12502*x12505))+(((-1.0)*x12504*x12506))+x12510+(((-1.0)*x12502*x12506*x12512)));
evalcond[7]=(((r12*x12519))+(((-1.0)*x12510))+(((-1.0)*x12505*x12516))+(((-1.0)*r10*x12504*x12518))+((r11*x12522))+(((-1.0)*x12508*x12515))+(((-1.0)*sj1*x12507)));
evalcond[8]=((((-1.0)*x12517))+((r10*x12502*x12505))+(((-1.0)*gconst37*r11*x12502*x12508))+(((-1.0)*x12504*x12516))+(((-1.0)*x12513*x12515))+(((-1.0)*r12*x12501*x12508))+x12503);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12523=gconst37*gconst37;
IkReal x12524=gconst38*gconst38;
IkReal x12525=(r00*r10);
IkReal x12526=(gconst37*gconst38);
IkReal x12527=(cj3*r11);
IkReal x12528=((1.0)*r00);
IkReal x12529=(r11*sj3);
IkReal x12530=((1.0)*r01);
IkReal x12531=(r12*sj3);
CheckValue<IkReal> x12532 = IKatan2WithCheck(IkReal(((((-1.0)*gconst37*x12528*x12531))+(((-1.0)*gconst38*x12530*x12531)))),IkReal((((r01*r10*sj3*x12524))+(((-1.0)*x12523*x12528*x12529))+((sj3*x12525*x12526))+(((-1.0)*x12526*x12529*x12530)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12532.valid){
continue;
}
CheckValue<IkReal> x12533=IKPowWithIntegerCheck(IKsign((((cj3*x12524*x12525))+((cj3*r02*r12))+(((-1.0)*cj3*r10*x12526*x12530))+(((-1.0)*x12526*x12527*x12528))+((r01*x12523*x12527)))),-1);
if(!x12533.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12532.value)+(((1.5707963267949)*(x12533.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12534=IKsin(j4);
IkReal x12535=IKcos(j4);
IkReal x12536=(sj1*sj2);
IkReal x12537=(gconst38*sj3);
IkReal x12538=(cj3*gconst38);
IkReal x12539=((1.0)*r21);
IkReal x12540=((1.0)*cj2);
IkReal x12541=((1.0)*cj3);
IkReal x12542=(gconst37*r00);
IkReal x12543=(cj1*sj2);
IkReal x12544=((1.0)*r01);
IkReal x12545=(cj3*gconst37);
IkReal x12546=((1.0)*sj3);
IkReal x12547=(gconst37*r20);
IkReal x12548=(gconst37*r10);
IkReal x12549=((1.0)*r11);
IkReal x12550=(cj1*x12540);
IkReal x12551=((1.0)*x12535);
IkReal x12552=(sj3*x12534);
IkReal x12553=(gconst37*x12534);
IkReal x12554=((1.0)*gconst38*x12534);
IkReal x12555=(gconst37*sj3*x12535);
evalcond[0]=((((-1.0)*r22*x12551))+(((-1.0)*r20*x12554))+((r21*x12553)));
evalcond[1]=((((-1.0)*r12*x12551))+(((-1.0)*r10*x12554))+((r11*x12553)));
evalcond[2]=((-1.0)+((r01*x12553))+(((-1.0)*r00*x12554))+(((-1.0)*r02*x12551)));
evalcond[3]=((((-1.0)*x12538*x12544))+((r01*x12555))+(((-1.0)*x12541*x12542))+(((-1.0)*r00*x12537*x12551))+((r02*x12552)));
evalcond[4]=((((-1.0)*r02*x12534*x12541))+((r00*x12535*x12538))+(((-1.0)*x12537*x12544))+(((-1.0)*x12542*x12546))+(((-1.0)*gconst37*r01*x12535*x12541)));
evalcond[5]=((((-1.0)*x12538*x12539))+(((-1.0)*x12541*x12547))+((r22*x12552))+((r21*x12555))+(((-1.0)*r20*x12537*x12551))+x12536+(((-1.0)*x12550)));
evalcond[6]=(((cj2*sj1))+(((-1.0)*r22*x12534*x12541))+((r20*x12535*x12538))+(((-1.0)*x12546*x12547))+(((-1.0)*x12535*x12539*x12545))+(((-1.0)*x12537*x12539))+x12543);
evalcond[7]=((((-1.0)*x12538*x12549))+(((-1.0)*x12543))+((r12*x12552))+(((-1.0)*x12541*x12548))+(((-1.0)*r10*x12537*x12551))+((r11*x12555))+(((-1.0)*sj1*x12540)));
evalcond[8]=((((-1.0)*r12*x12534*x12541))+((r10*x12535*x12538))+(((-1.0)*gconst37*r11*x12535*x12541))+(((-1.0)*x12537*x12549))+(((-1.0)*x12546*x12548))+x12536+(((-1.0)*x12550)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12556=((1.0)*gconst38);
CheckValue<IkReal> x12557 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst37*r21))+(((-1.0)*r20*x12556)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12557.valid){
continue;
}
CheckValue<IkReal> x12558=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst37*r10))+(((-1.0)*r11*x12556)))),-1);
if(!x12558.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12557.value)+(((1.5707963267949)*(x12558.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12559=IKsin(j4);
IkReal x12560=IKcos(j4);
IkReal x12561=(sj1*sj2);
IkReal x12562=(gconst38*sj3);
IkReal x12563=(cj3*gconst38);
IkReal x12564=((1.0)*r21);
IkReal x12565=((1.0)*cj2);
IkReal x12566=((1.0)*cj3);
IkReal x12567=(gconst37*r00);
IkReal x12568=(cj1*sj2);
IkReal x12569=((1.0)*r01);
IkReal x12570=(cj3*gconst37);
IkReal x12571=((1.0)*sj3);
IkReal x12572=(gconst37*r20);
IkReal x12573=(gconst37*r10);
IkReal x12574=((1.0)*r11);
IkReal x12575=(cj1*x12565);
IkReal x12576=((1.0)*x12560);
IkReal x12577=(sj3*x12559);
IkReal x12578=(gconst37*x12559);
IkReal x12579=((1.0)*gconst38*x12559);
IkReal x12580=(gconst37*sj3*x12560);
evalcond[0]=((((-1.0)*r20*x12579))+((r21*x12578))+(((-1.0)*r22*x12576)));
evalcond[1]=((((-1.0)*r12*x12576))+(((-1.0)*r10*x12579))+((r11*x12578)));
evalcond[2]=((-1.0)+(((-1.0)*r02*x12576))+((r01*x12578))+(((-1.0)*r00*x12579)));
evalcond[3]=(((r01*x12580))+((r02*x12577))+(((-1.0)*x12563*x12569))+(((-1.0)*x12566*x12567))+(((-1.0)*r00*x12562*x12576)));
evalcond[4]=(((r00*x12560*x12563))+(((-1.0)*gconst37*r01*x12560*x12566))+(((-1.0)*x12562*x12569))+(((-1.0)*r02*x12559*x12566))+(((-1.0)*x12567*x12571)));
evalcond[5]=(((r22*x12577))+(((-1.0)*x12563*x12564))+(((-1.0)*x12575))+((r21*x12580))+(((-1.0)*x12566*x12572))+x12561+(((-1.0)*r20*x12562*x12576)));
evalcond[6]=(((cj2*sj1))+(((-1.0)*x12562*x12564))+(((-1.0)*x12571*x12572))+(((-1.0)*x12560*x12564*x12570))+((r20*x12560*x12563))+(((-1.0)*r22*x12559*x12566))+x12568);
evalcond[7]=((((-1.0)*r10*x12562*x12576))+(((-1.0)*x12563*x12574))+(((-1.0)*x12568))+(((-1.0)*sj1*x12565))+(((-1.0)*x12566*x12573))+((r12*x12577))+((r11*x12580)));
evalcond[8]=((((-1.0)*r12*x12559*x12566))+(((-1.0)*x12562*x12574))+(((-1.0)*x12575))+(((-1.0)*x12571*x12573))+(((-1.0)*gconst37*r11*x12560*x12566))+x12561+((r10*x12560*x12563)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x12582 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x12582)==0){
continue;
}
IkReal x12581=pow(x12582,-0.5);
CheckValue<IkReal> x12583 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x12583.valid){
continue;
}
IkReal gconst39=((3.14159265358979)+(((-1.0)*(x12583.value))));
IkReal gconst40=((1.0)*r21*x12581);
IkReal gconst41=((-1.0)*r20*x12581);
CheckValue<IkReal> x12584 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x12584.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x12584.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x12587 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x12587.valid){
continue;
}
IkReal x12585=((1.0)*(x12587.value));
IkReal x12586=x12581;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst40;
cj5=gconst41;
j5=((3.14159265)+(((-1.0)*x12585)));
IkReal gconst39=((3.14159265358979)+(((-1.0)*x12585)));
IkReal gconst40=((1.0)*r21*x12586);
IkReal gconst41=((-1.0)*r20*x12586);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r12;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x12590 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x12590.valid){
continue;
}
IkReal x12588=((1.0)*(x12590.value));
IkReal x12589=x12581;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst40;
cj5=gconst41;
j5=((3.14159265)+(((-1.0)*x12588)));
IkReal gconst39=((3.14159265358979)+(((-1.0)*x12588)));
IkReal gconst40=((1.0)*r21*x12589);
IkReal gconst41=((-1.0)*r20*x12589);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x12593 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x12593.valid){
continue;
}
IkReal x12591=((1.0)*(x12593.value));
IkReal x12592=x12581;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst40;
cj5=gconst41;
j5=((3.14159265)+(((-1.0)*x12591)));
IkReal gconst39=((3.14159265358979)+(((-1.0)*x12591)));
IkReal gconst40=((1.0)*r21*x12592);
IkReal gconst41=((-1.0)*r20*x12592);
j4eval[0]=r12;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12594=gconst41*gconst41;
IkReal x12595=gconst40*gconst40;
IkReal x12596=(r01*r21);
IkReal x12597=(r00*sj3);
IkReal x12598=(gconst40*gconst41);
IkReal x12599=((1.0)*r21);
IkReal x12600=(r01*sj3);
IkReal x12601=(cj3*r00);
IkReal x12602=((1.0)*gconst40*sj3);
IkReal x12603=(r20*x12594);
CheckValue<IkReal> x12604 = IKatan2WithCheck(IkReal(((((-1.0)*gconst40*r22*x12597))+(((-1.0)*gconst41*r22*x12600)))),IkReal((((x12600*x12603))+(((-1.0)*x12595*x12597*x12599))+(((-1.0)*sj3*x12596*x12598))+((r20*x12597*x12598)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12604.valid){
continue;
}
CheckValue<IkReal> x12605=IKPowWithIntegerCheck(IKsign(((((-1.0)*x12598*x12599*x12601))+((cj3*x12595*x12596))+((x12601*x12603))+((cj3*r02*r22))+(((-1.0)*cj3*r01*r20*x12598)))),-1);
if(!x12605.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12604.value)+(((1.5707963267949)*(x12605.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12606=IKsin(j4);
IkReal x12607=IKcos(j4);
IkReal x12608=(sj1*sj2);
IkReal x12609=((1.0)*r22);
IkReal x12610=((1.0)*gconst41);
IkReal x12611=((1.0)*cj2);
IkReal x12612=((1.0)*gconst40);
IkReal x12613=(r00*sj3);
IkReal x12614=(cj3*r01);
IkReal x12615=(gconst40*r21);
IkReal x12616=(r20*sj3);
IkReal x12617=(cj1*sj2);
IkReal x12618=(r10*sj3);
IkReal x12619=(gconst40*r11);
IkReal x12620=(gconst40*r01);
IkReal x12621=(cj1*x12611);
IkReal x12622=(r12*x12606);
IkReal x12623=(cj3*x12606);
IkReal x12624=((1.0)*x12607);
IkReal x12625=(sj3*x12607);
IkReal x12626=(cj3*x12607);
IkReal x12627=(sj3*x12606);
IkReal x12628=(gconst41*x12626);
evalcond[0]=((((-1.0)*x12607*x12609))+(((-1.0)*r20*x12606*x12610))+((x12606*x12615)));
evalcond[1]=((((-1.0)*r12*x12624))+((x12606*x12619))+(((-1.0)*r10*x12606*x12610)));
evalcond[2]=((-1.0)+((x12606*x12620))+(((-1.0)*r02*x12624))+(((-1.0)*r00*x12606*x12610)));
evalcond[3]=(((r02*x12627))+((x12620*x12625))+(((-1.0)*x12610*x12614))+(((-1.0)*x12607*x12610*x12613))+(((-1.0)*cj3*r00*x12612)));
evalcond[4]=((((-1.0)*x12612*x12613))+((r00*x12628))+(((-1.0)*r02*x12623))+(((-1.0)*x12607*x12612*x12614))+(((-1.0)*r01*sj3*x12610)));
evalcond[5]=((((-1.0)*x12621))+((r22*x12627))+(((-1.0)*cj3*r20*x12612))+((x12615*x12625))+(((-1.0)*cj3*r21*x12610))+x12608+(((-1.0)*x12607*x12610*x12616)));
evalcond[6]=(((cj2*sj1))+(((-1.0)*r21*x12612*x12626))+(((-1.0)*x12612*x12616))+(((-1.0)*r21*sj3*x12610))+x12617+(((-1.0)*x12609*x12623))+((r20*x12628)));
evalcond[7]=(((x12619*x12625))+(((-1.0)*cj3*r11*x12610))+(((-1.0)*cj3*r10*x12612))+(((-1.0)*x12617))+((sj3*x12622))+(((-1.0)*sj1*x12611))+(((-1.0)*x12607*x12610*x12618)));
evalcond[8]=((((-1.0)*cj3*x12622))+(((-1.0)*x12621))+(((-1.0)*r11*sj3*x12610))+(((-1.0)*x12612*x12618))+(((-1.0)*r11*x12612*x12626))+x12608+((r10*x12628)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12629=((1.0)*gconst41);
CheckValue<IkReal> x12630 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst40*r21))+(((-1.0)*r20*x12629)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12630.valid){
continue;
}
CheckValue<IkReal> x12631=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x12629))+(((-1.0)*gconst40*r10)))),-1);
if(!x12631.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12630.value)+(((1.5707963267949)*(x12631.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12632=IKsin(j4);
IkReal x12633=IKcos(j4);
IkReal x12634=(sj1*sj2);
IkReal x12635=((1.0)*r22);
IkReal x12636=((1.0)*gconst41);
IkReal x12637=((1.0)*cj2);
IkReal x12638=((1.0)*gconst40);
IkReal x12639=(r00*sj3);
IkReal x12640=(cj3*r01);
IkReal x12641=(gconst40*r21);
IkReal x12642=(r20*sj3);
IkReal x12643=(cj1*sj2);
IkReal x12644=(r10*sj3);
IkReal x12645=(gconst40*r11);
IkReal x12646=(gconst40*r01);
IkReal x12647=(cj1*x12637);
IkReal x12648=(r12*x12632);
IkReal x12649=(cj3*x12632);
IkReal x12650=((1.0)*x12633);
IkReal x12651=(sj3*x12633);
IkReal x12652=(cj3*x12633);
IkReal x12653=(sj3*x12632);
IkReal x12654=(gconst41*x12652);
evalcond[0]=((((-1.0)*x12633*x12635))+(((-1.0)*r20*x12632*x12636))+((x12632*x12641)));
evalcond[1]=((((-1.0)*r10*x12632*x12636))+(((-1.0)*r12*x12650))+((x12632*x12645)));
evalcond[2]=((-1.0)+(((-1.0)*r02*x12650))+(((-1.0)*r00*x12632*x12636))+((x12632*x12646)));
evalcond[3]=((((-1.0)*x12636*x12640))+(((-1.0)*cj3*r00*x12638))+((r02*x12653))+(((-1.0)*x12633*x12636*x12639))+((x12646*x12651)));
evalcond[4]=((((-1.0)*r01*sj3*x12636))+(((-1.0)*r02*x12649))+(((-1.0)*x12633*x12638*x12640))+(((-1.0)*x12638*x12639))+((r00*x12654)));
evalcond[5]=(((x12641*x12651))+((r22*x12653))+(((-1.0)*x12633*x12636*x12642))+x12634+(((-1.0)*x12647))+(((-1.0)*cj3*r20*x12638))+(((-1.0)*cj3*r21*x12636)));
evalcond[6]=(((cj2*sj1))+(((-1.0)*x12638*x12642))+x12643+(((-1.0)*r21*sj3*x12636))+((r20*x12654))+(((-1.0)*x12635*x12649))+(((-1.0)*r21*x12638*x12652)));
evalcond[7]=(((sj3*x12648))+((x12645*x12651))+(((-1.0)*x12643))+(((-1.0)*sj1*x12637))+(((-1.0)*x12633*x12636*x12644))+(((-1.0)*cj3*r11*x12636))+(((-1.0)*cj3*r10*x12638)));
evalcond[8]=((((-1.0)*cj3*x12648))+((r10*x12654))+(((-1.0)*r11*x12638*x12652))+(((-1.0)*x12638*x12644))+(((-1.0)*r11*sj3*x12636))+x12634+(((-1.0)*x12647)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12655=IKPowWithIntegerCheck(IKsign((((gconst41*r21))+((gconst40*r20)))),-1);
if(!x12655.valid){
continue;
}
CheckValue<IkReal> x12656 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*gconst41*r10))+((gconst40*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12656.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12655.value)))+(x12656.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12657=IKsin(j4);
IkReal x12658=IKcos(j4);
IkReal x12659=(sj1*sj2);
IkReal x12660=((1.0)*r22);
IkReal x12661=((1.0)*gconst41);
IkReal x12662=((1.0)*cj2);
IkReal x12663=((1.0)*gconst40);
IkReal x12664=(r00*sj3);
IkReal x12665=(cj3*r01);
IkReal x12666=(gconst40*r21);
IkReal x12667=(r20*sj3);
IkReal x12668=(cj1*sj2);
IkReal x12669=(r10*sj3);
IkReal x12670=(gconst40*r11);
IkReal x12671=(gconst40*r01);
IkReal x12672=(cj1*x12662);
IkReal x12673=(r12*x12657);
IkReal x12674=(cj3*x12657);
IkReal x12675=((1.0)*x12658);
IkReal x12676=(sj3*x12658);
IkReal x12677=(cj3*x12658);
IkReal x12678=(sj3*x12657);
IkReal x12679=(gconst41*x12677);
evalcond[0]=((((-1.0)*r20*x12657*x12661))+((x12657*x12666))+(((-1.0)*x12658*x12660)));
evalcond[1]=((((-1.0)*r10*x12657*x12661))+(((-1.0)*r12*x12675))+((x12657*x12670)));
evalcond[2]=((-1.0)+(((-1.0)*r00*x12657*x12661))+(((-1.0)*r02*x12675))+((x12657*x12671)));
evalcond[3]=((((-1.0)*x12661*x12665))+(((-1.0)*x12658*x12661*x12664))+((r02*x12678))+(((-1.0)*cj3*r00*x12663))+((x12671*x12676)));
evalcond[4]=((((-1.0)*x12663*x12664))+((r00*x12679))+(((-1.0)*r01*sj3*x12661))+(((-1.0)*x12658*x12663*x12665))+(((-1.0)*r02*x12674)));
evalcond[5]=((((-1.0)*cj3*r21*x12661))+(((-1.0)*x12658*x12661*x12667))+(((-1.0)*x12672))+(((-1.0)*cj3*r20*x12663))+((r22*x12678))+x12659+((x12666*x12676)));
evalcond[6]=(((r20*x12679))+((cj2*sj1))+(((-1.0)*r21*x12663*x12677))+(((-1.0)*x12660*x12674))+(((-1.0)*r21*sj3*x12661))+(((-1.0)*x12663*x12667))+x12668);
evalcond[7]=((((-1.0)*x12658*x12661*x12669))+(((-1.0)*cj3*r11*x12661))+((x12670*x12676))+(((-1.0)*x12668))+(((-1.0)*cj3*r10*x12663))+(((-1.0)*sj1*x12662))+((sj3*x12673)));
evalcond[8]=(((r10*x12679))+(((-1.0)*x12672))+(((-1.0)*x12663*x12669))+x12659+(((-1.0)*cj3*x12673))+(((-1.0)*r11*x12663*x12677))+(((-1.0)*r11*sj3*x12661)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x12680=((-1.0)*pz);
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x12680);
rxp1_0=(pz*r11);
rxp1_1=(r01*x12680);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x12681=(r01*sj5);
IkReal x12682=((1.0)*cj5*r00);
j4eval[0]=((((-1.0)*x12682))+x12681);
j4eval[1]=(((sj3*x12681))+(((-1.0)*sj3*x12682)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12683=((-1.0)*pz);
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x12683);
rxp1_0=(pz*r11);
rxp1_1=(r01*x12683);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x12684=(cj5*r00);
IkReal x12685=(r01*sj5);
j4eval[0]=(x12685+(((-1.0)*x12684)));
j4eval[1]=(((cj3*x12684))+(((-1.0)*cj3*x12685)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x12686=((-1.0)*pz);
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x12686);
rxp1_0=(pz*r11);
rxp1_1=(r01*x12686);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=r22;
j4eval[1]=sj3;
j4eval[2]=((((-1.0)*cj5*r00*sj3))+((r01*sj3*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12687=IKPowWithIntegerCheck(r22,-1);
if(!x12687.valid){
continue;
}
CheckValue<IkReal> x12688=IKPowWithIntegerCheck(sj3,-1);
if(!x12688.valid){
continue;
}
CheckValue<IkReal> x12689=IKPowWithIntegerCheck(((((-1.0)*cj5*r00*sj3))+((r01*sj3*sj5))),-1);
if(!x12689.valid){
continue;
}
if( IKabs(((x12687.value)*(x12688.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12689.value)*((((cj3*cj5*r01))+((cj3*r00*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12687.value)*(x12688.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))+IKsqr(((x12689.value)*((((cj3*cj5*r01))+((cj3*r00*sj5))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12687.value)*(x12688.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))), ((x12689.value)*((((cj3*cj5*r01))+((cj3*r00*sj5))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12690=IKsin(j4);
IkReal x12691=IKcos(j4);
IkReal x12692=(sj1*sj2);
IkReal x12693=(cj3*r00);
IkReal x12694=((1.0)*r10);
IkReal x12695=(cj3*sj5);
IkReal x12696=((1.0)*r11);
IkReal x12697=(r11*sj5);
IkReal x12698=((1.0)*cj3);
IkReal x12699=(cj5*r01);
IkReal x12700=((1.0)*cj2);
IkReal x12701=((1.0)*r00);
IkReal x12702=(cj1*sj2);
IkReal x12703=(r01*sj5);
IkReal x12704=(sj3*sj5);
IkReal x12705=(cj1*x12700);
IkReal x12706=(cj5*x12691);
IkReal x12707=(cj5*x12690);
IkReal x12708=(r22*x12690);
IkReal x12709=(sj3*x12691);
evalcond[0]=((-1.0)*r22*x12691);
evalcond[1]=(((x12690*x12697))+(((-1.0)*x12694*x12707)));
evalcond[2]=(((sj3*x12708))+(((-1.0)*x12705))+x12692);
evalcond[3]=(((cj2*sj1))+(((-1.0)*x12698*x12708))+x12702);
evalcond[4]=((-1.0)+((x12690*x12703))+(((-1.0)*x12701*x12707)));
evalcond[5]=((((-1.0)*sj3*x12701*x12706))+(((-1.0)*x12698*x12699))+((x12703*x12709))+(((-1.0)*sj5*x12693)));
evalcond[6]=((((-1.0)*x12701*x12704))+((x12693*x12706))+(((-1.0)*r01*x12691*x12695))+(((-1.0)*sj3*x12699)));
evalcond[7]=((((-1.0)*cj5*sj3*x12696))+(((-1.0)*x12705))+(((-1.0)*x12691*x12695*x12696))+((cj3*r10*x12706))+(((-1.0)*x12694*x12704))+x12692);
evalcond[8]=(((x12697*x12709))+(((-1.0)*cj3*cj5*x12696))+(((-1.0)*sj1*x12700))+(((-1.0)*x12694*x12695))+(((-1.0)*x12702))+(((-1.0)*sj3*x12694*x12706)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12710=(cj5*r00);
IkReal x12711=(r01*sj5);
CheckValue<IkReal> x12712=IKPowWithIntegerCheck(((((-1.0)*x12710))+x12711),-1);
if(!x12712.valid){
continue;
}
CheckValue<IkReal> x12713=IKPowWithIntegerCheck(((((-1.0)*cj3*x12711))+((cj3*x12710))),-1);
if(!x12713.valid){
continue;
}
if( IKabs(x12712.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12713.value)*((((cj5*r01*sj3))+((r00*sj3*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x12712.value)+IKsqr(((x12713.value)*((((cj5*r01*sj3))+((r00*sj3*sj5))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x12712.value, ((x12713.value)*((((cj5*r01*sj3))+((r00*sj3*sj5))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12714=IKsin(j4);
IkReal x12715=IKcos(j4);
IkReal x12716=(sj1*sj2);
IkReal x12717=(cj3*r00);
IkReal x12718=((1.0)*r10);
IkReal x12719=(cj3*sj5);
IkReal x12720=((1.0)*r11);
IkReal x12721=(r11*sj5);
IkReal x12722=((1.0)*cj3);
IkReal x12723=(cj5*r01);
IkReal x12724=((1.0)*cj2);
IkReal x12725=((1.0)*r00);
IkReal x12726=(cj1*sj2);
IkReal x12727=(r01*sj5);
IkReal x12728=(sj3*sj5);
IkReal x12729=(cj1*x12724);
IkReal x12730=(cj5*x12715);
IkReal x12731=(cj5*x12714);
IkReal x12732=(r22*x12714);
IkReal x12733=(sj3*x12715);
evalcond[0]=((-1.0)*r22*x12715);
evalcond[1]=(((x12714*x12721))+(((-1.0)*x12718*x12731)));
evalcond[2]=((((-1.0)*x12729))+x12716+((sj3*x12732)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x12722*x12732))+x12726);
evalcond[4]=((-1.0)+((x12714*x12727))+(((-1.0)*x12725*x12731)));
evalcond[5]=(((x12727*x12733))+(((-1.0)*sj5*x12717))+(((-1.0)*x12722*x12723))+(((-1.0)*sj3*x12725*x12730)));
evalcond[6]=(((x12717*x12730))+(((-1.0)*sj3*x12723))+(((-1.0)*x12725*x12728))+(((-1.0)*r01*x12715*x12719)));
evalcond[7]=((((-1.0)*x12729))+(((-1.0)*x12718*x12728))+((cj3*r10*x12730))+x12716+(((-1.0)*cj5*sj3*x12720))+(((-1.0)*x12715*x12719*x12720)));
evalcond[8]=(((x12721*x12733))+(((-1.0)*x12726))+(((-1.0)*cj3*cj5*x12720))+(((-1.0)*sj1*x12724))+(((-1.0)*x12718*x12719))+(((-1.0)*sj3*x12718*x12730)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12734=(r01*sj5);
IkReal x12735=((1.0)*cj5*r00);
CheckValue<IkReal> x12736=IKPowWithIntegerCheck(((((-1.0)*x12735))+x12734),-1);
if(!x12736.valid){
continue;
}
CheckValue<IkReal> x12737=IKPowWithIntegerCheck(((((-1.0)*sj3*x12735))+((sj3*x12734))),-1);
if(!x12737.valid){
continue;
}
if( IKabs(x12736.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12737.value)*((((cj3*cj5*r01))+((cj3*r00*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x12736.value)+IKsqr(((x12737.value)*((((cj3*cj5*r01))+((cj3*r00*sj5))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x12736.value, ((x12737.value)*((((cj3*cj5*r01))+((cj3*r00*sj5))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12738=IKsin(j4);
IkReal x12739=IKcos(j4);
IkReal x12740=(sj1*sj2);
IkReal x12741=(cj3*r00);
IkReal x12742=((1.0)*r10);
IkReal x12743=(cj3*sj5);
IkReal x12744=((1.0)*r11);
IkReal x12745=(r11*sj5);
IkReal x12746=((1.0)*cj3);
IkReal x12747=(cj5*r01);
IkReal x12748=((1.0)*cj2);
IkReal x12749=((1.0)*r00);
IkReal x12750=(cj1*sj2);
IkReal x12751=(r01*sj5);
IkReal x12752=(sj3*sj5);
IkReal x12753=(cj1*x12748);
IkReal x12754=(cj5*x12739);
IkReal x12755=(cj5*x12738);
IkReal x12756=(r22*x12738);
IkReal x12757=(sj3*x12739);
evalcond[0]=((-1.0)*r22*x12739);
evalcond[1]=((((-1.0)*x12742*x12755))+((x12738*x12745)));
evalcond[2]=(((sj3*x12756))+(((-1.0)*x12753))+x12740);
evalcond[3]=(((cj2*sj1))+(((-1.0)*x12746*x12756))+x12750);
evalcond[4]=((-1.0)+(((-1.0)*x12749*x12755))+((x12738*x12751)));
evalcond[5]=(((x12751*x12757))+(((-1.0)*sj5*x12741))+(((-1.0)*sj3*x12749*x12754))+(((-1.0)*x12746*x12747)));
evalcond[6]=((((-1.0)*sj3*x12747))+(((-1.0)*x12749*x12752))+((x12741*x12754))+(((-1.0)*r01*x12739*x12743)));
evalcond[7]=((((-1.0)*x12739*x12743*x12744))+((cj3*r10*x12754))+(((-1.0)*x12753))+(((-1.0)*cj5*sj3*x12744))+(((-1.0)*x12742*x12752))+x12740);
evalcond[8]=((((-1.0)*cj3*cj5*x12744))+(((-1.0)*x12750))+(((-1.0)*sj1*x12748))+(((-1.0)*x12742*x12743))+(((-1.0)*sj3*x12742*x12754))+((x12745*x12757)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12758=cj5*cj5;
IkReal x12759=(r00*sj5);
IkReal x12760=(r21*sj3);
IkReal x12761=(cj3*r01);
IkReal x12762=((1.0)*r22);
IkReal x12763=(cj5*sj5);
IkReal x12764=(r20*x12758);
IkReal x12765=(cj3*r00*r21);
CheckValue<IkReal> x12766=IKPowWithIntegerCheck(IKsign((((cj5*x12759*x12760))+(((-1.0)*r01*x12760))+(((-1.0)*r02*sj3*x12762))+((r01*x12758*x12760))+(((-1.0)*r00*sj3*x12764))+((r01*r20*sj3*x12763)))),-1);
if(!x12766.valid){
continue;
}
CheckValue<IkReal> x12767 = IKatan2WithCheck(IkReal(((((-1.0)*cj3*x12759*x12762))+(((-1.0)*cj5*x12761*x12762)))),IkReal((((x12758*x12765))+(((-1.0)*x12765))+((cj3*cj5*r20*x12759))+(((-1.0)*r21*x12761*x12763))+((x12761*x12764)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12767.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12766.value)))+(x12767.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12768=IKsin(j4);
IkReal x12769=IKcos(j4);
IkReal x12770=(sj1*sj2);
IkReal x12771=(cj3*cj5);
IkReal x12772=((1.0)*r10);
IkReal x12773=(cj3*sj5);
IkReal x12774=((1.0)*cj2);
IkReal x12775=((1.0)*r20);
IkReal x12776=((1.0)*r01);
IkReal x12777=((1.0)*r00);
IkReal x12778=(cj1*sj2);
IkReal x12779=(cj5*sj3);
IkReal x12780=(sj3*sj5);
IkReal x12781=((1.0)*r21);
IkReal x12782=((1.0)*r11);
IkReal x12783=(cj1*x12774);
IkReal x12784=((1.0)*x12769);
IkReal x12785=(cj5*x12768);
IkReal x12786=(r12*x12768);
IkReal x12787=(sj5*x12768);
IkReal x12788=(sj3*x12768);
IkReal x12789=((1.0)*cj3*x12768);
evalcond[0]=(((r21*x12787))+(((-1.0)*r22*x12784))+(((-1.0)*x12775*x12785)));
evalcond[1]=((((-1.0)*x12772*x12785))+((r11*x12787))+(((-1.0)*r12*x12784)));
evalcond[2]=((-1.0)+((r01*x12787))+(((-1.0)*x12777*x12785))+(((-1.0)*r02*x12784)));
evalcond[3]=((((-1.0)*x12769*x12777*x12779))+(((-1.0)*x12771*x12776))+((r01*x12769*x12780))+(((-1.0)*x12773*x12777))+((r02*x12788)));
evalcond[4]=((((-1.0)*x12776*x12779))+(((-1.0)*x12769*x12773*x12776))+(((-1.0)*x12777*x12780))+(((-1.0)*r02*x12789))+((r00*x12769*x12771)));
evalcond[5]=((((-1.0)*x12769*x12775*x12779))+((r21*x12769*x12780))+(((-1.0)*x12773*x12775))+x12770+((r22*x12788))+(((-1.0)*x12771*x12781))+(((-1.0)*x12783)));
evalcond[6]=(((cj2*sj1))+(((-1.0)*x12779*x12781))+(((-1.0)*x12769*x12773*x12781))+(((-1.0)*r22*x12789))+x12778+((r20*x12769*x12771))+(((-1.0)*x12775*x12780)));
evalcond[7]=((((-1.0)*x12769*x12772*x12779))+((r11*x12769*x12780))+(((-1.0)*x12772*x12773))+(((-1.0)*x12778))+((sj3*x12786))+(((-1.0)*sj1*x12774))+(((-1.0)*x12771*x12782)));
evalcond[8]=((((-1.0)*x12779*x12782))+(((-1.0)*x12769*x12773*x12782))+(((-1.0)*x12772*x12780))+x12770+((r10*x12769*x12771))+(((-1.0)*cj3*x12786))+(((-1.0)*x12783)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12790=((1.0)*cj5);
CheckValue<IkReal> x12791=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x12790)))),-1);
if(!x12791.valid){
continue;
}
CheckValue<IkReal> x12792 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x12790))+((r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12792.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12791.value)))+(x12792.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12793=IKsin(j4);
IkReal x12794=IKcos(j4);
IkReal x12795=(sj1*sj2);
IkReal x12796=(cj3*cj5);
IkReal x12797=((1.0)*r10);
IkReal x12798=(cj3*sj5);
IkReal x12799=((1.0)*cj2);
IkReal x12800=((1.0)*r20);
IkReal x12801=((1.0)*r01);
IkReal x12802=((1.0)*r00);
IkReal x12803=(cj1*sj2);
IkReal x12804=(cj5*sj3);
IkReal x12805=(sj3*sj5);
IkReal x12806=((1.0)*r21);
IkReal x12807=((1.0)*r11);
IkReal x12808=(cj1*x12799);
IkReal x12809=((1.0)*x12794);
IkReal x12810=(cj5*x12793);
IkReal x12811=(r12*x12793);
IkReal x12812=(sj5*x12793);
IkReal x12813=(sj3*x12793);
IkReal x12814=((1.0)*cj3*x12793);
evalcond[0]=((((-1.0)*x12800*x12810))+((r21*x12812))+(((-1.0)*r22*x12809)));
evalcond[1]=((((-1.0)*r12*x12809))+((r11*x12812))+(((-1.0)*x12797*x12810)));
evalcond[2]=((-1.0)+(((-1.0)*x12802*x12810))+((r01*x12812))+(((-1.0)*r02*x12809)));
evalcond[3]=(((r01*x12794*x12805))+(((-1.0)*x12796*x12801))+((r02*x12813))+(((-1.0)*x12794*x12802*x12804))+(((-1.0)*x12798*x12802)));
evalcond[4]=((((-1.0)*r02*x12814))+(((-1.0)*x12802*x12805))+(((-1.0)*x12801*x12804))+((r00*x12794*x12796))+(((-1.0)*x12794*x12798*x12801)));
evalcond[5]=((((-1.0)*x12794*x12800*x12804))+(((-1.0)*x12808))+(((-1.0)*x12796*x12806))+x12795+((r21*x12794*x12805))+((r22*x12813))+(((-1.0)*x12798*x12800)));
evalcond[6]=(((cj2*sj1))+x12803+(((-1.0)*x12800*x12805))+((r20*x12794*x12796))+(((-1.0)*x12804*x12806))+(((-1.0)*r22*x12814))+(((-1.0)*x12794*x12798*x12806)));
evalcond[7]=(((sj3*x12811))+(((-1.0)*sj1*x12799))+(((-1.0)*x12796*x12807))+((r11*x12794*x12805))+(((-1.0)*x12803))+(((-1.0)*x12794*x12797*x12804))+(((-1.0)*x12797*x12798)));
evalcond[8]=((((-1.0)*x12808))+(((-1.0)*cj3*x12811))+(((-1.0)*x12804*x12807))+x12795+((r10*x12794*x12796))+(((-1.0)*x12797*x12805))+(((-1.0)*x12794*x12798*x12807)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12815=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x12815.valid){
continue;
}
CheckValue<IkReal> x12816 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12816.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12815.value)))+(x12816.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12817=IKsin(j4);
IkReal x12818=IKcos(j4);
IkReal x12819=(sj1*sj2);
IkReal x12820=(cj3*cj5);
IkReal x12821=((1.0)*r10);
IkReal x12822=(cj3*sj5);
IkReal x12823=((1.0)*cj2);
IkReal x12824=((1.0)*r20);
IkReal x12825=((1.0)*r01);
IkReal x12826=((1.0)*r00);
IkReal x12827=(cj1*sj2);
IkReal x12828=(cj5*sj3);
IkReal x12829=(sj3*sj5);
IkReal x12830=((1.0)*r21);
IkReal x12831=((1.0)*r11);
IkReal x12832=(cj1*x12823);
IkReal x12833=((1.0)*x12818);
IkReal x12834=(cj5*x12817);
IkReal x12835=(r12*x12817);
IkReal x12836=(sj5*x12817);
IkReal x12837=(sj3*x12817);
IkReal x12838=((1.0)*cj3*x12817);
evalcond[0]=(((r21*x12836))+(((-1.0)*x12824*x12834))+(((-1.0)*r22*x12833)));
evalcond[1]=((((-1.0)*x12821*x12834))+((r11*x12836))+(((-1.0)*r12*x12833)));
evalcond[2]=((-1.0)+(((-1.0)*r02*x12833))+((r01*x12836))+(((-1.0)*x12826*x12834)));
evalcond[3]=(((r01*x12818*x12829))+(((-1.0)*x12822*x12826))+((r02*x12837))+(((-1.0)*x12818*x12826*x12828))+(((-1.0)*x12820*x12825)));
evalcond[4]=((((-1.0)*x12825*x12828))+(((-1.0)*x12818*x12822*x12825))+(((-1.0)*x12826*x12829))+(((-1.0)*r02*x12838))+((r00*x12818*x12820)));
evalcond[5]=(x12819+(((-1.0)*x12822*x12824))+((r22*x12837))+(((-1.0)*x12832))+((r21*x12818*x12829))+(((-1.0)*x12818*x12824*x12828))+(((-1.0)*x12820*x12830)));
evalcond[6]=((((-1.0)*x12818*x12822*x12830))+((cj2*sj1))+x12827+(((-1.0)*x12824*x12829))+(((-1.0)*r22*x12838))+(((-1.0)*x12828*x12830))+((r20*x12818*x12820)));
evalcond[7]=(((r11*x12818*x12829))+((sj3*x12835))+(((-1.0)*x12827))+(((-1.0)*x12818*x12821*x12828))+(((-1.0)*sj1*x12823))+(((-1.0)*x12821*x12822))+(((-1.0)*x12820*x12831)));
evalcond[8]=((((-1.0)*x12818*x12822*x12831))+x12819+(((-1.0)*x12832))+(((-1.0)*x12828*x12831))+(((-1.0)*cj3*x12835))+((r10*x12818*x12820))+(((-1.0)*x12821*x12829)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x12840 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x12840)==0){
continue;
}
IkReal x12839=pow(x12840,-0.5);
CheckValue<IkReal> x12841 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x12841.valid){
continue;
}
IkReal gconst12=((-1.0)*(x12841.value));
IkReal gconst13=((-1.0)*r11*x12839);
IkReal gconst14=(r10*x12839);
CheckValue<IkReal> x12842 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x12842.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x12842.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x12845 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x12845.valid){
continue;
}
IkReal x12843=((-1.0)*(x12845.value));
IkReal x12844=x12839;
sj5=gconst13;
cj5=gconst14;
j5=x12843;
IkReal gconst12=x12843;
IkReal gconst13=((-1.0)*r11*x12844);
IkReal gconst14=(r10*x12844);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12846=((1.0)*gconst14);
CheckValue<IkReal> x12847 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*r10*sj0*x12846))+(((-1.0)*cj0*r00*x12846))+((cj0*gconst13*r01))+((gconst13*r11*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12847.valid){
continue;
}
CheckValue<IkReal> x12848=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x12846))+(((-1.0)*gconst13*r20)))),-1);
if(!x12848.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12847.value)+(((1.5707963267949)*(x12848.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12849=IKsin(j4);
IkReal x12850=IKcos(j4);
IkReal x12851=(cj3*gconst13);
IkReal x12852=((1.0)*r20);
IkReal x12853=(cj2*sj0);
IkReal x12854=(cj3*gconst14);
IkReal x12855=(sj1*sj2);
IkReal x12856=((1.0)*r21);
IkReal x12857=(cj1*cj2);
IkReal x12858=((1.0)*gconst14);
IkReal x12859=(r01*sj3);
IkReal x12860=(r11*sj3);
IkReal x12861=(gconst13*sj3);
IkReal x12862=(cj2*sj1);
IkReal x12863=(gconst14*sj3);
IkReal x12864=(cj1*sj2);
IkReal x12865=((1.0)*cj0);
IkReal x12866=((1.0)*x12850);
IkReal x12867=(gconst13*x12849);
IkReal x12868=((1.0)*x12861);
IkReal x12869=(r12*x12849);
IkReal x12870=(sj3*x12849);
IkReal x12871=(gconst13*x12850);
IkReal x12872=((1.0)*cj3*x12849);
evalcond[0]=(((r21*x12867))+(((-1.0)*r22*x12866))+(((-1.0)*gconst14*x12849*x12852)));
evalcond[1]=(sj0+(((-1.0)*r02*x12866))+((r01*x12867))+(((-1.0)*r00*x12849*x12858)));
evalcond[2]=(((r11*x12867))+(((-1.0)*r10*x12849*x12858))+(((-1.0)*x12865))+(((-1.0)*r12*x12866)));
evalcond[3]=((((-1.0)*x12854*x12856))+x12855+(((-1.0)*x12851*x12852))+((r22*x12870))+(((-1.0)*x12857))+(((-1.0)*x12850*x12852*x12863))+((r21*x12850*x12861)));
evalcond[4]=((((-1.0)*r22*x12872))+x12862+x12864+(((-1.0)*x12850*x12851*x12856))+(((-1.0)*x12852*x12861))+(((-1.0)*x12856*x12863))+((r20*x12850*x12854)));
evalcond[5]=((((-1.0)*r00*sj3*x12850*x12858))+(((-1.0)*r01*x12854))+(((-1.0)*r00*x12851))+((r02*x12870))+((x12859*x12871))+((cj0*x12862))+((cj0*x12864)));
evalcond[6]=((((-1.0)*r10*sj3*x12850*x12858))+((x12860*x12871))+((sj1*x12853))+(((-1.0)*r10*x12851))+((sj0*x12864))+((sj3*x12869))+(((-1.0)*r11*x12854)));
evalcond[7]=((((-1.0)*r02*x12872))+(((-1.0)*r00*x12868))+(((-1.0)*r01*x12851*x12866))+((r00*x12850*x12854))+((cj0*x12857))+(((-1.0)*x12858*x12859))+(((-1.0)*x12855*x12865)));
evalcond[8]=((((-1.0)*r10*x12868))+(((-1.0)*r11*x12851*x12866))+(((-1.0)*x12858*x12860))+(((-1.0)*cj3*x12869))+(((-1.0)*sj0*x12855))+((cj1*x12853))+((r10*x12850*x12854)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12873 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst13*r21))+(((-1.0)*cj0*gconst14*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12873.valid){
continue;
}
CheckValue<IkReal> x12874=IKPowWithIntegerCheck(IKsign((((gconst14*r01))+((gconst13*r00)))),-1);
if(!x12874.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12873.value)+(((1.5707963267949)*(x12874.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12875=IKsin(j4);
IkReal x12876=IKcos(j4);
IkReal x12877=(cj3*gconst13);
IkReal x12878=((1.0)*r20);
IkReal x12879=(cj2*sj0);
IkReal x12880=(cj3*gconst14);
IkReal x12881=(sj1*sj2);
IkReal x12882=((1.0)*r21);
IkReal x12883=(cj1*cj2);
IkReal x12884=((1.0)*gconst14);
IkReal x12885=(r01*sj3);
IkReal x12886=(r11*sj3);
IkReal x12887=(gconst13*sj3);
IkReal x12888=(cj2*sj1);
IkReal x12889=(gconst14*sj3);
IkReal x12890=(cj1*sj2);
IkReal x12891=((1.0)*cj0);
IkReal x12892=((1.0)*x12876);
IkReal x12893=(gconst13*x12875);
IkReal x12894=((1.0)*x12887);
IkReal x12895=(r12*x12875);
IkReal x12896=(sj3*x12875);
IkReal x12897=(gconst13*x12876);
IkReal x12898=((1.0)*cj3*x12875);
evalcond[0]=((((-1.0)*r22*x12892))+((r21*x12893))+(((-1.0)*gconst14*x12875*x12878)));
evalcond[1]=(sj0+((r01*x12893))+(((-1.0)*r00*x12875*x12884))+(((-1.0)*r02*x12892)));
evalcond[2]=((((-1.0)*r10*x12875*x12884))+(((-1.0)*x12891))+((r11*x12893))+(((-1.0)*r12*x12892)));
evalcond[3]=(x12881+(((-1.0)*x12883))+((r22*x12896))+(((-1.0)*x12876*x12878*x12889))+(((-1.0)*x12880*x12882))+((r21*x12876*x12887))+(((-1.0)*x12877*x12878)));
evalcond[4]=(x12890+x12888+(((-1.0)*r22*x12898))+(((-1.0)*x12878*x12887))+(((-1.0)*x12882*x12889))+((r20*x12876*x12880))+(((-1.0)*x12876*x12877*x12882)));
evalcond[5]=((((-1.0)*r00*sj3*x12876*x12884))+(((-1.0)*r00*x12877))+((x12885*x12897))+((r02*x12896))+((cj0*x12890))+(((-1.0)*r01*x12880))+((cj0*x12888)));
evalcond[6]=(((x12886*x12897))+(((-1.0)*r11*x12880))+((sj1*x12879))+((sj3*x12895))+(((-1.0)*r10*x12877))+(((-1.0)*r10*sj3*x12876*x12884))+((sj0*x12890)));
evalcond[7]=((((-1.0)*r00*x12894))+((r00*x12876*x12880))+(((-1.0)*x12884*x12885))+(((-1.0)*x12881*x12891))+(((-1.0)*r01*x12877*x12892))+((cj0*x12883))+(((-1.0)*r02*x12898)));
evalcond[8]=((((-1.0)*r11*x12877*x12892))+(((-1.0)*x12884*x12886))+((r10*x12876*x12880))+(((-1.0)*sj0*x12881))+(((-1.0)*cj3*x12895))+((cj1*x12879))+(((-1.0)*r10*x12894)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x12900 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x12900)==0){
continue;
}
IkReal x12899=pow(x12900,-0.5);
CheckValue<IkReal> x12901 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x12901.valid){
continue;
}
IkReal gconst15=((3.14159265358979)+(((-1.0)*(x12901.value))));
IkReal gconst16=((1.0)*r11*x12899);
IkReal gconst17=((-1.0)*r10*x12899);
CheckValue<IkReal> x12902 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x12902.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x12902.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x12905 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x12905.valid){
continue;
}
IkReal x12903=((1.0)*(x12905.value));
IkReal x12904=x12899;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x12903)));
IkReal gconst15=((3.14159265358979)+(((-1.0)*x12903)));
IkReal gconst16=((1.0)*r11*x12904);
IkReal gconst17=((-1.0)*r10*x12904);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x12908 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x12908.valid){
continue;
}
IkReal x12906=((1.0)*(x12908.value));
IkReal x12907=x12899;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x12906)));
IkReal gconst15=((3.14159265358979)+(((-1.0)*x12906)));
IkReal gconst16=((1.0)*r11*x12907);
IkReal gconst17=((-1.0)*r10*x12907);
IkReal x12909=r12*r12;
IkReal x12910=(cj0*r02);
IkReal x12911=x12899;
IkReal x12912=(sj0*x12911);
j4eval[0]=((IKabs((x12910+((r12*sj0)))))+(IKabs((((x12909*x12912))+(((-1.0)*x12912))+((r12*x12910*x12911))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x12915 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x12915.valid){
continue;
}
IkReal x12913=((1.0)*(x12915.value));
IkReal x12914=x12899;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x12913)));
IkReal gconst15=((3.14159265358979)+(((-1.0)*x12913)));
IkReal gconst16=((1.0)*r11*x12914);
IkReal gconst17=((-1.0)*r10*x12914);
CheckValue<IkReal> x12919=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r12*r12)))),-1);
if(!x12919.valid){
continue;
}
IkReal x12916=x12919.value;
IkReal x12917=(cj3*x12916);
IkReal x12918=((1.0)*x12917);
j4eval[0]=IKsign((((x12918*(r11*r11)*(r21*r21)))+((cj3*(r22*r22)))+(((2.0)*r10*r11*r20*r21*x12917))+((x12918*(r10*r10)*(r20*r20)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x12922 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x12922.valid){
continue;
}
IkReal x12920=((1.0)*(x12922.value));
IkReal x12921=x12899;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x12920)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst15=((3.14159265358979)+(((-1.0)*x12920)));
IkReal gconst16=((1.0)*r11*x12921);
IkReal gconst17=((-1.0)*r10*x12921);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x12925 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x12925.valid){
continue;
}
IkReal x12923=((1.0)*(x12925.value));
IkReal x12924=x12899;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x12923)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst15=((3.14159265358979)+(((-1.0)*x12923)));
IkReal gconst16=((1.0)*r11*x12924);
IkReal gconst17=((-1.0)*r10*x12924);
IkReal x12926=r12*r12;
IkReal x12927=(cj0*r02);
IkReal x12928=x12899;
IkReal x12929=(sj0*x12928);
j4eval[0]=((IKabs(((((-1.0)*x12929))+((r12*x12927*x12928))+((x12926*x12929)))))+(IKabs((x12927+((r12*sj0))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x12932 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x12932.valid){
continue;
}
IkReal x12930=((1.0)*(x12932.value));
IkReal x12931=x12899;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x12930)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst15=((3.14159265358979)+(((-1.0)*x12930)));
IkReal gconst16=((1.0)*r11*x12931);
IkReal gconst17=((-1.0)*r10*x12931);
IkReal x12933=r12*r12;
IkReal x12934=(sj1*sj2);
IkReal x12935=((1.0)+(((-1.0)*x12933)));
IkReal x12936=((1.0)*cj1*cj2);
CheckValue<IkReal> x12943=IKPowWithIntegerCheck(x12935,-1);
if(!x12943.valid){
continue;
}
IkReal x12937=x12943.value;
CheckValue<IkReal> x12944=IKPowWithIntegerCheck(((-1.0)+x12933),-1);
if(!x12944.valid){
continue;
}
IkReal x12938=x12944.value;
IkReal x12939=((1.0)*x12937);
if((x12935) < -0.00001)
continue;
IkReal x12940=IKsqrt(x12935);
IkReal x12941=(r12*r22*x12938*x12940);
IkReal x12942=((((-2.0)*r10*r11*r20*r21*x12937))+(((-1.0)*(r22*r22)))+(((-1.0)*x12939*(r10*r10)*(r20*r20)))+(((-1.0)*x12939*(r11*r11)*(r21*r21))));
j4eval[0]=x12942;
j4eval[1]=((IKabs(((((-1.0)*x12936*x12941))+((x12934*x12941)))))+(IKabs((((r22*x12934))+(((-1.0)*r22*x12936))))));
j4eval[2]=IKsign(x12942);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12945=(gconst17*r20);
IkReal x12946=(cj1*cj2);
IkReal x12947=(sj1*sj2);
IkReal x12948=(gconst16*r21);
CheckValue<IkReal> x12949=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x12945*x12945)))+(((2.0)*x12945*x12948))+(((-1.0)*(r22*r22)))+(((-1.0)*(x12948*x12948))))),-1);
if(!x12949.valid){
continue;
}
CheckValue<IkReal> x12950 = IKatan2WithCheck(IkReal((((r22*x12947))+(((-1.0)*r22*x12946)))),IkReal((((x12945*x12946))+((x12947*x12948))+(((-1.0)*x12945*x12947))+(((-1.0)*x12946*x12948)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12950.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12949.value)))+(x12950.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12951=IKsin(j4);
IkReal x12952=IKcos(j4);
IkReal x12953=(cj2*sj1);
IkReal x12954=(gconst17*r20);
IkReal x12955=(gconst17*r00);
IkReal x12956=(gconst17*r10);
IkReal x12957=(cj1*sj2);
IkReal x12958=((1.0)*x12952);
IkReal x12959=(gconst16*x12951);
IkReal x12960=((1.0)*x12951);
IkReal x12961=(gconst16*x12952);
evalcond[0]=(((r21*x12959))+(((-1.0)*r22*x12958))+(((-1.0)*x12954*x12960)));
evalcond[1]=(sj0+(((-1.0)*x12955*x12960))+((r01*x12959))+(((-1.0)*r02*x12958)));
evalcond[2]=((((-1.0)*r12*x12958))+((r11*x12959))+(((-1.0)*x12956*x12960))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*x12954*x12958))+((r22*x12951))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r21*x12961)));
evalcond[4]=(((cj0*x12957))+((cj0*x12953))+(((-1.0)*x12955*x12958))+((r01*x12961))+((r02*x12951)));
evalcond[5]=((((-1.0)*x12956*x12958))+((r12*x12951))+((sj0*x12957))+((sj0*x12953))+((r11*x12961)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12962=((1.0)*gconst17);
CheckValue<IkReal> x12963=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst16*r20))+(((-1.0)*r21*x12962)))),-1);
if(!x12963.valid){
continue;
}
CheckValue<IkReal> x12964 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((gconst16*r11*sj0))+(((-1.0)*cj0*r00*x12962))+(((-1.0)*r10*sj0*x12962))+((cj0*gconst16*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12964.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12963.value)))+(x12964.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12965=IKsin(j4);
IkReal x12966=IKcos(j4);
IkReal x12967=(cj2*sj1);
IkReal x12968=(gconst17*r20);
IkReal x12969=(gconst17*r00);
IkReal x12970=(gconst17*r10);
IkReal x12971=(cj1*sj2);
IkReal x12972=((1.0)*x12966);
IkReal x12973=(gconst16*x12965);
IkReal x12974=((1.0)*x12965);
IkReal x12975=(gconst16*x12966);
evalcond[0]=((((-1.0)*r22*x12972))+(((-1.0)*x12968*x12974))+((r21*x12973)));
evalcond[1]=(((r01*x12973))+sj0+(((-1.0)*r02*x12972))+(((-1.0)*x12969*x12974)));
evalcond[2]=((((-1.0)*r12*x12972))+(((-1.0)*x12970*x12974))+((r11*x12973))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x12965))+(((-1.0)*x12968*x12972))+((r21*x12975)));
evalcond[4]=(((cj0*x12967))+((r01*x12975))+((r02*x12965))+(((-1.0)*x12969*x12972))+((cj0*x12971)));
evalcond[5]=((((-1.0)*x12970*x12972))+((r11*x12975))+((r12*x12965))+((sj0*x12971))+((sj0*x12967)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12976=IKPowWithIntegerCheck(IKsign((((gconst17*r01))+((gconst16*r00)))),-1);
if(!x12976.valid){
continue;
}
CheckValue<IkReal> x12977 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*gconst17*r20))+((cj0*gconst16*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12977.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12976.value)))+(x12977.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12978=IKsin(j4);
IkReal x12979=IKcos(j4);
IkReal x12980=(cj2*sj1);
IkReal x12981=(gconst17*r20);
IkReal x12982=(gconst17*r00);
IkReal x12983=(gconst17*r10);
IkReal x12984=(cj1*sj2);
IkReal x12985=((1.0)*x12979);
IkReal x12986=(gconst16*x12978);
IkReal x12987=((1.0)*x12978);
IkReal x12988=(gconst16*x12979);
evalcond[0]=((((-1.0)*r22*x12985))+((r21*x12986))+(((-1.0)*x12981*x12987)));
evalcond[1]=(sj0+((r01*x12986))+(((-1.0)*x12982*x12987))+(((-1.0)*r02*x12985)));
evalcond[2]=((((-1.0)*x12983*x12987))+((r11*x12986))+(((-1.0)*r12*x12985))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r21*x12988))+((r22*x12978))+(((-1.0)*x12981*x12985)));
evalcond[4]=(((cj0*x12984))+((cj0*x12980))+((r02*x12978))+((r01*x12988))+(((-1.0)*x12982*x12985)));
evalcond[5]=((((-1.0)*x12983*x12985))+((r11*x12988))+((sj0*x12984))+((sj0*x12980))+((r12*x12978)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x12991 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x12991.valid){
continue;
}
IkReal x12989=((1.0)*(x12991.value));
IkReal x12990=x12899;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x12989)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst15=((3.14159265358979)+(((-1.0)*x12989)));
IkReal gconst16=((1.0)*r11*x12990);
IkReal gconst17=((-1.0)*r10*x12990);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x12994 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x12994.valid){
continue;
}
IkReal x12992=((1.0)*(x12994.value));
IkReal x12993=x12899;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x12992)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst15=((3.14159265358979)+(((-1.0)*x12992)));
IkReal gconst16=((1.0)*r11*x12993);
IkReal gconst17=((-1.0)*r10*x12993);
IkReal x12995=r12*r12;
IkReal x12996=(cj0*r02);
IkReal x12997=x12899;
IkReal x12998=(sj0*x12997);
j4eval[0]=((IKabs((x12996+((r12*sj0)))))+(IKabs((((x12995*x12998))+(((-1.0)*x12998))+((r12*x12996*x12997))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x13001 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x13001.valid){
continue;
}
IkReal x12999=((1.0)*(x13001.value));
IkReal x13000=x12899;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x12999)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst15=((3.14159265358979)+(((-1.0)*x12999)));
IkReal gconst16=((1.0)*r11*x13000);
IkReal gconst17=((-1.0)*r10*x13000);
IkReal x13002=r12*r12;
IkReal x13003=(sj1*sj2);
IkReal x13004=((1.0)*cj1*cj2);
CheckValue<IkReal> x13008=IKPowWithIntegerCheck(((-1.0)+x13002),-1);
if(!x13008.valid){
continue;
}
IkReal x13005=x13008.value;
if((((1.0)+(((-1.0)*x13002)))) < -0.00001)
continue;
IkReal x13006=IKsqrt(((1.0)+(((-1.0)*x13002))));
IkReal x13007=(r12*r22*x13005*x13006);
j4eval[0]=((IKabs(((((-1.0)*x13004*x13007))+((x13003*x13007)))))+(IKabs(((((-1.0)*r22*x13004))+((r22*x13003))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13009=(gconst17*r20);
IkReal x13010=(cj1*cj2);
IkReal x13011=(sj1*sj2);
IkReal x13012=(gconst16*r21);
CheckValue<IkReal> x13013 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x13010))+((r22*x13011)))),IkReal(((((-1.0)*x13009*x13011))+((x13009*x13010))+(((-1.0)*x13010*x13012))+((x13011*x13012)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13013.valid){
continue;
}
CheckValue<IkReal> x13014=IKPowWithIntegerCheck(IKsign(((r22*r22)+(x13012*x13012)+(x13009*x13009)+(((-2.0)*x13009*x13012)))),-1);
if(!x13014.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13013.value)+(((1.5707963267949)*(x13014.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13015=IKsin(j4);
IkReal x13016=IKcos(j4);
IkReal x13017=(gconst16*r01);
IkReal x13018=(cj2*sj1);
IkReal x13019=(gconst16*r21);
IkReal x13020=(gconst16*r11);
IkReal x13021=(cj1*sj2);
IkReal x13022=((1.0)*x13016);
IkReal x13023=(gconst17*x13016);
IkReal x13024=((1.0)*x13015);
evalcond[0]=((((-1.0)*r22*x13022))+(((-1.0)*gconst17*r20*x13024))+((x13015*x13019)));
evalcond[1]=(sj0+(((-1.0)*gconst17*r00*x13024))+((x13015*x13017))+(((-1.0)*r02*x13022)));
evalcond[2]=((((-1.0)*gconst17*r10*x13024))+((x13015*x13020))+(((-1.0)*cj0))+(((-1.0)*r12*x13022)));
evalcond[3]=((((-1.0)*r22*x13024))+((r20*x13023))+(((-1.0)*x13019*x13022))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
evalcond[4]=(((r00*x13023))+((cj0*x13021))+((cj0*x13018))+(((-1.0)*r02*x13024))+(((-1.0)*x13017*x13022)));
evalcond[5]=(((sj0*x13021))+((sj0*x13018))+(((-1.0)*x13020*x13022))+(((-1.0)*r12*x13024))+((r10*x13023)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13025=((1.0)*gconst17);
CheckValue<IkReal> x13026=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst16*r20))+(((-1.0)*r21*x13025)))),-1);
if(!x13026.valid){
continue;
}
CheckValue<IkReal> x13027 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*cj0*r00*x13025))+((gconst16*r11*sj0))+((cj0*gconst16*r01))+(((-1.0)*r10*sj0*x13025)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13027.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13026.value)))+(x13027.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13028=IKsin(j4);
IkReal x13029=IKcos(j4);
IkReal x13030=(gconst16*r01);
IkReal x13031=(cj2*sj1);
IkReal x13032=(gconst16*r21);
IkReal x13033=(gconst16*r11);
IkReal x13034=(cj1*sj2);
IkReal x13035=((1.0)*x13029);
IkReal x13036=(gconst17*x13029);
IkReal x13037=((1.0)*x13028);
evalcond[0]=(((x13028*x13032))+(((-1.0)*r22*x13035))+(((-1.0)*gconst17*r20*x13037)));
evalcond[1]=(sj0+(((-1.0)*r02*x13035))+((x13028*x13030))+(((-1.0)*gconst17*r00*x13037)));
evalcond[2]=(((x13028*x13033))+(((-1.0)*r12*x13035))+(((-1.0)*gconst17*r10*x13037))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*x13032*x13035))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x13037))+((r20*x13036)));
evalcond[4]=(((cj0*x13034))+((cj0*x13031))+(((-1.0)*x13030*x13035))+(((-1.0)*r02*x13037))+((r00*x13036)));
evalcond[5]=(((sj0*x13031))+((sj0*x13034))+(((-1.0)*x13033*x13035))+(((-1.0)*r12*x13037))+((r10*x13036)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13038=IKPowWithIntegerCheck(IKsign((((gconst17*r01))+((gconst16*r00)))),-1);
if(!x13038.valid){
continue;
}
CheckValue<IkReal> x13039 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*gconst17*r20))+((cj0*gconst16*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13039.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13038.value)))+(x13039.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13040=IKsin(j4);
IkReal x13041=IKcos(j4);
IkReal x13042=(gconst16*r01);
IkReal x13043=(cj2*sj1);
IkReal x13044=(gconst16*r21);
IkReal x13045=(gconst16*r11);
IkReal x13046=(cj1*sj2);
IkReal x13047=((1.0)*x13041);
IkReal x13048=(gconst17*x13041);
IkReal x13049=((1.0)*x13040);
evalcond[0]=(((x13040*x13044))+(((-1.0)*r22*x13047))+(((-1.0)*gconst17*r20*x13049)));
evalcond[1]=(sj0+(((-1.0)*r02*x13047))+((x13040*x13042))+(((-1.0)*gconst17*r00*x13049)));
evalcond[2]=(((x13040*x13045))+(((-1.0)*gconst17*r10*x13049))+(((-1.0)*r12*x13047))+(((-1.0)*cj0)));
evalcond[3]=(((r20*x13048))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x13049))+(((-1.0)*x13044*x13047)));
evalcond[4]=(((cj0*x13046))+((cj0*x13043))+(((-1.0)*r02*x13049))+((r00*x13048))+(((-1.0)*x13042*x13047)));
evalcond[5]=((((-1.0)*x13045*x13047))+((r10*x13048))+(((-1.0)*r12*x13049))+((sj0*x13043))+((sj0*x13046)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x13052 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x13052.valid){
continue;
}
IkReal x13050=((1.0)*(x13052.value));
IkReal x13051=x12899;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x13050)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst15=((3.14159265358979)+(((-1.0)*x13050)));
IkReal gconst16=((1.0)*r11*x13051);
IkReal gconst17=((-1.0)*r10*x13051);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13053=gconst17*gconst17;
IkReal x13054=gconst16*gconst16;
IkReal x13055=(cj3*r01);
IkReal x13056=(r01*sj3);
IkReal x13057=(cj3*r00);
IkReal x13058=(r00*sj3);
IkReal x13059=(gconst16*gconst17);
IkReal x13060=((1.0)*r21);
IkReal x13061=((1.0)*r22);
IkReal x13062=(r21*x13054);
IkReal x13063=(r20*x13053);
CheckValue<IkReal> x13064=IKPowWithIntegerCheck(IKsign((((x13055*x13062))+(((-1.0)*r20*x13055*x13059))+((x13057*x13063))+(((-1.0)*x13057*x13059*x13060))+((cj3*r02*r22)))),-1);
if(!x13064.valid){
continue;
}
CheckValue<IkReal> x13065 = IKatan2WithCheck(IkReal(((((-1.0)*gconst16*x13058*x13061))+(((-1.0)*gconst17*x13056*x13061)))),IkReal(((((-1.0)*x13056*x13059*x13060))+((r20*x13058*x13059))+((x13056*x13063))+(((-1.0)*x13054*x13058*x13060)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13065.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13064.value)))+(x13065.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13066=IKsin(j4);
IkReal x13067=IKcos(j4);
IkReal x13068=(sj1*sj2);
IkReal x13069=((1.0)*cj1);
IkReal x13070=(gconst16*r01);
IkReal x13071=((1.0)*gconst17);
IkReal x13072=(gconst16*r11);
IkReal x13073=(r10*sj3);
IkReal x13074=(cj2*sj1);
IkReal x13075=(gconst16*r21);
IkReal x13076=((1.0)*gconst16);
IkReal x13077=(r00*sj3);
IkReal x13078=(r20*sj3);
IkReal x13079=(cj2*x13069);
IkReal x13080=((1.0)*x13067);
IkReal x13081=(sj3*x13067);
IkReal x13082=(r12*x13066);
IkReal x13083=(sj3*x13066);
IkReal x13084=(cj3*gconst17*x13067);
IkReal x13085=((1.0)*cj3*x13066);
evalcond[0]=(((x13066*x13075))+(((-1.0)*r20*x13066*x13071))+(((-1.0)*r22*x13080)));
evalcond[1]=((((-1.0)*r10*x13066*x13071))+((x13066*x13072))+(((-1.0)*r12*x13080)));
evalcond[2]=((-1.0)+(((-1.0)*r02*x13080))+((x13066*x13070))+(((-1.0)*r00*x13066*x13071)));
evalcond[3]=(((x13070*x13081))+(((-1.0)*x13067*x13071*x13077))+((r02*x13083))+(((-1.0)*cj3*r00*x13076))+(((-1.0)*cj3*r01*x13071)));
evalcond[4]=((((-1.0)*x13076*x13077))+(((-1.0)*r02*x13085))+(((-1.0)*cj3*x13070*x13080))+(((-1.0)*r01*sj3*x13071))+((r00*x13084)));
evalcond[5]=((((-1.0)*x13067*x13071*x13078))+((x13075*x13081))+(((-1.0)*cj3*r21*x13071))+(((-1.0)*x13079))+((r22*x13083))+x13068+(((-1.0)*cj3*r20*x13076)));
evalcond[6]=((((-1.0)*cj3*x13075*x13080))+((r20*x13084))+(((-1.0)*x13076*x13078))+(((-1.0)*r21*sj3*x13071))+((cj1*sj2))+(((-1.0)*r22*x13085))+x13074);
evalcond[7]=((((-1.0)*x13067*x13071*x13073))+((sj3*x13082))+(((-1.0)*cj3*r11*x13071))+((x13072*x13081))+(((-1.0)*x13074))+(((-1.0)*cj3*r10*x13076))+(((-1.0)*sj2*x13069)));
evalcond[8]=((((-1.0)*cj3*x13082))+(((-1.0)*r11*sj3*x13071))+(((-1.0)*x13079))+(((-1.0)*cj3*x13072*x13080))+(((-1.0)*x13073*x13076))+x13068+((r10*x13084)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13086 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*gconst17*r10))+((gconst16*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13086.valid){
continue;
}
CheckValue<IkReal> x13087=IKPowWithIntegerCheck(IKsign((((gconst17*r21))+((gconst16*r20)))),-1);
if(!x13087.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13086.value)+(((1.5707963267949)*(x13087.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13088=IKsin(j4);
IkReal x13089=IKcos(j4);
IkReal x13090=(sj1*sj2);
IkReal x13091=((1.0)*cj1);
IkReal x13092=(gconst16*r01);
IkReal x13093=((1.0)*gconst17);
IkReal x13094=(gconst16*r11);
IkReal x13095=(r10*sj3);
IkReal x13096=(cj2*sj1);
IkReal x13097=(gconst16*r21);
IkReal x13098=((1.0)*gconst16);
IkReal x13099=(r00*sj3);
IkReal x13100=(r20*sj3);
IkReal x13101=(cj2*x13091);
IkReal x13102=((1.0)*x13089);
IkReal x13103=(sj3*x13089);
IkReal x13104=(r12*x13088);
IkReal x13105=(sj3*x13088);
IkReal x13106=(cj3*gconst17*x13089);
IkReal x13107=((1.0)*cj3*x13088);
evalcond[0]=(((x13088*x13097))+(((-1.0)*r20*x13088*x13093))+(((-1.0)*r22*x13102)));
evalcond[1]=(((x13088*x13094))+(((-1.0)*r12*x13102))+(((-1.0)*r10*x13088*x13093)));
evalcond[2]=((-1.0)+((x13088*x13092))+(((-1.0)*r00*x13088*x13093))+(((-1.0)*r02*x13102)));
evalcond[3]=((((-1.0)*cj3*r00*x13098))+((x13092*x13103))+(((-1.0)*cj3*r01*x13093))+(((-1.0)*x13089*x13093*x13099))+((r02*x13105)));
evalcond[4]=(((r00*x13106))+(((-1.0)*cj3*x13092*x13102))+(((-1.0)*r02*x13107))+(((-1.0)*r01*sj3*x13093))+(((-1.0)*x13098*x13099)));
evalcond[5]=(((x13097*x13103))+((r22*x13105))+(((-1.0)*x13101))+x13090+(((-1.0)*x13089*x13093*x13100))+(((-1.0)*cj3*r20*x13098))+(((-1.0)*cj3*r21*x13093)));
evalcond[6]=((((-1.0)*x13098*x13100))+((r20*x13106))+((cj1*sj2))+x13096+(((-1.0)*cj3*x13097*x13102))+(((-1.0)*r22*x13107))+(((-1.0)*r21*sj3*x13093)));
evalcond[7]=((((-1.0)*cj3*r11*x13093))+((x13094*x13103))+((sj3*x13104))+(((-1.0)*x13089*x13093*x13095))+(((-1.0)*cj3*r10*x13098))+(((-1.0)*x13096))+(((-1.0)*sj2*x13091)));
evalcond[8]=((((-1.0)*cj3*x13094*x13102))+(((-1.0)*r11*sj3*x13093))+(((-1.0)*cj3*x13104))+(((-1.0)*x13095*x13098))+(((-1.0)*x13101))+x13090+((r10*x13106)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
CheckValue<IkReal> x13110 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x13110.valid){
continue;
}
IkReal x13108=((1.0)*(x13110.value));
IkReal x13109=((-1.0)*px);
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x13108)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x13109);
rxp1_1=(px*r21);
rxp1_2=(r11*x13109);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst15=((3.14159265358979)+(((-1.0)*x13108)));
IkReal gconst16=((1.0)*r11);
IkReal gconst17=((-1.0)*r10);
j4eval[0]=1.0;
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x13113 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x13113.valid){
continue;
}
IkReal x13111=((1.0)*(x13113.value));
IkReal x13112=((-1.0)*px);
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x13111)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x13112);
rxp1_1=(px*r21);
rxp1_2=(r11*x13112);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst15=((3.14159265358979)+(((-1.0)*x13111)));
IkReal gconst16=((1.0)*r11);
IkReal gconst17=((-1.0)*r10);
j4eval[0]=cj3;
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x13116 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x13116.valid){
continue;
}
IkReal x13114=((1.0)*(x13116.value));
IkReal x13115=((-1.0)*px);
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x13114)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x13115);
rxp1_1=(px*r21);
rxp1_2=(r11*x13115);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst15=((3.14159265358979)+(((-1.0)*x13114)));
IkReal gconst16=((1.0)*r11);
IkReal gconst17=((-1.0)*r10);
j4eval[0]=r02;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13119=IKPowWithIntegerCheck(r02,-1);
if(!x13119.valid){
continue;
}
IkReal x13117=x13119.value;
IkReal x13118=((1.0)*cj0);
CheckValue<IkReal> x13120=IKPowWithIntegerCheck(sj3,-1);
if(!x13120.valid){
continue;
}
if( IKabs((x13117*(x13120.value)*(((((-1.0)*cj1*sj2*x13118))+(((-1.0)*cj2*sj1*x13118)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((sj0*x13117)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x13117*(x13120.value)*(((((-1.0)*cj1*sj2*x13118))+(((-1.0)*cj2*sj1*x13118))))))+IKsqr((sj0*x13117))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x13117*(x13120.value)*(((((-1.0)*cj1*sj2*x13118))+(((-1.0)*cj2*sj1*x13118))))), (sj0*x13117));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13121=IKsin(j4);
IkReal x13122=IKcos(j4);
IkReal x13123=((1.0)*gconst17);
IkReal x13124=(cj3*r21);
IkReal x13125=(cj2*sj0);
IkReal x13126=(gconst16*r11);
IkReal x13127=(sj1*sj2);
IkReal x13128=(cj1*cj2);
IkReal x13129=(gconst16*r21);
IkReal x13130=(cj2*sj1);
IkReal x13131=((1.0)*gconst16);
IkReal x13132=((1.0)*cj3);
IkReal x13133=(cj1*sj2);
IkReal x13134=((1.0)*cj0);
IkReal x13135=(sj3*x13122);
IkReal x13136=(r02*x13121);
IkReal x13137=(cj3*gconst17*x13122);
evalcond[0]=(sj0+(((-1.0)*r02*x13122)));
evalcond[1]=(((x13121*x13129))+(((-1.0)*r20*x13121*x13123)));
evalcond[2]=(((sj3*x13136))+((cj0*x13133))+((cj0*x13130)));
evalcond[3]=((((-1.0)*r10*x13121*x13123))+((x13121*x13126))+(((-1.0)*x13134)));
evalcond[4]=((((-1.0)*x13132*x13136))+(((-1.0)*x13127*x13134))+((cj0*x13128)));
evalcond[5]=((((-1.0)*r20*sj3*x13131))+(((-1.0)*r21*sj3*x13123))+((r20*x13137))+x13133+x13130+(((-1.0)*x13122*x13124*x13131)));
evalcond[6]=((((-1.0)*r20*x13123*x13135))+((x13129*x13135))+(((-1.0)*x13123*x13124))+(((-1.0)*cj3*r20*x13131))+x13127+(((-1.0)*x13128)));
evalcond[7]=((((-1.0)*cj3*r11*x13123))+(((-1.0)*r10*x13123*x13135))+((sj0*x13133))+((x13126*x13135))+(((-1.0)*cj3*r10*x13131))+((sj1*x13125)));
evalcond[8]=((((-1.0)*r11*sj3*x13123))+((r10*x13137))+(((-1.0)*sj0*x13127))+((cj1*x13125))+(((-1.0)*x13122*x13126*x13132))+(((-1.0)*r10*sj3*x13131)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13139=IKPowWithIntegerCheck(r02,-1);
if(!x13139.valid){
continue;
}
IkReal x13138=x13139.value;
CheckValue<IkReal> x13140=IKPowWithIntegerCheck(cj3,-1);
if(!x13140.valid){
continue;
}
if( IKabs((x13138*(x13140.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((sj0*x13138)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x13138*(x13140.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))))+IKsqr((sj0*x13138))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x13138*(x13140.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))), (sj0*x13138));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13141=IKsin(j4);
IkReal x13142=IKcos(j4);
IkReal x13143=((1.0)*gconst17);
IkReal x13144=(cj3*r21);
IkReal x13145=(cj2*sj0);
IkReal x13146=(gconst16*r11);
IkReal x13147=(sj1*sj2);
IkReal x13148=(cj1*cj2);
IkReal x13149=(gconst16*r21);
IkReal x13150=(cj2*sj1);
IkReal x13151=((1.0)*gconst16);
IkReal x13152=((1.0)*cj3);
IkReal x13153=(cj1*sj2);
IkReal x13154=((1.0)*cj0);
IkReal x13155=(sj3*x13142);
IkReal x13156=(r02*x13141);
IkReal x13157=(cj3*gconst17*x13142);
evalcond[0]=(sj0+(((-1.0)*r02*x13142)));
evalcond[1]=(((x13141*x13149))+(((-1.0)*r20*x13141*x13143)));
evalcond[2]=(((sj3*x13156))+((cj0*x13153))+((cj0*x13150)));
evalcond[3]=(((x13141*x13146))+(((-1.0)*x13154))+(((-1.0)*r10*x13141*x13143)));
evalcond[4]=((((-1.0)*x13147*x13154))+(((-1.0)*x13152*x13156))+((cj0*x13148)));
evalcond[5]=((((-1.0)*x13142*x13144*x13151))+((r20*x13157))+x13150+x13153+(((-1.0)*r20*sj3*x13151))+(((-1.0)*r21*sj3*x13143)));
evalcond[6]=(((x13149*x13155))+(((-1.0)*x13143*x13144))+(((-1.0)*cj3*r20*x13151))+(((-1.0)*r20*x13143*x13155))+x13147+(((-1.0)*x13148)));
evalcond[7]=(((sj0*x13153))+(((-1.0)*cj3*r10*x13151))+((x13146*x13155))+(((-1.0)*r10*x13143*x13155))+(((-1.0)*cj3*r11*x13143))+((sj1*x13145)));
evalcond[8]=((((-1.0)*x13142*x13146*x13152))+(((-1.0)*r10*sj3*x13151))+((cj1*x13145))+((r10*x13157))+(((-1.0)*r11*sj3*x13143))+(((-1.0)*sj0*x13147)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13158=IKPowWithIntegerCheck(((((-1.0)*gconst17*r10))+((gconst16*r11))),-1);
if(!x13158.valid){
continue;
}
CheckValue<IkReal> x13159=IKPowWithIntegerCheck(r02,-1);
if(!x13159.valid){
continue;
}
if( IKabs((cj0*(x13158.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs((sj0*(x13159.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((cj0*(x13158.value)))+IKsqr((sj0*(x13159.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((cj0*(x13158.value)), (sj0*(x13159.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13160=IKsin(j4);
IkReal x13161=IKcos(j4);
IkReal x13162=((1.0)*gconst17);
IkReal x13163=(cj3*r21);
IkReal x13164=(cj2*sj0);
IkReal x13165=(gconst16*r11);
IkReal x13166=(sj1*sj2);
IkReal x13167=(cj1*cj2);
IkReal x13168=(gconst16*r21);
IkReal x13169=(cj2*sj1);
IkReal x13170=((1.0)*gconst16);
IkReal x13171=((1.0)*cj3);
IkReal x13172=(cj1*sj2);
IkReal x13173=((1.0)*cj0);
IkReal x13174=(sj3*x13161);
IkReal x13175=(r02*x13160);
IkReal x13176=(cj3*gconst17*x13161);
evalcond[0]=(sj0+(((-1.0)*r02*x13161)));
evalcond[1]=(((x13160*x13168))+(((-1.0)*r20*x13160*x13162)));
evalcond[2]=(((sj3*x13175))+((cj0*x13172))+((cj0*x13169)));
evalcond[3]=((((-1.0)*r10*x13160*x13162))+((x13160*x13165))+(((-1.0)*x13173)));
evalcond[4]=((((-1.0)*x13166*x13173))+(((-1.0)*x13171*x13175))+((cj0*x13167)));
evalcond[5]=(((r20*x13176))+(((-1.0)*r20*sj3*x13170))+(((-1.0)*r21*sj3*x13162))+(((-1.0)*x13161*x13163*x13170))+x13172+x13169);
evalcond[6]=((((-1.0)*cj3*r20*x13170))+(((-1.0)*r20*x13162*x13174))+(((-1.0)*x13162*x13163))+(((-1.0)*x13167))+x13166+((x13168*x13174)));
evalcond[7]=(((sj1*x13164))+((x13165*x13174))+(((-1.0)*cj3*r11*x13162))+(((-1.0)*cj3*r10*x13170))+(((-1.0)*r10*x13162*x13174))+((sj0*x13172)));
evalcond[8]=(((cj1*x13164))+(((-1.0)*r11*sj3*x13162))+(((-1.0)*sj0*x13166))+(((-1.0)*r10*sj3*x13170))+(((-1.0)*x13161*x13165*x13171))+((r10*x13176)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r22);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x13179 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x13179.valid){
continue;
}
IkReal x13177=((1.0)*(x13179.value));
IkReal x13178=x12899;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x13177)));
r22=0;
npz=(((px*r02))+((py*r12)));
rxp2_0=(pz*r12);
rxp2_1=((-1.0)*pz*r02);
IkReal gconst15=((3.14159265358979)+(((-1.0)*x13177)));
IkReal gconst16=((1.0)*r11*x13178);
IkReal gconst17=((-1.0)*r10*x13178);
IkReal x13180=r12*r12;
IkReal x13181=(cj0*r02);
IkReal x13182=x12899;
IkReal x13183=(sj0*x13182);
j4eval[0]=((IKabs((((r12*x13181*x13182))+(((-1.0)*x13183))+((x13180*x13183)))))+(IKabs((((r12*sj0))+x13181))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13184=(sj0*sj3);
IkReal x13185=(cj3*r02);
IkReal x13186=(gconst16*r20);
IkReal x13187=(gconst17*r20);
IkReal x13188=(gconst17*r21);
IkReal x13189=(cj1*cj2);
IkReal x13190=(r00*sj3);
IkReal x13191=(r21*sj3);
IkReal x13192=((1.0)*sj3);
IkReal x13193=((1.0)*sj1*sj2);
IkReal x13194=((1.0)*gconst16*r21);
CheckValue<IkReal> x13195=IKPowWithIntegerCheck(((((-1.0)*gconst17*r01*x13186*x13192))+(((-1.0)*gconst16*x13188*x13190))+((gconst17*x13187*x13190))+((r01*x13191*(gconst16*gconst16)))),-1);
if(!x13195.valid){
continue;
}
CheckValue<IkReal> x13196=IKPowWithIntegerCheck((((gconst16*x13191))+(((-1.0)*x13187*x13192))),-1);
if(!x13196.valid){
continue;
}
if( IKabs(((x13195.value)*((((r02*x13189))+(((-1.0)*r02*x13193))+((x13185*x13186))+((x13185*x13188))+((x13184*x13187))+(((-1.0)*x13184*x13194)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13196.value)*((((cj3*x13186))+((cj3*x13188))+(((-1.0)*x13193))+x13189)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x13195.value)*((((r02*x13189))+(((-1.0)*r02*x13193))+((x13185*x13186))+((x13185*x13188))+((x13184*x13187))+(((-1.0)*x13184*x13194))))))+IKsqr(((x13196.value)*((((cj3*x13186))+((cj3*x13188))+(((-1.0)*x13193))+x13189))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x13195.value)*((((r02*x13189))+(((-1.0)*r02*x13193))+((x13185*x13186))+((x13185*x13188))+((x13184*x13187))+(((-1.0)*x13184*x13194))))), ((x13196.value)*((((cj3*x13186))+((cj3*x13188))+(((-1.0)*x13193))+x13189))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13197=IKsin(j4);
IkReal x13198=IKcos(j4);
IkReal x13199=(gconst16*r01);
IkReal x13200=((1.0)*gconst17);
IkReal x13201=(cj2*sj1);
IkReal x13202=(gconst16*r11);
IkReal x13203=(sj1*sj2);
IkReal x13204=(cj1*cj2);
IkReal x13205=(gconst16*r21);
IkReal x13206=((1.0)*cj3);
IkReal x13207=(cj1*sj2);
IkReal x13208=((1.0)*cj0);
IkReal x13209=(sj3*x13198);
IkReal x13210=(cj3*x13198);
IkReal x13211=(r12*x13197);
IkReal x13212=((1.0)*x13198);
IkReal x13213=((1.0)*gconst16*sj3);
IkReal x13214=(r02*x13197);
evalcond[0]=((((-1.0)*r20*x13197*x13200))+((x13197*x13205)));
evalcond[1]=((((-1.0)*r00*x13197*x13200))+sj0+(((-1.0)*r02*x13212))+((x13197*x13199)));
evalcond[2]=((((-1.0)*r10*x13197*x13200))+((x13197*x13202))+(((-1.0)*x13208))+(((-1.0)*r12*x13212)));
evalcond[3]=((((-1.0)*x13198*x13205*x13206))+(((-1.0)*r21*sj3*x13200))+((gconst17*r20*x13210))+(((-1.0)*r20*x13213))+x13207+x13201);
evalcond[4]=((((-1.0)*cj3*r21*x13200))+((x13205*x13209))+(((-1.0)*r20*x13200*x13209))+(((-1.0)*gconst16*r20*x13206))+x13203+(((-1.0)*x13204)));
evalcond[5]=((((-1.0)*r00*x13200*x13209))+((x13199*x13209))+(((-1.0)*cj3*r01*x13200))+(((-1.0)*gconst16*r00*x13206))+((sj3*x13214))+((cj0*x13207))+((cj0*x13201)));
evalcond[6]=(((x13202*x13209))+((sj0*x13207))+((sj0*x13201))+((sj3*x13211))+(((-1.0)*r10*x13200*x13209))+(((-1.0)*cj3*r11*x13200))+(((-1.0)*gconst16*r10*x13206)));
evalcond[7]=(((gconst17*r00*x13210))+(((-1.0)*x13206*x13214))+(((-1.0)*r01*sj3*x13200))+(((-1.0)*x13203*x13208))+((cj0*x13204))+(((-1.0)*x13198*x13199*x13206))+(((-1.0)*r00*x13213)));
evalcond[8]=((((-1.0)*sj0*x13203))+(((-1.0)*r11*sj3*x13200))+(((-1.0)*x13206*x13211))+((gconst17*r10*x13210))+(((-1.0)*x13198*x13202*x13206))+((sj0*x13204))+(((-1.0)*r10*x13213)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13215=((1.0)*gconst17);
CheckValue<IkReal> x13216 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((gconst16*r11*sj0))+(((-1.0)*r10*sj0*x13215))+(((-1.0)*cj0*r00*x13215))+((cj0*gconst16*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13216.valid){
continue;
}
CheckValue<IkReal> x13217=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst16*r20))+(((-1.0)*r21*x13215)))),-1);
if(!x13217.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13216.value)+(((1.5707963267949)*(x13217.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13218=IKsin(j4);
IkReal x13219=IKcos(j4);
IkReal x13220=(gconst16*r01);
IkReal x13221=((1.0)*gconst17);
IkReal x13222=(cj2*sj1);
IkReal x13223=(gconst16*r11);
IkReal x13224=(sj1*sj2);
IkReal x13225=(cj1*cj2);
IkReal x13226=(gconst16*r21);
IkReal x13227=((1.0)*cj3);
IkReal x13228=(cj1*sj2);
IkReal x13229=((1.0)*cj0);
IkReal x13230=(sj3*x13219);
IkReal x13231=(cj3*x13219);
IkReal x13232=(r12*x13218);
IkReal x13233=((1.0)*x13219);
IkReal x13234=((1.0)*gconst16*sj3);
IkReal x13235=(r02*x13218);
evalcond[0]=(((x13218*x13226))+(((-1.0)*r20*x13218*x13221)));
evalcond[1]=(((x13218*x13220))+sj0+(((-1.0)*r00*x13218*x13221))+(((-1.0)*r02*x13233)));
evalcond[2]=(((x13218*x13223))+(((-1.0)*r12*x13233))+(((-1.0)*x13229))+(((-1.0)*r10*x13218*x13221)));
evalcond[3]=((((-1.0)*x13219*x13226*x13227))+(((-1.0)*r20*x13234))+((gconst17*r20*x13231))+x13228+x13222+(((-1.0)*r21*sj3*x13221)));
evalcond[4]=((((-1.0)*x13225))+(((-1.0)*r20*x13221*x13230))+((x13226*x13230))+(((-1.0)*gconst16*r20*x13227))+x13224+(((-1.0)*cj3*r21*x13221)));
evalcond[5]=((((-1.0)*r00*x13221*x13230))+(((-1.0)*gconst16*r00*x13227))+((sj3*x13235))+(((-1.0)*cj3*r01*x13221))+((x13220*x13230))+((cj0*x13228))+((cj0*x13222)));
evalcond[6]=((((-1.0)*r10*x13221*x13230))+((x13223*x13230))+((sj3*x13232))+((sj0*x13222))+((sj0*x13228))+(((-1.0)*gconst16*r10*x13227))+(((-1.0)*cj3*r11*x13221)));
evalcond[7]=((((-1.0)*r01*sj3*x13221))+(((-1.0)*x13219*x13220*x13227))+(((-1.0)*r00*x13234))+(((-1.0)*x13227*x13235))+((gconst17*r00*x13231))+((cj0*x13225))+(((-1.0)*x13224*x13229)));
evalcond[8]=((((-1.0)*r11*sj3*x13221))+((gconst17*r10*x13231))+(((-1.0)*r10*x13234))+((sj0*x13225))+(((-1.0)*x13219*x13223*x13227))+(((-1.0)*sj0*x13224))+(((-1.0)*x13227*x13232)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13236=gconst16*gconst16;
IkReal x13237=r21*r21;
IkReal x13238=gconst17*gconst17;
IkReal x13239=r20*r20;
IkReal x13240=(gconst16*r21);
IkReal x13241=(cj1*sj2);
IkReal x13242=(cj2*sj1);
IkReal x13243=(r20*sj3);
IkReal x13244=(gconst17*r20);
IkReal x13245=((1.0)*gconst16);
IkReal x13246=(gconst17*sj3);
IkReal x13247=((1.0)*r21);
CheckValue<IkReal> x13248=IKPowWithIntegerCheck(IKsign((((cj3*(r22*r22)))+((cj3*x13238*x13239))+(((-2.0)*cj3*x13240*x13244))+((cj3*x13236*x13237)))),-1);
if(!x13248.valid){
continue;
}
CheckValue<IkReal> x13249 = IKatan2WithCheck(IkReal((((r22*x13241))+((r22*x13242))+(((-1.0)*r22*x13246*x13247))+(((-1.0)*r22*x13243*x13245)))),IkReal(((((-1.0)*x13241*x13244))+((r21*x13238*x13243))+((x13240*x13242))+((x13240*x13241))+(((-1.0)*x13236*x13243*x13247))+(((-1.0)*x13237*x13245*x13246))+(((-1.0)*x13242*x13244))+((gconst16*x13239*x13246)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13249.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13248.value)))+(x13249.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13250=IKsin(j4);
IkReal x13251=IKcos(j4);
IkReal x13252=(gconst16*r01);
IkReal x13253=((1.0)*gconst17);
IkReal x13254=(cj2*sj1);
IkReal x13255=(gconst16*r11);
IkReal x13256=(sj1*sj2);
IkReal x13257=(cj1*cj2);
IkReal x13258=(r10*sj3);
IkReal x13259=(gconst16*r21);
IkReal x13260=((1.0)*gconst16);
IkReal x13261=(r00*sj3);
IkReal x13262=(cj1*sj2);
IkReal x13263=(r20*sj3);
IkReal x13264=((1.0)*cj0);
IkReal x13265=((1.0)*x13251);
IkReal x13266=(sj3*x13251);
IkReal x13267=(r12*x13250);
IkReal x13268=(sj3*x13250);
IkReal x13269=(cj3*gconst17*x13251);
IkReal x13270=((1.0)*cj3*x13250);
evalcond[0]=(((x13250*x13259))+(((-1.0)*r22*x13265))+(((-1.0)*r20*x13250*x13253)));
evalcond[1]=(sj0+((x13250*x13252))+(((-1.0)*r02*x13265))+(((-1.0)*r00*x13250*x13253)));
evalcond[2]=((((-1.0)*x13264))+(((-1.0)*r10*x13250*x13253))+((x13250*x13255))+(((-1.0)*r12*x13265)));
evalcond[3]=(((x13259*x13266))+(((-1.0)*x13257))+(((-1.0)*x13251*x13253*x13263))+(((-1.0)*cj3*r20*x13260))+((r22*x13268))+(((-1.0)*cj3*r21*x13253))+x13256);
evalcond[4]=(((r20*x13269))+(((-1.0)*cj3*x13259*x13265))+(((-1.0)*r22*x13270))+(((-1.0)*x13260*x13263))+x13262+x13254+(((-1.0)*r21*sj3*x13253)));
evalcond[5]=((((-1.0)*cj3*r01*x13253))+(((-1.0)*cj3*r00*x13260))+(((-1.0)*x13251*x13253*x13261))+((r02*x13268))+((cj0*x13254))+((x13252*x13266))+((cj0*x13262)));
evalcond[6]=(((x13255*x13266))+(((-1.0)*x13251*x13253*x13258))+((sj0*x13254))+((sj0*x13262))+((sj3*x13267))+(((-1.0)*cj3*r10*x13260))+(((-1.0)*cj3*r11*x13253)));
evalcond[7]=((((-1.0)*x13256*x13264))+(((-1.0)*r01*sj3*x13253))+((r00*x13269))+(((-1.0)*cj3*x13252*x13265))+(((-1.0)*r02*x13270))+((cj0*x13257))+(((-1.0)*x13260*x13261)));
evalcond[8]=(((sj0*x13257))+(((-1.0)*sj0*x13256))+((r10*x13269))+(((-1.0)*cj3*x13255*x13265))+(((-1.0)*x13258*x13260))+(((-1.0)*cj3*x13267))+(((-1.0)*r11*sj3*x13253)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13271=((1.0)*gconst17);
CheckValue<IkReal> x13272=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst16*r20))+(((-1.0)*r21*x13271)))),-1);
if(!x13272.valid){
continue;
}
CheckValue<IkReal> x13273 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((gconst16*r11*sj0))+(((-1.0)*r10*sj0*x13271))+(((-1.0)*cj0*r00*x13271))+((cj0*gconst16*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13273.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13272.value)))+(x13273.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13274=IKsin(j4);
IkReal x13275=IKcos(j4);
IkReal x13276=(gconst16*r01);
IkReal x13277=((1.0)*gconst17);
IkReal x13278=(cj2*sj1);
IkReal x13279=(gconst16*r11);
IkReal x13280=(sj1*sj2);
IkReal x13281=(cj1*cj2);
IkReal x13282=(r10*sj3);
IkReal x13283=(gconst16*r21);
IkReal x13284=((1.0)*gconst16);
IkReal x13285=(r00*sj3);
IkReal x13286=(cj1*sj2);
IkReal x13287=(r20*sj3);
IkReal x13288=((1.0)*cj0);
IkReal x13289=((1.0)*x13275);
IkReal x13290=(sj3*x13275);
IkReal x13291=(r12*x13274);
IkReal x13292=(sj3*x13274);
IkReal x13293=(cj3*gconst17*x13275);
IkReal x13294=((1.0)*cj3*x13274);
evalcond[0]=((((-1.0)*r22*x13289))+(((-1.0)*r20*x13274*x13277))+((x13274*x13283)));
evalcond[1]=((((-1.0)*r00*x13274*x13277))+sj0+((x13274*x13276))+(((-1.0)*r02*x13289)));
evalcond[2]=(((x13274*x13279))+(((-1.0)*r10*x13274*x13277))+(((-1.0)*r12*x13289))+(((-1.0)*x13288)));
evalcond[3]=((((-1.0)*x13275*x13277*x13287))+(((-1.0)*x13281))+((r22*x13292))+(((-1.0)*cj3*r20*x13284))+(((-1.0)*cj3*r21*x13277))+((x13283*x13290))+x13280);
evalcond[4]=(((r20*x13293))+(((-1.0)*x13284*x13287))+(((-1.0)*cj3*x13283*x13289))+(((-1.0)*r21*sj3*x13277))+x13278+x13286+(((-1.0)*r22*x13294)));
evalcond[5]=(((cj0*x13286))+(((-1.0)*x13275*x13277*x13285))+(((-1.0)*cj3*r00*x13284))+((r02*x13292))+(((-1.0)*cj3*r01*x13277))+((cj0*x13278))+((x13276*x13290)));
evalcond[6]=((((-1.0)*x13275*x13277*x13282))+((sj3*x13291))+(((-1.0)*cj3*r11*x13277))+((sj0*x13278))+((x13279*x13290))+(((-1.0)*cj3*r10*x13284))+((sj0*x13286)));
evalcond[7]=(((cj0*x13281))+(((-1.0)*r01*sj3*x13277))+(((-1.0)*x13280*x13288))+(((-1.0)*x13284*x13285))+(((-1.0)*cj3*x13276*x13289))+(((-1.0)*r02*x13294))+((r00*x13293)));
evalcond[8]=((((-1.0)*sj0*x13280))+(((-1.0)*cj3*x13291))+((r10*x13293))+(((-1.0)*x13282*x13284))+(((-1.0)*r11*sj3*x13277))+((sj0*x13281))+(((-1.0)*cj3*x13279*x13289)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13295=IKPowWithIntegerCheck(IKsign((((gconst17*r01))+((gconst16*r00)))),-1);
if(!x13295.valid){
continue;
}
CheckValue<IkReal> x13296 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*gconst17*r20))+((cj0*gconst16*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13296.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13295.value)))+(x13296.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13297=IKsin(j4);
IkReal x13298=IKcos(j4);
IkReal x13299=(gconst16*r01);
IkReal x13300=((1.0)*gconst17);
IkReal x13301=(cj2*sj1);
IkReal x13302=(gconst16*r11);
IkReal x13303=(sj1*sj2);
IkReal x13304=(cj1*cj2);
IkReal x13305=(r10*sj3);
IkReal x13306=(gconst16*r21);
IkReal x13307=((1.0)*gconst16);
IkReal x13308=(r00*sj3);
IkReal x13309=(cj1*sj2);
IkReal x13310=(r20*sj3);
IkReal x13311=((1.0)*cj0);
IkReal x13312=((1.0)*x13298);
IkReal x13313=(sj3*x13298);
IkReal x13314=(r12*x13297);
IkReal x13315=(sj3*x13297);
IkReal x13316=(cj3*gconst17*x13298);
IkReal x13317=((1.0)*cj3*x13297);
evalcond[0]=((((-1.0)*r20*x13297*x13300))+((x13297*x13306))+(((-1.0)*r22*x13312)));
evalcond[1]=(sj0+(((-1.0)*r00*x13297*x13300))+((x13297*x13299))+(((-1.0)*r02*x13312)));
evalcond[2]=((((-1.0)*r10*x13297*x13300))+((x13297*x13302))+(((-1.0)*x13311))+(((-1.0)*r12*x13312)));
evalcond[3]=((((-1.0)*cj3*r21*x13300))+((x13306*x13313))+(((-1.0)*x13298*x13300*x13310))+((r22*x13315))+(((-1.0)*cj3*r20*x13307))+x13303+(((-1.0)*x13304)));
evalcond[4]=(((r20*x13316))+(((-1.0)*x13307*x13310))+(((-1.0)*cj3*x13306*x13312))+(((-1.0)*r21*sj3*x13300))+x13309+x13301+(((-1.0)*r22*x13317)));
evalcond[5]=((((-1.0)*x13298*x13300*x13308))+(((-1.0)*cj3*r00*x13307))+((x13299*x13313))+(((-1.0)*cj3*r01*x13300))+((r02*x13315))+((cj0*x13309))+((cj0*x13301)));
evalcond[6]=((((-1.0)*cj3*r10*x13307))+((sj0*x13309))+((sj0*x13301))+(((-1.0)*x13298*x13300*x13305))+((sj3*x13314))+((x13302*x13313))+(((-1.0)*cj3*r11*x13300)));
evalcond[7]=((((-1.0)*r01*sj3*x13300))+((r00*x13316))+(((-1.0)*r02*x13317))+(((-1.0)*x13307*x13308))+(((-1.0)*cj3*x13299*x13312))+(((-1.0)*x13303*x13311))+((cj0*x13304)));
evalcond[8]=((((-1.0)*cj3*x13314))+((r10*x13316))+(((-1.0)*cj3*x13302*x13312))+((sj0*x13304))+(((-1.0)*x13305*x13307))+(((-1.0)*r11*sj3*x13300))+(((-1.0)*sj0*x13303)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
IkReal x13318=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x13318;
j4eval[1]=IKsign(x13318);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
IkReal x13319=((1.0)*cj5);
IkReal x13320=((((-1.0)*r21*x13319))+(((-1.0)*r20*sj5)));
j4eval[0]=x13320;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x13319))))));
j4eval[2]=IKsign(x13320);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj0=0;
cj0=1.0;
j0=0;
IkReal x13321=cj5*cj5;
IkReal x13322=((1.0)*sj3);
IkReal x13323=(r11*r21);
IkReal x13324=(cj5*sj3*sj5);
IkReal x13325=(((r11*r20*x13324))+(((-1.0)*r12*r22*x13322))+((r10*r21*x13324))+(((-1.0)*x13322*x13323))+((sj3*x13321*x13323))+(((-1.0)*r10*r20*x13321*x13322)));
j4eval[0]=x13325;
j4eval[1]=IKsign(x13325);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=1.0;
j3=0;
IkReal x13326=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x13326;
j4eval[1]=IKsign(x13326);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=1.0;
j3=0;
IkReal x13327=((1.0)*cj5);
IkReal x13328=((((-1.0)*r21*x13327))+(((-1.0)*r20*sj5)));
j4eval[0]=x13328;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x13327))))));
j4eval[2]=IKsign(x13328);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=1.0;
j3=0;
IkReal x13329=cj5*cj5;
IkReal x13330=r11*r11;
IkReal x13331=(cj5*r10);
IkReal x13332=(r11*sj5);
IkReal x13333=(((x13329*x13330))+(((2.0)*x13331*x13332))+(((-1.0)*x13330))+(((-1.0)*x13329*(r10*r10)))+(((-1.0)*(r12*r12))));
j4eval[0]=x13333;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*x13332))+x13331))));
j4eval[2]=IKsign(x13333);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13334=cj5*cj5;
IkReal x13335=r11*r11;
IkReal x13336=(cj5*r10);
IkReal x13337=(r11*sj5);
CheckValue<IkReal> x13338=IKPowWithIntegerCheck(IKsign(((((-1.0)*x13335))+((x13334*x13335))+(((-1.0)*(r12*r12)))+(((2.0)*x13336*x13337))+(((-1.0)*x13334*(r10*r10))))),-1);
if(!x13338.valid){
continue;
}
CheckValue<IkReal> x13339 = IKatan2WithCheck(IkReal(((((-1.0)*x13337))+x13336)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x13339.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13338.value)))+(x13339.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13340=IKsin(j4);
IkReal x13341=IKcos(j4);
IkReal x13342=(cj5*r10);
IkReal x13343=(r01*sj5);
IkReal x13344=(cj5*r00);
IkReal x13345=(cj5*r20);
IkReal x13346=((1.0)*x13341);
IkReal x13347=((1.0)*x13340);
IkReal x13348=(sj5*x13340);
evalcond[0]=(((r21*x13348))+(((-1.0)*x13345*x13347))+(((-1.0)*r22*x13346)));
evalcond[1]=(((x13340*x13343))+(((-1.0)*r02*x13346))+(((-1.0)*x13344*x13347)));
evalcond[2]=(((x13341*x13342))+(((-1.0)*r12*x13347))+(((-1.0)*r11*sj5*x13346)));
evalcond[3]=((-1.0)+(((-1.0)*x13342*x13347))+(((-1.0)*r12*x13346))+((r11*x13348)));
evalcond[4]=(((x13341*x13345))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*r21*sj5*x13346))+(((-1.0)*r22*x13347)));
evalcond[5]=(((x13341*x13344))+(((-1.0)*r02*x13347))+(((-1.0)*sj1*sj2))+(((-1.0)*x13343*x13346))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13349=((1.0)*cj5);
CheckValue<IkReal> x13350 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x13349)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13350.valid){
continue;
}
CheckValue<IkReal> x13351=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x13349))+(((-1.0)*r20*sj5)))),-1);
if(!x13351.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13350.value)+(((1.5707963267949)*(x13351.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13352=IKsin(j4);
IkReal x13353=IKcos(j4);
IkReal x13354=(cj5*r10);
IkReal x13355=(r01*sj5);
IkReal x13356=(cj5*r00);
IkReal x13357=(cj5*r20);
IkReal x13358=((1.0)*x13353);
IkReal x13359=((1.0)*x13352);
IkReal x13360=(sj5*x13352);
evalcond[0]=((((-1.0)*r22*x13358))+(((-1.0)*x13357*x13359))+((r21*x13360)));
evalcond[1]=((((-1.0)*r02*x13358))+((x13352*x13355))+(((-1.0)*x13356*x13359)));
evalcond[2]=((((-1.0)*r11*sj5*x13358))+(((-1.0)*r12*x13359))+((x13353*x13354)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x13358))+(((-1.0)*x13354*x13359))+((r11*x13360)));
evalcond[4]=((((-1.0)*r22*x13359))+((cj2*sj1))+((x13353*x13357))+((cj1*sj2))+(((-1.0)*r21*sj5*x13358)));
evalcond[5]=((((-1.0)*r02*x13359))+(((-1.0)*x13355*x13358))+((x13353*x13356))+(((-1.0)*sj1*sj2))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13361 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13361.valid){
continue;
}
CheckValue<IkReal> x13362=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x13362.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13361.value)+(((1.5707963267949)*(x13362.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13363=IKsin(j4);
IkReal x13364=IKcos(j4);
IkReal x13365=(cj5*r10);
IkReal x13366=(r01*sj5);
IkReal x13367=(cj5*r00);
IkReal x13368=(cj5*r20);
IkReal x13369=((1.0)*x13364);
IkReal x13370=((1.0)*x13363);
IkReal x13371=(sj5*x13363);
evalcond[0]=((((-1.0)*r22*x13369))+(((-1.0)*x13368*x13370))+((r21*x13371)));
evalcond[1]=((((-1.0)*x13367*x13370))+((x13363*x13366))+(((-1.0)*r02*x13369)));
evalcond[2]=((((-1.0)*r11*sj5*x13369))+((x13364*x13365))+(((-1.0)*r12*x13370)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x13369))+(((-1.0)*x13365*x13370))+((r11*x13371)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x13370))+(((-1.0)*r21*sj5*x13369))+((x13364*x13368)));
evalcond[5]=((((-1.0)*x13366*x13369))+(((-1.0)*sj1*sj2))+(((-1.0)*r02*x13370))+((cj1*cj2))+((x13364*x13367)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x13372=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x13372;
j4eval[1]=IKsign(x13372);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x13373=((1.0)*cj5);
IkReal x13374=((((-1.0)*r21*x13373))+(((-1.0)*r20*sj5)));
j4eval[0]=x13374;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x13373))))));
j4eval[2]=IKsign(x13374);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x13375=cj5*cj5;
IkReal x13376=r11*r11;
IkReal x13377=(r11*sj5);
IkReal x13378=(cj5*r10);
IkReal x13379=((r12*r12)+((x13375*(r10*r10)))+(((-2.0)*x13377*x13378))+x13376+(((-1.0)*x13375*x13376)));
j4eval[0]=x13379;
j4eval[1]=IKsign(x13379);
j4eval[2]=((IKabs(r12))+(IKabs((x13377+(((-1.0)*x13378))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13380=cj5*cj5;
IkReal x13381=r11*r11;
IkReal x13382=(cj5*r10);
IkReal x13383=(r11*sj5);
CheckValue<IkReal> x13384=IKPowWithIntegerCheck(IKsign(((((-2.0)*x13382*x13383))+(r12*r12)+x13381+(((-1.0)*x13380*x13381))+((x13380*(r10*r10))))),-1);
if(!x13384.valid){
continue;
}
CheckValue<IkReal> x13385 = IKatan2WithCheck(IkReal(((((-1.0)*x13382))+x13383)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x13385.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13384.value)))+(x13385.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13386=IKcos(j4);
IkReal x13387=IKsin(j4);
IkReal x13388=(cj5*r00);
IkReal x13389=(cj5*r10);
IkReal x13390=(r21*sj5);
IkReal x13391=(cj5*r20);
IkReal x13392=((1.0)*x13386);
IkReal x13393=((1.0)*x13387);
IkReal x13394=(sj5*x13387);
IkReal x13395=(sj5*x13386);
evalcond[0]=(((r11*x13395))+((r12*x13387))+(((-1.0)*x13389*x13392)));
evalcond[1]=((((-1.0)*r22*x13392))+((x13387*x13390))+(((-1.0)*x13391*x13393)));
evalcond[2]=(((r01*x13394))+(((-1.0)*x13388*x13393))+(((-1.0)*r02*x13392)));
evalcond[3]=((-1.0)+((r11*x13394))+(((-1.0)*x13389*x13393))+(((-1.0)*r12*x13392)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x13386*x13390))+(((-1.0)*x13391*x13392))+((r22*x13387)));
evalcond[5]=((((-1.0)*sj1*sj2))+((r01*x13395))+(((-1.0)*x13388*x13392))+((cj1*cj2))+((r02*x13387)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13396=((1.0)*cj5);
CheckValue<IkReal> x13397=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x13396))+(((-1.0)*r20*sj5)))),-1);
if(!x13397.valid){
continue;
}
CheckValue<IkReal> x13398 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x13396)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13398.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13397.value)))+(x13398.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13399=IKcos(j4);
IkReal x13400=IKsin(j4);
IkReal x13401=(cj5*r00);
IkReal x13402=(cj5*r10);
IkReal x13403=(r21*sj5);
IkReal x13404=(cj5*r20);
IkReal x13405=((1.0)*x13399);
IkReal x13406=((1.0)*x13400);
IkReal x13407=(sj5*x13400);
IkReal x13408=(sj5*x13399);
evalcond[0]=(((r11*x13408))+((r12*x13400))+(((-1.0)*x13402*x13405)));
evalcond[1]=(((x13400*x13403))+(((-1.0)*r22*x13405))+(((-1.0)*x13404*x13406)));
evalcond[2]=((((-1.0)*r02*x13405))+((r01*x13407))+(((-1.0)*x13401*x13406)));
evalcond[3]=((-1.0)+((r11*x13407))+(((-1.0)*x13402*x13406))+(((-1.0)*r12*x13405)));
evalcond[4]=(((cj2*sj1))+((x13399*x13403))+((cj1*sj2))+((r22*x13400))+(((-1.0)*x13404*x13405)));
evalcond[5]=(((r01*x13408))+(((-1.0)*sj1*sj2))+(((-1.0)*x13401*x13405))+((r02*x13400))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13409 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13409.valid){
continue;
}
CheckValue<IkReal> x13410=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x13410.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13409.value)+(((1.5707963267949)*(x13410.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13411=IKcos(j4);
IkReal x13412=IKsin(j4);
IkReal x13413=(cj5*r00);
IkReal x13414=(cj5*r10);
IkReal x13415=(r21*sj5);
IkReal x13416=(cj5*r20);
IkReal x13417=((1.0)*x13411);
IkReal x13418=((1.0)*x13412);
IkReal x13419=(sj5*x13412);
IkReal x13420=(sj5*x13411);
evalcond[0]=((((-1.0)*x13414*x13417))+((r11*x13420))+((r12*x13412)));
evalcond[1]=((((-1.0)*r22*x13417))+((x13412*x13415))+(((-1.0)*x13416*x13418)));
evalcond[2]=((((-1.0)*x13413*x13418))+(((-1.0)*r02*x13417))+((r01*x13419)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x13417))+(((-1.0)*x13414*x13418))+((r11*x13419)));
evalcond[4]=(((r22*x13412))+((cj2*sj1))+((cj1*sj2))+((x13411*x13415))+(((-1.0)*x13416*x13417)));
evalcond[5]=(((r02*x13412))+(((-1.0)*x13413*x13417))+(((-1.0)*sj1*sj2))+((cj1*cj2))+((r01*x13420)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x13421=((-1.0)*px);
sj0=0;
cj0=1.0;
j0=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x13421);
rxp1_1=(px*r21);
rxp1_2=(r11*x13421);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal x13422=(r11*sj5);
IkReal x13423=((1.0)*cj5*r10);
j4eval[0]=(x13422+(((-1.0)*x13423)));
j4eval[1]=((((-1.0)*sj3*x13423))+((sj3*x13422)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x13424=((-1.0)*px);
sj0=0;
cj0=1.0;
j0=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x13424);
rxp1_1=(px*r21);
rxp1_2=(r11*x13424);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal x13425=(cj5*r10);
IkReal x13426=(r11*sj5);
j4eval[0]=(x13426+(((-1.0)*x13425)));
j4eval[1]=(((cj3*x13425))+(((-1.0)*cj3*x13426)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x13427=((-1.0)*px);
sj0=0;
cj0=1.0;
j0=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x13427);
rxp1_1=(px*r21);
rxp1_2=(r11*x13427);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
j4eval[1]=sj3;
j4eval[2]=(((r11*sj3*sj5))+(((-1.0)*cj5*r10*sj3)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13428=IKPowWithIntegerCheck(r02,-1);
if(!x13428.valid){
continue;
}
CheckValue<IkReal> x13429=IKPowWithIntegerCheck(sj3,-1);
if(!x13429.valid){
continue;
}
CheckValue<IkReal> x13430=IKPowWithIntegerCheck((((r11*sj3*sj5))+(((-1.0)*cj5*r10*sj3))),-1);
if(!x13430.valid){
continue;
}
if( IKabs(((x13428.value)*(x13429.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13430.value)*((((cj3*cj5*r11))+((cj3*r10*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x13428.value)*(x13429.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))))+IKsqr(((x13430.value)*((((cj3*cj5*r11))+((cj3*r10*sj5))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x13428.value)*(x13429.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))), ((x13430.value)*((((cj3*cj5*r11))+((cj3*r10*sj5))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13431=IKsin(j4);
IkReal x13432=IKcos(j4);
IkReal x13433=(cj2*sj1);
IkReal x13434=(cj1*sj2);
IkReal x13435=((1.0)*cj5);
IkReal x13436=(sj1*sj2);
IkReal x13437=(r10*sj3);
IkReal x13438=((1.0)*sj5);
IkReal x13439=(cj1*cj2);
IkReal x13440=(sj3*sj5);
IkReal x13441=(r20*sj3);
IkReal x13442=(cj3*x13438);
IkReal x13443=(r11*x13432);
IkReal x13444=(sj5*x13431);
IkReal x13445=(r02*x13431);
IkReal x13446=(r21*x13432);
IkReal x13447=(x13433+x13434);
IkReal x13448=(cj3*cj5*x13432);
evalcond[0]=((-1.0)*r02*x13432);
evalcond[1]=(x13447+((sj3*x13445)));
evalcond[2]=((((-1.0)*r20*x13431*x13435))+((r21*x13444)));
evalcond[3]=((-1.0)+(((-1.0)*r10*x13431*x13435))+((r11*x13444)));
evalcond[4]=(x13439+(((-1.0)*x13436))+(((-1.0)*cj3*x13445)));
evalcond[5]=((((-1.0)*r10*x13442))+(((-1.0)*x13432*x13435*x13437))+(((-1.0)*cj3*r11*x13435))+((x13440*x13443)));
evalcond[6]=((((-1.0)*x13437*x13438))+(((-1.0)*r11*sj3*x13435))+((r10*x13448))+(((-1.0)*x13442*x13443)));
evalcond[7]=(x13447+(((-1.0)*x13438*x13441))+((r20*x13448))+(((-1.0)*x13442*x13446))+(((-1.0)*r21*sj3*x13435)));
evalcond[8]=(x13436+(((-1.0)*r20*x13442))+(((-1.0)*x13439))+(((-1.0)*x13432*x13435*x13441))+((x13440*x13446))+(((-1.0)*cj3*r21*x13435)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13449=(r11*sj5);
IkReal x13450=(cj5*r10);
CheckValue<IkReal> x13451=IKPowWithIntegerCheck((x13449+(((-1.0)*x13450))),-1);
if(!x13451.valid){
continue;
}
CheckValue<IkReal> x13452=IKPowWithIntegerCheck(((((-1.0)*cj3*x13449))+((cj3*x13450))),-1);
if(!x13452.valid){
continue;
}
if( IKabs(x13451.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13452.value)*((((cj5*r11*sj3))+((r10*sj3*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x13451.value)+IKsqr(((x13452.value)*((((cj5*r11*sj3))+((r10*sj3*sj5))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x13451.value, ((x13452.value)*((((cj5*r11*sj3))+((r10*sj3*sj5))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13453=IKsin(j4);
IkReal x13454=IKcos(j4);
IkReal x13455=(cj2*sj1);
IkReal x13456=(cj1*sj2);
IkReal x13457=((1.0)*cj5);
IkReal x13458=(sj1*sj2);
IkReal x13459=(r10*sj3);
IkReal x13460=((1.0)*sj5);
IkReal x13461=(cj1*cj2);
IkReal x13462=(sj3*sj5);
IkReal x13463=(r20*sj3);
IkReal x13464=(cj3*x13460);
IkReal x13465=(r11*x13454);
IkReal x13466=(sj5*x13453);
IkReal x13467=(r02*x13453);
IkReal x13468=(r21*x13454);
IkReal x13469=(x13455+x13456);
IkReal x13470=(cj3*cj5*x13454);
evalcond[0]=((-1.0)*r02*x13454);
evalcond[1]=(x13469+((sj3*x13467)));
evalcond[2]=(((r21*x13466))+(((-1.0)*r20*x13453*x13457)));
evalcond[3]=((-1.0)+(((-1.0)*r10*x13453*x13457))+((r11*x13466)));
evalcond[4]=(x13461+(((-1.0)*cj3*x13467))+(((-1.0)*x13458)));
evalcond[5]=((((-1.0)*r10*x13464))+((x13462*x13465))+(((-1.0)*x13454*x13457*x13459))+(((-1.0)*cj3*r11*x13457)));
evalcond[6]=(((r10*x13470))+(((-1.0)*x13459*x13460))+(((-1.0)*r11*sj3*x13457))+(((-1.0)*x13464*x13465)));
evalcond[7]=(x13469+(((-1.0)*x13460*x13463))+(((-1.0)*x13464*x13468))+((r20*x13470))+(((-1.0)*r21*sj3*x13457)));
evalcond[8]=(x13458+(((-1.0)*cj3*r21*x13457))+(((-1.0)*x13461))+((x13462*x13468))+(((-1.0)*x13454*x13457*x13463))+(((-1.0)*r20*x13464)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13471=(r11*sj5);
IkReal x13472=((1.0)*cj5*r10);
CheckValue<IkReal> x13473=IKPowWithIntegerCheck((x13471+(((-1.0)*x13472))),-1);
if(!x13473.valid){
continue;
}
CheckValue<IkReal> x13474=IKPowWithIntegerCheck((((sj3*x13471))+(((-1.0)*sj3*x13472))),-1);
if(!x13474.valid){
continue;
}
if( IKabs(x13473.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13474.value)*((((cj3*cj5*r11))+((cj3*r10*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x13473.value)+IKsqr(((x13474.value)*((((cj3*cj5*r11))+((cj3*r10*sj5))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x13473.value, ((x13474.value)*((((cj3*cj5*r11))+((cj3*r10*sj5))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13475=IKsin(j4);
IkReal x13476=IKcos(j4);
IkReal x13477=(cj2*sj1);
IkReal x13478=(cj1*sj2);
IkReal x13479=((1.0)*cj5);
IkReal x13480=(sj1*sj2);
IkReal x13481=(r10*sj3);
IkReal x13482=((1.0)*sj5);
IkReal x13483=(cj1*cj2);
IkReal x13484=(sj3*sj5);
IkReal x13485=(r20*sj3);
IkReal x13486=(cj3*x13482);
IkReal x13487=(r11*x13476);
IkReal x13488=(sj5*x13475);
IkReal x13489=(r02*x13475);
IkReal x13490=(r21*x13476);
IkReal x13491=(x13477+x13478);
IkReal x13492=(cj3*cj5*x13476);
evalcond[0]=((-1.0)*r02*x13476);
evalcond[1]=(x13491+((sj3*x13489)));
evalcond[2]=((((-1.0)*r20*x13475*x13479))+((r21*x13488)));
evalcond[3]=((-1.0)+(((-1.0)*r10*x13475*x13479))+((r11*x13488)));
evalcond[4]=(x13483+(((-1.0)*x13480))+(((-1.0)*cj3*x13489)));
evalcond[5]=((((-1.0)*r10*x13486))+(((-1.0)*cj3*r11*x13479))+((x13484*x13487))+(((-1.0)*x13476*x13479*x13481)));
evalcond[6]=((((-1.0)*x13481*x13482))+(((-1.0)*x13486*x13487))+(((-1.0)*r11*sj3*x13479))+((r10*x13492)));
evalcond[7]=(x13491+(((-1.0)*x13482*x13485))+(((-1.0)*x13486*x13490))+((r20*x13492))+(((-1.0)*r21*sj3*x13479)));
evalcond[8]=(x13480+(((-1.0)*x13483))+(((-1.0)*r20*x13486))+(((-1.0)*cj3*r21*x13479))+((x13484*x13490))+(((-1.0)*x13476*x13479*x13485)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13493=cj5*cj5;
IkReal x13494=((1.0)*sj3);
IkReal x13495=(r11*r21);
IkReal x13496=(cj3*r20);
IkReal x13497=(cj5*sj5);
IkReal x13498=(cj3*r21);
IkReal x13499=((1.0)*cj3);
IkReal x13500=(r10*x13493);
CheckValue<IkReal> x13501=IKPowWithIntegerCheck(IKsign((((sj3*x13493*x13495))+((r11*r20*sj3*x13497))+(((-1.0)*x13494*x13495))+(((-1.0)*r12*r22*x13494))+(((-1.0)*r20*x13494*x13500))+((r10*r21*sj3*x13497)))),-1);
if(!x13501.valid){
continue;
}
CheckValue<IkReal> x13502 = IKatan2WithCheck(IkReal(((((-1.0)*r10*r22*sj5*x13499))+(((-1.0)*cj5*r11*r22*x13499)))),IkReal(((((-1.0)*x13495*x13497*x13499))+((r11*x13493*x13496))+((x13498*x13500))+((r10*x13496*x13497))+(((-1.0)*r10*x13498)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13502.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13501.value)))+(x13502.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13503=IKsin(j4);
IkReal x13504=IKcos(j4);
IkReal x13505=(cj2*sj1);
IkReal x13506=(cj1*sj2);
IkReal x13507=(cj3*sj5);
IkReal x13508=((1.0)*r10);
IkReal x13509=(sj1*sj2);
IkReal x13510=((1.0)*r20);
IkReal x13511=(cj1*cj2);
IkReal x13512=((1.0)*r00);
IkReal x13513=(cj5*sj3);
IkReal x13514=(sj3*sj5);
IkReal x13515=((1.0)*x13504);
IkReal x13516=(cj5*x13503);
IkReal x13517=(r12*x13503);
IkReal x13518=(sj5*x13503);
IkReal x13519=((1.0)*cj3*cj5);
IkReal x13520=(sj3*x13503);
IkReal x13521=(x13506+x13505);
IkReal x13522=((1.0)*cj3*x13503);
IkReal x13523=(cj3*cj5*x13504);
evalcond[0]=(((r21*x13518))+(((-1.0)*r22*x13515))+(((-1.0)*x13510*x13516)));
evalcond[1]=((((-1.0)*x13512*x13516))+((r01*x13518))+(((-1.0)*r02*x13515)));
evalcond[2]=((-1.0)+(((-1.0)*x13508*x13516))+(((-1.0)*r12*x13515))+((r11*x13518)));
evalcond[3]=((((-1.0)*r11*x13519))+(((-1.0)*x13507*x13508))+(((-1.0)*x13504*x13508*x13513))+((sj3*x13517))+((r11*x13504*x13514)));
evalcond[4]=((((-1.0)*x13508*x13514))+(((-1.0)*r11*x13513))+(((-1.0)*r11*x13507*x13515))+((r10*x13523))+(((-1.0)*cj3*x13517)));
evalcond[5]=(x13521+((r02*x13520))+(((-1.0)*x13507*x13512))+(((-1.0)*x13504*x13512*x13513))+(((-1.0)*r01*x13519))+((r01*x13504*x13514)));
evalcond[6]=(x13509+(((-1.0)*x13504*x13510*x13513))+((r21*x13504*x13514))+(((-1.0)*x13511))+((r22*x13520))+(((-1.0)*x13507*x13510))+(((-1.0)*r21*x13519)));
evalcond[7]=(x13521+(((-1.0)*r22*x13522))+((r20*x13523))+(((-1.0)*r21*x13513))+(((-1.0)*r21*x13507*x13515))+(((-1.0)*x13510*x13514)));
evalcond[8]=(x13511+(((-1.0)*r01*x13507*x13515))+(((-1.0)*x13509))+((r00*x13523))+(((-1.0)*x13512*x13514))+(((-1.0)*r02*x13522))+(((-1.0)*r01*x13513)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13524=((1.0)*cj5);
CheckValue<IkReal> x13525 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x13524)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13525.valid){
continue;
}
CheckValue<IkReal> x13526=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x13524))+(((-1.0)*r20*sj5)))),-1);
if(!x13526.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13525.value)+(((1.5707963267949)*(x13526.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13527=IKsin(j4);
IkReal x13528=IKcos(j4);
IkReal x13529=(cj2*sj1);
IkReal x13530=(cj1*sj2);
IkReal x13531=(cj3*sj5);
IkReal x13532=((1.0)*r10);
IkReal x13533=(sj1*sj2);
IkReal x13534=((1.0)*r20);
IkReal x13535=(cj1*cj2);
IkReal x13536=((1.0)*r00);
IkReal x13537=(cj5*sj3);
IkReal x13538=(sj3*sj5);
IkReal x13539=((1.0)*x13528);
IkReal x13540=(cj5*x13527);
IkReal x13541=(r12*x13527);
IkReal x13542=(sj5*x13527);
IkReal x13543=((1.0)*cj3*cj5);
IkReal x13544=(sj3*x13527);
IkReal x13545=(x13530+x13529);
IkReal x13546=((1.0)*cj3*x13527);
IkReal x13547=(cj3*cj5*x13528);
evalcond[0]=((((-1.0)*r22*x13539))+((r21*x13542))+(((-1.0)*x13534*x13540)));
evalcond[1]=((((-1.0)*x13536*x13540))+((r01*x13542))+(((-1.0)*r02*x13539)));
evalcond[2]=((-1.0)+(((-1.0)*r12*x13539))+((r11*x13542))+(((-1.0)*x13532*x13540)));
evalcond[3]=((((-1.0)*x13528*x13532*x13537))+((r11*x13528*x13538))+(((-1.0)*x13531*x13532))+((sj3*x13541))+(((-1.0)*r11*x13543)));
evalcond[4]=(((r10*x13547))+(((-1.0)*r11*x13537))+(((-1.0)*x13532*x13538))+(((-1.0)*r11*x13531*x13539))+(((-1.0)*cj3*x13541)));
evalcond[5]=(x13545+(((-1.0)*r01*x13543))+(((-1.0)*x13531*x13536))+((r01*x13528*x13538))+(((-1.0)*x13528*x13536*x13537))+((r02*x13544)));
evalcond[6]=(x13533+((r22*x13544))+(((-1.0)*x13535))+((r21*x13528*x13538))+(((-1.0)*x13531*x13534))+(((-1.0)*x13528*x13534*x13537))+(((-1.0)*r21*x13543)));
evalcond[7]=(x13545+(((-1.0)*r21*x13531*x13539))+(((-1.0)*x13534*x13538))+((r20*x13547))+(((-1.0)*r22*x13546))+(((-1.0)*r21*x13537)));
evalcond[8]=(x13535+(((-1.0)*r01*x13537))+((r00*x13547))+(((-1.0)*x13533))+(((-1.0)*r02*x13546))+(((-1.0)*r01*x13531*x13539))+(((-1.0)*x13536*x13538)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13548 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13548.valid){
continue;
}
CheckValue<IkReal> x13549=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x13549.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13548.value)+(((1.5707963267949)*(x13549.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13550=IKsin(j4);
IkReal x13551=IKcos(j4);
IkReal x13552=(cj2*sj1);
IkReal x13553=(cj1*sj2);
IkReal x13554=(cj3*sj5);
IkReal x13555=((1.0)*r10);
IkReal x13556=(sj1*sj2);
IkReal x13557=((1.0)*r20);
IkReal x13558=(cj1*cj2);
IkReal x13559=((1.0)*r00);
IkReal x13560=(cj5*sj3);
IkReal x13561=(sj3*sj5);
IkReal x13562=((1.0)*x13551);
IkReal x13563=(cj5*x13550);
IkReal x13564=(r12*x13550);
IkReal x13565=(sj5*x13550);
IkReal x13566=((1.0)*cj3*cj5);
IkReal x13567=(sj3*x13550);
IkReal x13568=(x13553+x13552);
IkReal x13569=((1.0)*cj3*x13550);
IkReal x13570=(cj3*cj5*x13551);
evalcond[0]=((((-1.0)*x13557*x13563))+((r21*x13565))+(((-1.0)*r22*x13562)));
evalcond[1]=(((r01*x13565))+(((-1.0)*r02*x13562))+(((-1.0)*x13559*x13563)));
evalcond[2]=((-1.0)+(((-1.0)*x13555*x13563))+((r11*x13565))+(((-1.0)*r12*x13562)));
evalcond[3]=(((sj3*x13564))+(((-1.0)*r11*x13566))+(((-1.0)*x13554*x13555))+(((-1.0)*x13551*x13555*x13560))+((r11*x13551*x13561)));
evalcond[4]=(((r10*x13570))+(((-1.0)*x13555*x13561))+(((-1.0)*r11*x13554*x13562))+(((-1.0)*cj3*x13564))+(((-1.0)*r11*x13560)));
evalcond[5]=(x13568+((r02*x13567))+(((-1.0)*x13554*x13559))+(((-1.0)*x13551*x13559*x13560))+(((-1.0)*r01*x13566))+((r01*x13551*x13561)));
evalcond[6]=(x13556+(((-1.0)*x13554*x13557))+((r21*x13551*x13561))+((r22*x13567))+(((-1.0)*x13558))+(((-1.0)*r21*x13566))+(((-1.0)*x13551*x13557*x13560)));
evalcond[7]=(x13568+((r20*x13570))+(((-1.0)*x13557*x13561))+(((-1.0)*r21*x13554*x13562))+(((-1.0)*r21*x13560))+(((-1.0)*r22*x13569)));
evalcond[8]=(((r00*x13570))+x13558+(((-1.0)*r01*x13560))+(((-1.0)*r02*x13569))+(((-1.0)*x13556))+(((-1.0)*x13559*x13561))+(((-1.0)*r01*x13554*x13562)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x13571=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x13571;
j4eval[1]=IKsign(x13571);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x13572=((1.0)*cj5);
IkReal x13573=((((-1.0)*r00*sj5))+(((-1.0)*r01*x13572)));
j4eval[0]=x13573;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x13572)))))+(IKabs(r22)));
j4eval[2]=IKsign(x13573);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x13574=cj5*cj5;
IkReal x13575=((1.0)*sj3);
IkReal x13576=(r11*r21);
IkReal x13577=(cj5*sj3*sj5);
IkReal x13578=((((-1.0)*r10*r20*x13574*x13575))+((r10*r21*x13577))+((r11*r20*x13577))+(((-1.0)*x13575*x13576))+((sj3*x13574*x13576))+(((-1.0)*r12*r22*x13575)));
j4eval[0]=x13578;
j4eval[1]=IKsign(x13578);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=1.0;
j3=0;
IkReal x13579=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x13579;
j4eval[1]=IKsign(x13579);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=1.0;
j3=0;
IkReal x13580=((1.0)*cj5);
IkReal x13581=((((-1.0)*r00*sj5))+(((-1.0)*r01*x13580)));
j4eval[0]=x13581;
j4eval[1]=((IKabs(r22))+(IKabs(((((-1.0)*r20*x13580))+((r21*sj5))))));
j4eval[2]=IKsign(x13581);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=1.0;
j3=0;
IkReal x13582=cj5*cj5;
IkReal x13583=r11*r11;
IkReal x13584=(r11*sj5);
IkReal x13585=(cj5*r10);
IkReal x13586=(x13583+(r12*r12)+(((-2.0)*x13584*x13585))+(((-1.0)*x13582*x13583))+((x13582*(r10*r10))));
j4eval[0]=x13586;
j4eval[1]=IKsign(x13586);
j4eval[2]=((IKabs(r12))+(IKabs((x13585+(((-1.0)*x13584))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13587=cj5*cj5;
IkReal x13588=r11*r11;
IkReal x13589=(cj5*r10);
IkReal x13590=(r11*sj5);
CheckValue<IkReal> x13591 = IKatan2WithCheck(IkReal((x13589+(((-1.0)*x13590)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x13591.valid){
continue;
}
CheckValue<IkReal> x13592=IKPowWithIntegerCheck(IKsign((x13588+(r12*r12)+(((-2.0)*x13589*x13590))+(((-1.0)*x13587*x13588))+((x13587*(r10*r10))))),-1);
if(!x13592.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13591.value)+(((1.5707963267949)*(x13592.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13593=IKsin(j4);
IkReal x13594=IKcos(j4);
IkReal x13595=(cj5*r10);
IkReal x13596=(r01*sj5);
IkReal x13597=(cj5*r00);
IkReal x13598=(cj5*r20);
IkReal x13599=((1.0)*x13594);
IkReal x13600=((1.0)*x13593);
IkReal x13601=(sj5*x13593);
evalcond[0]=((((-1.0)*x13598*x13600))+((r21*x13601))+(((-1.0)*r22*x13599)));
evalcond[1]=(((x13593*x13596))+(((-1.0)*x13597*x13600))+(((-1.0)*r02*x13599)));
evalcond[2]=(((x13594*x13595))+(((-1.0)*r12*x13600))+(((-1.0)*r11*sj5*x13599)));
evalcond[3]=((1.0)+((r11*x13601))+(((-1.0)*x13595*x13600))+(((-1.0)*r12*x13599)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r21*sj5*x13599))+((x13594*x13598))+(((-1.0)*r22*x13600)));
evalcond[5]=((((-1.0)*x13596*x13599))+(((-1.0)*r02*x13600))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x13594*x13597)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13602=((1.0)*cj5);
CheckValue<IkReal> x13603=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x13602))+(((-1.0)*r00*sj5)))),-1);
if(!x13603.valid){
continue;
}
CheckValue<IkReal> x13604 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x13602)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13604.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13603.value)))+(x13604.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13605=IKsin(j4);
IkReal x13606=IKcos(j4);
IkReal x13607=(cj5*r10);
IkReal x13608=(r01*sj5);
IkReal x13609=(cj5*r00);
IkReal x13610=(cj5*r20);
IkReal x13611=((1.0)*x13606);
IkReal x13612=((1.0)*x13605);
IkReal x13613=(sj5*x13605);
evalcond[0]=(((r21*x13613))+(((-1.0)*x13610*x13612))+(((-1.0)*r22*x13611)));
evalcond[1]=((((-1.0)*x13609*x13612))+((x13605*x13608))+(((-1.0)*r02*x13611)));
evalcond[2]=(((x13606*x13607))+(((-1.0)*r11*sj5*x13611))+(((-1.0)*r12*x13612)));
evalcond[3]=((1.0)+(((-1.0)*x13607*x13612))+((r11*x13613))+(((-1.0)*r12*x13611)));
evalcond[4]=(((cj2*sj1))+((x13606*x13610))+((cj1*sj2))+(((-1.0)*r21*sj5*x13611))+(((-1.0)*r22*x13612)));
evalcond[5]=((((-1.0)*x13608*x13611))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r02*x13612))+((x13606*x13609)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13614=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x13614.valid){
continue;
}
CheckValue<IkReal> x13615 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13615.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13614.value)))+(x13615.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13616=IKsin(j4);
IkReal x13617=IKcos(j4);
IkReal x13618=(cj5*r10);
IkReal x13619=(r01*sj5);
IkReal x13620=(cj5*r00);
IkReal x13621=(cj5*r20);
IkReal x13622=((1.0)*x13617);
IkReal x13623=((1.0)*x13616);
IkReal x13624=(sj5*x13616);
evalcond[0]=((((-1.0)*x13621*x13623))+((r21*x13624))+(((-1.0)*r22*x13622)));
evalcond[1]=((((-1.0)*x13620*x13623))+(((-1.0)*r02*x13622))+((x13616*x13619)));
evalcond[2]=((((-1.0)*r11*sj5*x13622))+(((-1.0)*r12*x13623))+((x13617*x13618)));
evalcond[3]=((1.0)+((r11*x13624))+(((-1.0)*r12*x13622))+(((-1.0)*x13618*x13623)));
evalcond[4]=(((cj2*sj1))+((x13617*x13621))+((cj1*sj2))+(((-1.0)*r21*sj5*x13622))+(((-1.0)*r22*x13623)));
evalcond[5]=(((x13617*x13620))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x13619*x13622))+(((-1.0)*r02*x13623)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x13625=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x13625;
j4eval[1]=IKsign(x13625);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x13626=((1.0)*cj5);
IkReal x13627=((((-1.0)*r01*x13626))+(((-1.0)*r00*sj5)));
j4eval[0]=x13627;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x13626)))))+(IKabs(r22)));
j4eval[2]=IKsign(x13627);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x13628=cj5*cj5;
IkReal x13629=r11*r11;
IkReal x13630=(cj5*r10);
IkReal x13631=(r11*sj5);
IkReal x13632=((((2.0)*x13630*x13631))+(((-1.0)*x13628*(r10*r10)))+((x13628*x13629))+(((-1.0)*(r12*r12)))+(((-1.0)*x13629)));
j4eval[0]=x13632;
j4eval[1]=IKsign(x13632);
j4eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*x13630))+x13631))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13633=cj5*cj5;
IkReal x13634=r11*r11;
IkReal x13635=(cj5*r10);
IkReal x13636=(r11*sj5);
CheckValue<IkReal> x13637 = IKatan2WithCheck(IkReal(((((-1.0)*x13635))+x13636)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x13637.valid){
continue;
}
CheckValue<IkReal> x13638=IKPowWithIntegerCheck(IKsign(((((-1.0)*x13634))+(((2.0)*x13635*x13636))+(((-1.0)*(r12*r12)))+(((-1.0)*x13633*(r10*r10)))+((x13633*x13634)))),-1);
if(!x13638.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13637.value)+(((1.5707963267949)*(x13638.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13639=IKcos(j4);
IkReal x13640=IKsin(j4);
IkReal x13641=(cj5*r00);
IkReal x13642=(cj5*r10);
IkReal x13643=(r21*sj5);
IkReal x13644=(cj5*r20);
IkReal x13645=((1.0)*x13639);
IkReal x13646=((1.0)*x13640);
IkReal x13647=(sj5*x13640);
IkReal x13648=(sj5*x13639);
evalcond[0]=(((r11*x13648))+((r12*x13640))+(((-1.0)*x13642*x13645)));
evalcond[1]=((((-1.0)*x13644*x13646))+(((-1.0)*r22*x13645))+((x13640*x13643)));
evalcond[2]=((((-1.0)*x13641*x13646))+((r01*x13647))+(((-1.0)*r02*x13645)));
evalcond[3]=((1.0)+(((-1.0)*r12*x13645))+((r11*x13647))+(((-1.0)*x13642*x13646)));
evalcond[4]=(((cj2*sj1))+((r22*x13640))+((x13639*x13643))+((cj1*sj2))+(((-1.0)*x13644*x13645)));
evalcond[5]=(((r02*x13640))+(((-1.0)*x13641*x13645))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r01*x13648)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13649=((1.0)*cj5);
CheckValue<IkReal> x13650 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x13649)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13650.valid){
continue;
}
CheckValue<IkReal> x13651=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x13649)))),-1);
if(!x13651.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13650.value)+(((1.5707963267949)*(x13651.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13652=IKcos(j4);
IkReal x13653=IKsin(j4);
IkReal x13654=(cj5*r00);
IkReal x13655=(cj5*r10);
IkReal x13656=(r21*sj5);
IkReal x13657=(cj5*r20);
IkReal x13658=((1.0)*x13652);
IkReal x13659=((1.0)*x13653);
IkReal x13660=(sj5*x13653);
IkReal x13661=(sj5*x13652);
evalcond[0]=(((r12*x13653))+((r11*x13661))+(((-1.0)*x13655*x13658)));
evalcond[1]=((((-1.0)*r22*x13658))+((x13653*x13656))+(((-1.0)*x13657*x13659)));
evalcond[2]=((((-1.0)*r02*x13658))+(((-1.0)*x13654*x13659))+((r01*x13660)));
evalcond[3]=((1.0)+((r11*x13660))+(((-1.0)*x13655*x13659))+(((-1.0)*r12*x13658)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x13652*x13656))+((r22*x13653))+(((-1.0)*x13657*x13658)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x13654*x13658))+((r01*x13661))+((r02*x13653)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13662=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x13662.valid){
continue;
}
CheckValue<IkReal> x13663 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13663.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13662.value)))+(x13663.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13664=IKcos(j4);
IkReal x13665=IKsin(j4);
IkReal x13666=(cj5*r00);
IkReal x13667=(cj5*r10);
IkReal x13668=(r21*sj5);
IkReal x13669=(cj5*r20);
IkReal x13670=((1.0)*x13664);
IkReal x13671=((1.0)*x13665);
IkReal x13672=(sj5*x13665);
IkReal x13673=(sj5*x13664);
evalcond[0]=(((r12*x13665))+((r11*x13673))+(((-1.0)*x13667*x13670)));
evalcond[1]=((((-1.0)*x13669*x13671))+((x13665*x13668))+(((-1.0)*r22*x13670)));
evalcond[2]=(((r01*x13672))+(((-1.0)*x13666*x13671))+(((-1.0)*r02*x13670)));
evalcond[3]=((1.0)+(((-1.0)*r12*x13670))+((r11*x13672))+(((-1.0)*x13667*x13671)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x13669*x13670))+((x13664*x13668))+((r22*x13665))+((cj1*sj2)));
evalcond[5]=(((r02*x13665))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r01*x13673))+(((-1.0)*x13666*x13670)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x13674=((-1.0)*r00);
IkReal x13676 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x13676)==0){
continue;
}
IkReal x13675=pow(x13676,-0.5);
CheckValue<IkReal> x13677 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x13674),IKFAST_ATAN2_MAGTHRESH);
if(!x13677.valid){
continue;
}
IkReal gconst54=((-1.0)*(x13677.value));
IkReal gconst55=(r01*x13675);
IkReal gconst56=(x13674*x13675);
CheckValue<IkReal> x13678 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x13678.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x13678.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x13679=((-1.0)*r00);
IkReal x13680=x13675;
CheckValue<IkReal> x13682 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x13679),IKFAST_ATAN2_MAGTHRESH);
if(!x13682.valid){
continue;
}
IkReal x13681=((-1.0)*(x13682.value));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst55;
cj5=gconst56;
j5=x13681;
IkReal gconst54=x13681;
IkReal gconst55=(r01*x13680);
IkReal gconst56=(x13679*x13680);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x13683=((-1.0)*r00);
IkReal x13684=x13675;
CheckValue<IkReal> x13686 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x13683),IKFAST_ATAN2_MAGTHRESH);
if(!x13686.valid){
continue;
}
IkReal x13685=((-1.0)*(x13686.value));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst55;
cj5=gconst56;
j5=x13685;
IkReal gconst54=x13685;
IkReal gconst55=(r01*x13684);
IkReal gconst56=(x13683*x13684);
CheckValue<IkReal> x13694=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r02*r02)))),-1);
if(!x13694.valid){
continue;
}
IkReal x13687=x13694.value;
IkReal x13688=(cj3*x13687);
IkReal x13689=(r21*x13688);
IkReal x13690=(r10*x13688);
IkReal x13691=(r11*x13688);
IkReal x13692=(r20*x13688);
IkReal x13693=(r00*r01*x13688);
j4eval[0]=IKsign((((cj3*r12*r22))+((r11*x13689*(r01*r01)))+((r00*r01*r10*x13689))+((r20*x13690*(r00*r00)))+((r00*r01*r20*x13691))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13695=gconst56*gconst56;
IkReal x13696=gconst55*gconst55;
IkReal x13697=((1.0)*cj3);
IkReal x13698=((1.0)*sj3);
IkReal x13699=(gconst55*r10);
IkReal x13700=(gconst55*gconst56*r11);
IkReal x13701=(r20*x13695);
IkReal x13702=(r21*x13696);
CheckValue<IkReal> x13703 = IKatan2WithCheck(IkReal(((((-1.0)*gconst56*r11*r22*x13697))+(((-1.0)*r22*x13697*x13699)))),IkReal((((cj3*r11*x13701))+(((-1.0)*r10*x13697*x13702))+(((-1.0)*r21*x13697*x13700))+((cj3*gconst56*r20*x13699)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13703.valid){
continue;
}
CheckValue<IkReal> x13704=IKPowWithIntegerCheck(IKsign(((((-1.0)*r12*r22*x13698))+(((-1.0)*r10*x13698*x13701))+((r20*sj3*x13700))+((gconst56*r21*sj3*x13699))+(((-1.0)*r11*x13698*x13702)))),-1);
if(!x13704.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13703.value)+(((1.5707963267949)*(x13704.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13705=IKsin(j4);
IkReal x13706=IKcos(j4);
IkReal x13707=(sj1*sj2);
IkReal x13708=(cj3*gconst55);
IkReal x13709=((1.0)*cj1);
IkReal x13710=(gconst55*r21);
IkReal x13711=(gconst56*r00);
IkReal x13712=((1.0)*gconst56);
IkReal x13713=((1.0)*r20);
IkReal x13714=(gconst55*sj3);
IkReal x13715=((1.0)*r00);
IkReal x13716=(cj2*sj1);
IkReal x13717=(gconst56*r10);
IkReal x13718=(gconst56*r20);
IkReal x13719=((1.0)*r10);
IkReal x13720=(cj2*x13709);
IkReal x13721=((1.0)*x13706);
IkReal x13722=((1.0)*x13705);
IkReal x13723=(sj3*x13705);
IkReal x13724=(gconst55*x13705);
IkReal x13725=(cj3*gconst56*x13706);
evalcond[0]=((((-1.0)*r20*x13705*x13712))+(((-1.0)*r22*x13721))+((x13705*x13710)));
evalcond[1]=((((-1.0)*x13711*x13722))+((r01*x13724))+(((-1.0)*r02*x13721)));
evalcond[2]=((1.0)+((r11*x13724))+(((-1.0)*r12*x13721))+(((-1.0)*r10*x13705*x13712)));
evalcond[3]=(((r11*x13706*x13714))+((r12*x13723))+(((-1.0)*x13708*x13719))+(((-1.0)*cj3*r11*x13712))+(((-1.0)*r10*sj3*x13706*x13712)));
evalcond[4]=(((cj3*x13706*x13717))+(((-1.0)*r11*sj3*x13712))+(((-1.0)*x13714*x13719))+(((-1.0)*cj3*r12*x13722))+(((-1.0)*r11*x13708*x13721)));
evalcond[5]=(x13707+((sj3*x13706*x13710))+((r22*x13723))+(((-1.0)*r20*sj3*x13706*x13712))+(((-1.0)*x13708*x13713))+(((-1.0)*x13720))+(((-1.0)*cj3*r21*x13712)));
evalcond[6]=((((-1.0)*x13713*x13714))+((cj3*x13706*x13718))+(((-1.0)*r21*sj3*x13712))+x13716+(((-1.0)*cj3*r22*x13722))+((cj1*sj2))+(((-1.0)*r21*x13708*x13721)));
evalcond[7]=((((-1.0)*sj2*x13709))+(((-1.0)*x13716))+((r01*x13706*x13714))+(((-1.0)*sj3*x13711*x13721))+((r02*x13723))+(((-1.0)*cj3*r01*x13712))+(((-1.0)*x13708*x13715)));
evalcond[8]=(((cj3*x13706*x13711))+x13707+(((-1.0)*cj3*r02*x13722))+(((-1.0)*x13714*x13715))+(((-1.0)*r01*x13708*x13721))+(((-1.0)*r01*sj3*x13712))+(((-1.0)*x13720)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13726=gconst56*gconst56;
IkReal x13727=gconst55*gconst55;
IkReal x13728=(gconst56*r21);
IkReal x13729=((1.0)*r10);
IkReal x13730=(r11*sj3);
IkReal x13731=(cj3*gconst55);
IkReal x13732=((1.0)*gconst56);
IkReal x13733=((1.0)*gconst55*sj3);
IkReal x13734=(r21*x13727);
IkReal x13735=(r20*x13726);
CheckValue<IkReal> x13736 = IKatan2WithCheck(IkReal(((((-1.0)*gconst55*r22*sj3*x13729))+(((-1.0)*r22*x13730*x13732)))),IkReal(((((-1.0)*sj3*x13729*x13734))+((x13730*x13735))+((gconst55*gconst56*r10*r20*sj3))+(((-1.0)*gconst55*x13728*x13730)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13736.valid){
continue;
}
CheckValue<IkReal> x13737=IKPowWithIntegerCheck(IKsign((((cj3*r12*r22))+(((-1.0)*x13728*x13729*x13731))+(((-1.0)*r11*r20*x13731*x13732))+((cj3*r11*x13734))+((cj3*r10*x13735)))),-1);
if(!x13737.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13736.value)+(((1.5707963267949)*(x13737.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13738=IKsin(j4);
IkReal x13739=IKcos(j4);
IkReal x13740=(sj1*sj2);
IkReal x13741=(cj3*gconst55);
IkReal x13742=((1.0)*cj1);
IkReal x13743=(gconst55*r21);
IkReal x13744=(gconst56*r00);
IkReal x13745=((1.0)*gconst56);
IkReal x13746=((1.0)*r20);
IkReal x13747=(gconst55*sj3);
IkReal x13748=((1.0)*r00);
IkReal x13749=(cj2*sj1);
IkReal x13750=(gconst56*r10);
IkReal x13751=(gconst56*r20);
IkReal x13752=((1.0)*r10);
IkReal x13753=(cj2*x13742);
IkReal x13754=((1.0)*x13739);
IkReal x13755=((1.0)*x13738);
IkReal x13756=(sj3*x13738);
IkReal x13757=(gconst55*x13738);
IkReal x13758=(cj3*gconst56*x13739);
evalcond[0]=((((-1.0)*r22*x13754))+(((-1.0)*r20*x13738*x13745))+((x13738*x13743)));
evalcond[1]=((((-1.0)*x13744*x13755))+((r01*x13757))+(((-1.0)*r02*x13754)));
evalcond[2]=((1.0)+((r11*x13757))+(((-1.0)*r10*x13738*x13745))+(((-1.0)*r12*x13754)));
evalcond[3]=(((r12*x13756))+((r11*x13739*x13747))+(((-1.0)*x13741*x13752))+(((-1.0)*r10*sj3*x13739*x13745))+(((-1.0)*cj3*r11*x13745)));
evalcond[4]=((((-1.0)*r11*sj3*x13745))+(((-1.0)*r11*x13741*x13754))+(((-1.0)*x13747*x13752))+(((-1.0)*cj3*r12*x13755))+((cj3*x13739*x13750)));
evalcond[5]=(((r22*x13756))+((sj3*x13739*x13743))+x13740+(((-1.0)*x13753))+(((-1.0)*r20*sj3*x13739*x13745))+(((-1.0)*cj3*r21*x13745))+(((-1.0)*x13741*x13746)));
evalcond[6]=((((-1.0)*cj3*r22*x13755))+x13749+((cj1*sj2))+(((-1.0)*r21*x13741*x13754))+(((-1.0)*x13746*x13747))+(((-1.0)*r21*sj3*x13745))+((cj3*x13739*x13751)));
evalcond[7]=(((r01*x13739*x13747))+((r02*x13756))+(((-1.0)*x13749))+(((-1.0)*sj3*x13744*x13754))+(((-1.0)*sj2*x13742))+(((-1.0)*cj3*r01*x13745))+(((-1.0)*x13741*x13748)));
evalcond[8]=(x13740+(((-1.0)*r01*sj3*x13745))+(((-1.0)*x13753))+(((-1.0)*r01*x13741*x13754))+(((-1.0)*x13747*x13748))+(((-1.0)*cj3*r02*x13755))+((cj3*x13739*x13744)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13759 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*gconst56*r00))+((gconst55*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13759.valid){
continue;
}
CheckValue<IkReal> x13760=IKPowWithIntegerCheck(IKsign((((gconst56*r21))+((gconst55*r20)))),-1);
if(!x13760.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13759.value)+(((1.5707963267949)*(x13760.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13761=IKsin(j4);
IkReal x13762=IKcos(j4);
IkReal x13763=(sj1*sj2);
IkReal x13764=(cj3*gconst55);
IkReal x13765=((1.0)*cj1);
IkReal x13766=(gconst55*r21);
IkReal x13767=(gconst56*r00);
IkReal x13768=((1.0)*gconst56);
IkReal x13769=((1.0)*r20);
IkReal x13770=(gconst55*sj3);
IkReal x13771=((1.0)*r00);
IkReal x13772=(cj2*sj1);
IkReal x13773=(gconst56*r10);
IkReal x13774=(gconst56*r20);
IkReal x13775=((1.0)*r10);
IkReal x13776=(cj2*x13765);
IkReal x13777=((1.0)*x13762);
IkReal x13778=((1.0)*x13761);
IkReal x13779=(sj3*x13761);
IkReal x13780=(gconst55*x13761);
IkReal x13781=(cj3*gconst56*x13762);
evalcond[0]=((((-1.0)*r22*x13777))+(((-1.0)*r20*x13761*x13768))+((x13761*x13766)));
evalcond[1]=(((r01*x13780))+(((-1.0)*r02*x13777))+(((-1.0)*x13767*x13778)));
evalcond[2]=((1.0)+(((-1.0)*r12*x13777))+(((-1.0)*r10*x13761*x13768))+((r11*x13780)));
evalcond[3]=((((-1.0)*r10*sj3*x13762*x13768))+(((-1.0)*x13764*x13775))+(((-1.0)*cj3*r11*x13768))+((r11*x13762*x13770))+((r12*x13779)));
evalcond[4]=((((-1.0)*r11*sj3*x13768))+(((-1.0)*x13770*x13775))+(((-1.0)*cj3*r12*x13778))+(((-1.0)*r11*x13764*x13777))+((cj3*x13762*x13773)));
evalcond[5]=((((-1.0)*x13776))+(((-1.0)*r20*sj3*x13762*x13768))+x13763+((sj3*x13762*x13766))+(((-1.0)*x13764*x13769))+(((-1.0)*cj3*r21*x13768))+((r22*x13779)));
evalcond[6]=(x13772+(((-1.0)*r21*sj3*x13768))+((cj1*sj2))+(((-1.0)*x13769*x13770))+(((-1.0)*cj3*r22*x13778))+((cj3*x13762*x13774))+(((-1.0)*r21*x13764*x13777)));
evalcond[7]=((((-1.0)*x13772))+((r01*x13762*x13770))+(((-1.0)*sj2*x13765))+(((-1.0)*x13764*x13771))+(((-1.0)*sj3*x13767*x13777))+(((-1.0)*cj3*r01*x13768))+((r02*x13779)));
evalcond[8]=((((-1.0)*x13776))+(((-1.0)*cj3*r02*x13778))+x13763+(((-1.0)*x13770*x13771))+(((-1.0)*r01*x13764*x13777))+(((-1.0)*r01*sj3*x13768))+((cj3*x13762*x13767)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x13782=((-1.0)*r01);
IkReal x13784 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x13784)==0){
continue;
}
IkReal x13783=pow(x13784,-0.5);
CheckValue<IkReal> x13785 = IKatan2WithCheck(IkReal(x13782),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x13785.valid){
continue;
}
IkReal gconst57=((3.14159265358979)+(((-1.0)*(x13785.value))));
IkReal gconst58=(x13782*x13783);
IkReal gconst59=((1.0)*r00*x13783);
CheckValue<IkReal> x13786 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x13786.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x13786.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x13787=((-1.0)*r01);
CheckValue<IkReal> x13790 = IKatan2WithCheck(IkReal(x13787),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x13790.valid){
continue;
}
IkReal x13788=((1.0)*(x13790.value));
IkReal x13789=x13783;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst58;
cj5=gconst59;
j5=((3.14159265)+(((-1.0)*x13788)));
IkReal gconst57=((3.14159265358979)+(((-1.0)*x13788)));
IkReal gconst58=(x13787*x13789);
IkReal gconst59=((1.0)*r00*x13789);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x13791=((-1.0)*r01);
CheckValue<IkReal> x13794 = IKatan2WithCheck(IkReal(x13791),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x13794.valid){
continue;
}
IkReal x13792=((1.0)*(x13794.value));
IkReal x13793=x13783;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst58;
cj5=gconst59;
j5=((3.14159265)+(((-1.0)*x13792)));
IkReal gconst57=((3.14159265358979)+(((-1.0)*x13792)));
IkReal gconst58=(x13791*x13793);
IkReal gconst59=((1.0)*r00*x13793);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13795=gconst59*gconst59;
IkReal x13796=gconst58*gconst58;
IkReal x13797=(r11*sj3);
IkReal x13798=((1.0)*r22);
IkReal x13799=(cj3*r10);
IkReal x13800=((1.0)*r21);
IkReal x13801=(gconst58*gconst59);
IkReal x13802=(r10*sj3);
IkReal x13803=(cj3*r11);
IkReal x13804=(r20*x13801);
IkReal x13805=(r20*x13795);
CheckValue<IkReal> x13806 = IKatan2WithCheck(IkReal(((((-1.0)*gconst59*x13798*x13803))+(((-1.0)*gconst58*x13798*x13799)))),IkReal((((x13799*x13804))+((x13803*x13805))+(((-1.0)*x13796*x13799*x13800))+(((-1.0)*x13800*x13801*x13803)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13806.valid){
continue;
}
CheckValue<IkReal> x13807=IKPowWithIntegerCheck(IKsign((((x13797*x13804))+(((-1.0)*x13796*x13797*x13800))+(((-1.0)*x13802*x13805))+(((-1.0)*r12*sj3*x13798))+((r21*x13801*x13802)))),-1);
if(!x13807.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13806.value)+(((1.5707963267949)*(x13807.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13808=IKsin(j4);
IkReal x13809=IKcos(j4);
IkReal x13810=(sj1*sj2);
IkReal x13811=((1.0)*gconst59);
IkReal x13812=(cj3*r11);
IkReal x13813=(r01*sj3);
IkReal x13814=(gconst58*r01);
IkReal x13815=(cj3*gconst58);
IkReal x13816=((1.0)*r00);
IkReal x13817=((1.0)*cj1);
IkReal x13818=(r11*sj3);
IkReal x13819=(gconst59*sj3);
IkReal x13820=(cj2*sj1);
IkReal x13821=((1.0)*r20);
IkReal x13822=(gconst58*sj3);
IkReal x13823=((1.0)*r10);
IkReal x13824=(r21*sj3);
IkReal x13825=(cj2*x13817);
IkReal x13826=((1.0)*x13809);
IkReal x13827=(r12*x13808);
IkReal x13828=(gconst58*x13809);
IkReal x13829=(gconst58*x13808);
IkReal x13830=(sj3*x13808);
IkReal x13831=((1.0)*cj3*x13808);
IkReal x13832=(cj3*gconst59*x13809);
evalcond[0]=((((-1.0)*r22*x13826))+((r21*x13829))+(((-1.0)*r20*x13808*x13811)));
evalcond[1]=(((x13808*x13814))+(((-1.0)*r00*x13808*x13811))+(((-1.0)*r02*x13826)));
evalcond[2]=((1.0)+((r11*x13829))+(((-1.0)*r10*x13808*x13811))+(((-1.0)*r12*x13826)));
evalcond[3]=((((-1.0)*x13811*x13812))+(((-1.0)*r10*sj3*x13809*x13811))+(((-1.0)*x13815*x13823))+((x13818*x13828))+((sj3*x13827)));
evalcond[4]=((((-1.0)*cj3*x13827))+(((-1.0)*x13811*x13818))+(((-1.0)*gconst58*x13812*x13826))+((r10*x13832))+(((-1.0)*x13822*x13823)));
evalcond[5]=((((-1.0)*x13825))+x13810+((r22*x13830))+(((-1.0)*r20*sj3*x13809*x13811))+(((-1.0)*x13815*x13821))+((r21*x13809*x13822))+(((-1.0)*cj3*r21*x13811)));
evalcond[6]=((((-1.0)*x13811*x13824))+x13820+((cj1*sj2))+(((-1.0)*x13821*x13822))+(((-1.0)*r22*x13831))+((r20*x13832))+(((-1.0)*r21*x13815*x13826)));
evalcond[7]=((((-1.0)*r00*sj3*x13809*x13811))+(((-1.0)*sj2*x13817))+(((-1.0)*cj3*r01*x13811))+(((-1.0)*x13820))+(((-1.0)*x13815*x13816))+((r02*x13830))+((x13813*x13828)));
evalcond[8]=((((-1.0)*x13825))+(((-1.0)*x13811*x13813))+(((-1.0)*cj3*x13814*x13826))+x13810+(((-1.0)*r02*x13831))+(((-1.0)*x13816*x13822))+((r00*x13832)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13833=((1.0)*gconst59);
CheckValue<IkReal> x13834 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x13833))+((gconst58*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13834.valid){
continue;
}
CheckValue<IkReal> x13835=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst58*r00))+(((-1.0)*r01*x13833)))),-1);
if(!x13835.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13834.value)+(((1.5707963267949)*(x13835.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13836=IKsin(j4);
IkReal x13837=IKcos(j4);
IkReal x13838=(sj1*sj2);
IkReal x13839=((1.0)*gconst59);
IkReal x13840=(cj3*r11);
IkReal x13841=(r01*sj3);
IkReal x13842=(gconst58*r01);
IkReal x13843=(cj3*gconst58);
IkReal x13844=((1.0)*r00);
IkReal x13845=((1.0)*cj1);
IkReal x13846=(r11*sj3);
IkReal x13847=(gconst59*sj3);
IkReal x13848=(cj2*sj1);
IkReal x13849=((1.0)*r20);
IkReal x13850=(gconst58*sj3);
IkReal x13851=((1.0)*r10);
IkReal x13852=(r21*sj3);
IkReal x13853=(cj2*x13845);
IkReal x13854=((1.0)*x13837);
IkReal x13855=(r12*x13836);
IkReal x13856=(gconst58*x13837);
IkReal x13857=(gconst58*x13836);
IkReal x13858=(sj3*x13836);
IkReal x13859=((1.0)*cj3*x13836);
IkReal x13860=(cj3*gconst59*x13837);
evalcond[0]=((((-1.0)*r22*x13854))+((r21*x13857))+(((-1.0)*r20*x13836*x13839)));
evalcond[1]=(((x13836*x13842))+(((-1.0)*r00*x13836*x13839))+(((-1.0)*r02*x13854)));
evalcond[2]=((1.0)+(((-1.0)*r12*x13854))+((r11*x13857))+(((-1.0)*r10*x13836*x13839)));
evalcond[3]=(((sj3*x13855))+(((-1.0)*x13839*x13840))+(((-1.0)*x13843*x13851))+(((-1.0)*r10*sj3*x13837*x13839))+((x13846*x13856)));
evalcond[4]=((((-1.0)*cj3*x13855))+(((-1.0)*x13839*x13846))+(((-1.0)*gconst58*x13840*x13854))+(((-1.0)*x13850*x13851))+((r10*x13860)));
evalcond[5]=(((r22*x13858))+x13838+(((-1.0)*x13843*x13849))+((r21*x13837*x13850))+(((-1.0)*cj3*r21*x13839))+(((-1.0)*r20*sj3*x13837*x13839))+(((-1.0)*x13853)));
evalcond[6]=((((-1.0)*x13839*x13852))+x13848+((cj1*sj2))+(((-1.0)*r22*x13859))+((r20*x13860))+(((-1.0)*r21*x13843*x13854))+(((-1.0)*x13849*x13850)));
evalcond[7]=((((-1.0)*r00*sj3*x13837*x13839))+((x13841*x13856))+(((-1.0)*sj2*x13845))+(((-1.0)*cj3*r01*x13839))+(((-1.0)*x13843*x13844))+((r02*x13858))+(((-1.0)*x13848)));
evalcond[8]=((((-1.0)*x13844*x13850))+(((-1.0)*cj3*x13842*x13854))+((r00*x13860))+x13838+(((-1.0)*x13839*x13841))+(((-1.0)*r02*x13859))+(((-1.0)*x13853)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13861=IKPowWithIntegerCheck(IKsign((((gconst59*r21))+((gconst58*r20)))),-1);
if(!x13861.valid){
continue;
}
CheckValue<IkReal> x13862 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst58*r01))+(((-1.0)*gconst59*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13862.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13861.value)))+(x13862.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13863=IKsin(j4);
IkReal x13864=IKcos(j4);
IkReal x13865=(sj1*sj2);
IkReal x13866=((1.0)*gconst59);
IkReal x13867=(cj3*r11);
IkReal x13868=(r01*sj3);
IkReal x13869=(gconst58*r01);
IkReal x13870=(cj3*gconst58);
IkReal x13871=((1.0)*r00);
IkReal x13872=((1.0)*cj1);
IkReal x13873=(r11*sj3);
IkReal x13874=(gconst59*sj3);
IkReal x13875=(cj2*sj1);
IkReal x13876=((1.0)*r20);
IkReal x13877=(gconst58*sj3);
IkReal x13878=((1.0)*r10);
IkReal x13879=(r21*sj3);
IkReal x13880=(cj2*x13872);
IkReal x13881=((1.0)*x13864);
IkReal x13882=(r12*x13863);
IkReal x13883=(gconst58*x13864);
IkReal x13884=(gconst58*x13863);
IkReal x13885=(sj3*x13863);
IkReal x13886=((1.0)*cj3*x13863);
IkReal x13887=(cj3*gconst59*x13864);
evalcond[0]=((((-1.0)*r20*x13863*x13866))+((r21*x13884))+(((-1.0)*r22*x13881)));
evalcond[1]=((((-1.0)*r02*x13881))+(((-1.0)*r00*x13863*x13866))+((x13863*x13869)));
evalcond[2]=((1.0)+((r11*x13884))+(((-1.0)*r10*x13863*x13866))+(((-1.0)*r12*x13881)));
evalcond[3]=(((sj3*x13882))+(((-1.0)*r10*sj3*x13864*x13866))+(((-1.0)*x13870*x13878))+(((-1.0)*x13866*x13867))+((x13873*x13883)));
evalcond[4]=((((-1.0)*gconst58*x13867*x13881))+((r10*x13887))+(((-1.0)*cj3*x13882))+(((-1.0)*x13877*x13878))+(((-1.0)*x13866*x13873)));
evalcond[5]=(x13865+((r21*x13864*x13877))+(((-1.0)*x13870*x13876))+(((-1.0)*r20*sj3*x13864*x13866))+(((-1.0)*x13880))+(((-1.0)*cj3*r21*x13866))+((r22*x13885)));
evalcond[6]=(x13875+((cj1*sj2))+((r20*x13887))+(((-1.0)*r22*x13886))+(((-1.0)*x13876*x13877))+(((-1.0)*r21*x13870*x13881))+(((-1.0)*x13866*x13879)));
evalcond[7]=((((-1.0)*cj3*r01*x13866))+(((-1.0)*x13875))+(((-1.0)*r00*sj3*x13864*x13866))+((r02*x13885))+(((-1.0)*x13870*x13871))+(((-1.0)*sj2*x13872))+((x13868*x13883)));
evalcond[8]=((((-1.0)*r02*x13886))+(((-1.0)*cj3*x13869*x13881))+x13865+(((-1.0)*x13871*x13877))+((r00*x13887))+(((-1.0)*x13866*x13868))+(((-1.0)*x13880)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x13889 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x13889)==0){
continue;
}
IkReal x13888=pow(x13889,-0.5);
CheckValue<IkReal> x13890 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13890.valid){
continue;
}
IkReal gconst60=((-1.0)*(x13890.value));
IkReal gconst61=((-1.0)*r21*x13888);
IkReal gconst62=(r20*x13888);
CheckValue<IkReal> x13891 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13891.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x13891.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x13894 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13894.valid){
continue;
}
IkReal x13892=((-1.0)*(x13894.value));
IkReal x13893=x13888;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst61;
cj5=gconst62;
j5=x13892;
IkReal gconst60=x13892;
IkReal gconst61=((-1.0)*r21*x13893);
IkReal gconst62=(r20*x13893);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x13897 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13897.valid){
continue;
}
IkReal x13895=((-1.0)*(x13897.value));
IkReal x13896=x13888;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst61;
cj5=gconst62;
j5=x13895;
IkReal gconst60=x13895;
IkReal gconst61=((-1.0)*r21*x13896);
IkReal gconst62=(r20*x13896);
CheckValue<IkReal> x13905=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x13905.valid){
continue;
}
IkReal x13898=x13905.value;
IkReal x13899=(cj3*x13898);
IkReal x13900=(r11*x13899);
IkReal x13901=(r01*x13899);
IkReal x13902=(r00*x13899);
IkReal x13903=(r10*x13899);
IkReal x13904=(r20*r21*x13899);
j4eval[0]=IKsign((((r01*x13900*(r21*r21)))+((r10*r20*r21*x13901))+((cj3*r02*r12))+((r10*x13902*(r20*r20)))+((r00*r20*r21*x13900))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13906=gconst62*gconst62;
IkReal x13907=gconst61*gconst61;
IkReal x13908=(cj3*r00);
IkReal x13909=((1.0)*sj3);
IkReal x13910=(gconst62*r11);
IkReal x13911=((1.0)*cj3);
IkReal x13912=(r10*x13911);
IkReal x13913=(r01*x13907);
IkReal x13914=(gconst61*gconst62*r10);
CheckValue<IkReal> x13915=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x13909*x13913))+(((-1.0)*r02*r12*x13909))+((gconst61*r00*sj3*x13910))+((r01*sj3*x13914))+(((-1.0)*r00*r10*x13906*x13909)))),-1);
if(!x13915.valid){
continue;
}
CheckValue<IkReal> x13916 = IKatan2WithCheck(IkReal(((((-1.0)*gconst61*r02*x13912))+(((-1.0)*r02*x13910*x13911)))),IkReal(((((-1.0)*gconst61*r01*x13910*x13911))+((r11*x13906*x13908))+(((-1.0)*x13912*x13913))+((x13908*x13914)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13916.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13915.value)))+(x13916.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13917=IKsin(j4);
IkReal x13918=IKcos(j4);
IkReal x13919=(sj1*sj2);
IkReal x13920=((1.0)*cj1);
IkReal x13921=(gconst61*r21);
IkReal x13922=((1.0)*cj3);
IkReal x13923=(gconst61*r00);
IkReal x13924=(gconst62*r21);
IkReal x13925=(gconst61*r11);
IkReal x13926=(gconst62*sj3);
IkReal x13927=(cj2*sj1);
IkReal x13928=((1.0)*sj3);
IkReal x13929=(gconst61*r10);
IkReal x13930=(gconst61*r01);
IkReal x13931=(gconst61*r20);
IkReal x13932=(cj2*x13920);
IkReal x13933=((1.0)*x13918);
IkReal x13934=(sj3*x13918);
IkReal x13935=(sj3*x13917);
IkReal x13936=(cj3*gconst62*x13918);
IkReal x13937=((1.0)*gconst62*x13917);
evalcond[0]=((((-1.0)*r20*x13937))+((x13917*x13921))+(((-1.0)*r22*x13933)));
evalcond[1]=(((x13917*x13930))+(((-1.0)*r00*x13937))+(((-1.0)*r02*x13933)));
evalcond[2]=((1.0)+(((-1.0)*r12*x13933))+((x13917*x13925))+(((-1.0)*r10*x13937)));
evalcond[3]=(((x13925*x13934))+(((-1.0)*x13922*x13929))+(((-1.0)*gconst62*r11*x13922))+(((-1.0)*r10*x13926*x13933))+((r12*x13935)));
evalcond[4]=((((-1.0)*r11*x13926))+(((-1.0)*x13918*x13922*x13925))+(((-1.0)*r12*x13917*x13922))+((r10*x13936))+(((-1.0)*x13928*x13929)));
evalcond[5]=((((-1.0)*r20*x13926*x13933))+x13919+(((-1.0)*x13932))+(((-1.0)*x13922*x13924))+((r22*x13935))+((x13921*x13934))+(((-1.0)*x13922*x13931)));
evalcond[6]=(((r20*x13936))+(((-1.0)*x13924*x13928))+((cj1*sj2))+x13927+(((-1.0)*r22*x13917*x13922))+(((-1.0)*x13918*x13921*x13922))+(((-1.0)*x13928*x13931)));
evalcond[7]=((((-1.0)*sj2*x13920))+(((-1.0)*x13927))+(((-1.0)*x13922*x13923))+((x13930*x13934))+(((-1.0)*gconst62*r01*x13922))+(((-1.0)*r00*x13926*x13933))+((r02*x13935)));
evalcond[8]=(((r00*x13936))+(((-1.0)*x13923*x13928))+x13919+(((-1.0)*x13932))+(((-1.0)*r01*x13926))+(((-1.0)*r02*x13917*x13922))+(((-1.0)*x13918*x13922*x13930)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13938=gconst61*gconst61;
IkReal x13939=gconst62*gconst62;
IkReal x13940=(gconst61*r00);
IkReal x13941=(r02*sj3);
IkReal x13942=(r10*sj3);
IkReal x13943=(gconst61*r01);
IkReal x13944=((1.0)*r10);
IkReal x13945=((1.0)*gconst62*r11);
IkReal x13946=(r00*x13939);
IkReal x13947=(r01*x13938);
CheckValue<IkReal> x13948 = IKatan2WithCheck(IkReal(((((-1.0)*x13941*x13945))+(((-1.0)*gconst61*x13941*x13944)))),IkReal(((((-1.0)*x13942*x13947))+(((-1.0)*sj3*x13943*x13945))+((gconst62*x13940*x13942))+((r11*sj3*x13946)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13948.valid){
continue;
}
CheckValue<IkReal> x13949=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj3*x13940*x13945))+((cj3*r11*x13947))+((cj3*r02*r12))+((cj3*r10*x13946))+(((-1.0)*cj3*gconst62*x13943*x13944)))),-1);
if(!x13949.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13948.value)+(((1.5707963267949)*(x13949.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13950=IKsin(j4);
IkReal x13951=IKcos(j4);
IkReal x13952=(sj1*sj2);
IkReal x13953=((1.0)*cj1);
IkReal x13954=(gconst61*r21);
IkReal x13955=((1.0)*cj3);
IkReal x13956=(gconst61*r00);
IkReal x13957=(gconst62*r21);
IkReal x13958=(gconst61*r11);
IkReal x13959=(gconst62*sj3);
IkReal x13960=(cj2*sj1);
IkReal x13961=((1.0)*sj3);
IkReal x13962=(gconst61*r10);
IkReal x13963=(gconst61*r01);
IkReal x13964=(gconst61*r20);
IkReal x13965=(cj2*x13953);
IkReal x13966=((1.0)*x13951);
IkReal x13967=(sj3*x13951);
IkReal x13968=(sj3*x13950);
IkReal x13969=(cj3*gconst62*x13951);
IkReal x13970=((1.0)*gconst62*x13950);
evalcond[0]=((((-1.0)*r20*x13970))+(((-1.0)*r22*x13966))+((x13950*x13954)));
evalcond[1]=(((x13950*x13963))+(((-1.0)*r02*x13966))+(((-1.0)*r00*x13970)));
evalcond[2]=((1.0)+(((-1.0)*r10*x13970))+(((-1.0)*r12*x13966))+((x13950*x13958)));
evalcond[3]=(((x13958*x13967))+(((-1.0)*r10*x13959*x13966))+(((-1.0)*x13955*x13962))+((r12*x13968))+(((-1.0)*gconst62*r11*x13955)));
evalcond[4]=((((-1.0)*r12*x13950*x13955))+((r10*x13969))+(((-1.0)*r11*x13959))+(((-1.0)*x13951*x13955*x13958))+(((-1.0)*x13961*x13962)));
evalcond[5]=((((-1.0)*x13955*x13957))+(((-1.0)*r20*x13959*x13966))+x13952+(((-1.0)*x13955*x13964))+(((-1.0)*x13965))+((r22*x13968))+((x13954*x13967)));
evalcond[6]=((((-1.0)*r22*x13950*x13955))+(((-1.0)*x13951*x13954*x13955))+((cj1*sj2))+x13960+((r20*x13969))+(((-1.0)*x13957*x13961))+(((-1.0)*x13961*x13964)));
evalcond[7]=(((r02*x13968))+((x13963*x13967))+(((-1.0)*x13955*x13956))+(((-1.0)*r00*x13959*x13966))+(((-1.0)*x13960))+(((-1.0)*sj2*x13953))+(((-1.0)*gconst62*r01*x13955)));
evalcond[8]=((((-1.0)*x13951*x13955*x13963))+x13952+(((-1.0)*r01*x13959))+(((-1.0)*x13965))+((r00*x13969))+(((-1.0)*x13956*x13961))+(((-1.0)*r02*x13950*x13955)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13971=((1.0)*gconst62);
CheckValue<IkReal> x13972 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x13971))+((gconst61*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13972.valid){
continue;
}
CheckValue<IkReal> x13973=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst61*r00))+(((-1.0)*r01*x13971)))),-1);
if(!x13973.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13972.value)+(((1.5707963267949)*(x13973.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13974=IKsin(j4);
IkReal x13975=IKcos(j4);
IkReal x13976=(sj1*sj2);
IkReal x13977=((1.0)*cj1);
IkReal x13978=(gconst61*r21);
IkReal x13979=((1.0)*cj3);
IkReal x13980=(gconst61*r00);
IkReal x13981=(gconst62*r21);
IkReal x13982=(gconst61*r11);
IkReal x13983=(gconst62*sj3);
IkReal x13984=(cj2*sj1);
IkReal x13985=((1.0)*sj3);
IkReal x13986=(gconst61*r10);
IkReal x13987=(gconst61*r01);
IkReal x13988=(gconst61*r20);
IkReal x13989=(cj2*x13977);
IkReal x13990=((1.0)*x13975);
IkReal x13991=(sj3*x13975);
IkReal x13992=(sj3*x13974);
IkReal x13993=(cj3*gconst62*x13975);
IkReal x13994=((1.0)*gconst62*x13974);
evalcond[0]=((((-1.0)*r20*x13994))+((x13974*x13978))+(((-1.0)*r22*x13990)));
evalcond[1]=((((-1.0)*r02*x13990))+((x13974*x13987))+(((-1.0)*r00*x13994)));
evalcond[2]=((1.0)+((x13974*x13982))+(((-1.0)*r12*x13990))+(((-1.0)*r10*x13994)));
evalcond[3]=((((-1.0)*x13979*x13986))+(((-1.0)*r10*x13983*x13990))+((r12*x13992))+(((-1.0)*gconst62*r11*x13979))+((x13982*x13991)));
evalcond[4]=((((-1.0)*x13985*x13986))+(((-1.0)*r11*x13983))+((r10*x13993))+(((-1.0)*r12*x13974*x13979))+(((-1.0)*x13975*x13979*x13982)));
evalcond[5]=((((-1.0)*x13979*x13981))+(((-1.0)*x13979*x13988))+((r22*x13992))+((x13978*x13991))+x13976+(((-1.0)*r20*x13983*x13990))+(((-1.0)*x13989)));
evalcond[6]=((((-1.0)*x13985*x13988))+((cj1*sj2))+x13984+(((-1.0)*r22*x13974*x13979))+((r20*x13993))+(((-1.0)*x13975*x13978*x13979))+(((-1.0)*x13981*x13985)));
evalcond[7]=((((-1.0)*x13979*x13980))+(((-1.0)*r00*x13983*x13990))+(((-1.0)*sj2*x13977))+(((-1.0)*gconst62*r01*x13979))+((r02*x13992))+(((-1.0)*x13984))+((x13987*x13991)));
evalcond[8]=(x13976+(((-1.0)*r01*x13983))+(((-1.0)*x13989))+(((-1.0)*x13980*x13985))+(((-1.0)*r02*x13974*x13979))+(((-1.0)*x13975*x13979*x13987))+((r00*x13993)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x13996 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x13996)==0){
continue;
}
IkReal x13995=pow(x13996,-0.5);
CheckValue<IkReal> x13997 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13997.valid){
continue;
}
IkReal gconst63=((3.14159265358979)+(((-1.0)*(x13997.value))));
IkReal gconst64=((1.0)*r21*x13995);
IkReal gconst65=((-1.0)*r20*x13995);
CheckValue<IkReal> x13998 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13998.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x13998.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x14001 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14001.valid){
continue;
}
IkReal x13999=((1.0)*(x14001.value));
IkReal x14000=x13995;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst64;
cj5=gconst65;
j5=((3.14159265)+(((-1.0)*x13999)));
IkReal gconst63=((3.14159265358979)+(((-1.0)*x13999)));
IkReal gconst64=((1.0)*r21*x14000);
IkReal gconst65=((-1.0)*r20*x14000);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x14004 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14004.valid){
continue;
}
IkReal x14002=((1.0)*(x14004.value));
IkReal x14003=x13995;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst64;
cj5=gconst65;
j5=((3.14159265)+(((-1.0)*x14002)));
IkReal gconst63=((3.14159265358979)+(((-1.0)*x14002)));
IkReal gconst64=((1.0)*r21*x14003);
IkReal gconst65=((-1.0)*r20*x14003);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x14007 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14007.valid){
continue;
}
IkReal x14005=((1.0)*(x14007.value));
IkReal x14006=x13995;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst64;
cj5=gconst65;
j5=((3.14159265)+(((-1.0)*x14005)));
IkReal gconst63=((3.14159265358979)+(((-1.0)*x14005)));
IkReal gconst64=((1.0)*r21*x14006);
IkReal gconst65=((-1.0)*r20*x14006);
j4eval[0]=cj3;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14008=gconst65*gconst65;
IkReal x14009=gconst64*gconst64;
IkReal x14010=((1.0)*r22);
IkReal x14011=(cj3*r10);
IkReal x14012=(gconst64*gconst65);
IkReal x14013=((1.0)*r21);
IkReal x14014=(cj3*r11);
IkReal x14015=(r10*sj3);
IkReal x14016=(r11*sj3);
IkReal x14017=(r20*x14008);
CheckValue<IkReal> x14018 = IKatan2WithCheck(IkReal(((((-1.0)*gconst65*x14010*x14014))+(((-1.0)*gconst64*x14010*x14011)))),IkReal((((x14014*x14017))+((r20*x14011*x14012))+(((-1.0)*x14012*x14013*x14014))+(((-1.0)*x14009*x14011*x14013)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14018.valid){
continue;
}
CheckValue<IkReal> x14019=IKPowWithIntegerCheck(IKsign(((((-1.0)*x14015*x14017))+(((-1.0)*r12*sj3*x14010))+(((-1.0)*x14009*x14013*x14016))+((r20*x14012*x14016))+((r21*x14012*x14015)))),-1);
if(!x14019.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14018.value)+(((1.5707963267949)*(x14019.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14020=IKsin(j4);
IkReal x14021=IKcos(j4);
IkReal x14022=(sj1*sj2);
IkReal x14023=(cj3*gconst64);
IkReal x14024=((1.0)*gconst65);
IkReal x14025=((1.0)*r00);
IkReal x14026=(r11*sj3);
IkReal x14027=((1.0)*cj2);
IkReal x14028=(r21*sj3);
IkReal x14029=(gconst65*sj3);
IkReal x14030=(cj1*sj2);
IkReal x14031=(gconst64*r01);
IkReal x14032=((1.0)*r20);
IkReal x14033=(gconst64*sj3);
IkReal x14034=((1.0)*r10);
IkReal x14035=(cj1*x14027);
IkReal x14036=((1.0)*x14021);
IkReal x14037=(r12*x14020);
IkReal x14038=(gconst64*x14021);
IkReal x14039=(sj3*x14020);
IkReal x14040=(gconst64*x14020);
IkReal x14041=(cj3*gconst65*x14021);
IkReal x14042=((1.0)*cj3*x14020);
evalcond[0]=(((r21*x14040))+(((-1.0)*r22*x14036))+(((-1.0)*r20*x14020*x14024)));
evalcond[1]=((((-1.0)*r00*x14020*x14024))+(((-1.0)*r02*x14036))+((x14020*x14031)));
evalcond[2]=((1.0)+((r11*x14040))+(((-1.0)*r10*x14020*x14024))+(((-1.0)*r12*x14036)));
evalcond[3]=(((x14026*x14038))+((sj3*x14037))+(((-1.0)*cj3*r11*x14024))+(((-1.0)*r10*sj3*x14021*x14024))+(((-1.0)*x14023*x14034)));
evalcond[4]=((((-1.0)*cj3*x14037))+(((-1.0)*x14033*x14034))+((r10*x14041))+(((-1.0)*r11*x14023*x14036))+(((-1.0)*x14024*x14026)));
evalcond[5]=((((-1.0)*r20*sj3*x14021*x14024))+(((-1.0)*cj3*r21*x14024))+((r22*x14039))+(((-1.0)*x14035))+(((-1.0)*x14023*x14032))+((x14028*x14038))+x14022);
evalcond[6]=(((cj2*sj1))+(((-1.0)*x14032*x14033))+((r20*x14041))+(((-1.0)*x14024*x14028))+(((-1.0)*r22*x14042))+x14030+(((-1.0)*r21*x14023*x14036)));
evalcond[7]=((((-1.0)*x14030))+(((-1.0)*x14023*x14025))+((sj3*x14021*x14031))+(((-1.0)*r00*sj3*x14021*x14024))+(((-1.0)*cj3*r01*x14024))+(((-1.0)*sj1*x14027))+((r02*x14039)));
evalcond[8]=(((r00*x14041))+(((-1.0)*r01*x14023*x14036))+(((-1.0)*x14025*x14033))+(((-1.0)*r02*x14042))+(((-1.0)*x14035))+x14022+(((-1.0)*r01*sj3*x14024)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14043=((1.0)*gconst65);
CheckValue<IkReal> x14044 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x14043))+((gconst64*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14044.valid){
continue;
}
CheckValue<IkReal> x14045=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x14043))+(((-1.0)*gconst64*r00)))),-1);
if(!x14045.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14044.value)+(((1.5707963267949)*(x14045.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14046=IKsin(j4);
IkReal x14047=IKcos(j4);
IkReal x14048=(sj1*sj2);
IkReal x14049=(cj3*gconst64);
IkReal x14050=((1.0)*gconst65);
IkReal x14051=((1.0)*r00);
IkReal x14052=(r11*sj3);
IkReal x14053=((1.0)*cj2);
IkReal x14054=(r21*sj3);
IkReal x14055=(gconst65*sj3);
IkReal x14056=(cj1*sj2);
IkReal x14057=(gconst64*r01);
IkReal x14058=((1.0)*r20);
IkReal x14059=(gconst64*sj3);
IkReal x14060=((1.0)*r10);
IkReal x14061=(cj1*x14053);
IkReal x14062=((1.0)*x14047);
IkReal x14063=(r12*x14046);
IkReal x14064=(gconst64*x14047);
IkReal x14065=(sj3*x14046);
IkReal x14066=(gconst64*x14046);
IkReal x14067=(cj3*gconst65*x14047);
IkReal x14068=((1.0)*cj3*x14046);
evalcond[0]=((((-1.0)*r22*x14062))+((r21*x14066))+(((-1.0)*r20*x14046*x14050)));
evalcond[1]=((((-1.0)*r00*x14046*x14050))+((x14046*x14057))+(((-1.0)*r02*x14062)));
evalcond[2]=((1.0)+(((-1.0)*r10*x14046*x14050))+(((-1.0)*r12*x14062))+((r11*x14066)));
evalcond[3]=((((-1.0)*cj3*r11*x14050))+(((-1.0)*x14049*x14060))+((sj3*x14063))+(((-1.0)*r10*sj3*x14047*x14050))+((x14052*x14064)));
evalcond[4]=((((-1.0)*r11*x14049*x14062))+(((-1.0)*x14059*x14060))+(((-1.0)*x14050*x14052))+(((-1.0)*cj3*x14063))+((r10*x14067)));
evalcond[5]=((((-1.0)*r20*sj3*x14047*x14050))+((r22*x14065))+(((-1.0)*cj3*r21*x14050))+(((-1.0)*x14061))+(((-1.0)*x14049*x14058))+x14048+((x14054*x14064)));
evalcond[6]=(((cj2*sj1))+(((-1.0)*r22*x14068))+(((-1.0)*x14050*x14054))+((r20*x14067))+(((-1.0)*x14058*x14059))+x14056+(((-1.0)*r21*x14049*x14062)));
evalcond[7]=(((r02*x14065))+((sj3*x14047*x14057))+(((-1.0)*x14056))+(((-1.0)*r00*sj3*x14047*x14050))+(((-1.0)*sj1*x14053))+(((-1.0)*cj3*r01*x14050))+(((-1.0)*x14049*x14051)));
evalcond[8]=((((-1.0)*r01*x14049*x14062))+(((-1.0)*x14051*x14059))+((r00*x14067))+(((-1.0)*x14061))+(((-1.0)*r01*sj3*x14050))+x14048+(((-1.0)*r02*x14068)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14069 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst64*r01))+(((-1.0)*gconst65*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14069.valid){
continue;
}
CheckValue<IkReal> x14070=IKPowWithIntegerCheck(IKsign((((gconst64*r20))+((gconst65*r21)))),-1);
if(!x14070.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14069.value)+(((1.5707963267949)*(x14070.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14071=IKsin(j4);
IkReal x14072=IKcos(j4);
IkReal x14073=(sj1*sj2);
IkReal x14074=(cj3*gconst64);
IkReal x14075=((1.0)*gconst65);
IkReal x14076=((1.0)*r00);
IkReal x14077=(r11*sj3);
IkReal x14078=((1.0)*cj2);
IkReal x14079=(r21*sj3);
IkReal x14080=(gconst65*sj3);
IkReal x14081=(cj1*sj2);
IkReal x14082=(gconst64*r01);
IkReal x14083=((1.0)*r20);
IkReal x14084=(gconst64*sj3);
IkReal x14085=((1.0)*r10);
IkReal x14086=(cj1*x14078);
IkReal x14087=((1.0)*x14072);
IkReal x14088=(r12*x14071);
IkReal x14089=(gconst64*x14072);
IkReal x14090=(sj3*x14071);
IkReal x14091=(gconst64*x14071);
IkReal x14092=(cj3*gconst65*x14072);
IkReal x14093=((1.0)*cj3*x14071);
evalcond[0]=((((-1.0)*r22*x14087))+((r21*x14091))+(((-1.0)*r20*x14071*x14075)));
evalcond[1]=((((-1.0)*r00*x14071*x14075))+((x14071*x14082))+(((-1.0)*r02*x14087)));
evalcond[2]=((1.0)+(((-1.0)*r12*x14087))+(((-1.0)*r10*x14071*x14075))+((r11*x14091)));
evalcond[3]=((((-1.0)*x14074*x14085))+((x14077*x14089))+(((-1.0)*r10*sj3*x14072*x14075))+(((-1.0)*cj3*r11*x14075))+((sj3*x14088)));
evalcond[4]=((((-1.0)*x14084*x14085))+(((-1.0)*x14075*x14077))+((r10*x14092))+(((-1.0)*cj3*x14088))+(((-1.0)*r11*x14074*x14087)));
evalcond[5]=((((-1.0)*x14074*x14083))+(((-1.0)*cj3*r21*x14075))+(((-1.0)*r20*sj3*x14072*x14075))+(((-1.0)*x14086))+((x14079*x14089))+x14073+((r22*x14090)));
evalcond[6]=(((cj2*sj1))+(((-1.0)*r22*x14093))+((r20*x14092))+(((-1.0)*x14075*x14079))+(((-1.0)*r21*x14074*x14087))+(((-1.0)*x14083*x14084))+x14081);
evalcond[7]=((((-1.0)*cj3*r01*x14075))+(((-1.0)*sj1*x14078))+((sj3*x14072*x14082))+(((-1.0)*x14081))+((r02*x14090))+(((-1.0)*x14074*x14076))+(((-1.0)*r00*sj3*x14072*x14075)));
evalcond[8]=(((r00*x14092))+(((-1.0)*x14076*x14084))+(((-1.0)*r02*x14093))+(((-1.0)*r01*x14074*x14087))+(((-1.0)*x14086))+(((-1.0)*r01*sj3*x14075))+x14073);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x14094=((-1.0)*pz);
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x14094);
rxp1_0=(pz*r11);
rxp1_1=(r01*x14094);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x14095=(r11*sj5);
IkReal x14096=((1.0)*cj5*r10);
j4eval[0]=((((-1.0)*x14096))+x14095);
j4eval[1]=(((sj3*x14095))+(((-1.0)*sj3*x14096)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x14097=((-1.0)*pz);
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x14097);
rxp1_0=(pz*r11);
rxp1_1=(r01*x14097);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x14098=(cj5*r10);
IkReal x14099=(r11*sj5);
j4eval[0]=((((-1.0)*x14098))+x14099);
j4eval[1]=(((cj3*x14098))+(((-1.0)*cj3*x14099)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x14100=((-1.0)*pz);
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x14100);
rxp1_0=(pz*r11);
rxp1_1=(r01*x14100);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=r22;
j4eval[1]=sj3;
j4eval[2]=(((r11*sj3*sj5))+(((-1.0)*cj5*r10*sj3)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14101=IKPowWithIntegerCheck(r22,-1);
if(!x14101.valid){
continue;
}
CheckValue<IkReal> x14102=IKPowWithIntegerCheck(sj3,-1);
if(!x14102.valid){
continue;
}
CheckValue<IkReal> x14103=IKPowWithIntegerCheck((((r11*sj3*sj5))+(((-1.0)*cj5*r10*sj3))),-1);
if(!x14103.valid){
continue;
}
if( IKabs(((x14101.value)*(x14102.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14103.value)*((((cj3*cj5*r11))+((cj3*r10*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x14101.value)*(x14102.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))+IKsqr(((x14103.value)*((((cj3*cj5*r11))+((cj3*r10*sj5))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x14101.value)*(x14102.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))), ((x14103.value)*((((cj3*cj5*r11))+((cj3*r10*sj5))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14104=IKsin(j4);
IkReal x14105=IKcos(j4);
IkReal x14106=(sj1*sj2);
IkReal x14107=((1.0)*cj5);
IkReal x14108=((1.0)*cj1);
IkReal x14109=(r10*sj3);
IkReal x14110=(cj2*sj1);
IkReal x14111=(sj3*sj5);
IkReal x14112=(cj2*x14108);
IkReal x14113=((1.0)*cj3*sj5);
IkReal x14114=(r11*x14105);
IkReal x14115=(sj5*x14104);
IkReal x14116=(r22*x14104);
IkReal x14117=(r01*x14105);
IkReal x14118=(cj3*cj5*x14105);
evalcond[0]=((-1.0)*r22*x14105);
evalcond[1]=(((r01*x14115))+(((-1.0)*r00*x14104*x14107)));
evalcond[2]=(((sj3*x14116))+(((-1.0)*x14112))+x14106);
evalcond[3]=((((-1.0)*cj3*x14116))+((cj1*sj2))+x14110);
evalcond[4]=((1.0)+((r11*x14115))+(((-1.0)*r10*x14104*x14107)));
evalcond[5]=((((-1.0)*x14105*x14107*x14109))+((x14111*x14114))+(((-1.0)*cj3*r11*x14107))+(((-1.0)*r10*x14113)));
evalcond[6]=((((-1.0)*sj5*x14109))+(((-1.0)*r11*sj3*x14107))+((r10*x14118))+(((-1.0)*x14113*x14114)));
evalcond[7]=(((r00*x14118))+(((-1.0)*x14112))+(((-1.0)*r01*sj3*x14107))+x14106+(((-1.0)*r00*x14111))+(((-1.0)*x14113*x14117)));
evalcond[8]=((((-1.0)*cj3*r01*x14107))+((x14111*x14117))+(((-1.0)*r00*sj3*x14105*x14107))+(((-1.0)*r00*x14113))+(((-1.0)*x14110))+(((-1.0)*sj2*x14108)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14119=(r11*sj5);
IkReal x14120=(cj5*r10);
CheckValue<IkReal> x14121=IKPowWithIntegerCheck(((((-1.0)*x14120))+x14119),-1);
if(!x14121.valid){
continue;
}
CheckValue<IkReal> x14122=IKPowWithIntegerCheck(((((-1.0)*cj3*x14119))+((cj3*x14120))),-1);
if(!x14122.valid){
continue;
}
if( IKabs(((-1.0)*(x14121.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14122.value)*((((cj5*r11*sj3))+((r10*sj3*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x14121.value)))+IKsqr(((x14122.value)*((((cj5*r11*sj3))+((r10*sj3*sj5))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x14121.value)), ((x14122.value)*((((cj5*r11*sj3))+((r10*sj3*sj5))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14123=IKsin(j4);
IkReal x14124=IKcos(j4);
IkReal x14125=(sj1*sj2);
IkReal x14126=((1.0)*cj5);
IkReal x14127=((1.0)*cj1);
IkReal x14128=(r10*sj3);
IkReal x14129=(cj2*sj1);
IkReal x14130=(sj3*sj5);
IkReal x14131=(cj2*x14127);
IkReal x14132=((1.0)*cj3*sj5);
IkReal x14133=(r11*x14124);
IkReal x14134=(sj5*x14123);
IkReal x14135=(r22*x14123);
IkReal x14136=(r01*x14124);
IkReal x14137=(cj3*cj5*x14124);
evalcond[0]=((-1.0)*r22*x14124);
evalcond[1]=((((-1.0)*r00*x14123*x14126))+((r01*x14134)));
evalcond[2]=(((sj3*x14135))+x14125+(((-1.0)*x14131)));
evalcond[3]=(((cj1*sj2))+(((-1.0)*cj3*x14135))+x14129);
evalcond[4]=((1.0)+((r11*x14134))+(((-1.0)*r10*x14123*x14126)));
evalcond[5]=((((-1.0)*x14124*x14126*x14128))+(((-1.0)*cj3*r11*x14126))+(((-1.0)*r10*x14132))+((x14130*x14133)));
evalcond[6]=((((-1.0)*sj5*x14128))+(((-1.0)*r11*sj3*x14126))+((r10*x14137))+(((-1.0)*x14132*x14133)));
evalcond[7]=((((-1.0)*r01*sj3*x14126))+(((-1.0)*x14132*x14136))+(((-1.0)*r00*x14130))+x14125+(((-1.0)*x14131))+((r00*x14137)));
evalcond[8]=((((-1.0)*sj2*x14127))+(((-1.0)*r00*sj3*x14124*x14126))+(((-1.0)*x14129))+(((-1.0)*r00*x14132))+(((-1.0)*cj3*r01*x14126))+((x14130*x14136)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14138=(r11*sj5);
IkReal x14139=((1.0)*cj5*r10);
CheckValue<IkReal> x14140=IKPowWithIntegerCheck((x14138+(((-1.0)*x14139))),-1);
if(!x14140.valid){
continue;
}
CheckValue<IkReal> x14141=IKPowWithIntegerCheck((((sj3*x14138))+(((-1.0)*sj3*x14139))),-1);
if(!x14141.valid){
continue;
}
if( IKabs(((-1.0)*(x14140.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14141.value)*((((cj3*cj5*r11))+((cj3*r10*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x14140.value)))+IKsqr(((x14141.value)*((((cj3*cj5*r11))+((cj3*r10*sj5))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x14140.value)), ((x14141.value)*((((cj3*cj5*r11))+((cj3*r10*sj5))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14142=IKsin(j4);
IkReal x14143=IKcos(j4);
IkReal x14144=(sj1*sj2);
IkReal x14145=((1.0)*cj5);
IkReal x14146=((1.0)*cj1);
IkReal x14147=(r10*sj3);
IkReal x14148=(cj2*sj1);
IkReal x14149=(sj3*sj5);
IkReal x14150=(cj2*x14146);
IkReal x14151=((1.0)*cj3*sj5);
IkReal x14152=(r11*x14143);
IkReal x14153=(sj5*x14142);
IkReal x14154=(r22*x14142);
IkReal x14155=(r01*x14143);
IkReal x14156=(cj3*cj5*x14143);
evalcond[0]=((-1.0)*r22*x14143);
evalcond[1]=((((-1.0)*r00*x14142*x14145))+((r01*x14153)));
evalcond[2]=(((sj3*x14154))+(((-1.0)*x14150))+x14144);
evalcond[3]=(((cj1*sj2))+(((-1.0)*cj3*x14154))+x14148);
evalcond[4]=((1.0)+((r11*x14153))+(((-1.0)*r10*x14142*x14145)));
evalcond[5]=(((x14149*x14152))+(((-1.0)*x14143*x14145*x14147))+(((-1.0)*cj3*r11*x14145))+(((-1.0)*r10*x14151)));
evalcond[6]=((((-1.0)*x14151*x14152))+((r10*x14156))+(((-1.0)*sj5*x14147))+(((-1.0)*r11*sj3*x14145)));
evalcond[7]=((((-1.0)*x14151*x14155))+(((-1.0)*r00*x14149))+(((-1.0)*r01*sj3*x14145))+(((-1.0)*x14150))+((r00*x14156))+x14144);
evalcond[8]=((((-1.0)*cj3*r01*x14145))+((x14149*x14155))+(((-1.0)*r00*sj3*x14143*x14145))+(((-1.0)*x14148))+(((-1.0)*sj2*x14146))+(((-1.0)*r00*x14151)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14157=cj5*cj5;
IkReal x14158=((1.0)*sj3);
IkReal x14159=(r11*r21);
IkReal x14160=(cj3*r20);
IkReal x14161=(cj5*sj5);
IkReal x14162=(cj3*r21);
IkReal x14163=((1.0)*cj3);
IkReal x14164=(r10*x14157);
CheckValue<IkReal> x14165 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r11*r22*x14163))+(((-1.0)*r10*r22*sj5*x14163)))),IkReal((((r11*x14157*x14160))+(((-1.0)*r10*x14162))+((x14162*x14164))+(((-1.0)*x14159*x14161*x14163))+((r10*x14160*x14161)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14165.valid){
continue;
}
CheckValue<IkReal> x14166=IKPowWithIntegerCheck(IKsign(((((-1.0)*r12*r22*x14158))+((sj3*x14157*x14159))+((r10*r21*sj3*x14161))+((r11*r20*sj3*x14161))+(((-1.0)*x14158*x14159))+(((-1.0)*r20*x14158*x14164)))),-1);
if(!x14166.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14165.value)+(((1.5707963267949)*(x14166.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14167=IKsin(j4);
IkReal x14168=IKcos(j4);
IkReal x14169=(sj1*sj2);
IkReal x14170=(cj3*sj5);
IkReal x14171=((1.0)*r10);
IkReal x14172=((1.0)*cj1);
IkReal x14173=((1.0)*r20);
IkReal x14174=((1.0)*r00);
IkReal x14175=(cj5*sj3);
IkReal x14176=(sj3*sj5);
IkReal x14177=(cj2*sj1);
IkReal x14178=(cj2*x14172);
IkReal x14179=((1.0)*x14168);
IkReal x14180=(cj5*x14167);
IkReal x14181=(r12*x14167);
IkReal x14182=(sj5*x14167);
IkReal x14183=((1.0)*cj3*cj5);
IkReal x14184=(sj3*x14167);
IkReal x14185=((1.0)*cj3*x14167);
IkReal x14186=(cj3*cj5*x14168);
evalcond[0]=((((-1.0)*r22*x14179))+(((-1.0)*x14173*x14180))+((r21*x14182)));
evalcond[1]=((((-1.0)*r02*x14179))+((r01*x14182))+(((-1.0)*x14174*x14180)));
evalcond[2]=((1.0)+(((-1.0)*x14171*x14180))+((r11*x14182))+(((-1.0)*r12*x14179)));
evalcond[3]=((((-1.0)*x14168*x14171*x14175))+(((-1.0)*r11*x14183))+((sj3*x14181))+((r11*x14168*x14176))+(((-1.0)*x14170*x14171)));
evalcond[4]=((((-1.0)*r11*x14170*x14179))+(((-1.0)*r11*x14175))+((r10*x14186))+(((-1.0)*cj3*x14181))+(((-1.0)*x14171*x14176)));
evalcond[5]=((((-1.0)*x14178))+((r21*x14168*x14176))+(((-1.0)*x14168*x14173*x14175))+(((-1.0)*r21*x14183))+((r22*x14184))+x14169+(((-1.0)*x14170*x14173)));
evalcond[6]=(((r20*x14186))+(((-1.0)*r21*x14170*x14179))+((cj1*sj2))+(((-1.0)*r22*x14185))+(((-1.0)*x14173*x14176))+(((-1.0)*r21*x14175))+x14177);
evalcond[7]=(((r01*x14168*x14176))+((r02*x14184))+(((-1.0)*sj2*x14172))+(((-1.0)*x14177))+(((-1.0)*x14168*x14174*x14175))+(((-1.0)*x14170*x14174))+(((-1.0)*r01*x14183)));
evalcond[8]=((((-1.0)*x14178))+(((-1.0)*r02*x14185))+((r00*x14186))+x14169+(((-1.0)*x14174*x14176))+(((-1.0)*r01*x14175))+(((-1.0)*r01*x14170*x14179)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14187=((1.0)*cj5);
CheckValue<IkReal> x14188 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x14187)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14188.valid){
continue;
}
CheckValue<IkReal> x14189=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x14187)))),-1);
if(!x14189.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14188.value)+(((1.5707963267949)*(x14189.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14190=IKsin(j4);
IkReal x14191=IKcos(j4);
IkReal x14192=(sj1*sj2);
IkReal x14193=(cj3*sj5);
IkReal x14194=((1.0)*r10);
IkReal x14195=((1.0)*cj1);
IkReal x14196=((1.0)*r20);
IkReal x14197=((1.0)*r00);
IkReal x14198=(cj5*sj3);
IkReal x14199=(sj3*sj5);
IkReal x14200=(cj2*sj1);
IkReal x14201=(cj2*x14195);
IkReal x14202=((1.0)*x14191);
IkReal x14203=(cj5*x14190);
IkReal x14204=(r12*x14190);
IkReal x14205=(sj5*x14190);
IkReal x14206=((1.0)*cj3*cj5);
IkReal x14207=(sj3*x14190);
IkReal x14208=((1.0)*cj3*x14190);
IkReal x14209=(cj3*cj5*x14191);
evalcond[0]=((((-1.0)*x14196*x14203))+((r21*x14205))+(((-1.0)*r22*x14202)));
evalcond[1]=((((-1.0)*x14197*x14203))+(((-1.0)*r02*x14202))+((r01*x14205)));
evalcond[2]=((1.0)+(((-1.0)*x14194*x14203))+(((-1.0)*r12*x14202))+((r11*x14205)));
evalcond[3]=(((r11*x14191*x14199))+(((-1.0)*x14193*x14194))+(((-1.0)*r11*x14206))+(((-1.0)*x14191*x14194*x14198))+((sj3*x14204)));
evalcond[4]=((((-1.0)*r11*x14198))+(((-1.0)*x14194*x14199))+((r10*x14209))+(((-1.0)*cj3*x14204))+(((-1.0)*r11*x14193*x14202)));
evalcond[5]=((((-1.0)*x14201))+((r21*x14191*x14199))+(((-1.0)*r21*x14206))+(((-1.0)*x14191*x14196*x14198))+(((-1.0)*x14193*x14196))+((r22*x14207))+x14192);
evalcond[6]=((((-1.0)*r21*x14193*x14202))+((r20*x14209))+((cj1*sj2))+(((-1.0)*x14196*x14199))+(((-1.0)*r22*x14208))+x14200+(((-1.0)*r21*x14198)));
evalcond[7]=((((-1.0)*r01*x14206))+((r02*x14207))+(((-1.0)*x14193*x14197))+(((-1.0)*x14200))+(((-1.0)*sj2*x14195))+((r01*x14191*x14199))+(((-1.0)*x14191*x14197*x14198)));
evalcond[8]=((((-1.0)*r01*x14193*x14202))+(((-1.0)*x14201))+(((-1.0)*x14197*x14199))+(((-1.0)*r01*x14198))+((r00*x14209))+(((-1.0)*r02*x14208))+x14192);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14210=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x14210.valid){
continue;
}
CheckValue<IkReal> x14211 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14211.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14210.value)))+(x14211.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14212=IKsin(j4);
IkReal x14213=IKcos(j4);
IkReal x14214=(sj1*sj2);
IkReal x14215=(cj3*sj5);
IkReal x14216=((1.0)*r10);
IkReal x14217=((1.0)*cj1);
IkReal x14218=((1.0)*r20);
IkReal x14219=((1.0)*r00);
IkReal x14220=(cj5*sj3);
IkReal x14221=(sj3*sj5);
IkReal x14222=(cj2*sj1);
IkReal x14223=(cj2*x14217);
IkReal x14224=((1.0)*x14213);
IkReal x14225=(cj5*x14212);
IkReal x14226=(r12*x14212);
IkReal x14227=(sj5*x14212);
IkReal x14228=((1.0)*cj3*cj5);
IkReal x14229=(sj3*x14212);
IkReal x14230=((1.0)*cj3*x14212);
IkReal x14231=(cj3*cj5*x14213);
evalcond[0]=(((r21*x14227))+(((-1.0)*r22*x14224))+(((-1.0)*x14218*x14225)));
evalcond[1]=((((-1.0)*x14219*x14225))+(((-1.0)*r02*x14224))+((r01*x14227)));
evalcond[2]=((1.0)+(((-1.0)*x14216*x14225))+(((-1.0)*r12*x14224))+((r11*x14227)));
evalcond[3]=((((-1.0)*x14213*x14216*x14220))+(((-1.0)*x14215*x14216))+((r11*x14213*x14221))+(((-1.0)*r11*x14228))+((sj3*x14226)));
evalcond[4]=((((-1.0)*x14216*x14221))+(((-1.0)*cj3*x14226))+((r10*x14231))+(((-1.0)*r11*x14215*x14224))+(((-1.0)*r11*x14220)));
evalcond[5]=((((-1.0)*x14223))+(((-1.0)*x14215*x14218))+((r22*x14229))+(((-1.0)*r21*x14228))+((r21*x14213*x14221))+x14214+(((-1.0)*x14213*x14218*x14220)));
evalcond[6]=(((r20*x14231))+(((-1.0)*r21*x14220))+((cj1*sj2))+(((-1.0)*r22*x14230))+(((-1.0)*x14218*x14221))+x14222+(((-1.0)*r21*x14215*x14224)));
evalcond[7]=((((-1.0)*x14215*x14219))+((r02*x14229))+(((-1.0)*x14213*x14219*x14220))+(((-1.0)*r01*x14228))+(((-1.0)*x14222))+(((-1.0)*sj2*x14217))+((r01*x14213*x14221)));
evalcond[8]=((((-1.0)*x14223))+(((-1.0)*x14219*x14221))+(((-1.0)*r01*x14220))+(((-1.0)*r01*x14215*x14224))+(((-1.0)*r02*x14230))+((r00*x14231))+x14214);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x14232=((-1.0)*py);
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x14232);
rxp0_2=(py*r00);
rxp1_0=(r21*x14232);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=(((r01*sj5))+(((-1.0)*cj5*r00)));
j4eval[1]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x14233=((-1.0)*py);
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x14233);
rxp0_2=(py*r00);
rxp1_0=(r21*x14233);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=(((r01*sj5))+(((-1.0)*cj5*r00)));
j4eval[1]=((((-1.0)*cj3*r21*sj5))+((cj3*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x14234=((-1.0)*py);
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x14234);
rxp0_2=(py*r00);
rxp1_0=(r21*x14234);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=cj3;
j4eval[1]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x14235=((-1.0)*py);
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x14235);
rxp0_2=(py*r00);
rxp1_0=(r21*x14235);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x14236=((-1.0)*py);
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x14236);
rxp0_2=(py*r00);
rxp1_0=(r21*x14236);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j4eval[0]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x14237=((-1.0)*py);
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x14237);
rxp0_2=(py*r00);
rxp1_0=(r21*x14237);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j4eval[0]=(((r01*sj5))+(((-1.0)*cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x14240=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*cj5*r00))),-1);
if(!x14240.valid){
continue;
}
IkReal x14238=x14240.value;
IkReal x14239=((1.0)*cj0*x14238);
cj4array[0]=((((-1.0)*cj1*sj2*x14239))+(((-1.0)*cj2*sj1*x14239)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x14241=IKsin(j4);
IkReal x14242=IKcos(j4);
IkReal x14243=(r21*sj5);
IkReal x14244=((1.0)*x14242);
IkReal x14245=((1.0)*cj5*x14241);
evalcond[0]=(r12*x14241);
evalcond[1]=((((-1.0)*r12*x14244))+(((-1.0)*cj0)));
evalcond[2]=((((-1.0)*r20*x14245))+((x14241*x14243)));
evalcond[3]=(((r01*sj5*x14241))+(((-1.0)*r00*x14245)));
evalcond[4]=((((-1.0)*cj5*r20*x14244))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x14242*x14243)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x14247=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x14247.valid){
continue;
}
IkReal x14246=x14247.value;
cj4array[0]=(((cj1*cj2*x14246))+(((-1.0)*sj1*sj2*x14246)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x14248=IKsin(j4);
IkReal x14249=IKcos(j4);
IkReal x14250=(r01*sj5);
IkReal x14251=((1.0)*cj5*r00);
evalcond[0]=(r12*x14248);
evalcond[1]=((((-1.0)*r12*x14249))+(((-1.0)*cj0)));
evalcond[2]=(((r21*sj5*x14248))+(((-1.0)*cj5*r20*x14248)));
evalcond[3]=(((x14248*x14250))+(((-1.0)*x14248*x14251)));
evalcond[4]=(((x14249*x14250))+((cj0*cj2*sj1))+((cj0*cj1*sj2))+(((-1.0)*x14249*x14251)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x14252=IKPowWithIntegerCheck(r12,-1);
if(!x14252.valid){
continue;
}
cj4array[0]=((-1.0)*cj0*(x14252.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x14253=IKsin(j4);
IkReal x14254=IKcos(j4);
IkReal x14255=(sj5*x14254);
IkReal x14256=(sj5*x14253);
IkReal x14257=((1.0)*cj5*x14253);
IkReal x14258=((1.0)*cj5*x14254);
evalcond[0]=(r12*x14253);
evalcond[1]=(((r21*x14256))+(((-1.0)*r20*x14257)));
evalcond[2]=((((-1.0)*r00*x14257))+((r01*x14256)));
evalcond[3]=(((r21*x14255))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r20*x14258)));
evalcond[4]=(((cj0*cj2*sj1))+(((-1.0)*r00*x14258))+((cj0*cj1*sj2))+((r01*x14255)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x14259=((-1.0)*py);
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x14259);
rxp0_2=(py*r00);
rxp1_0=(r21*x14259);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x14260=((-1.0)*py);
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x14260);
rxp0_2=(py*r00);
rxp1_0=(r21*x14260);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x14261=((-1.0)*py);
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x14261);
rxp0_2=(py*r00);
rxp1_0=(r21*x14261);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j4eval[0]=((((-1.0)*r01*sj5))+((cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x14264=IKPowWithIntegerCheck(((((-1.0)*r01*sj5))+((cj5*r00))),-1);
if(!x14264.valid){
continue;
}
IkReal x14262=x14264.value;
IkReal x14263=((1.0)*cj0*x14262);
cj4array[0]=((((-1.0)*cj1*sj2*x14263))+(((-1.0)*cj2*sj1*x14263)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x14265=IKsin(j4);
IkReal x14266=IKcos(j4);
IkReal x14267=(r21*sj5);
IkReal x14268=((1.0)*x14266);
IkReal x14269=((1.0)*cj5*x14265);
evalcond[0]=((-1.0)*r12*x14265);
evalcond[1]=((((-1.0)*r12*x14268))+(((-1.0)*cj0)));
evalcond[2]=(((x14265*x14267))+(((-1.0)*r20*x14269)));
evalcond[3]=(((r01*sj5*x14265))+(((-1.0)*r00*x14269)));
evalcond[4]=(((cj5*r20*x14266))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x14267*x14268)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x14271=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x14271.valid){
continue;
}
IkReal x14270=x14271.value;
cj4array[0]=((((-1.0)*sj1*sj2*x14270))+((cj1*cj2*x14270)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x14272=IKsin(j4);
IkReal x14273=IKcos(j4);
IkReal x14274=(cj5*r00);
IkReal x14275=((1.0)*x14272);
IkReal x14276=(sj5*x14272);
IkReal x14277=((1.0)*x14273);
evalcond[0]=((-1.0)*r12*x14272);
evalcond[1]=((((-1.0)*r12*x14277))+(((-1.0)*cj0)));
evalcond[2]=(((r21*x14276))+(((-1.0)*cj5*r20*x14275)));
evalcond[3]=((((-1.0)*x14274*x14275))+((r01*x14276)));
evalcond[4]=((((-1.0)*r01*sj5*x14277))+((x14273*x14274))+((cj0*cj2*sj1))+((cj0*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x14278=IKPowWithIntegerCheck(r12,-1);
if(!x14278.valid){
continue;
}
cj4array[0]=((-1.0)*cj0*(x14278.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x14279=IKsin(j4);
IkReal x14280=IKcos(j4);
IkReal x14281=(cj5*r00);
IkReal x14282=(cj5*r20);
IkReal x14283=(r21*sj5);
IkReal x14284=(r01*sj5);
IkReal x14285=((1.0)*x14279);
IkReal x14286=((1.0)*x14280);
evalcond[0]=((-1.0)*r12*x14279);
evalcond[1]=((((-1.0)*x14282*x14285))+((x14279*x14283)));
evalcond[2]=(((x14279*x14284))+(((-1.0)*x14281*x14285)));
evalcond[3]=((((-1.0)*x14283*x14286))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x14280*x14282)));
evalcond[4]=((((-1.0)*x14284*x14286))+((cj0*cj2*sj1))+((x14280*x14281))+((cj0*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
CheckValue<IkReal> x14287 = IKatan2WithCheck(IkReal(((-1.0)*r00)),IkReal(r01),IKFAST_ATAN2_MAGTHRESH);
if(!x14287.valid){
continue;
}
IkReal gconst66=((-1.0)*(x14287.value));
IkReal gconst67=r00;
IkReal gconst68=r01;
CheckValue<IkReal> x14288 = IKatan2WithCheck(IkReal(((-1.0)*r00)),IkReal(r01),IKFAST_ATAN2_MAGTHRESH);
if(!x14288.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x14288.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x14289=((-1.0)*py);
CheckValue<IkReal> x14291 = IKatan2WithCheck(IkReal(((-1.0)*r00)),IkReal(r01),IKFAST_ATAN2_MAGTHRESH);
if(!x14291.valid){
continue;
}
IkReal x14290=((-1.0)*(x14291.value));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x14289);
rxp0_2=(py*r00);
rxp1_0=(r21*x14289);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj5=gconst67;
cj5=gconst68;
j5=x14290;
IkReal gconst66=x14290;
IkReal gconst67=r00;
IkReal gconst68=r01;
j4eval[0]=cj3;
j4eval[1]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x14292=((-1.0)*py);
CheckValue<IkReal> x14294 = IKatan2WithCheck(IkReal(((-1.0)*r00)),IkReal(r01),IKFAST_ATAN2_MAGTHRESH);
if(!x14294.valid){
continue;
}
IkReal x14293=((-1.0)*(x14294.value));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x14292);
rxp0_2=(py*r00);
rxp1_0=(r21*x14292);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj5=gconst67;
cj5=gconst68;
j5=x14293;
IkReal gconst66=x14293;
IkReal gconst67=r00;
IkReal gconst68=r01;
j4eval[0]=r12;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x14295=((-1.0)*py);
CheckValue<IkReal> x14297 = IKatan2WithCheck(IkReal(((-1.0)*r00)),IkReal(r01),IKFAST_ATAN2_MAGTHRESH);
if(!x14297.valid){
continue;
}
IkReal x14296=((-1.0)*(x14297.value));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x14295);
rxp0_2=(py*r00);
rxp1_0=(r21*x14295);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj5=gconst67;
cj5=gconst68;
j5=x14296;
IkReal gconst66=x14296;
IkReal gconst67=r00;
IkReal gconst68=r01;
j4eval[0]=r12;
j4eval[1]=sj3;
j4eval[2]=((((-1.0)*r01*r20*sj3))+((r00*r21*sj3)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14298=((1.0)*sj0);
CheckValue<IkReal> x14299=IKPowWithIntegerCheck(r12,-1);
if(!x14299.valid){
continue;
}
CheckValue<IkReal> x14300=IKPowWithIntegerCheck(sj3,-1);
if(!x14300.valid){
continue;
}
CheckValue<IkReal> x14301=IKPowWithIntegerCheck((((gconst67*r21*sj3))+(((-1.0)*gconst68*r20*sj3))),-1);
if(!x14301.valid){
continue;
}
if( IKabs(((x14299.value)*(x14300.value)*(((((-1.0)*cj1*sj2*x14298))+(((-1.0)*cj2*sj1*x14298)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14301.value)*((((cj3*gconst67*r20))+(((-1.0)*sj1*sj2))+((cj3*gconst68*r21))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x14299.value)*(x14300.value)*(((((-1.0)*cj1*sj2*x14298))+(((-1.0)*cj2*sj1*x14298))))))+IKsqr(((x14301.value)*((((cj3*gconst67*r20))+(((-1.0)*sj1*sj2))+((cj3*gconst68*r21))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x14299.value)*(x14300.value)*(((((-1.0)*cj1*sj2*x14298))+(((-1.0)*cj2*sj1*x14298))))), ((x14301.value)*((((cj3*gconst67*r20))+(((-1.0)*sj1*sj2))+((cj3*gconst68*r21))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14302=IKsin(j4);
IkReal x14303=IKcos(j4);
IkReal x14304=(gconst67*sj3);
IkReal x14305=((1.0)*r00);
IkReal x14306=(cj2*sj0);
IkReal x14307=(sj1*sj2);
IkReal x14308=(cj1*cj2);
IkReal x14309=((1.0)*cj3);
IkReal x14310=(cj2*sj1);
IkReal x14311=((1.0)*r20);
IkReal x14312=(cj1*sj2);
IkReal x14313=((1.0)*cj0);
IkReal x14314=(r01*x14303);
IkReal x14315=(r21*x14303);
IkReal x14316=(r12*x14302);
IkReal x14317=((1.0)*gconst68*sj3);
IkReal x14318=(gconst68*x14303);
IkReal x14319=(gconst68*x14302);
IkReal x14320=(gconst67*x14302);
evalcond[0]=((((-1.0)*x14313))+(((-1.0)*r12*x14303)));
evalcond[1]=(((r21*x14320))+(((-1.0)*x14311*x14319)));
evalcond[2]=(sj0+((r01*x14320))+(((-1.0)*x14305*x14319)));
evalcond[3]=(((sj3*x14316))+((sj0*x14312))+((sj1*x14306)));
evalcond[4]=(((cj1*x14306))+(((-1.0)*x14309*x14316))+(((-1.0)*sj0*x14307)));
evalcond[5]=((((-1.0)*x14304*x14311))+((cj3*r20*x14318))+(((-1.0)*r21*x14317))+x14312+x14310+(((-1.0)*gconst67*x14309*x14315)));
evalcond[6]=((((-1.0)*gconst67*r20*x14309))+(((-1.0)*gconst68*r21*x14309))+(((-1.0)*sj3*x14311*x14318))+((x14304*x14315))+(((-1.0)*x14308))+x14307);
evalcond[7]=((((-1.0)*gconst68*r01*x14309))+((x14304*x14314))+((cj0*x14310))+((cj0*x14312))+(((-1.0)*cj3*gconst67*x14305))+(((-1.0)*sj3*x14305*x14318)));
evalcond[8]=((((-1.0)*r01*x14317))+(((-1.0)*x14304*x14305))+((cj0*x14308))+(((-1.0)*x14307*x14313))+((cj3*r00*x14318))+(((-1.0)*gconst67*x14309*x14314)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14323=IKPowWithIntegerCheck(r12,-1);
if(!x14323.valid){
continue;
}
IkReal x14321=x14323.value;
IkReal x14322=((1.0)*sj0);
CheckValue<IkReal> x14324=IKPowWithIntegerCheck(sj3,-1);
if(!x14324.valid){
continue;
}
if( IKabs((x14321*(x14324.value)*(((((-1.0)*cj2*sj1*x14322))+(((-1.0)*cj1*sj2*x14322)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*cj0*x14321)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x14321*(x14324.value)*(((((-1.0)*cj2*sj1*x14322))+(((-1.0)*cj1*sj2*x14322))))))+IKsqr(((-1.0)*cj0*x14321))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x14321*(x14324.value)*(((((-1.0)*cj2*sj1*x14322))+(((-1.0)*cj1*sj2*x14322))))), ((-1.0)*cj0*x14321));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14325=IKsin(j4);
IkReal x14326=IKcos(j4);
IkReal x14327=(gconst67*sj3);
IkReal x14328=((1.0)*r00);
IkReal x14329=(cj2*sj0);
IkReal x14330=(sj1*sj2);
IkReal x14331=(cj1*cj2);
IkReal x14332=((1.0)*cj3);
IkReal x14333=(cj2*sj1);
IkReal x14334=((1.0)*r20);
IkReal x14335=(cj1*sj2);
IkReal x14336=((1.0)*cj0);
IkReal x14337=(r01*x14326);
IkReal x14338=(r21*x14326);
IkReal x14339=(r12*x14325);
IkReal x14340=((1.0)*gconst68*sj3);
IkReal x14341=(gconst68*x14326);
IkReal x14342=(gconst68*x14325);
IkReal x14343=(gconst67*x14325);
evalcond[0]=((((-1.0)*x14336))+(((-1.0)*r12*x14326)));
evalcond[1]=(((r21*x14343))+(((-1.0)*x14334*x14342)));
evalcond[2]=(sj0+((r01*x14343))+(((-1.0)*x14328*x14342)));
evalcond[3]=(((sj1*x14329))+((sj0*x14335))+((sj3*x14339)));
evalcond[4]=(((cj1*x14329))+(((-1.0)*sj0*x14330))+(((-1.0)*x14332*x14339)));
evalcond[5]=(((cj3*r20*x14341))+(((-1.0)*x14327*x14334))+(((-1.0)*r21*x14340))+(((-1.0)*gconst67*x14332*x14338))+x14335+x14333);
evalcond[6]=((((-1.0)*sj3*x14334*x14341))+(((-1.0)*gconst68*r21*x14332))+(((-1.0)*x14331))+x14330+((x14327*x14338))+(((-1.0)*gconst67*r20*x14332)));
evalcond[7]=((((-1.0)*gconst68*r01*x14332))+((cj0*x14335))+((cj0*x14333))+(((-1.0)*cj3*gconst67*x14328))+(((-1.0)*sj3*x14328*x14341))+((x14327*x14337)));
evalcond[8]=((((-1.0)*r01*x14340))+((cj0*x14331))+(((-1.0)*x14327*x14328))+(((-1.0)*gconst67*x14332*x14337))+(((-1.0)*x14330*x14336))+((cj3*r00*x14341)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14345=IKPowWithIntegerCheck(r12,-1);
if(!x14345.valid){
continue;
}
IkReal x14344=x14345.value;
CheckValue<IkReal> x14346=IKPowWithIntegerCheck(cj3,-1);
if(!x14346.valid){
continue;
}
if( IKabs((x14344*(x14346.value)*((((cj1*cj2*sj0))+(((-1.0)*sj0*sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*cj0*x14344)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x14344*(x14346.value)*((((cj1*cj2*sj0))+(((-1.0)*sj0*sj1*sj2))))))+IKsqr(((-1.0)*cj0*x14344))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x14344*(x14346.value)*((((cj1*cj2*sj0))+(((-1.0)*sj0*sj1*sj2))))), ((-1.0)*cj0*x14344));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14347=IKsin(j4);
IkReal x14348=IKcos(j4);
IkReal x14349=(gconst67*sj3);
IkReal x14350=((1.0)*r00);
IkReal x14351=(cj2*sj0);
IkReal x14352=(sj1*sj2);
IkReal x14353=(cj1*cj2);
IkReal x14354=((1.0)*cj3);
IkReal x14355=(cj2*sj1);
IkReal x14356=((1.0)*r20);
IkReal x14357=(cj1*sj2);
IkReal x14358=((1.0)*cj0);
IkReal x14359=(r01*x14348);
IkReal x14360=(r21*x14348);
IkReal x14361=(r12*x14347);
IkReal x14362=((1.0)*gconst68*sj3);
IkReal x14363=(gconst68*x14348);
IkReal x14364=(gconst68*x14347);
IkReal x14365=(gconst67*x14347);
evalcond[0]=((((-1.0)*x14358))+(((-1.0)*r12*x14348)));
evalcond[1]=((((-1.0)*x14356*x14364))+((r21*x14365)));
evalcond[2]=(sj0+((r01*x14365))+(((-1.0)*x14350*x14364)));
evalcond[3]=(((sj3*x14361))+((sj1*x14351))+((sj0*x14357)));
evalcond[4]=((((-1.0)*sj0*x14352))+(((-1.0)*x14354*x14361))+((cj1*x14351)));
evalcond[5]=((((-1.0)*gconst67*x14354*x14360))+(((-1.0)*x14349*x14356))+(((-1.0)*r21*x14362))+x14357+x14355+((cj3*r20*x14363)));
evalcond[6]=((((-1.0)*gconst67*r20*x14354))+((x14349*x14360))+(((-1.0)*x14353))+(((-1.0)*gconst68*r21*x14354))+x14352+(((-1.0)*sj3*x14356*x14363)));
evalcond[7]=((((-1.0)*gconst68*r01*x14354))+((cj0*x14357))+((cj0*x14355))+(((-1.0)*sj3*x14350*x14363))+(((-1.0)*cj3*gconst67*x14350))+((x14349*x14359)));
evalcond[8]=((((-1.0)*r01*x14362))+(((-1.0)*gconst67*x14354*x14359))+((cj0*x14353))+(((-1.0)*x14349*x14350))+((cj3*r00*x14363))+(((-1.0)*x14352*x14358)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14366=((-1.0)*r00);
CheckValue<IkReal> x14367 = IKatan2WithCheck(IkReal(x14366),IkReal(r01),IKFAST_ATAN2_MAGTHRESH);
if(!x14367.valid){
continue;
}
IkReal gconst69=((3.14159265358979)+(((-1.0)*(x14367.value))));
IkReal gconst70=x14366;
IkReal gconst71=((-1.0)*r01);
CheckValue<IkReal> x14368 = IKatan2WithCheck(IkReal(((-1.0)*r00)),IkReal(r01),IKFAST_ATAN2_MAGTHRESH);
if(!x14368.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x14368.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x14369=((-1.0)*r00);
IkReal x14370=((-1.0)*py);
CheckValue<IkReal> x14372 = IKatan2WithCheck(IkReal(x14369),IkReal(r01),IKFAST_ATAN2_MAGTHRESH);
if(!x14372.valid){
continue;
}
IkReal x14371=((1.0)*(x14372.value));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x14370);
rxp0_2=(py*r00);
rxp1_0=(r21*x14370);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj5=gconst70;
cj5=gconst71;
j5=((3.14159265)+(((-1.0)*x14371)));
IkReal gconst69=((3.14159265358979)+(((-1.0)*x14371)));
IkReal gconst70=x14369;
IkReal gconst71=((-1.0)*r01);
j4eval[0]=cj3;
j4eval[1]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x14373=((-1.0)*r00);
IkReal x14374=((-1.0)*py);
CheckValue<IkReal> x14376 = IKatan2WithCheck(IkReal(x14373),IkReal(r01),IKFAST_ATAN2_MAGTHRESH);
if(!x14376.valid){
continue;
}
IkReal x14375=((1.0)*(x14376.value));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x14374);
rxp0_2=(py*r00);
rxp1_0=(r21*x14374);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj5=gconst70;
cj5=gconst71;
j5=((3.14159265)+(((-1.0)*x14375)));
IkReal gconst69=((3.14159265358979)+(((-1.0)*x14375)));
IkReal gconst70=x14373;
IkReal gconst71=((-1.0)*r01);
j4eval[0]=r12;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x14377=((-1.0)*r00);
IkReal x14378=((-1.0)*py);
CheckValue<IkReal> x14380 = IKatan2WithCheck(IkReal(x14377),IkReal(r01),IKFAST_ATAN2_MAGTHRESH);
if(!x14380.valid){
continue;
}
IkReal x14379=((1.0)*(x14380.value));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x14378);
rxp0_2=(py*r00);
rxp1_0=(r21*x14378);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj5=gconst70;
cj5=gconst71;
j5=((3.14159265)+(((-1.0)*x14379)));
IkReal gconst69=((3.14159265358979)+(((-1.0)*x14379)));
IkReal gconst70=x14377;
IkReal gconst71=((-1.0)*r01);
IkReal x14381=((1.0)*sj3);
j4eval[0]=r12;
j4eval[1]=sj3;
j4eval[2]=((((-1.0)*r00*r21*x14381))+((r01*r20*x14381)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14382=((1.0)*sj0);
CheckValue<IkReal> x14383=IKPowWithIntegerCheck(r12,-1);
if(!x14383.valid){
continue;
}
CheckValue<IkReal> x14384=IKPowWithIntegerCheck(sj3,-1);
if(!x14384.valid){
continue;
}
CheckValue<IkReal> x14385=IKPowWithIntegerCheck(((((-1.0)*gconst71*r20*sj3))+((gconst70*r21*sj3))),-1);
if(!x14385.valid){
continue;
}
if( IKabs(((x14383.value)*(x14384.value)*(((((-1.0)*cj2*sj1*x14382))+(((-1.0)*cj1*sj2*x14382)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14385.value)*(((((-1.0)*sj1*sj2))+((cj3*gconst70*r20))+((cj1*cj2))+((cj3*gconst71*r21)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x14383.value)*(x14384.value)*(((((-1.0)*cj2*sj1*x14382))+(((-1.0)*cj1*sj2*x14382))))))+IKsqr(((x14385.value)*(((((-1.0)*sj1*sj2))+((cj3*gconst70*r20))+((cj1*cj2))+((cj3*gconst71*r21))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x14383.value)*(x14384.value)*(((((-1.0)*cj2*sj1*x14382))+(((-1.0)*cj1*sj2*x14382))))), ((x14385.value)*(((((-1.0)*sj1*sj2))+((cj3*gconst70*r20))+((cj1*cj2))+((cj3*gconst71*r21))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14386=IKsin(j4);
IkReal x14387=IKcos(j4);
IkReal x14388=(gconst70*r01);
IkReal x14389=(cj2*sj0);
IkReal x14390=(sj1*sj2);
IkReal x14391=((1.0)*cj3);
IkReal x14392=((1.0)*gconst71);
IkReal x14393=(cj1*cj2);
IkReal x14394=(gconst70*r21);
IkReal x14395=(gconst70*r00);
IkReal x14396=(cj2*sj1);
IkReal x14397=((1.0)*sj3);
IkReal x14398=(gconst70*r20);
IkReal x14399=(cj1*sj2);
IkReal x14400=((1.0)*cj0);
IkReal x14401=(r12*x14386);
IkReal x14402=(sj3*x14387);
IkReal x14403=(cj3*gconst71*x14387);
evalcond[0]=((((-1.0)*x14400))+(((-1.0)*r12*x14387)));
evalcond[1]=(((x14386*x14394))+(((-1.0)*r20*x14386*x14392)));
evalcond[2]=(sj0+((x14386*x14388))+(((-1.0)*r00*x14386*x14392)));
evalcond[3]=(((sj1*x14389))+((sj0*x14399))+((sj3*x14401)));
evalcond[4]=(((cj1*x14389))+(((-1.0)*sj0*x14390))+(((-1.0)*x14391*x14401)));
evalcond[5]=((((-1.0)*x14397*x14398))+(((-1.0)*r21*sj3*x14392))+(((-1.0)*x14387*x14391*x14394))+x14396+x14399+((r20*x14403)));
evalcond[6]=(((x14394*x14402))+(((-1.0)*x14393))+(((-1.0)*gconst71*r21*x14391))+(((-1.0)*r20*x14392*x14402))+(((-1.0)*x14391*x14398))+x14390);
evalcond[7]=((((-1.0)*gconst71*r01*x14391))+((cj0*x14399))+((cj0*x14396))+((x14388*x14402))+(((-1.0)*r00*x14392*x14402))+(((-1.0)*x14391*x14395)));
evalcond[8]=(((cj0*x14393))+(((-1.0)*x14390*x14400))+(((-1.0)*x14395*x14397))+(((-1.0)*r01*sj3*x14392))+((r00*x14403))+(((-1.0)*x14387*x14388*x14391)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14406=IKPowWithIntegerCheck(r12,-1);
if(!x14406.valid){
continue;
}
IkReal x14404=x14406.value;
IkReal x14405=((1.0)*sj0);
CheckValue<IkReal> x14407=IKPowWithIntegerCheck(sj3,-1);
if(!x14407.valid){
continue;
}
if( IKabs((x14404*(x14407.value)*(((((-1.0)*cj1*sj2*x14405))+(((-1.0)*cj2*sj1*x14405)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*cj0*x14404)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x14404*(x14407.value)*(((((-1.0)*cj1*sj2*x14405))+(((-1.0)*cj2*sj1*x14405))))))+IKsqr(((-1.0)*cj0*x14404))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x14404*(x14407.value)*(((((-1.0)*cj1*sj2*x14405))+(((-1.0)*cj2*sj1*x14405))))), ((-1.0)*cj0*x14404));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14408=IKsin(j4);
IkReal x14409=IKcos(j4);
IkReal x14410=(gconst70*r01);
IkReal x14411=(cj2*sj0);
IkReal x14412=(sj1*sj2);
IkReal x14413=((1.0)*cj3);
IkReal x14414=((1.0)*gconst71);
IkReal x14415=(cj1*cj2);
IkReal x14416=(gconst70*r21);
IkReal x14417=(gconst70*r00);
IkReal x14418=(cj2*sj1);
IkReal x14419=((1.0)*sj3);
IkReal x14420=(gconst70*r20);
IkReal x14421=(cj1*sj2);
IkReal x14422=((1.0)*cj0);
IkReal x14423=(r12*x14408);
IkReal x14424=(sj3*x14409);
IkReal x14425=(cj3*gconst71*x14409);
evalcond[0]=((((-1.0)*r12*x14409))+(((-1.0)*x14422)));
evalcond[1]=((((-1.0)*r20*x14408*x14414))+((x14408*x14416)));
evalcond[2]=(sj0+((x14408*x14410))+(((-1.0)*r00*x14408*x14414)));
evalcond[3]=(((sj1*x14411))+((sj0*x14421))+((sj3*x14423)));
evalcond[4]=((((-1.0)*x14413*x14423))+(((-1.0)*sj0*x14412))+((cj1*x14411)));
evalcond[5]=((((-1.0)*x14419*x14420))+((r20*x14425))+(((-1.0)*x14409*x14413*x14416))+x14421+x14418+(((-1.0)*r21*sj3*x14414)));
evalcond[6]=((((-1.0)*x14413*x14420))+(((-1.0)*x14415))+(((-1.0)*r20*x14414*x14424))+(((-1.0)*gconst71*r21*x14413))+x14412+((x14416*x14424)));
evalcond[7]=((((-1.0)*r00*x14414*x14424))+(((-1.0)*gconst71*r01*x14413))+((cj0*x14421))+((cj0*x14418))+((x14410*x14424))+(((-1.0)*x14413*x14417)));
evalcond[8]=((((-1.0)*r01*sj3*x14414))+((cj0*x14415))+(((-1.0)*x14417*x14419))+((r00*x14425))+(((-1.0)*x14409*x14410*x14413))+(((-1.0)*x14412*x14422)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14427=IKPowWithIntegerCheck(r12,-1);
if(!x14427.valid){
continue;
}
IkReal x14426=x14427.value;
CheckValue<IkReal> x14428=IKPowWithIntegerCheck(cj3,-1);
if(!x14428.valid){
continue;
}
if( IKabs((x14426*(x14428.value)*((((cj1*cj2*sj0))+(((-1.0)*sj0*sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*cj0*x14426)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x14426*(x14428.value)*((((cj1*cj2*sj0))+(((-1.0)*sj0*sj1*sj2))))))+IKsqr(((-1.0)*cj0*x14426))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x14426*(x14428.value)*((((cj1*cj2*sj0))+(((-1.0)*sj0*sj1*sj2))))), ((-1.0)*cj0*x14426));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14429=IKsin(j4);
IkReal x14430=IKcos(j4);
IkReal x14431=(gconst70*r01);
IkReal x14432=(cj2*sj0);
IkReal x14433=(sj1*sj2);
IkReal x14434=((1.0)*cj3);
IkReal x14435=((1.0)*gconst71);
IkReal x14436=(cj1*cj2);
IkReal x14437=(gconst70*r21);
IkReal x14438=(gconst70*r00);
IkReal x14439=(cj2*sj1);
IkReal x14440=((1.0)*sj3);
IkReal x14441=(gconst70*r20);
IkReal x14442=(cj1*sj2);
IkReal x14443=((1.0)*cj0);
IkReal x14444=(r12*x14429);
IkReal x14445=(sj3*x14430);
IkReal x14446=(cj3*gconst71*x14430);
evalcond[0]=((((-1.0)*x14443))+(((-1.0)*r12*x14430)));
evalcond[1]=(((x14429*x14437))+(((-1.0)*r20*x14429*x14435)));
evalcond[2]=(sj0+(((-1.0)*r00*x14429*x14435))+((x14429*x14431)));
evalcond[3]=(((sj0*x14442))+((sj1*x14432))+((sj3*x14444)));
evalcond[4]=((((-1.0)*x14434*x14444))+((cj1*x14432))+(((-1.0)*sj0*x14433)));
evalcond[5]=((((-1.0)*x14440*x14441))+((r20*x14446))+x14442+x14439+(((-1.0)*r21*sj3*x14435))+(((-1.0)*x14430*x14434*x14437)));
evalcond[6]=((((-1.0)*x14434*x14441))+(((-1.0)*r20*x14435*x14445))+((x14437*x14445))+(((-1.0)*gconst71*r21*x14434))+x14433+(((-1.0)*x14436)));
evalcond[7]=(((x14431*x14445))+((cj0*x14439))+(((-1.0)*gconst71*r01*x14434))+(((-1.0)*r00*x14435*x14445))+(((-1.0)*x14434*x14438))+((cj0*x14442)));
evalcond[8]=((((-1.0)*x14438*x14440))+((cj0*x14436))+((r00*x14446))+(((-1.0)*x14430*x14431*x14434))+(((-1.0)*r01*sj3*x14435))+(((-1.0)*x14433*x14443)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14448=IKPowWithIntegerCheck(r12,-1);
if(!x14448.valid){
continue;
}
IkReal x14447=x14448.value;
CheckValue<IkReal> x14449=IKPowWithIntegerCheck(cj3,-1);
if(!x14449.valid){
continue;
}
if( IKabs((x14447*(x14449.value)*((((cj1*cj2*sj0))+(((-1.0)*sj0*sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*cj0*x14447)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x14447*(x14449.value)*((((cj1*cj2*sj0))+(((-1.0)*sj0*sj1*sj2))))))+IKsqr(((-1.0)*cj0*x14447))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x14447*(x14449.value)*((((cj1*cj2*sj0))+(((-1.0)*sj0*sj1*sj2))))), ((-1.0)*cj0*x14447));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14450=IKsin(j4);
IkReal x14451=IKcos(j4);
IkReal x14452=(cj3*cj5);
IkReal x14453=(cj2*sj0);
IkReal x14454=(sj1*sj2);
IkReal x14455=((1.0)*r01);
IkReal x14456=(cj1*cj2);
IkReal x14457=((1.0)*r00);
IkReal x14458=(cj2*sj1);
IkReal x14459=(cj3*sj5);
IkReal x14460=(sj3*sj5);
IkReal x14461=((1.0)*r21);
IkReal x14462=(cj5*sj3);
IkReal x14463=(cj1*sj2);
IkReal x14464=((1.0)*cj0);
IkReal x14465=(r00*x14451);
IkReal x14466=(r12*x14450);
IkReal x14467=((1.0)*r20*sj5);
IkReal x14468=(cj5*x14450);
IkReal x14469=(sj5*x14450);
IkReal x14470=((1.0)*x14451);
evalcond[0]=((((-1.0)*r12*x14470))+(((-1.0)*x14464)));
evalcond[1]=((((-1.0)*r20*x14468))+((r21*x14469)));
evalcond[2]=((((-1.0)*x14457*x14468))+sj0+((r01*x14469)));
evalcond[3]=(((sj1*x14453))+((sj3*x14466))+((sj0*x14463)));
evalcond[4]=(((cj1*x14453))+(((-1.0)*sj0*x14454))+(((-1.0)*cj3*x14466)));
evalcond[5]=((((-1.0)*r20*x14460))+(((-1.0)*x14451*x14459*x14461))+x14463+x14458+(((-1.0)*x14461*x14462))+((r20*x14451*x14452)));
evalcond[6]=((((-1.0)*r20*x14462*x14470))+((r21*x14451*x14460))+(((-1.0)*x14456))+x14454+(((-1.0)*r20*x14459))+(((-1.0)*x14452*x14461)));
evalcond[7]=(((cj0*x14458))+(((-1.0)*x14451*x14457*x14462))+((r01*x14451*x14460))+(((-1.0)*x14452*x14455))+(((-1.0)*x14457*x14459))+((cj0*x14463)));
evalcond[8]=(((cj0*x14456))+(((-1.0)*x14457*x14460))+((x14452*x14465))+(((-1.0)*x14454*x14464))+(((-1.0)*x14455*x14462))+(((-1.0)*x14451*x14455*x14459)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14471=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*cj5*r00))),-1);
if(!x14471.valid){
continue;
}
CheckValue<IkReal> x14472=IKPowWithIntegerCheck(((((-1.0)*cj3*r21*sj5))+((cj3*cj5*r20))),-1);
if(!x14472.valid){
continue;
}
if( IKabs(((-1.0)*sj0*(x14471.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14472.value)*((((r20*sj3*sj5))+((cj5*r21*sj3))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*sj0*(x14471.value)))+IKsqr(((x14472.value)*((((r20*sj3*sj5))+((cj5*r21*sj3))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*sj0*(x14471.value)), ((x14472.value)*((((r20*sj3*sj5))+((cj5*r21*sj3))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14473=IKsin(j4);
IkReal x14474=IKcos(j4);
IkReal x14475=(cj3*cj5);
IkReal x14476=(cj2*sj0);
IkReal x14477=(sj1*sj2);
IkReal x14478=((1.0)*r01);
IkReal x14479=(cj1*cj2);
IkReal x14480=((1.0)*r00);
IkReal x14481=(cj2*sj1);
IkReal x14482=(cj3*sj5);
IkReal x14483=(sj3*sj5);
IkReal x14484=((1.0)*r21);
IkReal x14485=(cj5*sj3);
IkReal x14486=(cj1*sj2);
IkReal x14487=((1.0)*cj0);
IkReal x14488=(r00*x14474);
IkReal x14489=(r12*x14473);
IkReal x14490=((1.0)*r20*sj5);
IkReal x14491=(cj5*x14473);
IkReal x14492=(sj5*x14473);
IkReal x14493=((1.0)*x14474);
evalcond[0]=((((-1.0)*r12*x14493))+(((-1.0)*x14487)));
evalcond[1]=(((r21*x14492))+(((-1.0)*r20*x14491)));
evalcond[2]=(sj0+(((-1.0)*x14480*x14491))+((r01*x14492)));
evalcond[3]=(((sj0*x14486))+((sj1*x14476))+((sj3*x14489)));
evalcond[4]=((((-1.0)*cj3*x14489))+((cj1*x14476))+(((-1.0)*sj0*x14477)));
evalcond[5]=((((-1.0)*r20*x14483))+((r20*x14474*x14475))+(((-1.0)*x14484*x14485))+x14486+x14481+(((-1.0)*x14474*x14482*x14484)));
evalcond[6]=((((-1.0)*r20*x14482))+(((-1.0)*r20*x14485*x14493))+(((-1.0)*x14479))+(((-1.0)*x14475*x14484))+x14477+((r21*x14474*x14483)));
evalcond[7]=((((-1.0)*x14480*x14482))+(((-1.0)*x14474*x14480*x14485))+((cj0*x14486))+((cj0*x14481))+((r01*x14474*x14483))+(((-1.0)*x14475*x14478)));
evalcond[8]=((((-1.0)*x14480*x14483))+(((-1.0)*x14477*x14487))+(((-1.0)*x14478*x14485))+((x14475*x14488))+((cj0*x14479))+(((-1.0)*x14474*x14478*x14482)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14494=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*cj5*r00))),-1);
if(!x14494.valid){
continue;
}
CheckValue<IkReal> x14495=IKPowWithIntegerCheck(r12,-1);
if(!x14495.valid){
continue;
}
if( IKabs(((-1.0)*sj0*(x14494.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*cj0*(x14495.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*sj0*(x14494.value)))+IKsqr(((-1.0)*cj0*(x14495.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*sj0*(x14494.value)), ((-1.0)*cj0*(x14495.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14496=IKsin(j4);
IkReal x14497=IKcos(j4);
IkReal x14498=(cj3*cj5);
IkReal x14499=(cj2*sj0);
IkReal x14500=(sj1*sj2);
IkReal x14501=((1.0)*r01);
IkReal x14502=(cj1*cj2);
IkReal x14503=((1.0)*r00);
IkReal x14504=(cj2*sj1);
IkReal x14505=(cj3*sj5);
IkReal x14506=(sj3*sj5);
IkReal x14507=((1.0)*r21);
IkReal x14508=(cj5*sj3);
IkReal x14509=(cj1*sj2);
IkReal x14510=((1.0)*cj0);
IkReal x14511=(r00*x14497);
IkReal x14512=(r12*x14496);
IkReal x14513=((1.0)*r20*sj5);
IkReal x14514=(cj5*x14496);
IkReal x14515=(sj5*x14496);
IkReal x14516=((1.0)*x14497);
evalcond[0]=((((-1.0)*x14510))+(((-1.0)*r12*x14516)));
evalcond[1]=((((-1.0)*r20*x14514))+((r21*x14515)));
evalcond[2]=((((-1.0)*x14503*x14514))+sj0+((r01*x14515)));
evalcond[3]=(((sj3*x14512))+((sj0*x14509))+((sj1*x14499)));
evalcond[4]=((((-1.0)*cj3*x14512))+((cj1*x14499))+(((-1.0)*sj0*x14500)));
evalcond[5]=((((-1.0)*x14507*x14508))+(((-1.0)*x14497*x14505*x14507))+(((-1.0)*r20*x14506))+x14504+x14509+((r20*x14497*x14498)));
evalcond[6]=(((r21*x14497*x14506))+(((-1.0)*r20*x14508*x14516))+(((-1.0)*x14502))+(((-1.0)*r20*x14505))+x14500+(((-1.0)*x14498*x14507)));
evalcond[7]=((((-1.0)*x14497*x14503*x14508))+(((-1.0)*x14503*x14505))+((r01*x14497*x14506))+((cj0*x14504))+((cj0*x14509))+(((-1.0)*x14498*x14501)));
evalcond[8]=((((-1.0)*x14497*x14501*x14505))+((x14498*x14511))+(((-1.0)*x14501*x14508))+(((-1.0)*x14503*x14506))+(((-1.0)*x14500*x14510))+((cj0*x14502)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14517=((1.0)*cj5);
CheckValue<IkReal> x14518 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((r11*sj0*sj5))+(((-1.0)*cj0*r00*x14517))+((cj0*r01*sj5))+(((-1.0)*r10*sj0*x14517)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14518.valid){
continue;
}
CheckValue<IkReal> x14519=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x14517))+(((-1.0)*r20*sj5)))),-1);
if(!x14519.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14518.value)+(((1.5707963267949)*(x14519.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14520=IKsin(j4);
IkReal x14521=IKcos(j4);
IkReal x14522=(cj3*cj5);
IkReal x14523=(cj2*sj0);
IkReal x14524=((1.0)*r10);
IkReal x14525=(sj1*sj2);
IkReal x14526=(cj3*sj5);
IkReal x14527=(cj1*cj2);
IkReal x14528=((1.0)*r20);
IkReal x14529=((1.0)*r01);
IkReal x14530=((1.0)*r00);
IkReal x14531=((1.0)*r11);
IkReal x14532=(cj5*sj3);
IkReal x14533=(cj2*sj1);
IkReal x14534=(sj3*sj5);
IkReal x14535=((1.0)*r21);
IkReal x14536=(cj1*sj2);
IkReal x14537=((1.0)*cj0);
IkReal x14538=((1.0)*x14521);
IkReal x14539=(cj5*x14520);
IkReal x14540=(r12*x14520);
IkReal x14541=(sj5*x14520);
IkReal x14542=(sj3*x14520);
IkReal x14543=((1.0)*cj3*x14520);
evalcond[0]=((((-1.0)*r22*x14538))+((r21*x14541))+(((-1.0)*x14528*x14539)));
evalcond[1]=(sj0+((r01*x14541))+(((-1.0)*x14530*x14539))+(((-1.0)*r02*x14538)));
evalcond[2]=((((-1.0)*x14537))+(((-1.0)*r12*x14538))+((r11*x14541))+(((-1.0)*x14524*x14539)));
evalcond[3]=((((-1.0)*x14527))+(((-1.0)*x14526*x14528))+(((-1.0)*x14522*x14535))+((r21*x14521*x14534))+((r22*x14542))+x14525+(((-1.0)*x14521*x14528*x14532)));
evalcond[4]=((((-1.0)*x14532*x14535))+(((-1.0)*x14521*x14526*x14535))+((r20*x14521*x14522))+x14536+x14533+(((-1.0)*x14528*x14534))+(((-1.0)*r22*x14543)));
evalcond[5]=(((r02*x14542))+(((-1.0)*x14522*x14529))+(((-1.0)*x14526*x14530))+((cj0*x14536))+((cj0*x14533))+((r01*x14521*x14534))+(((-1.0)*x14521*x14530*x14532)));
evalcond[6]=(((r11*x14521*x14534))+((sj0*x14536))+(((-1.0)*x14522*x14531))+((sj1*x14523))+((sj3*x14540))+(((-1.0)*x14521*x14524*x14532))+(((-1.0)*x14524*x14526)));
evalcond[7]=(((cj0*x14527))+(((-1.0)*x14530*x14534))+((r00*x14521*x14522))+(((-1.0)*x14529*x14532))+(((-1.0)*x14521*x14526*x14529))+(((-1.0)*r02*x14543))+(((-1.0)*x14525*x14537)));
evalcond[8]=((((-1.0)*x14521*x14526*x14531))+(((-1.0)*x14524*x14534))+(((-1.0)*x14531*x14532))+((r10*x14521*x14522))+(((-1.0)*cj3*x14540))+(((-1.0)*sj0*x14525))+((cj1*x14523)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14544=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x14544.valid){
continue;
}
CheckValue<IkReal> x14545 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14545.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14544.value)))+(x14545.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14546=IKsin(j4);
IkReal x14547=IKcos(j4);
IkReal x14548=(cj3*cj5);
IkReal x14549=(cj2*sj0);
IkReal x14550=((1.0)*r10);
IkReal x14551=(sj1*sj2);
IkReal x14552=(cj3*sj5);
IkReal x14553=(cj1*cj2);
IkReal x14554=((1.0)*r20);
IkReal x14555=((1.0)*r01);
IkReal x14556=((1.0)*r00);
IkReal x14557=((1.0)*r11);
IkReal x14558=(cj5*sj3);
IkReal x14559=(cj2*sj1);
IkReal x14560=(sj3*sj5);
IkReal x14561=((1.0)*r21);
IkReal x14562=(cj1*sj2);
IkReal x14563=((1.0)*cj0);
IkReal x14564=((1.0)*x14547);
IkReal x14565=(cj5*x14546);
IkReal x14566=(r12*x14546);
IkReal x14567=(sj5*x14546);
IkReal x14568=(sj3*x14546);
IkReal x14569=((1.0)*cj3*x14546);
evalcond[0]=(((r21*x14567))+(((-1.0)*r22*x14564))+(((-1.0)*x14554*x14565)));
evalcond[1]=(((r01*x14567))+sj0+(((-1.0)*r02*x14564))+(((-1.0)*x14556*x14565)));
evalcond[2]=((((-1.0)*x14550*x14565))+(((-1.0)*x14563))+(((-1.0)*r12*x14564))+((r11*x14567)));
evalcond[3]=((((-1.0)*x14552*x14554))+x14551+(((-1.0)*x14553))+((r21*x14547*x14560))+(((-1.0)*x14547*x14554*x14558))+((r22*x14568))+(((-1.0)*x14548*x14561)));
evalcond[4]=((((-1.0)*r22*x14569))+((r20*x14547*x14548))+(((-1.0)*x14554*x14560))+x14559+x14562+(((-1.0)*x14558*x14561))+(((-1.0)*x14547*x14552*x14561)));
evalcond[5]=(((cj0*x14562))+(((-1.0)*x14552*x14556))+((r02*x14568))+(((-1.0)*x14547*x14556*x14558))+(((-1.0)*x14548*x14555))+((cj0*x14559))+((r01*x14547*x14560)));
evalcond[6]=(((sj1*x14549))+(((-1.0)*x14550*x14552))+((r11*x14547*x14560))+(((-1.0)*x14548*x14557))+((sj0*x14562))+(((-1.0)*x14547*x14550*x14558))+((sj3*x14566)));
evalcond[7]=((((-1.0)*r02*x14569))+(((-1.0)*x14551*x14563))+(((-1.0)*x14547*x14552*x14555))+(((-1.0)*x14556*x14560))+(((-1.0)*x14555*x14558))+((r00*x14547*x14548))+((cj0*x14553)));
evalcond[8]=(((cj1*x14549))+(((-1.0)*x14550*x14560))+((r10*x14547*x14548))+(((-1.0)*sj0*x14551))+(((-1.0)*x14547*x14552*x14557))+(((-1.0)*cj3*x14566))+(((-1.0)*x14557*x14558)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14570=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x14570.valid){
continue;
}
CheckValue<IkReal> x14571 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14571.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14570.value)))+(x14571.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14572=IKsin(j4);
IkReal x14573=IKcos(j4);
IkReal x14574=(cj3*cj5);
IkReal x14575=(cj2*sj0);
IkReal x14576=((1.0)*r10);
IkReal x14577=(sj1*sj2);
IkReal x14578=(cj3*sj5);
IkReal x14579=(cj1*cj2);
IkReal x14580=((1.0)*r20);
IkReal x14581=((1.0)*r01);
IkReal x14582=((1.0)*r00);
IkReal x14583=((1.0)*r11);
IkReal x14584=(cj5*sj3);
IkReal x14585=(cj2*sj1);
IkReal x14586=(sj3*sj5);
IkReal x14587=((1.0)*r21);
IkReal x14588=(cj1*sj2);
IkReal x14589=((1.0)*cj0);
IkReal x14590=((1.0)*x14573);
IkReal x14591=(cj5*x14572);
IkReal x14592=(r12*x14572);
IkReal x14593=(sj5*x14572);
IkReal x14594=(sj3*x14572);
IkReal x14595=((1.0)*cj3*x14572);
evalcond[0]=(((r21*x14593))+(((-1.0)*r22*x14590))+(((-1.0)*x14580*x14591)));
evalcond[1]=(sj0+(((-1.0)*r02*x14590))+((r01*x14593))+(((-1.0)*x14582*x14591)));
evalcond[2]=((((-1.0)*x14589))+(((-1.0)*r12*x14590))+(((-1.0)*x14576*x14591))+((r11*x14593)));
evalcond[3]=((((-1.0)*x14578*x14580))+(((-1.0)*x14573*x14580*x14584))+((r21*x14573*x14586))+((r22*x14594))+x14577+(((-1.0)*x14579))+(((-1.0)*x14574*x14587)));
evalcond[4]=((((-1.0)*x14584*x14587))+(((-1.0)*x14573*x14578*x14587))+x14588+x14585+(((-1.0)*r22*x14595))+((r20*x14573*x14574))+(((-1.0)*x14580*x14586)));
evalcond[5]=((((-1.0)*x14573*x14582*x14584))+(((-1.0)*x14578*x14582))+((r01*x14573*x14586))+(((-1.0)*x14574*x14581))+((cj0*x14588))+((cj0*x14585))+((r02*x14594)));
evalcond[6]=(((r11*x14573*x14586))+((sj0*x14588))+(((-1.0)*x14576*x14578))+(((-1.0)*x14573*x14576*x14584))+((sj3*x14592))+((sj1*x14575))+(((-1.0)*x14574*x14583)));
evalcond[7]=(((cj0*x14579))+((r00*x14573*x14574))+(((-1.0)*r02*x14595))+(((-1.0)*x14573*x14578*x14581))+(((-1.0)*x14577*x14589))+(((-1.0)*x14582*x14586))+(((-1.0)*x14581*x14584)));
evalcond[8]=((((-1.0)*x14583*x14584))+(((-1.0)*cj3*x14592))+(((-1.0)*x14573*x14578*x14583))+(((-1.0)*x14576*x14586))+((cj1*x14575))+(((-1.0)*sj0*x14577))+((r10*x14573*x14574)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14596=r21*r21;
IkReal x14597=cj5*cj5;
IkReal x14598=r20*r20;
IkReal x14599=(r20*sj5);
IkReal x14600=(cj5*r21);
IkReal x14601=((1.0)*sj3);
IkReal x14602=(sj1*sj2);
IkReal x14603=(r21*sj5);
IkReal x14604=((1.0)*r20);
IkReal x14605=(cj3*r21);
IkReal x14606=(cj1*cj2);
IkReal x14607=(sj3*x14596);
IkReal x14608=((1.0)*cj3*r22);
IkReal x14609=(cj3*cj5*sj5);
CheckValue<IkReal> x14610=IKPowWithIntegerCheck(IKsign(((((-1.0)*x14597*x14598*x14601))+((x14597*x14607))+(((2.0)*sj3*x14599*x14600))+(((-1.0)*x14601*(r22*r22)))+(((-1.0)*x14596*x14601)))),-1);
if(!x14610.valid){
continue;
}
CheckValue<IkReal> x14611 = IKatan2WithCheck(IkReal(((((-1.0)*x14599*x14608))+(((-1.0)*x14600*x14608))+((r22*x14602))+(((-1.0)*r22*x14606)))),IkReal(((((-1.0)*x14604*x14605))+(((2.0)*r20*x14597*x14605))+(((-1.0)*cj5*x14602*x14604))+(((-1.0)*x14596*x14609))+((x14602*x14603))+(((-1.0)*x14603*x14606))+((cj5*r20*x14606))+((x14598*x14609)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14611.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14610.value)))+(x14611.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x14612=IKsin(j4);
IkReal x14613=IKcos(j4);
IkReal x14614=((1.0)*r22);
IkReal x14615=(r21*sj3);
IkReal x14616=((1.0)*cj5);
IkReal x14617=(r21*sj5);
IkReal x14618=(r20*sj3);
IkReal x14619=((1.0)*sj5);
IkReal x14620=(cj3*x14613);
evalcond[0]=((((-1.0)*x14613*x14614))+(((-1.0)*r20*x14612*x14616))+((x14612*x14617)));
evalcond[1]=((((-1.0)*cj3*r20*x14619))+(((-1.0)*cj3*r21*x14616))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x14613*x14616*x14618))+((r22*sj3*x14612))+((sj5*x14613*x14615)));
evalcond[2]=(((cj2*sj1))+(((-1.0)*x14615*x14616))+((cj1*sj2))+(((-1.0)*x14617*x14620))+((cj5*r20*x14620))+(((-1.0)*x14618*x14619))+(((-1.0)*cj3*x14612*x14614)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x14621=(cj5*sj4);
IkReal x14622=(sj4*sj5);
if( IKabs(((((-1.0)*r01*x14622))+((r00*x14621))+((cj4*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r10*x14621))+((r11*x14622))+(((-1.0)*cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r01*x14622))+((r00*x14621))+((cj4*r02))))+IKsqr(((((-1.0)*r10*x14621))+((r11*x14622))+(((-1.0)*cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r01*x14622))+((r00*x14621))+((cj4*r02))), ((((-1.0)*r10*x14621))+((r11*x14622))+(((-1.0)*cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x14623=IKsin(j0);
IkReal x14624=IKcos(j0);
IkReal x14625=((1.0)*cj5);
IkReal x14626=(cj3*r11);
IkReal x14627=(cj4*sj3);
IkReal x14628=((0.11)*sj5);
IkReal x14629=((1.0)*cj3);
IkReal x14630=(r02*sj4);
IkReal x14631=(cj1*cj2);
IkReal x14632=((1.0)*sj1);
IkReal x14633=(r11*sj5);
IkReal x14634=(r01*sj5);
IkReal x14635=(r10*sj5);
IkReal x14636=(r12*sj4);
IkReal x14637=(cj2*sj1);
IkReal x14638=((0.11)*cj5);
IkReal x14639=(r00*sj5);
IkReal x14640=((0.243)*sj1);
IkReal x14641=((0.214)*cj1);
IkReal x14642=((1.0)*sj3);
IkReal x14643=((1.0)*cj4);
IkReal x14644=(sj2*x14623);
IkReal x14645=(sj2*x14624);
IkReal x14646=(cj3*cj4*cj5);
evalcond[0]=((((-1.0)*r00*sj4*x14625))+(((-1.0)*r02*x14643))+x14623+((sj4*x14634)));
evalcond[1]=((((-1.0)*r10*sj4*x14625))+(((-1.0)*r12*x14643))+((sj4*x14633))+(((-1.0)*x14624)));
evalcond[2]=((((-0.214)*x14624*x14637))+(((-1.0)*r01*x14638))+(((-1.0)*x14641*x14645))+(((-1.0)*r00*x14628))+(((-1.0)*x14624*x14640))+(((-1.0)*px))+(((0.123)*x14623)));
evalcond[3]=((((-1.0)*x14623*x14640))+(((-1.0)*r10*x14628))+(((-1.0)*x14641*x14644))+(((-0.123)*x14624))+(((-1.0)*py))+(((-0.214)*x14623*x14637))+(((-1.0)*r11*x14638)));
evalcond[4]=(((x14624*x14637))+((sj3*x14630))+(((-1.0)*x14629*x14639))+(((-1.0)*r00*x14625*x14627))+((x14627*x14634))+((cj1*x14645))+(((-1.0)*cj3*r01*x14625)));
evalcond[5]=(((sj3*x14636))+(((-1.0)*x14629*x14635))+((x14623*x14637))+(((-1.0)*x14625*x14626))+((x14627*x14633))+((cj1*x14644))+(((-1.0)*r10*x14625*x14627)));
evalcond[6]=(((x14624*x14631))+(((-1.0)*r01*sj3*x14625))+(((-1.0)*x14629*x14630))+((r00*x14646))+(((-1.0)*x14632*x14645))+(((-1.0)*cj4*x14629*x14634))+(((-1.0)*x14639*x14642)));
evalcond[7]=((((-1.0)*sj5*x14626*x14643))+((r10*x14646))+(((-1.0)*x14629*x14636))+((x14623*x14631))+(((-1.0)*x14635*x14642))+(((-1.0)*x14632*x14644))+(((-1.0)*r11*sj3*x14625)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14647=r21*r21;
IkReal x14648=cj5*cj5;
IkReal x14649=r20*r20;
IkReal x14650=(cj2*sj1);
IkReal x14651=(cj1*sj2);
IkReal x14652=(cj5*sj5);
IkReal x14653=(r20*r21);
IkReal x14654=((1.0)*sj3);
IkReal x14655=(r21*sj5);
IkReal x14656=((1.0)*cj5*r20);
IkReal x14657=(cj3*x14648);
CheckValue<IkReal> x14658=IKPowWithIntegerCheck(IKsign(((((-1.0)*x14647*x14657))+((cj3*(r22*r22)))+(((-2.0)*cj3*x14652*x14653))+((x14649*x14657))+((cj3*x14647)))),-1);
if(!x14658.valid){
continue;
}
CheckValue<IkReal> x14659 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r21*r22*x14654))+((r22*x14651))+((r22*x14650))+(((-1.0)*r20*r22*sj5*x14654)))),IkReal(((((2.0)*sj3*x14648*x14653))+(((-1.0)*x14653*x14654))+(((-1.0)*x14650*x14656))+((sj3*x14649*x14652))+(((-1.0)*x14651*x14656))+((x14651*x14655))+(((-1.0)*x14647*x14652*x14654))+((x14650*x14655)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14659.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14658.value)))+(x14659.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x14660=IKsin(j4);
IkReal x14661=IKcos(j4);
IkReal x14662=((1.0)*r22);
IkReal x14663=(r21*sj3);
IkReal x14664=((1.0)*cj5);
IkReal x14665=(r21*sj5);
IkReal x14666=(r20*sj3);
IkReal x14667=((1.0)*sj5);
IkReal x14668=(cj3*x14661);
evalcond[0]=((((-1.0)*r20*x14660*x14664))+((x14660*x14665))+(((-1.0)*x14661*x14662)));
evalcond[1]=((((-1.0)*cj3*r21*x14664))+((sj5*x14661*x14663))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x14661*x14664*x14666))+((r22*sj3*x14660))+(((-1.0)*cj3*r20*x14667)));
evalcond[2]=(((cj2*sj1))+(((-1.0)*cj3*x14660*x14662))+(((-1.0)*x14663*x14664))+((cj1*sj2))+(((-1.0)*x14666*x14667))+((cj5*r20*x14668))+(((-1.0)*x14665*x14668)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x14669=(cj5*sj4);
IkReal x14670=(sj4*sj5);
if( IKabs(((((-1.0)*r01*x14670))+((r00*x14669))+((cj4*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r10*x14669))+((r11*x14670))+(((-1.0)*cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r01*x14670))+((r00*x14669))+((cj4*r02))))+IKsqr(((((-1.0)*r10*x14669))+((r11*x14670))+(((-1.0)*cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r01*x14670))+((r00*x14669))+((cj4*r02))), ((((-1.0)*r10*x14669))+((r11*x14670))+(((-1.0)*cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x14671=IKsin(j0);
IkReal x14672=IKcos(j0);
IkReal x14673=((1.0)*cj5);
IkReal x14674=(cj3*r11);
IkReal x14675=(cj4*sj3);
IkReal x14676=((0.11)*sj5);
IkReal x14677=((1.0)*cj3);
IkReal x14678=(r02*sj4);
IkReal x14679=(cj1*cj2);
IkReal x14680=((1.0)*sj1);
IkReal x14681=(r11*sj5);
IkReal x14682=(r01*sj5);
IkReal x14683=(r10*sj5);
IkReal x14684=(r12*sj4);
IkReal x14685=(cj2*sj1);
IkReal x14686=((0.11)*cj5);
IkReal x14687=(r00*sj5);
IkReal x14688=((0.243)*sj1);
IkReal x14689=((0.214)*cj1);
IkReal x14690=((1.0)*sj3);
IkReal x14691=((1.0)*cj4);
IkReal x14692=(sj2*x14671);
IkReal x14693=(sj2*x14672);
IkReal x14694=(cj3*cj4*cj5);
evalcond[0]=((((-1.0)*r02*x14691))+(((-1.0)*r00*sj4*x14673))+x14671+((sj4*x14682)));
evalcond[1]=((((-1.0)*r10*sj4*x14673))+(((-1.0)*x14672))+((sj4*x14681))+(((-1.0)*r12*x14691)));
evalcond[2]=((((-1.0)*r01*x14686))+(((-1.0)*x14672*x14688))+(((-1.0)*px))+(((-1.0)*r00*x14676))+(((-0.214)*x14672*x14685))+(((0.123)*x14671))+(((-1.0)*x14689*x14693)));
evalcond[3]=((((-1.0)*r10*x14676))+(((-0.214)*x14671*x14685))+(((-1.0)*py))+(((-1.0)*x14671*x14688))+(((-0.123)*x14672))+(((-1.0)*r11*x14686))+(((-1.0)*x14689*x14692)));
evalcond[4]=((((-1.0)*x14677*x14687))+(((-1.0)*r00*x14673*x14675))+((x14675*x14682))+((cj1*x14693))+(((-1.0)*cj3*r01*x14673))+((x14672*x14685))+((sj3*x14678)));
evalcond[5]=((((-1.0)*x14677*x14683))+((sj3*x14684))+((x14675*x14681))+(((-1.0)*r10*x14673*x14675))+(((-1.0)*x14673*x14674))+((cj1*x14692))+((x14671*x14685)));
evalcond[6]=(((r00*x14694))+((x14672*x14679))+(((-1.0)*x14680*x14693))+(((-1.0)*r01*sj3*x14673))+(((-1.0)*cj4*x14677*x14682))+(((-1.0)*x14677*x14678))+(((-1.0)*x14687*x14690)));
evalcond[7]=((((-1.0)*x14683*x14690))+(((-1.0)*x14677*x14684))+(((-1.0)*sj5*x14674*x14691))+(((-1.0)*x14680*x14692))+((x14671*x14679))+((r10*x14694))+(((-1.0)*r11*sj3*x14673)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}
}
}
// [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1), (3, 0), (3, 1)] (original are [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1)])
static inline bool checkconsistency8(const IkReal* Breal)
{
    IkReal norm = 0.1;
    for(int i = 0; i < 7; ++i) {
        norm += IKabs(Breal[i]);
    }
    // HACK should be 1e-5*norm
    IkReal tol = 1e-2*norm; // have to increase the threshold since many computations are involved
    return IKabs(Breal[0]*Breal[1]-Breal[2]) < tol && IKabs(Breal[1]*Breal[1]-Breal[3]) < tol && IKabs(Breal[0]*Breal[3]-Breal[4]) < tol && IKabs(Breal[1]*Breal[3]-Breal[5]) < tol && IKabs(Breal[0]*Breal[5]-Breal[6]) < tol;
}
template<int D>
static inline bool matrixinverse(IkReal* A)
{
    int n = D;
    int info;
    IkReal IKFAST_ALIGNED16(work[D*D*(D-1)]);
    int ipiv[D];
    dgetrf_(&n, &n, A, &n, &ipiv[0], &info);
    if( info != 0 ) {
        return false;
    }
    int worksize=D*D*(D-1);
    dgetri_(&n, A, &n, &ipiv[0], &work[0], &worksize, &info);
    return info==0;
}

/// \brief Solve the det Ax^2+Bx+C = 0 problem using the Manocha and Canny method (1994)
///
/// matcoeffs is of length 54*3, for 3 matrices
static inline void solvedialyticpoly8qep(const IkReal* matcoeffs, IkReal* rawroots, int& numroots)
{
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    IkReal IKFAST_ALIGNED16(M[16*16]) = {0};
    IkReal IKFAST_ALIGNED16(A[8*8]);
    IkReal IKFAST_ALIGNED16(work[16*16*15]);
    int ipiv[8];
    int info, coeffindex;
    const int worksize=16*16*15;
    const int matrixdim = 8;
    const int matrixdim2 = 16;
    numroots = 0;
    // first setup M = [0 I; -C -B] and A
    coeffindex = 0;
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = matcoeffs[coeffindex++];
        }
        for(int k = 0; k < 2; ++k) {
            A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
        }
    }
    const IkReal lfpossibilities[4][4] = {{1,-1,1,1},{1,0,-2,1},{1,1,2,0},{1,-1,4,1}};
    int lfindex = -1;
    bool bsingular = true;
    do {
        dgetrf_(&matrixdim,&matrixdim,A,&matrixdim,&ipiv[0],&info);
        if( info == 0 ) {
            bsingular = false;
            for(int j = 0; j < matrixdim; ++j) {
                if( IKabs(A[j*matrixdim+j]) < 100*tol ) {
                    bsingular = true;
                    break;
                }
            }
            if( !bsingular ) {
                break;
            }
        }
        if( lfindex == 3 ) {
            break;
        }
        // transform by the linear functional
        lfindex++;
        const IkReal* lf = lfpossibilities[lfindex];
        // have to reinitialize A
        coeffindex = 0;
        for(int j = 0; j < 4; ++j) {
            for(int k = 0; k < 6; ++k) {
                IkReal a = matcoeffs[coeffindex+48], b = matcoeffs[coeffindex+24], c = matcoeffs[coeffindex];
                A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = lf[0]*lf[0]*a+lf[0]*lf[2]*b+lf[2]*lf[2]*c;
                M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -(lf[1]*lf[1]*a + lf[1]*lf[3]*b + lf[3]*lf[3]*c);
                M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -(2*lf[0]*lf[1]*a + (lf[0]*lf[3]+lf[1]*lf[2])*b + 2*lf[2]*lf[3]*c);
                coeffindex++;
            }
            for(int k = 0; k < 2; ++k) {
                A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
            }
        }
    } while(lfindex<4);

    if( bsingular ) {
        return;
    }
    dgetrs_("No transpose", &matrixdim, &matrixdim2, A, &matrixdim, &ipiv[0], &M[matrixdim], &matrixdim2, &info);
    if( info != 0 ) {
        return;
    }

    // set identity in upper corner
    for(int j = 0; j < matrixdim; ++j) {
        M[matrixdim*2*matrixdim+j+matrixdim*2*j] = 1;
    }
    IkReal IKFAST_ALIGNED16(wr[16]);
    IkReal IKFAST_ALIGNED16(wi[16]);
    IkReal IKFAST_ALIGNED16(vr[16*16]);
    int one=1;
    dgeev_("N", "V", &matrixdim2, M, &matrixdim2, wr, wi,NULL, &one, vr, &matrixdim2, work, &worksize, &info);
    if( info != 0 ) {
        return;
    }
    IkReal Breal[matrixdim-1];
    for(int i = 0; i < matrixdim2; ++i) {
        // HACK should be tol*100
        if( IKabs(wi[i]) < 5e-5 ) {
            IkReal* ev = vr+matrixdim2*i;
            if( IKabs(wr[i]) > 1 ) {
                ev += matrixdim;
            }
            // consistency has to be checked!!
            if( IKabs(ev[0]) < tol ) {
                continue;
            }
            IkReal iconst = 1/ev[0];
            for(int j = 1; j < matrixdim; ++j) {
                Breal[j-1] = ev[j]*iconst;
            }
            if( checkconsistency8(Breal) ) {
                if( lfindex >= 0 ) {
                    const IkReal* lf = lfpossibilities[lfindex];
                    rawroots[numroots++] = (wr[i]*lf[0]+lf[1])/(wr[i]*lf[2]+lf[3]);
                }
                else {
                    rawroots[numroots++] = wr[i];
                }
                bool bsmall0=IKabs(ev[0]) > IKabs(ev[2]);
                bool bsmall1=IKabs(ev[0]) > IKabs(ev[1]);
                if( bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[2]/ev[0];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[3]/ev[1];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( !bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[6]/ev[4];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
                else if( !bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[7]/ev[5];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
            }
        }
    }
}};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "<robot:GenericRobot - warm_3kg_description (e3a7bda73a8b2adba35ece9df7af27fa)>"; }

IKFAST_API const char* GetIkFastVersion() { return "0x1000004b"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
